
audio_fft.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b9f4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0001ddd4  0800bb98  0800bb98  0000cb98  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802996c  0802996c  0002b1d8  2**0
                  CONTENTS
  4 .ARM          00000008  0802996c  0802996c  0002a96c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08029974  08029974  0002b1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08029974  08029974  0002a974  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08029978  08029978  0002a978  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0802997c  0002b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001473c  200001d8  08029b54  0002b1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20014914  08029b54  0002b914  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002b1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021b87  00000000  00000000  0002b208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004968  00000000  00000000  0004cd8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001278  00000000  00000000  000516f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cdb  00000000  00000000  00052970  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000417e  00000000  00000000  0005364b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018e9c  00000000  00000000  000577c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00095fe6  00000000  00000000  00070665  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000bc  00000000  00000000  0010664b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005cd4  00000000  00000000  00106708  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  0010c3dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    00004a17  00000000  00000000  0010c43f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 000001e0  00000000  00000000  00110e56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d8 	.word	0x200001d8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800bb7c 	.word	0x0800bb7c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001dc 	.word	0x200001dc
 80001dc:	0800bb7c 	.word	0x0800bb7c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c6c:	f000 b96a 	b.w	8000f44 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	460c      	mov	r4, r1
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d14e      	bne.n	8000d32 <__udivmoddi4+0xaa>
 8000c94:	4694      	mov	ip, r2
 8000c96:	458c      	cmp	ip, r1
 8000c98:	4686      	mov	lr, r0
 8000c9a:	fab2 f282 	clz	r2, r2
 8000c9e:	d962      	bls.n	8000d66 <__udivmoddi4+0xde>
 8000ca0:	b14a      	cbz	r2, 8000cb6 <__udivmoddi4+0x2e>
 8000ca2:	f1c2 0320 	rsb	r3, r2, #32
 8000ca6:	4091      	lsls	r1, r2
 8000ca8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cac:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb0:	4319      	orrs	r1, r3
 8000cb2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cb6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cba:	fa1f f68c 	uxth.w	r6, ip
 8000cbe:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cc2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cc6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cce:	fb04 f106 	mul.w	r1, r4, r6
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	d90a      	bls.n	8000cec <__udivmoddi4+0x64>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000cde:	f080 8112 	bcs.w	8000f06 <__udivmoddi4+0x27e>
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	f240 810f 	bls.w	8000f06 <__udivmoddi4+0x27e>
 8000ce8:	3c02      	subs	r4, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1a59      	subs	r1, r3, r1
 8000cee:	fa1f f38e 	uxth.w	r3, lr
 8000cf2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cf6:	fb07 1110 	mls	r1, r7, r0, r1
 8000cfa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfe:	fb00 f606 	mul.w	r6, r0, r6
 8000d02:	429e      	cmp	r6, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x94>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000d0e:	f080 80fc 	bcs.w	8000f0a <__udivmoddi4+0x282>
 8000d12:	429e      	cmp	r6, r3
 8000d14:	f240 80f9 	bls.w	8000f0a <__udivmoddi4+0x282>
 8000d18:	4463      	add	r3, ip
 8000d1a:	3802      	subs	r0, #2
 8000d1c:	1b9b      	subs	r3, r3, r6
 8000d1e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d22:	2100      	movs	r1, #0
 8000d24:	b11d      	cbz	r5, 8000d2e <__udivmoddi4+0xa6>
 8000d26:	40d3      	lsrs	r3, r2
 8000d28:	2200      	movs	r2, #0
 8000d2a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d905      	bls.n	8000d42 <__udivmoddi4+0xba>
 8000d36:	b10d      	cbz	r5, 8000d3c <__udivmoddi4+0xb4>
 8000d38:	e9c5 0100 	strd	r0, r1, [r5]
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	4608      	mov	r0, r1
 8000d40:	e7f5      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000d42:	fab3 f183 	clz	r1, r3
 8000d46:	2900      	cmp	r1, #0
 8000d48:	d146      	bne.n	8000dd8 <__udivmoddi4+0x150>
 8000d4a:	42a3      	cmp	r3, r4
 8000d4c:	d302      	bcc.n	8000d54 <__udivmoddi4+0xcc>
 8000d4e:	4290      	cmp	r0, r2
 8000d50:	f0c0 80f0 	bcc.w	8000f34 <__udivmoddi4+0x2ac>
 8000d54:	1a86      	subs	r6, r0, r2
 8000d56:	eb64 0303 	sbc.w	r3, r4, r3
 8000d5a:	2001      	movs	r0, #1
 8000d5c:	2d00      	cmp	r5, #0
 8000d5e:	d0e6      	beq.n	8000d2e <__udivmoddi4+0xa6>
 8000d60:	e9c5 6300 	strd	r6, r3, [r5]
 8000d64:	e7e3      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000d66:	2a00      	cmp	r2, #0
 8000d68:	f040 8090 	bne.w	8000e8c <__udivmoddi4+0x204>
 8000d6c:	eba1 040c 	sub.w	r4, r1, ip
 8000d70:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d74:	fa1f f78c 	uxth.w	r7, ip
 8000d78:	2101      	movs	r1, #1
 8000d7a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d7e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d82:	fb08 4416 	mls	r4, r8, r6, r4
 8000d86:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d8a:	fb07 f006 	mul.w	r0, r7, r6
 8000d8e:	4298      	cmp	r0, r3
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x11c>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x11a>
 8000d9c:	4298      	cmp	r0, r3
 8000d9e:	f200 80cd 	bhi.w	8000f3c <__udivmoddi4+0x2b4>
 8000da2:	4626      	mov	r6, r4
 8000da4:	1a1c      	subs	r4, r3, r0
 8000da6:	fa1f f38e 	uxth.w	r3, lr
 8000daa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dae:	fb08 4410 	mls	r4, r8, r0, r4
 8000db2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000db6:	fb00 f707 	mul.w	r7, r0, r7
 8000dba:	429f      	cmp	r7, r3
 8000dbc:	d908      	bls.n	8000dd0 <__udivmoddi4+0x148>
 8000dbe:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc2:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000dc6:	d202      	bcs.n	8000dce <__udivmoddi4+0x146>
 8000dc8:	429f      	cmp	r7, r3
 8000dca:	f200 80b0 	bhi.w	8000f2e <__udivmoddi4+0x2a6>
 8000dce:	4620      	mov	r0, r4
 8000dd0:	1bdb      	subs	r3, r3, r7
 8000dd2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dd6:	e7a5      	b.n	8000d24 <__udivmoddi4+0x9c>
 8000dd8:	f1c1 0620 	rsb	r6, r1, #32
 8000ddc:	408b      	lsls	r3, r1
 8000dde:	fa22 f706 	lsr.w	r7, r2, r6
 8000de2:	431f      	orrs	r7, r3
 8000de4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000de8:	fa04 f301 	lsl.w	r3, r4, r1
 8000dec:	ea43 030c 	orr.w	r3, r3, ip
 8000df0:	40f4      	lsrs	r4, r6
 8000df2:	fa00 f801 	lsl.w	r8, r0, r1
 8000df6:	0c38      	lsrs	r0, r7, #16
 8000df8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dfc:	fbb4 fef0 	udiv	lr, r4, r0
 8000e00:	fa1f fc87 	uxth.w	ip, r7
 8000e04:	fb00 441e 	mls	r4, r0, lr, r4
 8000e08:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e0c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e10:	45a1      	cmp	r9, r4
 8000e12:	fa02 f201 	lsl.w	r2, r2, r1
 8000e16:	d90a      	bls.n	8000e2e <__udivmoddi4+0x1a6>
 8000e18:	193c      	adds	r4, r7, r4
 8000e1a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000e1e:	f080 8084 	bcs.w	8000f2a <__udivmoddi4+0x2a2>
 8000e22:	45a1      	cmp	r9, r4
 8000e24:	f240 8081 	bls.w	8000f2a <__udivmoddi4+0x2a2>
 8000e28:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e2c:	443c      	add	r4, r7
 8000e2e:	eba4 0409 	sub.w	r4, r4, r9
 8000e32:	fa1f f983 	uxth.w	r9, r3
 8000e36:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e3a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e3e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e42:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e46:	45a4      	cmp	ip, r4
 8000e48:	d907      	bls.n	8000e5a <__udivmoddi4+0x1d2>
 8000e4a:	193c      	adds	r4, r7, r4
 8000e4c:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000e50:	d267      	bcs.n	8000f22 <__udivmoddi4+0x29a>
 8000e52:	45a4      	cmp	ip, r4
 8000e54:	d965      	bls.n	8000f22 <__udivmoddi4+0x29a>
 8000e56:	3b02      	subs	r3, #2
 8000e58:	443c      	add	r4, r7
 8000e5a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e5e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e62:	eba4 040c 	sub.w	r4, r4, ip
 8000e66:	429c      	cmp	r4, r3
 8000e68:	46ce      	mov	lr, r9
 8000e6a:	469c      	mov	ip, r3
 8000e6c:	d351      	bcc.n	8000f12 <__udivmoddi4+0x28a>
 8000e6e:	d04e      	beq.n	8000f0e <__udivmoddi4+0x286>
 8000e70:	b155      	cbz	r5, 8000e88 <__udivmoddi4+0x200>
 8000e72:	ebb8 030e 	subs.w	r3, r8, lr
 8000e76:	eb64 040c 	sbc.w	r4, r4, ip
 8000e7a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e7e:	40cb      	lsrs	r3, r1
 8000e80:	431e      	orrs	r6, r3
 8000e82:	40cc      	lsrs	r4, r1
 8000e84:	e9c5 6400 	strd	r6, r4, [r5]
 8000e88:	2100      	movs	r1, #0
 8000e8a:	e750      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000e8c:	f1c2 0320 	rsb	r3, r2, #32
 8000e90:	fa20 f103 	lsr.w	r1, r0, r3
 8000e94:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e98:	fa24 f303 	lsr.w	r3, r4, r3
 8000e9c:	4094      	lsls	r4, r2
 8000e9e:	430c      	orrs	r4, r1
 8000ea0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ea4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ea8:	fa1f f78c 	uxth.w	r7, ip
 8000eac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000eb0:	fb08 3110 	mls	r1, r8, r0, r3
 8000eb4:	0c23      	lsrs	r3, r4, #16
 8000eb6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eba:	fb00 f107 	mul.w	r1, r0, r7
 8000ebe:	4299      	cmp	r1, r3
 8000ec0:	d908      	bls.n	8000ed4 <__udivmoddi4+0x24c>
 8000ec2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ec6:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000eca:	d22c      	bcs.n	8000f26 <__udivmoddi4+0x29e>
 8000ecc:	4299      	cmp	r1, r3
 8000ece:	d92a      	bls.n	8000f26 <__udivmoddi4+0x29e>
 8000ed0:	3802      	subs	r0, #2
 8000ed2:	4463      	add	r3, ip
 8000ed4:	1a5b      	subs	r3, r3, r1
 8000ed6:	b2a4      	uxth	r4, r4
 8000ed8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000edc:	fb08 3311 	mls	r3, r8, r1, r3
 8000ee0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ee4:	fb01 f307 	mul.w	r3, r1, r7
 8000ee8:	42a3      	cmp	r3, r4
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x276>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000ef4:	d213      	bcs.n	8000f1e <__udivmoddi4+0x296>
 8000ef6:	42a3      	cmp	r3, r4
 8000ef8:	d911      	bls.n	8000f1e <__udivmoddi4+0x296>
 8000efa:	3902      	subs	r1, #2
 8000efc:	4464      	add	r4, ip
 8000efe:	1ae4      	subs	r4, r4, r3
 8000f00:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f04:	e739      	b.n	8000d7a <__udivmoddi4+0xf2>
 8000f06:	4604      	mov	r4, r0
 8000f08:	e6f0      	b.n	8000cec <__udivmoddi4+0x64>
 8000f0a:	4608      	mov	r0, r1
 8000f0c:	e706      	b.n	8000d1c <__udivmoddi4+0x94>
 8000f0e:	45c8      	cmp	r8, r9
 8000f10:	d2ae      	bcs.n	8000e70 <__udivmoddi4+0x1e8>
 8000f12:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f16:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f1a:	3801      	subs	r0, #1
 8000f1c:	e7a8      	b.n	8000e70 <__udivmoddi4+0x1e8>
 8000f1e:	4631      	mov	r1, r6
 8000f20:	e7ed      	b.n	8000efe <__udivmoddi4+0x276>
 8000f22:	4603      	mov	r3, r0
 8000f24:	e799      	b.n	8000e5a <__udivmoddi4+0x1d2>
 8000f26:	4630      	mov	r0, r6
 8000f28:	e7d4      	b.n	8000ed4 <__udivmoddi4+0x24c>
 8000f2a:	46d6      	mov	lr, sl
 8000f2c:	e77f      	b.n	8000e2e <__udivmoddi4+0x1a6>
 8000f2e:	4463      	add	r3, ip
 8000f30:	3802      	subs	r0, #2
 8000f32:	e74d      	b.n	8000dd0 <__udivmoddi4+0x148>
 8000f34:	4606      	mov	r6, r0
 8000f36:	4623      	mov	r3, r4
 8000f38:	4608      	mov	r0, r1
 8000f3a:	e70f      	b.n	8000d5c <__udivmoddi4+0xd4>
 8000f3c:	3e02      	subs	r6, #2
 8000f3e:	4463      	add	r3, ip
 8000f40:	e730      	b.n	8000da4 <__udivmoddi4+0x11c>
 8000f42:	bf00      	nop

08000f44 <__aeabi_idiv0>:
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop

08000f48 <delay_and_sum_beamforming>:

void beamforming_init(){

}

void delay_and_sum_beamforming(MicFFT* mics, VADFrameInfo* infos, int* out_angle, float* out_energy){
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	ed2d 8b02 	vpush	{d8}
 8000f4e:	b09c      	sub	sp, #112	@ 0x70
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	60f8      	str	r0, [r7, #12]
 8000f54:	60b9      	str	r1, [r7, #8]
 8000f56:	607a      	str	r2, [r7, #4]
 8000f58:	603b      	str	r3, [r7, #0]
    const int num_angles = 360;
 8000f5a:	f44f 73b4 	mov.w	r3, #360	@ 0x168
 8000f5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
    float best_energy = 0.0f;
 8000f60:	f04f 0300 	mov.w	r3, #0
 8000f64:	66fb      	str	r3, [r7, #108]	@ 0x6c
    int best_angle = 0;
 8000f66:	2300      	movs	r3, #0
 8000f68:	66bb      	str	r3, [r7, #104]	@ 0x68

    // Focus on frequencies between 100–800 Hz
//    const int bin_low = (int)(500.0f / ((float)SAMPLE_RATE / FFT_LENGTH));
//    const int bin_high = (int)(2000.0f / ((float)SAMPLE_RATE / FFT_LENGTH)); //previous

    const int bin_low = (int)(200.0f / ((float)SAMPLE_RATE / FFT_LENGTH));
 8000f6a:	2306      	movs	r3, #6
 8000f6c:	64bb      	str	r3, [r7, #72]	@ 0x48
       const int bin_high = (int)(3000.0f / ((float)SAMPLE_RATE / FFT_LENGTH));
 8000f6e:	2360      	movs	r3, #96	@ 0x60
 8000f70:	647b      	str	r3, [r7, #68]	@ 0x44

    for (int angle = 0; angle < num_angles; angle++) {
 8000f72:	2300      	movs	r3, #0
 8000f74:	667b      	str	r3, [r7, #100]	@ 0x64
 8000f76:	e127      	b.n	80011c8 <delay_and_sum_beamforming+0x280>
        float theta = angle * M_PI / 180.0f;
 8000f78:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8000f7a:	f7ff fadb 	bl	8000534 <__aeabi_i2d>
 8000f7e:	a3a2      	add	r3, pc, #648	@ (adr r3, 8001208 <delay_and_sum_beamforming+0x2c0>)
 8000f80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f84:	f7ff fb40 	bl	8000608 <__aeabi_dmul>
 8000f88:	4602      	mov	r2, r0
 8000f8a:	460b      	mov	r3, r1
 8000f8c:	4610      	mov	r0, r2
 8000f8e:	4619      	mov	r1, r3
 8000f90:	f04f 0200 	mov.w	r2, #0
 8000f94:	4b98      	ldr	r3, [pc, #608]	@ (80011f8 <delay_and_sum_beamforming+0x2b0>)
 8000f96:	f7ff fc61 	bl	800085c <__aeabi_ddiv>
 8000f9a:	4602      	mov	r2, r0
 8000f9c:	460b      	mov	r3, r1
 8000f9e:	4610      	mov	r0, r2
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	f7ff fe09 	bl	8000bb8 <__aeabi_d2f>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	643b      	str	r3, [r7, #64]	@ 0x40
        float dir[2] = {-cosf(theta), sinf(theta)};
 8000faa:	ed97 0a10 	vldr	s0, [r7, #64]	@ 0x40
 8000fae:	f007 fa01 	bl	80083b4 <cosf>
 8000fb2:	eef0 7a40 	vmov.f32	s15, s0
 8000fb6:	eef1 7a67 	vneg.f32	s15, s15
 8000fba:	edc7 7a04 	vstr	s15, [r7, #16]
 8000fbe:	ed97 0a10 	vldr	s0, [r7, #64]	@ 0x40
 8000fc2:	f007 fa3b 	bl	800843c <sinf>
 8000fc6:	eef0 7a40 	vmov.f32	s15, s0
 8000fca:	edc7 7a05 	vstr	s15, [r7, #20]
//        float dir[2] = {cosf(theta), sinf(theta)};
        float total_energy = 0.0f;
 8000fce:	f04f 0300 	mov.w	r3, #0
 8000fd2:	663b      	str	r3, [r7, #96]	@ 0x60

        for (int bin = bin_low; bin <= bin_high; bin++) {
 8000fd4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000fd6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8000fd8:	e0e1      	b.n	800119e <delay_and_sum_beamforming+0x256>
            float freq = ((float)SAMPLE_RATE / FFT_LENGTH) * bin;
 8000fda:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000fdc:	ee07 3a90 	vmov	s15, r3
 8000fe0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fe4:	ed9f 7a85 	vldr	s14, [pc, #532]	@ 80011fc <delay_and_sum_beamforming+0x2b4>
 8000fe8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fec:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
            float omega = 2.0f * M_PI * freq;
 8000ff0:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8000ff2:	f7ff fab1 	bl	8000558 <__aeabi_f2d>
 8000ff6:	a37e      	add	r3, pc, #504	@ (adr r3, 80011f0 <delay_and_sum_beamforming+0x2a8>)
 8000ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ffc:	f7ff fb04 	bl	8000608 <__aeabi_dmul>
 8001000:	4602      	mov	r2, r0
 8001002:	460b      	mov	r3, r1
 8001004:	4610      	mov	r0, r2
 8001006:	4619      	mov	r1, r3
 8001008:	f7ff fdd6 	bl	8000bb8 <__aeabi_d2f>
 800100c:	4603      	mov	r3, r0
 800100e:	63bb      	str	r3, [r7, #56]	@ 0x38

            float real_sum = 0.0f;
 8001010:	f04f 0300 	mov.w	r3, #0
 8001014:	65bb      	str	r3, [r7, #88]	@ 0x58
            float imag_sum = 0.0f;
 8001016:	f04f 0300 	mov.w	r3, #0
 800101a:	657b      	str	r3, [r7, #84]	@ 0x54

            for (int mic = 0; mic < NUM_MICS; mic++) {
 800101c:	2300      	movs	r3, #0
 800101e:	653b      	str	r3, [r7, #80]	@ 0x50
 8001020:	e0a6      	b.n	8001170 <delay_and_sum_beamforming+0x228>
                if (!infos[mic].is_voice) continue;
 8001022:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001024:	011b      	lsls	r3, r3, #4
 8001026:	68ba      	ldr	r2, [r7, #8]
 8001028:	4413      	add	r3, r2
 800102a:	781b      	ldrb	r3, [r3, #0]
 800102c:	2b00      	cmp	r3, #0
 800102e:	f000 809b 	beq.w	8001168 <delay_and_sum_beamforming+0x220>

                float dx = mic_positions[mic][0] - mic_positions[0][0];
 8001032:	4a73      	ldr	r2, [pc, #460]	@ (8001200 <delay_and_sum_beamforming+0x2b8>)
 8001034:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001036:	00db      	lsls	r3, r3, #3
 8001038:	4413      	add	r3, r2
 800103a:	ed93 7a00 	vldr	s14, [r3]
 800103e:	4b70      	ldr	r3, [pc, #448]	@ (8001200 <delay_and_sum_beamforming+0x2b8>)
 8001040:	edd3 7a00 	vldr	s15, [r3]
 8001044:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001048:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
                float dy = mic_positions[mic][1] - mic_positions[0][1];
 800104c:	4a6c      	ldr	r2, [pc, #432]	@ (8001200 <delay_and_sum_beamforming+0x2b8>)
 800104e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001050:	00db      	lsls	r3, r3, #3
 8001052:	4413      	add	r3, r2
 8001054:	3304      	adds	r3, #4
 8001056:	ed93 7a00 	vldr	s14, [r3]
 800105a:	4b69      	ldr	r3, [pc, #420]	@ (8001200 <delay_and_sum_beamforming+0x2b8>)
 800105c:	edd3 7a01 	vldr	s15, [r3, #4]
 8001060:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001064:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
//                float delay = -(dx * dir[0] + dy * dir[1]) / SPEED_OF_SOUND;
                float delay = (dx * dir[0] + dy * dir[1]) / SPEED_OF_SOUND;
 8001068:	ed97 7a04 	vldr	s14, [r7, #16]
 800106c:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001070:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001074:	edd7 6a05 	vldr	s13, [r7, #20]
 8001078:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800107c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001080:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001084:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8001204 <delay_and_sum_beamforming+0x2bc>
 8001088:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800108c:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
//                                         angle, mic, dx, dy, delay);
//                            }


//                float phase_shift = -omega * delay;
                float phase_shift = -omega * delay;
 8001090:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8001094:	eef1 7a67 	vneg.f32	s15, s15
 8001098:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800109c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010a0:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28

                float real = mics[mic].fft_output[2 * bin];
 80010a4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80010a6:	f643 0204 	movw	r2, #14340	@ 0x3804
 80010aa:	fb02 f303 	mul.w	r3, r2, r3
 80010ae:	68fa      	ldr	r2, [r7, #12]
 80010b0:	441a      	add	r2, r3
 80010b2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80010b4:	005b      	lsls	r3, r3, #1
 80010b6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80010ba:	009b      	lsls	r3, r3, #2
 80010bc:	4413      	add	r3, r2
 80010be:	3304      	adds	r3, #4
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	627b      	str	r3, [r7, #36]	@ 0x24
                float imag = mics[mic].fft_output[2 * bin + 1];
 80010c4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80010c6:	f643 0204 	movw	r2, #14340	@ 0x3804
 80010ca:	fb02 f303 	mul.w	r3, r2, r3
 80010ce:	68fa      	ldr	r2, [r7, #12]
 80010d0:	441a      	add	r2, r3
 80010d2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80010d4:	005b      	lsls	r3, r3, #1
 80010d6:	3301      	adds	r3, #1
 80010d8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80010dc:	009b      	lsls	r3, r3, #2
 80010de:	4413      	add	r3, r2
 80010e0:	3304      	adds	r3, #4
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	623b      	str	r3, [r7, #32]

                float shifted_real = real * cosf(phase_shift) - imag * sinf(phase_shift);
 80010e6:	ed97 0a0a 	vldr	s0, [r7, #40]	@ 0x28
 80010ea:	f007 f963 	bl	80083b4 <cosf>
 80010ee:	eeb0 7a40 	vmov.f32	s14, s0
 80010f2:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80010f6:	ee27 8a27 	vmul.f32	s16, s14, s15
 80010fa:	ed97 0a0a 	vldr	s0, [r7, #40]	@ 0x28
 80010fe:	f007 f99d 	bl	800843c <sinf>
 8001102:	eeb0 7a40 	vmov.f32	s14, s0
 8001106:	edd7 7a08 	vldr	s15, [r7, #32]
 800110a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800110e:	ee78 7a67 	vsub.f32	s15, s16, s15
 8001112:	edc7 7a07 	vstr	s15, [r7, #28]
                float shifted_imag = real * sinf(phase_shift) + imag * cosf(phase_shift);
 8001116:	ed97 0a0a 	vldr	s0, [r7, #40]	@ 0x28
 800111a:	f007 f98f 	bl	800843c <sinf>
 800111e:	eeb0 7a40 	vmov.f32	s14, s0
 8001122:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001126:	ee27 8a27 	vmul.f32	s16, s14, s15
 800112a:	ed97 0a0a 	vldr	s0, [r7, #40]	@ 0x28
 800112e:	f007 f941 	bl	80083b4 <cosf>
 8001132:	eeb0 7a40 	vmov.f32	s14, s0
 8001136:	edd7 7a08 	vldr	s15, [r7, #32]
 800113a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800113e:	ee78 7a27 	vadd.f32	s15, s16, s15
 8001142:	edc7 7a06 	vstr	s15, [r7, #24]

                real_sum += shifted_real;
 8001146:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 800114a:	edd7 7a07 	vldr	s15, [r7, #28]
 800114e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001152:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
                imag_sum += shifted_imag;
 8001156:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 800115a:	edd7 7a06 	vldr	s15, [r7, #24]
 800115e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001162:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
 8001166:	e000      	b.n	800116a <delay_and_sum_beamforming+0x222>
                if (!infos[mic].is_voice) continue;
 8001168:	bf00      	nop
            for (int mic = 0; mic < NUM_MICS; mic++) {
 800116a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800116c:	3301      	adds	r3, #1
 800116e:	653b      	str	r3, [r7, #80]	@ 0x50
 8001170:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001172:	2b03      	cmp	r3, #3
 8001174:	f77f af55 	ble.w	8001022 <delay_and_sum_beamforming+0xda>
            }

            total_energy += real_sum * real_sum + imag_sum * imag_sum;
 8001178:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 800117c:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001180:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8001184:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001188:	ee77 7a27 	vadd.f32	s15, s14, s15
 800118c:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 8001190:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001194:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
        for (int bin = bin_low; bin <= bin_high; bin++) {
 8001198:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800119a:	3301      	adds	r3, #1
 800119c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800119e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80011a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80011a2:	429a      	cmp	r2, r3
 80011a4:	f77f af19 	ble.w	8000fda <delay_and_sum_beamforming+0x92>
        }

        if (total_energy > best_energy) {
 80011a8:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 80011ac:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 80011b0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80011b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011b8:	dd03      	ble.n	80011c2 <delay_and_sum_beamforming+0x27a>
            best_energy = total_energy;
 80011ba:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80011bc:	66fb      	str	r3, [r7, #108]	@ 0x6c
            best_angle = angle;
 80011be:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80011c0:	66bb      	str	r3, [r7, #104]	@ 0x68
    for (int angle = 0; angle < num_angles; angle++) {
 80011c2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80011c4:	3301      	adds	r3, #1
 80011c6:	667b      	str	r3, [r7, #100]	@ 0x64
 80011c8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80011ca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80011cc:	429a      	cmp	r2, r3
 80011ce:	f6ff aed3 	blt.w	8000f78 <delay_and_sum_beamforming+0x30>
        }
    }

    *out_angle = best_angle;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80011d6:	601a      	str	r2, [r3, #0]
    *out_energy = best_energy;
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80011dc:	601a      	str	r2, [r3, #0]
}
 80011de:	bf00      	nop
 80011e0:	3770      	adds	r7, #112	@ 0x70
 80011e2:	46bd      	mov	sp, r7
 80011e4:	ecbd 8b02 	vpop	{d8}
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	f3af 8000 	nop.w
 80011f0:	54442d18 	.word	0x54442d18
 80011f4:	401921fb 	.word	0x401921fb
 80011f8:	40668000 	.word	0x40668000
 80011fc:	41fa0000 	.word	0x41fa0000
 8001200:	0800bc80 	.word	0x0800bc80
 8001204:	43ab8000 	.word	0x43ab8000
 8001208:	54442d18 	.word	0x54442d18
 800120c:	400921fb 	.word	0x400921fb

08001210 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001210:	b480      	push	{r7}
 8001212:	b083      	sub	sp, #12
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001218:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800121c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8001220:	f003 0301 	and.w	r3, r3, #1
 8001224:	2b00      	cmp	r3, #0
 8001226:	d013      	beq.n	8001250 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001228:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800122c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8001230:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001234:	2b00      	cmp	r3, #0
 8001236:	d00b      	beq.n	8001250 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001238:	e000      	b.n	800123c <ITM_SendChar+0x2c>
    {
      __NOP();
 800123a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800123c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d0f9      	beq.n	800123a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001246:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800124a:	687a      	ldr	r2, [r7, #4]
 800124c:	b2d2      	uxtb	r2, r2
 800124e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001250:	687b      	ldr	r3, [r7, #4]
}
 8001252:	4618      	mov	r0, r3
 8001254:	370c      	adds	r7, #12
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr
	...

08001260 <calibrate_noise_all_mics>:
    }

    myprintf("[%s] Min: %d, Max: %d, Zeros: %lu/%lu (%.2f%%)\n",
        label, min_val, max_val, zero_count, sample_count, (zero_count * 100.0f) / sample_count);
}
void calibrate_noise_all_mics() {
 8001260:	b580      	push	{r7, lr}
 8001262:	f5ad 5d80 	sub.w	sp, sp, #4096	@ 0x1000
 8001266:	b084      	sub	sp, #16
 8001268:	af00      	add	r7, sp, #0
    static int first_call = 1;
    if (first_call) {
 800126a:	4b41      	ldr	r3, [pc, #260]	@ (8001370 <calibrate_noise_all_mics+0x110>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d004      	beq.n	800127c <calibrate_noise_all_mics+0x1c>
        vad_reset_noise_estimation();
 8001272:	f001 fd0d 	bl	8002c90 <vad_reset_noise_estimation>
        first_call = 0;
 8001276:	4b3e      	ldr	r3, [pc, #248]	@ (8001370 <calibrate_noise_all_mics+0x110>)
 8001278:	2200      	movs	r2, #0
 800127a:	601a      	str	r2, [r3, #0]
    }

    for (int mic = 0; mic < NUM_MICS; mic++) {
 800127c:	2300      	movs	r3, #0
 800127e:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 8001282:	f102 020c 	add.w	r2, r2, #12
 8001286:	6013      	str	r3, [r2, #0]
 8001288:	e064      	b.n	8001354 <calibrate_noise_all_mics+0xf4>
        float32_t frame[FFT_LENGTH];
        int16_t* samples = mic_fft[mic].raw_buffer;
 800128a:	4a3a      	ldr	r2, [pc, #232]	@ (8001374 <calibrate_noise_all_mics+0x114>)
 800128c:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8001290:	f103 030c 	add.w	r3, r3, #12
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f643 0104 	movw	r1, #14340	@ 0x3804
 800129a:	fb01 f303 	mul.w	r3, r1, r3
 800129e:	4413      	add	r3, r2
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 80012a6:	f102 0204 	add.w	r2, r2, #4
 80012aa:	6013      	str	r3, [r2, #0]

        for (int i = 0; i < FFT_LENGTH; i++) {
 80012ac:	2300      	movs	r3, #0
 80012ae:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 80012b2:	f102 0208 	add.w	r2, r2, #8
 80012b6:	6013      	str	r3, [r2, #0]
 80012b8:	e029      	b.n	800130e <calibrate_noise_all_mics+0xae>
            frame[i] = (float32_t)samples[i * 2];
 80012ba:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 80012be:	f103 0308 	add.w	r3, r3, #8
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	009b      	lsls	r3, r3, #2
 80012c6:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 80012ca:	f102 0204 	add.w	r2, r2, #4
 80012ce:	6812      	ldr	r2, [r2, #0]
 80012d0:	4413      	add	r3, r2
 80012d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012d6:	ee07 3a90 	vmov	s15, r3
 80012da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012de:	f107 0310 	add.w	r3, r7, #16
 80012e2:	461a      	mov	r2, r3
 80012e4:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 80012e8:	f103 0308 	add.w	r3, r3, #8
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	009b      	lsls	r3, r3, #2
 80012f0:	4413      	add	r3, r2
 80012f2:	3b0c      	subs	r3, #12
 80012f4:	edc3 7a00 	vstr	s15, [r3]
        for (int i = 0; i < FFT_LENGTH; i++) {
 80012f8:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 80012fc:	f103 0308 	add.w	r3, r3, #8
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	3301      	adds	r3, #1
 8001304:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 8001308:	f102 0208 	add.w	r2, r2, #8
 800130c:	6013      	str	r3, [r2, #0]
 800130e:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8001312:	f103 0308 	add.w	r3, r3, #8
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800131c:	dbcd      	blt.n	80012ba <calibrate_noise_all_mics+0x5a>
        }

        prepare_frame(frame, frame);
 800131e:	f107 0210 	add.w	r2, r7, #16
 8001322:	3a0c      	subs	r2, #12
 8001324:	f107 0310 	add.w	r3, r7, #16
 8001328:	3b0c      	subs	r3, #12
 800132a:	4611      	mov	r1, r2
 800132c:	4618      	mov	r0, r3
 800132e:	f001 f80d 	bl	800234c <prepare_frame>
        vad_update_noise_estimation(frame);
 8001332:	f107 0310 	add.w	r3, r7, #16
 8001336:	3b0c      	subs	r3, #12
 8001338:	4618      	mov	r0, r3
 800133a:	f001 fce1 	bl	8002d00 <vad_update_noise_estimation>
    for (int mic = 0; mic < NUM_MICS; mic++) {
 800133e:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8001342:	f103 030c 	add.w	r3, r3, #12
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	3301      	adds	r3, #1
 800134a:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 800134e:	f102 020c 	add.w	r2, r2, #12
 8001352:	6013      	str	r3, [r2, #0]
 8001354:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8001358:	f103 030c 	add.w	r3, r3, #12
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	2b03      	cmp	r3, #3
 8001360:	dd93      	ble.n	800128a <calibrate_noise_all_mics+0x2a>
    }
}
 8001362:	bf00      	nop
 8001364:	bf00      	nop
 8001366:	f507 5780 	add.w	r7, r7, #4096	@ 0x1000
 800136a:	3710      	adds	r7, #16
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}
 8001370:	20000000 	.word	0x20000000
 8001374:	20004584 	.word	0x20004584

08001378 <delay>:
void delay (uint16_t us){
 8001378:	b480      	push	{r7}
 800137a:	b083      	sub	sp, #12
 800137c:	af00      	add	r7, sp, #0
 800137e:	4603      	mov	r3, r0
 8001380:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1,0);
 8001382:	4b09      	ldr	r3, [pc, #36]	@ (80013a8 <delay+0x30>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	2200      	movs	r2, #0
 8001388:	625a      	str	r2, [r3, #36]	@ 0x24
	while (__HAL_TIM_GET_COUNTER(&htim1) < us);
 800138a:	bf00      	nop
 800138c:	4b06      	ldr	r3, [pc, #24]	@ (80013a8 <delay+0x30>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001392:	88fb      	ldrh	r3, [r7, #6]
 8001394:	429a      	cmp	r2, r3
 8001396:	d3f9      	bcc.n	800138c <delay+0x14>
}
 8001398:	bf00      	nop
 800139a:	bf00      	nop
 800139c:	370c      	adds	r7, #12
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr
 80013a6:	bf00      	nop
 80013a8:	20004494 	.word	0x20004494

080013ac <stepper_set_rpm>:

#define stepperrev 4096
/*use like delay */
void stepper_set_rpm(int rpm){ //set rpm -> max 13, min 1,,, went to 14 rev/min
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b082      	sub	sp, #8
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
	delay(60000000/stepperrev/rpm);
 80013b4:	f643 1238 	movw	r2, #14648	@ 0x3938
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	fb92 f3f3 	sdiv	r3, r2, r3
 80013be:	b29b      	uxth	r3, r3
 80013c0:	4618      	mov	r0, r3
 80013c2:	f7ff ffd9 	bl	8001378 <delay>
}
 80013c6:	bf00      	nop
 80013c8:	3708      	adds	r7, #8
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
	...

080013d0 <stepper_half_drive>:
void stepper_half_drive (int step)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  switch (step){
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	2b07      	cmp	r3, #7
 80013dc:	f200 80bc 	bhi.w	8001558 <stepper_half_drive+0x188>
 80013e0:	a201      	add	r2, pc, #4	@ (adr r2, 80013e8 <stepper_half_drive+0x18>)
 80013e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013e6:	bf00      	nop
 80013e8:	08001409 	.word	0x08001409
 80013ec:	08001433 	.word	0x08001433
 80013f0:	0800145d 	.word	0x0800145d
 80013f4:	08001487 	.word	0x08001487
 80013f8:	080014b1 	.word	0x080014b1
 80013fc:	080014db 	.word	0x080014db
 8001400:	08001505 	.word	0x08001505
 8001404:	0800152f 	.word	0x0800152f
         case 0:
		  HAL_GPIO_WritePin(GPIOB, in1_Pin, GPIO_PIN_SET);   // IN1
 8001408:	2201      	movs	r2, #1
 800140a:	2108      	movs	r1, #8
 800140c:	4854      	ldr	r0, [pc, #336]	@ (8001560 <stepper_half_drive+0x190>)
 800140e:	f002 fe29 	bl	8004064 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, in2_Pin, GPIO_PIN_RESET);   // IN2
 8001412:	2200      	movs	r2, #0
 8001414:	2110      	movs	r1, #16
 8001416:	4852      	ldr	r0, [pc, #328]	@ (8001560 <stepper_half_drive+0x190>)
 8001418:	f002 fe24 	bl	8004064 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, in3_Pin, GPIO_PIN_RESET);   // IN3
 800141c:	2200      	movs	r2, #0
 800141e:	2180      	movs	r1, #128	@ 0x80
 8001420:	4850      	ldr	r0, [pc, #320]	@ (8001564 <stepper_half_drive+0x194>)
 8001422:	f002 fe1f 	bl	8004064 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, in4_Pin, GPIO_PIN_RESET);   // IN4
 8001426:	2200      	movs	r2, #0
 8001428:	2140      	movs	r1, #64	@ 0x40
 800142a:	484d      	ldr	r0, [pc, #308]	@ (8001560 <stepper_half_drive+0x190>)
 800142c:	f002 fe1a 	bl	8004064 <HAL_GPIO_WritePin>
		  break;
 8001430:	e092      	b.n	8001558 <stepper_half_drive+0x188>

	  case 1:
		  HAL_GPIO_WritePin(GPIOB, in1_Pin, GPIO_PIN_SET);   // IN1
 8001432:	2201      	movs	r2, #1
 8001434:	2108      	movs	r1, #8
 8001436:	484a      	ldr	r0, [pc, #296]	@ (8001560 <stepper_half_drive+0x190>)
 8001438:	f002 fe14 	bl	8004064 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, in2_Pin, GPIO_PIN_SET);   // IN2
 800143c:	2201      	movs	r2, #1
 800143e:	2110      	movs	r1, #16
 8001440:	4847      	ldr	r0, [pc, #284]	@ (8001560 <stepper_half_drive+0x190>)
 8001442:	f002 fe0f 	bl	8004064 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, in3_Pin, GPIO_PIN_RESET);   // IN3
 8001446:	2200      	movs	r2, #0
 8001448:	2180      	movs	r1, #128	@ 0x80
 800144a:	4846      	ldr	r0, [pc, #280]	@ (8001564 <stepper_half_drive+0x194>)
 800144c:	f002 fe0a 	bl	8004064 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, in4_Pin, GPIO_PIN_RESET);   // IN4
 8001450:	2200      	movs	r2, #0
 8001452:	2140      	movs	r1, #64	@ 0x40
 8001454:	4842      	ldr	r0, [pc, #264]	@ (8001560 <stepper_half_drive+0x190>)
 8001456:	f002 fe05 	bl	8004064 <HAL_GPIO_WritePin>
		  break;
 800145a:	e07d      	b.n	8001558 <stepper_half_drive+0x188>

          case 2:
		  HAL_GPIO_WritePin(GPIOB, in1_Pin, GPIO_PIN_RESET);   // IN1
 800145c:	2200      	movs	r2, #0
 800145e:	2108      	movs	r1, #8
 8001460:	483f      	ldr	r0, [pc, #252]	@ (8001560 <stepper_half_drive+0x190>)
 8001462:	f002 fdff 	bl	8004064 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, in2_Pin, GPIO_PIN_SET);   // IN2
 8001466:	2201      	movs	r2, #1
 8001468:	2110      	movs	r1, #16
 800146a:	483d      	ldr	r0, [pc, #244]	@ (8001560 <stepper_half_drive+0x190>)
 800146c:	f002 fdfa 	bl	8004064 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, in3_Pin, GPIO_PIN_RESET);   // IN3
 8001470:	2200      	movs	r2, #0
 8001472:	2180      	movs	r1, #128	@ 0x80
 8001474:	483b      	ldr	r0, [pc, #236]	@ (8001564 <stepper_half_drive+0x194>)
 8001476:	f002 fdf5 	bl	8004064 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, in4_Pin, GPIO_PIN_RESET);   // IN4
 800147a:	2200      	movs	r2, #0
 800147c:	2140      	movs	r1, #64	@ 0x40
 800147e:	4838      	ldr	r0, [pc, #224]	@ (8001560 <stepper_half_drive+0x190>)
 8001480:	f002 fdf0 	bl	8004064 <HAL_GPIO_WritePin>
		  break;
 8001484:	e068      	b.n	8001558 <stepper_half_drive+0x188>

	  case 3:
		  HAL_GPIO_WritePin(GPIOB, in1_Pin, GPIO_PIN_RESET);   // IN1
 8001486:	2200      	movs	r2, #0
 8001488:	2108      	movs	r1, #8
 800148a:	4835      	ldr	r0, [pc, #212]	@ (8001560 <stepper_half_drive+0x190>)
 800148c:	f002 fdea 	bl	8004064 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, in2_Pin,  GPIO_PIN_SET);   // IN2
 8001490:	2201      	movs	r2, #1
 8001492:	2110      	movs	r1, #16
 8001494:	4832      	ldr	r0, [pc, #200]	@ (8001560 <stepper_half_drive+0x190>)
 8001496:	f002 fde5 	bl	8004064 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, in3_Pin, GPIO_PIN_SET);   // IN3
 800149a:	2201      	movs	r2, #1
 800149c:	2180      	movs	r1, #128	@ 0x80
 800149e:	4831      	ldr	r0, [pc, #196]	@ (8001564 <stepper_half_drive+0x194>)
 80014a0:	f002 fde0 	bl	8004064 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, in4_Pin,GPIO_PIN_RESET);   // IN4
 80014a4:	2200      	movs	r2, #0
 80014a6:	2140      	movs	r1, #64	@ 0x40
 80014a8:	482d      	ldr	r0, [pc, #180]	@ (8001560 <stepper_half_drive+0x190>)
 80014aa:	f002 fddb 	bl	8004064 <HAL_GPIO_WritePin>
		  break;
 80014ae:	e053      	b.n	8001558 <stepper_half_drive+0x188>

	  case 4:
		  HAL_GPIO_WritePin(GPIOB, in1_Pin, GPIO_PIN_RESET);   // IN1
 80014b0:	2200      	movs	r2, #0
 80014b2:	2108      	movs	r1, #8
 80014b4:	482a      	ldr	r0, [pc, #168]	@ (8001560 <stepper_half_drive+0x190>)
 80014b6:	f002 fdd5 	bl	8004064 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, in2_Pin,   GPIO_PIN_RESET);   // IN2
 80014ba:	2200      	movs	r2, #0
 80014bc:	2110      	movs	r1, #16
 80014be:	4828      	ldr	r0, [pc, #160]	@ (8001560 <stepper_half_drive+0x190>)
 80014c0:	f002 fdd0 	bl	8004064 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, in3_Pin, GPIO_PIN_SET);   // IN3
 80014c4:	2201      	movs	r2, #1
 80014c6:	2180      	movs	r1, #128	@ 0x80
 80014c8:	4826      	ldr	r0, [pc, #152]	@ (8001564 <stepper_half_drive+0x194>)
 80014ca:	f002 fdcb 	bl	8004064 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, in4_Pin, GPIO_PIN_RESET);   // IN4
 80014ce:	2200      	movs	r2, #0
 80014d0:	2140      	movs	r1, #64	@ 0x40
 80014d2:	4823      	ldr	r0, [pc, #140]	@ (8001560 <stepper_half_drive+0x190>)
 80014d4:	f002 fdc6 	bl	8004064 <HAL_GPIO_WritePin>
		  break;
 80014d8:	e03e      	b.n	8001558 <stepper_half_drive+0x188>

	  case 5:
		  HAL_GPIO_WritePin(GPIOB, in1_Pin, GPIO_PIN_RESET);   // IN1
 80014da:	2200      	movs	r2, #0
 80014dc:	2108      	movs	r1, #8
 80014de:	4820      	ldr	r0, [pc, #128]	@ (8001560 <stepper_half_drive+0x190>)
 80014e0:	f002 fdc0 	bl	8004064 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, in2_Pin, GPIO_PIN_RESET);   // IN2
 80014e4:	2200      	movs	r2, #0
 80014e6:	2110      	movs	r1, #16
 80014e8:	481d      	ldr	r0, [pc, #116]	@ (8001560 <stepper_half_drive+0x190>)
 80014ea:	f002 fdbb 	bl	8004064 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, in3_Pin, GPIO_PIN_SET);   // IN3
 80014ee:	2201      	movs	r2, #1
 80014f0:	2180      	movs	r1, #128	@ 0x80
 80014f2:	481c      	ldr	r0, [pc, #112]	@ (8001564 <stepper_half_drive+0x194>)
 80014f4:	f002 fdb6 	bl	8004064 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, in4_Pin, GPIO_PIN_SET);   // IN4
 80014f8:	2201      	movs	r2, #1
 80014fa:	2140      	movs	r1, #64	@ 0x40
 80014fc:	4818      	ldr	r0, [pc, #96]	@ (8001560 <stepper_half_drive+0x190>)
 80014fe:	f002 fdb1 	bl	8004064 <HAL_GPIO_WritePin>
		  break;
 8001502:	e029      	b.n	8001558 <stepper_half_drive+0x188>

	  case 6:
		  HAL_GPIO_WritePin(GPIOB, in1_Pin, GPIO_PIN_RESET);   // IN1
 8001504:	2200      	movs	r2, #0
 8001506:	2108      	movs	r1, #8
 8001508:	4815      	ldr	r0, [pc, #84]	@ (8001560 <stepper_half_drive+0x190>)
 800150a:	f002 fdab 	bl	8004064 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, in2_Pin,GPIO_PIN_RESET);   // IN2
 800150e:	2200      	movs	r2, #0
 8001510:	2110      	movs	r1, #16
 8001512:	4813      	ldr	r0, [pc, #76]	@ (8001560 <stepper_half_drive+0x190>)
 8001514:	f002 fda6 	bl	8004064 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, in3_Pin, GPIO_PIN_RESET);   // IN3
 8001518:	2200      	movs	r2, #0
 800151a:	2180      	movs	r1, #128	@ 0x80
 800151c:	4811      	ldr	r0, [pc, #68]	@ (8001564 <stepper_half_drive+0x194>)
 800151e:	f002 fda1 	bl	8004064 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, in4_Pin, GPIO_PIN_SET);   // IN4
 8001522:	2201      	movs	r2, #1
 8001524:	2140      	movs	r1, #64	@ 0x40
 8001526:	480e      	ldr	r0, [pc, #56]	@ (8001560 <stepper_half_drive+0x190>)
 8001528:	f002 fd9c 	bl	8004064 <HAL_GPIO_WritePin>
		  break;
 800152c:	e014      	b.n	8001558 <stepper_half_drive+0x188>

	  case 7:
		  HAL_GPIO_WritePin(GPIOB, in1_Pin, GPIO_PIN_SET);   // IN1
 800152e:	2201      	movs	r2, #1
 8001530:	2108      	movs	r1, #8
 8001532:	480b      	ldr	r0, [pc, #44]	@ (8001560 <stepper_half_drive+0x190>)
 8001534:	f002 fd96 	bl	8004064 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, in2_Pin, GPIO_PIN_RESET);   // IN2
 8001538:	2200      	movs	r2, #0
 800153a:	2110      	movs	r1, #16
 800153c:	4808      	ldr	r0, [pc, #32]	@ (8001560 <stepper_half_drive+0x190>)
 800153e:	f002 fd91 	bl	8004064 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, in3_Pin, GPIO_PIN_RESET);   // IN3
 8001542:	2200      	movs	r2, #0
 8001544:	2180      	movs	r1, #128	@ 0x80
 8001546:	4807      	ldr	r0, [pc, #28]	@ (8001564 <stepper_half_drive+0x194>)
 8001548:	f002 fd8c 	bl	8004064 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, in4_Pin,GPIO_PIN_SET);   // IN4
 800154c:	2201      	movs	r2, #1
 800154e:	2140      	movs	r1, #64	@ 0x40
 8001550:	4803      	ldr	r0, [pc, #12]	@ (8001560 <stepper_half_drive+0x190>)
 8001552:	f002 fd87 	bl	8004064 <HAL_GPIO_WritePin>
		  break;
 8001556:	bf00      	nop

	}
}
 8001558:	bf00      	nop
 800155a:	3708      	adds	r7, #8
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}
 8001560:	40020400 	.word	0x40020400
 8001564:	40020800 	.word	0x40020800

08001568 <stepper_step_angle>:

void stepper_step_angle(float angle, int direction, int rpm){
 8001568:	b580      	push	{r7, lr}
 800156a:	b08a      	sub	sp, #40	@ 0x28
 800156c:	af00      	add	r7, sp, #0
 800156e:	ed87 0a03 	vstr	s0, [r7, #12]
 8001572:	60b8      	str	r0, [r7, #8]
 8001574:	6079      	str	r1, [r7, #4]
	float anglesequence = 0.703125; //360 = 512 sequences
 8001576:	4b20      	ldr	r3, [pc, #128]	@ (80015f8 <stepper_step_angle+0x90>)
 8001578:	61bb      	str	r3, [r7, #24]
	int numberofsequences = (int)(angle/anglesequence);
 800157a:	edd7 6a03 	vldr	s13, [r7, #12]
 800157e:	ed97 7a06 	vldr	s14, [r7, #24]
 8001582:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001586:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800158a:	ee17 3a90 	vmov	r3, s15
 800158e:	617b      	str	r3, [r7, #20]
	for (int seq = 0; seq < numberofsequences;seq++){
 8001590:	2300      	movs	r3, #0
 8001592:	627b      	str	r3, [r7, #36]	@ 0x24
 8001594:	e027      	b.n	80015e6 <stepper_step_angle+0x7e>
		if (direction==0) //for clockwise
 8001596:	68bb      	ldr	r3, [r7, #8]
 8001598:	2b00      	cmp	r3, #0
 800159a:	d10f      	bne.n	80015bc <stepper_step_angle+0x54>
		{
			for (int step = 7; step >=0; step--){
 800159c:	2307      	movs	r3, #7
 800159e:	623b      	str	r3, [r7, #32]
 80015a0:	e008      	b.n	80015b4 <stepper_step_angle+0x4c>
				stepper_half_drive(step);
 80015a2:	6a38      	ldr	r0, [r7, #32]
 80015a4:	f7ff ff14 	bl	80013d0 <stepper_half_drive>
				stepper_set_rpm(rpm);
 80015a8:	6878      	ldr	r0, [r7, #4]
 80015aa:	f7ff feff 	bl	80013ac <stepper_set_rpm>
			for (int step = 7; step >=0; step--){
 80015ae:	6a3b      	ldr	r3, [r7, #32]
 80015b0:	3b01      	subs	r3, #1
 80015b2:	623b      	str	r3, [r7, #32]
 80015b4:	6a3b      	ldr	r3, [r7, #32]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	daf3      	bge.n	80015a2 <stepper_step_angle+0x3a>
 80015ba:	e011      	b.n	80015e0 <stepper_step_angle+0x78>
			}
		}
		else if(direction ==1) //for anti clockwise
 80015bc:	68bb      	ldr	r3, [r7, #8]
 80015be:	2b01      	cmp	r3, #1
 80015c0:	d10e      	bne.n	80015e0 <stepper_step_angle+0x78>
		{
			for (int step =0; step<8; step++){
 80015c2:	2300      	movs	r3, #0
 80015c4:	61fb      	str	r3, [r7, #28]
 80015c6:	e008      	b.n	80015da <stepper_step_angle+0x72>
				stepper_half_drive(step);
 80015c8:	69f8      	ldr	r0, [r7, #28]
 80015ca:	f7ff ff01 	bl	80013d0 <stepper_half_drive>
				stepper_set_rpm(rpm);
 80015ce:	6878      	ldr	r0, [r7, #4]
 80015d0:	f7ff feec 	bl	80013ac <stepper_set_rpm>
			for (int step =0; step<8; step++){
 80015d4:	69fb      	ldr	r3, [r7, #28]
 80015d6:	3301      	adds	r3, #1
 80015d8:	61fb      	str	r3, [r7, #28]
 80015da:	69fb      	ldr	r3, [r7, #28]
 80015dc:	2b07      	cmp	r3, #7
 80015de:	ddf3      	ble.n	80015c8 <stepper_step_angle+0x60>
	for (int seq = 0; seq < numberofsequences;seq++){
 80015e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015e2:	3301      	adds	r3, #1
 80015e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80015e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	429a      	cmp	r2, r3
 80015ec:	dbd3      	blt.n	8001596 <stepper_step_angle+0x2e>
			}
		}
	}


}
 80015ee:	bf00      	nop
 80015f0:	bf00      	nop
 80015f2:	3728      	adds	r7, #40	@ 0x28
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	3f340000 	.word	0x3f340000

080015fc <motor_face_angle>:
float current_motor_angle = 0.0f;

void motor_face_angle(float target_angle_deg, int rpm) {
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b086      	sub	sp, #24
 8001600:	af00      	add	r7, sp, #0
 8001602:	ed87 0a01 	vstr	s0, [r7, #4]
 8001606:	6038      	str	r0, [r7, #0]
    float delta = target_angle_deg - current_motor_angle;
 8001608:	4b24      	ldr	r3, [pc, #144]	@ (800169c <motor_face_angle+0xa0>)
 800160a:	edd3 7a00 	vldr	s15, [r3]
 800160e:	ed97 7a01 	vldr	s14, [r7, #4]
 8001612:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001616:	edc7 7a05 	vstr	s15, [r7, #20]

    // Normalize to [-180, 180]
    if (delta > 180.0f) delta -= 360.0f;
 800161a:	edd7 7a05 	vldr	s15, [r7, #20]
 800161e:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 80016a0 <motor_face_angle+0xa4>
 8001622:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001626:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800162a:	dd07      	ble.n	800163c <motor_face_angle+0x40>
 800162c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001630:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 80016a4 <motor_face_angle+0xa8>
 8001634:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001638:	edc7 7a05 	vstr	s15, [r7, #20]
    if (delta < -180.0f) delta += 360.0f;
 800163c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001640:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 80016a8 <motor_face_angle+0xac>
 8001644:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001648:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800164c:	d507      	bpl.n	800165e <motor_face_angle+0x62>
 800164e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001652:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 80016a4 <motor_face_angle+0xa8>
 8001656:	ee77 7a87 	vadd.f32	s15, s15, s14
 800165a:	edc7 7a05 	vstr	s15, [r7, #20]

    int dir = delta > 0 ? 1 : 0;
 800165e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001662:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001666:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800166a:	bfcc      	ite	gt
 800166c:	2301      	movgt	r3, #1
 800166e:	2300      	movle	r3, #0
 8001670:	b2db      	uxtb	r3, r3
 8001672:	613b      	str	r3, [r7, #16]
    float rotate_amount = fabsf(delta);
 8001674:	edd7 7a05 	vldr	s15, [r7, #20]
 8001678:	eef0 7ae7 	vabs.f32	s15, s15
 800167c:	edc7 7a03 	vstr	s15, [r7, #12]

    stepper_step_angle(rotate_amount, dir, rpm);
 8001680:	6839      	ldr	r1, [r7, #0]
 8001682:	6938      	ldr	r0, [r7, #16]
 8001684:	ed97 0a03 	vldr	s0, [r7, #12]
 8001688:	f7ff ff6e 	bl	8001568 <stepper_step_angle>
    current_motor_angle = target_angle_deg; // Update tracker
 800168c:	4a03      	ldr	r2, [pc, #12]	@ (800169c <motor_face_angle+0xa0>)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6013      	str	r3, [r2, #0]
}
 8001692:	bf00      	nop
 8001694:	3718      	adds	r7, #24
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	200125a4 	.word	0x200125a4
 80016a0:	43340000 	.word	0x43340000
 80016a4:	43b40000 	.word	0x43b40000
 80016a8:	c3340000 	.word	0xc3340000

080016ac <motor_return_to_90>:
void motor_return_to_90(int rpm) {
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b086      	sub	sp, #24
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
    float target_angle = 10.0f;
 80016b4:	4b25      	ldr	r3, [pc, #148]	@ (800174c <motor_return_to_90+0xa0>)
 80016b6:	613b      	str	r3, [r7, #16]
    float delta = target_angle - current_motor_angle;
 80016b8:	4b25      	ldr	r3, [pc, #148]	@ (8001750 <motor_return_to_90+0xa4>)
 80016ba:	edd3 7a00 	vldr	s15, [r3]
 80016be:	ed97 7a04 	vldr	s14, [r7, #16]
 80016c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016c6:	edc7 7a05 	vstr	s15, [r7, #20]

    // Normalize to [-180, 180]
    if (delta > 180.0f) delta -= 360.0f;
 80016ca:	edd7 7a05 	vldr	s15, [r7, #20]
 80016ce:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8001754 <motor_return_to_90+0xa8>
 80016d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016da:	dd07      	ble.n	80016ec <motor_return_to_90+0x40>
 80016dc:	edd7 7a05 	vldr	s15, [r7, #20]
 80016e0:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8001758 <motor_return_to_90+0xac>
 80016e4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80016e8:	edc7 7a05 	vstr	s15, [r7, #20]
    if (delta < -180.0f) delta += 360.0f;
 80016ec:	edd7 7a05 	vldr	s15, [r7, #20]
 80016f0:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 800175c <motor_return_to_90+0xb0>
 80016f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016fc:	d507      	bpl.n	800170e <motor_return_to_90+0x62>
 80016fe:	edd7 7a05 	vldr	s15, [r7, #20]
 8001702:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8001758 <motor_return_to_90+0xac>
 8001706:	ee77 7a87 	vadd.f32	s15, s15, s14
 800170a:	edc7 7a05 	vstr	s15, [r7, #20]

    int dir = (delta > 0) ? 1 : 0;
 800170e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001712:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001716:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800171a:	bfcc      	ite	gt
 800171c:	2301      	movgt	r3, #1
 800171e:	2300      	movle	r3, #0
 8001720:	b2db      	uxtb	r3, r3
 8001722:	60fb      	str	r3, [r7, #12]
    float rotate_amount = fabsf(delta);
 8001724:	edd7 7a05 	vldr	s15, [r7, #20]
 8001728:	eef0 7ae7 	vabs.f32	s15, s15
 800172c:	edc7 7a02 	vstr	s15, [r7, #8]

    stepper_step_angle(rotate_amount, dir, rpm);
 8001730:	6879      	ldr	r1, [r7, #4]
 8001732:	68f8      	ldr	r0, [r7, #12]
 8001734:	ed97 0a02 	vldr	s0, [r7, #8]
 8001738:	f7ff ff16 	bl	8001568 <stepper_step_angle>
    current_motor_angle = 90.0f; // Update current angle tracker
 800173c:	4b04      	ldr	r3, [pc, #16]	@ (8001750 <motor_return_to_90+0xa4>)
 800173e:	4a08      	ldr	r2, [pc, #32]	@ (8001760 <motor_return_to_90+0xb4>)
 8001740:	601a      	str	r2, [r3, #0]
}
 8001742:	bf00      	nop
 8001744:	3718      	adds	r7, #24
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	41200000 	.word	0x41200000
 8001750:	200125a4 	.word	0x200125a4
 8001754:	43340000 	.word	0x43340000
 8001758:	43b40000 	.word	0x43b40000
 800175c:	c3340000 	.word	0xc3340000
 8001760:	42b40000 	.word	0x42b40000

08001764 <init_motor>:

// Initialize motor to 90°
void init_motor() {
 8001764:	b580      	push	{r7, lr}
 8001766:	af00      	add	r7, sp, #0
    current_motor_angle = 0.0f; // Start from 0°
 8001768:	4b04      	ldr	r3, [pc, #16]	@ (800177c <init_motor+0x18>)
 800176a:	f04f 0200 	mov.w	r2, #0
 800176e:	601a      	str	r2, [r3, #0]
    motor_return_to_90(10); // Move to 90° initially at 10 RPM
 8001770:	200a      	movs	r0, #10
 8001772:	f7ff ff9b 	bl	80016ac <motor_return_to_90>
}
 8001776:	bf00      	nop
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	200125a4 	.word	0x200125a4

08001780 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001780:	b590      	push	{r4, r7, lr}
 8001782:	b0a1      	sub	sp, #132	@ 0x84
 8001784:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001786:	f001 fd61 	bl	800324c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800178a:	f000 f9b1 	bl	8001af0 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800178e:	f000 fa17 	bl	8001bc0 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001792:	f000 fbd9 	bl	8001f48 <MX_GPIO_Init>
  MX_DMA_Init();
 8001796:	f000 fb91 	bl	8001ebc <MX_DMA_Init>
  MX_I2S3_Init();
 800179a:	f000 fa8f 	bl	8001cbc <MX_I2S3_Init>
  MX_I2S2_Init();
 800179e:	f000 fa5f 	bl	8001c60 <MX_I2S2_Init>
  MX_I2S4_Init();
 80017a2:	f000 fab9 	bl	8001d18 <MX_I2S4_Init>
  MX_USART6_UART_Init();
 80017a6:	f000 fb5f 	bl	8001e68 <MX_USART6_UART_Init>
  MX_I2S1_Init();
 80017aa:	f000 fa2b 	bl	8001c04 <MX_I2S1_Init>
  MX_USART2_UART_Init();
 80017ae:	f000 fb31 	bl	8001e14 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80017b2:	f000 fadf 	bl	8001d74 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  myprintf("hello");
 80017b6:	48b6      	ldr	r0, [pc, #728]	@ (8001a90 <main+0x310>)
 80017b8:	f000 fd32 	bl	8002220 <myprintf>

  //DWT_Init();

  HAL_TIM_Base_Start(&htim1);
 80017bc:	48b5      	ldr	r0, [pc, #724]	@ (8001a94 <main+0x314>)
 80017be:	f004 fa73 	bl	8005ca8 <HAL_TIM_Base_Start>

  mic_fft[0].raw_buffer = data_mic1;
 80017c2:	4bb5      	ldr	r3, [pc, #724]	@ (8001a98 <main+0x318>)
 80017c4:	4ab5      	ldr	r2, [pc, #724]	@ (8001a9c <main+0x31c>)
 80017c6:	601a      	str	r2, [r3, #0]
  	mic_fft[1].raw_buffer = data_mic2;
 80017c8:	4bb3      	ldr	r3, [pc, #716]	@ (8001a98 <main+0x318>)
 80017ca:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 80017ce:	461a      	mov	r2, r3
 80017d0:	4bb3      	ldr	r3, [pc, #716]	@ (8001aa0 <main+0x320>)
 80017d2:	f8c2 3804 	str.w	r3, [r2, #2052]	@ 0x804
  	mic_fft[2].raw_buffer = data_mic3;
 80017d6:	4bb0      	ldr	r3, [pc, #704]	@ (8001a98 <main+0x318>)
 80017d8:	f503 43e0 	add.w	r3, r3, #28672	@ 0x7000
 80017dc:	461a      	mov	r2, r3
 80017de:	4bb1      	ldr	r3, [pc, #708]	@ (8001aa4 <main+0x324>)
 80017e0:	6093      	str	r3, [r2, #8]
  	mic_fft[3].raw_buffer = data_mic4;
 80017e2:	4bad      	ldr	r3, [pc, #692]	@ (8001a98 <main+0x318>)
 80017e4:	f503 4320 	add.w	r3, r3, #40960	@ 0xa000
 80017e8:	461a      	mov	r2, r3
 80017ea:	4baf      	ldr	r3, [pc, #700]	@ (8001aa8 <main+0x328>)
 80017ec:	f8c2 380c 	str.w	r3, [r2, #2060]	@ 0x80c

  HAL_I2S_DMAStop(&hi2s1);
 80017f0:	48ae      	ldr	r0, [pc, #696]	@ (8001aac <main+0x32c>)
 80017f2:	f002 fe61 	bl	80044b8 <HAL_I2S_DMAStop>
  HAL_I2S_DMAStop(&hi2s2);
 80017f6:	48ae      	ldr	r0, [pc, #696]	@ (8001ab0 <main+0x330>)
 80017f8:	f002 fe5e 	bl	80044b8 <HAL_I2S_DMAStop>
  HAL_I2S_DMAStop(&hi2s3);
 80017fc:	48ad      	ldr	r0, [pc, #692]	@ (8001ab4 <main+0x334>)
 80017fe:	f002 fe5b 	bl	80044b8 <HAL_I2S_DMAStop>
  HAL_I2S_DMAStop(&hi2s4);
 8001802:	48ad      	ldr	r0, [pc, #692]	@ (8001ab8 <main+0x338>)
 8001804:	f002 fe58 	bl	80044b8 <HAL_I2S_DMAStop>
  	  HAL_Delay(500);
 8001808:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800180c:	f001 fd90 	bl	8003330 <HAL_Delay>

  	arm_rfft_fast_init_f32(&fft_audio_instance, FFT_LENGTH);
 8001810:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001814:	48a9      	ldr	r0, [pc, #676]	@ (8001abc <main+0x33c>)
 8001816:	f005 fa11 	bl	8006c3c <arm_rfft_fast_init_f32>
   	preprocessing_init();
 800181a:	f000 fd29 	bl	8002270 <preprocessing_init>
//   	gccphat_init();
   	init_motor();
 800181e:	f7ff ffa1 	bl	8001764 <init_motor>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if (button_flag){
 8001822:	4ba7      	ldr	r3, [pc, #668]	@ (8001ac0 <main+0x340>)
 8001824:	781b      	ldrb	r3, [r3, #0]
 8001826:	b2db      	uxtb	r3, r3
 8001828:	2b00      	cmp	r3, #0
 800182a:	d049      	beq.n	80018c0 <main+0x140>
		  if (start_stop_recording){
 800182c:	4ba5      	ldr	r3, [pc, #660]	@ (8001ac4 <main+0x344>)
 800182e:	781b      	ldrb	r3, [r3, #0]
 8001830:	b2db      	uxtb	r3, r3
 8001832:	2b00      	cmp	r3, #0
 8001834:	d01b      	beq.n	800186e <main+0xee>
			  HAL_I2S_DMAStop(&hi2s1);
 8001836:	489d      	ldr	r0, [pc, #628]	@ (8001aac <main+0x32c>)
 8001838:	f002 fe3e 	bl	80044b8 <HAL_I2S_DMAStop>
			  HAL_I2S_DMAStop(&hi2s2);
 800183c:	489c      	ldr	r0, [pc, #624]	@ (8001ab0 <main+0x330>)
 800183e:	f002 fe3b 	bl	80044b8 <HAL_I2S_DMAStop>
			  HAL_I2S_DMAStop(&hi2s3);
 8001842:	489c      	ldr	r0, [pc, #624]	@ (8001ab4 <main+0x334>)
 8001844:	f002 fe38 	bl	80044b8 <HAL_I2S_DMAStop>
			  HAL_I2S_DMAStop(&hi2s4);
 8001848:	489b      	ldr	r0, [pc, #620]	@ (8001ab8 <main+0x338>)
 800184a:	f002 fe35 	bl	80044b8 <HAL_I2S_DMAStop>
			  start_stop_recording = 0;
 800184e:	4b9d      	ldr	r3, [pc, #628]	@ (8001ac4 <main+0x344>)
 8001850:	2200      	movs	r2, #0
 8001852:	701a      	strb	r2, [r3, #0]
			  half_all = 0;
 8001854:	4b9c      	ldr	r3, [pc, #624]	@ (8001ac8 <main+0x348>)
 8001856:	2200      	movs	r2, #0
 8001858:	701a      	strb	r2, [r3, #0]
			  full_all = 0;
 800185a:	4b9c      	ldr	r3, [pc, #624]	@ (8001acc <main+0x34c>)
 800185c:	2200      	movs	r2, #0
 800185e:	701a      	strb	r2, [r3, #0]

			  myprintf("Stop recording\n");
 8001860:	489b      	ldr	r0, [pc, #620]	@ (8001ad0 <main+0x350>)
 8001862:	f000 fcdd 	bl	8002220 <myprintf>
			  calibrating = 0;
 8001866:	4b9b      	ldr	r3, [pc, #620]	@ (8001ad4 <main+0x354>)
 8001868:	2200      	movs	r2, #0
 800186a:	701a      	strb	r2, [r3, #0]
 800186c:	e025      	b.n	80018ba <main+0x13a>
		  }
		  else{
			  start_stop_recording =1;
 800186e:	4b95      	ldr	r3, [pc, #596]	@ (8001ac4 <main+0x344>)
 8001870:	2201      	movs	r2, #1
 8001872:	701a      	strb	r2, [r3, #0]
			  myprintf("Start recording\n");
 8001874:	4898      	ldr	r0, [pc, #608]	@ (8001ad8 <main+0x358>)
 8001876:	f000 fcd3 	bl	8002220 <myprintf>
			  HAL_I2S_Receive_DMA(&hi2s1, (uint16_t*)data_mic1, sizeof(data_mic1)/2);
 800187a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800187e:	4987      	ldr	r1, [pc, #540]	@ (8001a9c <main+0x31c>)
 8001880:	488a      	ldr	r0, [pc, #552]	@ (8001aac <main+0x32c>)
 8001882:	f002 fd61 	bl	8004348 <HAL_I2S_Receive_DMA>
			  HAL_I2S_Receive_DMA(&hi2s2, (uint16_t*)data_mic2, sizeof(data_mic2)/2);
 8001886:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800188a:	4985      	ldr	r1, [pc, #532]	@ (8001aa0 <main+0x320>)
 800188c:	4888      	ldr	r0, [pc, #544]	@ (8001ab0 <main+0x330>)
 800188e:	f002 fd5b 	bl	8004348 <HAL_I2S_Receive_DMA>
			  HAL_I2S_Receive_DMA(&hi2s3, (uint16_t*)data_mic3, sizeof(data_mic3)/2);
 8001892:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001896:	4983      	ldr	r1, [pc, #524]	@ (8001aa4 <main+0x324>)
 8001898:	4886      	ldr	r0, [pc, #536]	@ (8001ab4 <main+0x334>)
 800189a:	f002 fd55 	bl	8004348 <HAL_I2S_Receive_DMA>
			  HAL_I2S_Receive_DMA(&hi2s4, (uint16_t*)data_mic4, sizeof(data_mic4)/2);
 800189e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80018a2:	4981      	ldr	r1, [pc, #516]	@ (8001aa8 <main+0x328>)
 80018a4:	4884      	ldr	r0, [pc, #528]	@ (8001ab8 <main+0x338>)
 80018a6:	f002 fd4f 	bl	8004348 <HAL_I2S_Receive_DMA>
			  calibrating = 1;
 80018aa:	4b8a      	ldr	r3, [pc, #552]	@ (8001ad4 <main+0x354>)
 80018ac:	2201      	movs	r2, #1
 80018ae:	701a      	strb	r2, [r3, #0]
			  vad_init();
 80018b0:	f001 f9d0 	bl	8002c54 <vad_init>
			  vad_ready =0;
 80018b4:	4b89      	ldr	r3, [pc, #548]	@ (8001adc <main+0x35c>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	701a      	strb	r2, [r3, #0]
		  }
		  button_flag = 0;
 80018ba:	4b81      	ldr	r3, [pc, #516]	@ (8001ac0 <main+0x340>)
 80018bc:	2200      	movs	r2, #0
 80018be:	701a      	strb	r2, [r3, #0]

	  }
	  if (calibrating && half_all) {
 80018c0:	4b84      	ldr	r3, [pc, #528]	@ (8001ad4 <main+0x354>)
 80018c2:	781b      	ldrb	r3, [r3, #0]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d023      	beq.n	8001910 <main+0x190>
 80018c8:	4b7f      	ldr	r3, [pc, #508]	@ (8001ac8 <main+0x348>)
 80018ca:	781b      	ldrb	r3, [r3, #0]
 80018cc:	b2db      	uxtb	r3, r3
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d01e      	beq.n	8001910 <main+0x190>
	  	      calibrate_noise_all_mics();
 80018d2:	f7ff fcc5 	bl	8001260 <calibrate_noise_all_mics>
	  	      if (vad_is_noise_estimation_done()) {
 80018d6:	f001 f9f9 	bl	8002ccc <vad_is_noise_estimation_done>
 80018da:	4603      	mov	r3, r0
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d014      	beq.n	800190a <main+0x18a>
	  	          calibrating = 0;
 80018e0:	4b7c      	ldr	r3, [pc, #496]	@ (8001ad4 <main+0x354>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	701a      	strb	r2, [r3, #0]
	  	          vad_ready = 1;
 80018e6:	4b7d      	ldr	r3, [pc, #500]	@ (8001adc <main+0x35c>)
 80018e8:	2201      	movs	r2, #1
 80018ea:	701a      	strb	r2, [r3, #0]
	  	          myprintf("Calibrating done\n");
 80018ec:	487c      	ldr	r0, [pc, #496]	@ (8001ae0 <main+0x360>)
 80018ee:	f000 fc97 	bl	8002220 <myprintf>


	  	          // Print background energy right after calibration
	  	          float bg_energy = vad_get_noise_energy();
 80018f2:	f001 f9f7 	bl	8002ce4 <vad_get_noise_energy>
 80018f6:	ed87 0a1d 	vstr	s0, [r7, #116]	@ 0x74
	  	          myprintf("Background noise energy estimate: %.2f\n", bg_energy);
 80018fa:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 80018fc:	f7fe fe2c 	bl	8000558 <__aeabi_f2d>
 8001900:	4602      	mov	r2, r0
 8001902:	460b      	mov	r3, r1
 8001904:	4877      	ldr	r0, [pc, #476]	@ (8001ae4 <main+0x364>)
 8001906:	f000 fc8b 	bl	8002220 <myprintf>

	  	      }
	  	      half_all = 0;
 800190a:	4b6f      	ldr	r3, [pc, #444]	@ (8001ac8 <main+0x348>)
 800190c:	2200      	movs	r2, #0
 800190e:	701a      	strb	r2, [r3, #0]
	  }


	  if (start_stop_recording && half_all && vad_ready) {
 8001910:	4b6c      	ldr	r3, [pc, #432]	@ (8001ac4 <main+0x344>)
 8001912:	781b      	ldrb	r3, [r3, #0]
 8001914:	b2db      	uxtb	r3, r3
 8001916:	2b00      	cmp	r3, #0
 8001918:	d058      	beq.n	80019cc <main+0x24c>
 800191a:	4b6b      	ldr	r3, [pc, #428]	@ (8001ac8 <main+0x348>)
 800191c:	781b      	ldrb	r3, [r3, #0]
 800191e:	b2db      	uxtb	r3, r3
 8001920:	2b00      	cmp	r3, #0
 8001922:	d053      	beq.n	80019cc <main+0x24c>
 8001924:	4b6d      	ldr	r3, [pc, #436]	@ (8001adc <main+0x35c>)
 8001926:	781b      	ldrb	r3, [r3, #0]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d04f      	beq.n	80019cc <main+0x24c>

	  		  VADFrameInfo infos[NUM_MICS];

	  	      for (int mic = 0; mic < NUM_MICS; mic++) {
 800192c:	2300      	movs	r3, #0
 800192e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001930:	e01a      	b.n	8001968 <main+0x1e8>
	  	          VADFrameInfo info = vad_process_mic_fft(&mic_fft[mic], &fft_audio_instance, 0);
 8001932:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001934:	f643 0204 	movw	r2, #14340	@ 0x3804
 8001938:	fb02 f303 	mul.w	r3, r2, r3
 800193c:	4a56      	ldr	r2, [pc, #344]	@ (8001a98 <main+0x318>)
 800193e:	1899      	adds	r1, r3, r2
 8001940:	f107 0064 	add.w	r0, r7, #100	@ 0x64
 8001944:	2300      	movs	r3, #0
 8001946:	4a5d      	ldr	r2, [pc, #372]	@ (8001abc <main+0x33c>)
 8001948:	f001 fa80 	bl	8002e4c <vad_process_mic_fft>
	  	                  infos[mic] = info;
 800194c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800194e:	011b      	lsls	r3, r3, #4
 8001950:	3380      	adds	r3, #128	@ 0x80
 8001952:	443b      	add	r3, r7
 8001954:	3b7c      	subs	r3, #124	@ 0x7c
 8001956:	461c      	mov	r4, r3
 8001958:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800195c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800195e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	  	      for (int mic = 0; mic < NUM_MICS; mic++) {
 8001962:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001964:	3301      	adds	r3, #1
 8001966:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001968:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800196a:	2b03      	cmp	r3, #3
 800196c:	dde1      	ble.n	8001932 <main+0x1b2>
	  	                  //myprintf("[%s] Energy=%.2f ZCR=%.2f Freq=%.1fHz Voice=%d\n",
	  	                           //mic_labels[mic], info.energy, info.zcr, info.dominant_freq, info.is_voice);
	   	      } // for(mic)


		  if (vad_all_mics_agree(infos)) {
 800196e:	1d3b      	adds	r3, r7, #4
 8001970:	4618      	mov	r0, r3
 8001972:	f001 fbd3 	bl	800311c <vad_all_mics_agree>
 8001976:	4603      	mov	r3, r0
 8001978:	2b00      	cmp	r3, #0
 800197a:	d024      	beq.n	80019c6 <main+0x246>
			  myprintf("Voice detected\n");
 800197c:	485a      	ldr	r0, [pc, #360]	@ (8001ae8 <main+0x368>)
 800197e:	f000 fc4f 	bl	8002220 <myprintf>
			  //beamforming
			  //DWT->CYCCNT = 0;
			  //uint32_t beamforming_start = DWT->CYCCNT;
			  int angle = 0;
 8001982:	2300      	movs	r3, #0
 8001984:	663b      	str	r3, [r7, #96]	@ 0x60
			  float energy = 0.0f;
 8001986:	f04f 0300 	mov.w	r3, #0
 800198a:	65fb      	str	r3, [r7, #92]	@ 0x5c
			  delay_and_sum_beamforming(mic_fft,infos, &angle, &energy);
 800198c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001990:	f107 0260 	add.w	r2, r7, #96	@ 0x60
 8001994:	1d39      	adds	r1, r7, #4
 8001996:	4840      	ldr	r0, [pc, #256]	@ (8001a98 <main+0x318>)
 8001998:	f7ff fad6 	bl	8000f48 <delay_and_sum_beamforming>

			  //myprintf("|Beamforming Time: %-16.2f |Total Loop Time: %-15.2f |CPU Usage: %-10.2f%% |\n",
			  //         beamforming_time_us, total_loop_time_us, cpu_usage_percent);


			  motor_face_angle((float)angle, 15);
 800199c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800199e:	ee07 3a90 	vmov	s15, r3
 80019a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019a6:	200f      	movs	r0, #15
 80019a8:	eeb0 0a67 	vmov.f32	s0, s15
 80019ac:	f7ff fe26 	bl	80015fc <motor_face_angle>

			  myprintf("angle = %d degrees, energy = %.2f\n", angle, energy);
 80019b0:	6e3c      	ldr	r4, [r7, #96]	@ 0x60
 80019b2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80019b4:	4618      	mov	r0, r3
 80019b6:	f7fe fdcf 	bl	8000558 <__aeabi_f2d>
 80019ba:	4602      	mov	r2, r0
 80019bc:	460b      	mov	r3, r1
 80019be:	4621      	mov	r1, r4
 80019c0:	484a      	ldr	r0, [pc, #296]	@ (8001aec <main+0x36c>)
 80019c2:	f000 fc2d 	bl	8002220 <myprintf>


		  } // if (vad_all_mics_agree(infos))

		  	  half_all = 0;
 80019c6:	4b40      	ldr	r3, [pc, #256]	@ (8001ac8 <main+0x348>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	701a      	strb	r2, [r3, #0]
	  } // if (start_stop_recording && half_all && vad_ready)

	  if (start_stop_recording && full_all && vad_ready) {
 80019cc:	4b3d      	ldr	r3, [pc, #244]	@ (8001ac4 <main+0x344>)
 80019ce:	781b      	ldrb	r3, [r3, #0]
 80019d0:	b2db      	uxtb	r3, r3
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	f43f af25 	beq.w	8001822 <main+0xa2>
 80019d8:	4b3c      	ldr	r3, [pc, #240]	@ (8001acc <main+0x34c>)
 80019da:	781b      	ldrb	r3, [r3, #0]
 80019dc:	b2db      	uxtb	r3, r3
 80019de:	2b00      	cmp	r3, #0
 80019e0:	f43f af1f 	beq.w	8001822 <main+0xa2>
 80019e4:	4b3d      	ldr	r3, [pc, #244]	@ (8001adc <main+0x35c>)
 80019e6:	781b      	ldrb	r3, [r3, #0]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	f43f af1a 	beq.w	8001822 <main+0xa2>
//
//  		  check_buffer_integrity(data_mic3, "Mic3");
//
//	  		  check_buffer_integrity(data_mic4, "Mic4");
	  		  VADFrameInfo infos[NUM_MICS];
	  		  for (int mic = 0; mic < NUM_MICS; mic++) {
 80019ee:	2300      	movs	r3, #0
 80019f0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80019f2:	e01a      	b.n	8001a2a <main+0x2aa>
	  		  	   VADFrameInfo info = vad_process_mic_fft(&mic_fft[mic], &fft_audio_instance, 0);
 80019f4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80019f6:	f643 0204 	movw	r2, #14340	@ 0x3804
 80019fa:	fb02 f303 	mul.w	r3, r2, r3
 80019fe:	4a26      	ldr	r2, [pc, #152]	@ (8001a98 <main+0x318>)
 8001a00:	1899      	adds	r1, r3, r2
 8001a02:	f107 004c 	add.w	r0, r7, #76	@ 0x4c
 8001a06:	2300      	movs	r3, #0
 8001a08:	4a2c      	ldr	r2, [pc, #176]	@ (8001abc <main+0x33c>)
 8001a0a:	f001 fa1f 	bl	8002e4c <vad_process_mic_fft>

	  		  	   infos[mic] = info;
 8001a0e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001a10:	011b      	lsls	r3, r3, #4
 8001a12:	3380      	adds	r3, #128	@ 0x80
 8001a14:	443b      	add	r3, r7
 8001a16:	3b7c      	subs	r3, #124	@ 0x7c
 8001a18:	461c      	mov	r4, r3
 8001a1a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001a1e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001a20:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	  		  for (int mic = 0; mic < NUM_MICS; mic++) {
 8001a24:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001a26:	3301      	adds	r3, #1
 8001a28:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001a2a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001a2c:	2b03      	cmp	r3, #3
 8001a2e:	dde1      	ble.n	80019f4 <main+0x274>

//
	  		  	                //myprintf("[%s] Energy=%.2f ZCR=%.2f Freq=%.1fHz Voice=%d\n",
	  		  	                         //mic_labels[mic], info.energy, info.zcr, info.dominant_freq, info.is_voice);
	  		   	      } // for(mic)
	  		  	  if (vad_all_mics_agree(infos)) {
 8001a30:	1d3b      	adds	r3, r7, #4
 8001a32:	4618      	mov	r0, r3
 8001a34:	f001 fb72 	bl	800311c <vad_all_mics_agree>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d024      	beq.n	8001a88 <main+0x308>
	  		  	      myprintf("Voice detected\n");
 8001a3e:	482a      	ldr	r0, [pc, #168]	@ (8001ae8 <main+0x368>)
 8001a40:	f000 fbee 	bl	8002220 <myprintf>
	  		  		  //BEAMFORMING:
	  		  	  int angle = 0;
 8001a44:	2300      	movs	r3, #0
 8001a46:	64bb      	str	r3, [r7, #72]	@ 0x48
	  		  	  float energy = 0.0f;
 8001a48:	f04f 0300 	mov.w	r3, #0
 8001a4c:	647b      	str	r3, [r7, #68]	@ 0x44

	  		  	//uint32_t start_time = DWT_GetMicroseconds();

	  		  	  delay_and_sum_beamforming(mic_fft,infos, &angle, &energy);
 8001a4e:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001a52:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8001a56:	1d39      	adds	r1, r7, #4
 8001a58:	480f      	ldr	r0, [pc, #60]	@ (8001a98 <main+0x318>)
 8001a5a:	f7ff fa75 	bl	8000f48 <delay_and_sum_beamforming>

	  		  	//uint32_t end_time = DWT_GetMicroseconds();
	  		  	//uint32_t elapsed_time = end_time - start_time;

	  		  	//myprintf("Beamforming Time: %lu us, Angle = %d°, Energy = %.2f\n", elapsed_time, angle, energy);
	  		  	  motor_face_angle((float)angle, 15);
 8001a5e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001a60:	ee07 3a90 	vmov	s15, r3
 8001a64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a68:	200f      	movs	r0, #15
 8001a6a:	eeb0 0a67 	vmov.f32	s0, s15
 8001a6e:	f7ff fdc5 	bl	80015fc <motor_face_angle>
//
	  		  	  myprintf("angle = %d degrees, energy = %.2f\n", angle, energy);
 8001a72:	6cbc      	ldr	r4, [r7, #72]	@ 0x48
 8001a74:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001a76:	4618      	mov	r0, r3
 8001a78:	f7fe fd6e 	bl	8000558 <__aeabi_f2d>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	460b      	mov	r3, r1
 8001a80:	4621      	mov	r1, r4
 8001a82:	481a      	ldr	r0, [pc, #104]	@ (8001aec <main+0x36c>)
 8001a84:	f000 fbcc 	bl	8002220 <myprintf>

	  		  	  } // if (vad_all_mics_agree(infos))

	  		  	      full_all = 0;
 8001a88:	4b10      	ldr	r3, [pc, #64]	@ (8001acc <main+0x34c>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	701a      	strb	r2, [r3, #0]
	  if (button_flag){
 8001a8e:	e6c8      	b.n	8001822 <main+0xa2>
 8001a90:	0800bbe4 	.word	0x0800bbe4
 8001a94:	20004494 	.word	0x20004494
 8001a98:	20004584 	.word	0x20004584
 8001a9c:	200001f4 	.word	0x200001f4
 8001aa0:	200011f4 	.word	0x200011f4
 8001aa4:	200021f4 	.word	0x200021f4
 8001aa8:	200031f4 	.word	0x200031f4
 8001aac:	200041f4 	.word	0x200041f4
 8001ab0:	2000423c 	.word	0x2000423c
 8001ab4:	20004284 	.word	0x20004284
 8001ab8:	200042cc 	.word	0x200042cc
 8001abc:	2000456c 	.word	0x2000456c
 8001ac0:	20012594 	.word	0x20012594
 8001ac4:	20012595 	.word	0x20012595
 8001ac8:	200125a0 	.word	0x200125a0
 8001acc:	200125a1 	.word	0x200125a1
 8001ad0:	0800bbec 	.word	0x0800bbec
 8001ad4:	20012597 	.word	0x20012597
 8001ad8:	0800bbfc 	.word	0x0800bbfc
 8001adc:	20012596 	.word	0x20012596
 8001ae0:	0800bc10 	.word	0x0800bc10
 8001ae4:	0800bc24 	.word	0x0800bc24
 8001ae8:	0800bc4c 	.word	0x0800bc4c
 8001aec:	0800bc5c 	.word	0x0800bc5c

08001af0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b094      	sub	sp, #80	@ 0x50
 8001af4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001af6:	f107 0320 	add.w	r3, r7, #32
 8001afa:	2230      	movs	r2, #48	@ 0x30
 8001afc:	2100      	movs	r1, #0
 8001afe:	4618      	mov	r0, r3
 8001b00:	f007 ff5e 	bl	80099c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b04:	f107 030c 	add.w	r3, r7, #12
 8001b08:	2200      	movs	r2, #0
 8001b0a:	601a      	str	r2, [r3, #0]
 8001b0c:	605a      	str	r2, [r3, #4]
 8001b0e:	609a      	str	r2, [r3, #8]
 8001b10:	60da      	str	r2, [r3, #12]
 8001b12:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b14:	2300      	movs	r3, #0
 8001b16:	60bb      	str	r3, [r7, #8]
 8001b18:	4b27      	ldr	r3, [pc, #156]	@ (8001bb8 <SystemClock_Config+0xc8>)
 8001b1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b1c:	4a26      	ldr	r2, [pc, #152]	@ (8001bb8 <SystemClock_Config+0xc8>)
 8001b1e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b22:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b24:	4b24      	ldr	r3, [pc, #144]	@ (8001bb8 <SystemClock_Config+0xc8>)
 8001b26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b28:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b2c:	60bb      	str	r3, [r7, #8]
 8001b2e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b30:	2300      	movs	r3, #0
 8001b32:	607b      	str	r3, [r7, #4]
 8001b34:	4b21      	ldr	r3, [pc, #132]	@ (8001bbc <SystemClock_Config+0xcc>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a20      	ldr	r2, [pc, #128]	@ (8001bbc <SystemClock_Config+0xcc>)
 8001b3a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001b3e:	6013      	str	r3, [r2, #0]
 8001b40:	4b1e      	ldr	r3, [pc, #120]	@ (8001bbc <SystemClock_Config+0xcc>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001b48:	607b      	str	r3, [r7, #4]
 8001b4a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001b50:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001b54:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b56:	2302      	movs	r3, #2
 8001b58:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001b5a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001b5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001b60:	2304      	movs	r3, #4
 8001b62:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8001b64:	2360      	movs	r3, #96	@ 0x60
 8001b66:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001b68:	2302      	movs	r3, #2
 8001b6a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001b6c:	2304      	movs	r3, #4
 8001b6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b70:	f107 0320 	add.w	r3, r7, #32
 8001b74:	4618      	mov	r0, r3
 8001b76:	f003 fa5d 	bl	8005034 <HAL_RCC_OscConfig>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d001      	beq.n	8001b84 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001b80:	f000 fb48 	bl	8002214 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b84:	230f      	movs	r3, #15
 8001b86:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b88:	2302      	movs	r3, #2
 8001b8a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001b90:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b94:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b96:	2300      	movs	r3, #0
 8001b98:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001b9a:	f107 030c 	add.w	r3, r7, #12
 8001b9e:	2103      	movs	r1, #3
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f003 fcbf 	bl	8005524 <HAL_RCC_ClockConfig>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d001      	beq.n	8001bb0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001bac:	f000 fb32 	bl	8002214 <Error_Handler>
  }
}
 8001bb0:	bf00      	nop
 8001bb2:	3750      	adds	r7, #80	@ 0x50
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd80      	pop	{r7, pc}
 8001bb8:	40023800 	.word	0x40023800
 8001bbc:	40007000 	.word	0x40007000

08001bc0 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b086      	sub	sp, #24
 8001bc4:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001bc6:	463b      	mov	r3, r7
 8001bc8:	2200      	movs	r2, #0
 8001bca:	601a      	str	r2, [r3, #0]
 8001bcc:	605a      	str	r2, [r3, #4]
 8001bce:	609a      	str	r2, [r3, #8]
 8001bd0:	60da      	str	r2, [r3, #12]
 8001bd2:	611a      	str	r2, [r3, #16]
 8001bd4:	615a      	str	r2, [r3, #20]

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 336;
 8001bda:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001bde:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 7;
 8001be0:	2307      	movs	r3, #7
 8001be2:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 4;
 8001be4:	2304      	movs	r3, #4
 8001be6:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001be8:	463b      	mov	r3, r7
 8001bea:	4618      	mov	r0, r3
 8001bec:	f003 feba 	bl	8005964 <HAL_RCCEx_PeriphCLKConfig>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d001      	beq.n	8001bfa <PeriphCommonClock_Config+0x3a>
  {
    Error_Handler();
 8001bf6:	f000 fb0d 	bl	8002214 <Error_Handler>
  }
}
 8001bfa:	bf00      	nop
 8001bfc:	3718      	adds	r7, #24
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}
	...

08001c04 <MX_I2S1_Init>:
  * @brief I2S1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S1_Init(void)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	af00      	add	r7, sp, #0
  /* USER CODE END I2S1_Init 0 */

  /* USER CODE BEGIN I2S1_Init 1 */

  /* USER CODE END I2S1_Init 1 */
  hi2s1.Instance = SPI1;
 8001c08:	4b13      	ldr	r3, [pc, #76]	@ (8001c58 <MX_I2S1_Init+0x54>)
 8001c0a:	4a14      	ldr	r2, [pc, #80]	@ (8001c5c <MX_I2S1_Init+0x58>)
 8001c0c:	601a      	str	r2, [r3, #0]
  hi2s1.Init.Mode = I2S_MODE_MASTER_RX;
 8001c0e:	4b12      	ldr	r3, [pc, #72]	@ (8001c58 <MX_I2S1_Init+0x54>)
 8001c10:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8001c14:	605a      	str	r2, [r3, #4]
  hi2s1.Init.Standard = I2S_STANDARD_PHILIPS;
 8001c16:	4b10      	ldr	r3, [pc, #64]	@ (8001c58 <MX_I2S1_Init+0x54>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	609a      	str	r2, [r3, #8]
  hi2s1.Init.DataFormat = I2S_DATAFORMAT_16B_EXTENDED;
 8001c1c:	4b0e      	ldr	r3, [pc, #56]	@ (8001c58 <MX_I2S1_Init+0x54>)
 8001c1e:	2201      	movs	r2, #1
 8001c20:	60da      	str	r2, [r3, #12]
  hi2s1.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8001c22:	4b0d      	ldr	r3, [pc, #52]	@ (8001c58 <MX_I2S1_Init+0x54>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	611a      	str	r2, [r3, #16]
  hi2s1.Init.AudioFreq = I2S_AUDIOFREQ_32K;
 8001c28:	4b0b      	ldr	r3, [pc, #44]	@ (8001c58 <MX_I2S1_Init+0x54>)
 8001c2a:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8001c2e:	615a      	str	r2, [r3, #20]
  hi2s1.Init.CPOL = I2S_CPOL_LOW;
 8001c30:	4b09      	ldr	r3, [pc, #36]	@ (8001c58 <MX_I2S1_Init+0x54>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	619a      	str	r2, [r3, #24]
  hi2s1.Init.ClockSource = I2S_CLOCK_PLL;
 8001c36:	4b08      	ldr	r3, [pc, #32]	@ (8001c58 <MX_I2S1_Init+0x54>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	61da      	str	r2, [r3, #28]
  hi2s1.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8001c3c:	4b06      	ldr	r3, [pc, #24]	@ (8001c58 <MX_I2S1_Init+0x54>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s1) != HAL_OK)
 8001c42:	4805      	ldr	r0, [pc, #20]	@ (8001c58 <MX_I2S1_Init+0x54>)
 8001c44:	f002 fa40 	bl	80040c8 <HAL_I2S_Init>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d001      	beq.n	8001c52 <MX_I2S1_Init+0x4e>
  {
    Error_Handler();
 8001c4e:	f000 fae1 	bl	8002214 <Error_Handler>
  }
  /* USER CODE BEGIN I2S1_Init 2 */

  /* USER CODE END I2S1_Init 2 */

}
 8001c52:	bf00      	nop
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	200041f4 	.word	0x200041f4
 8001c5c:	40013000 	.word	0x40013000

08001c60 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8001c64:	4b13      	ldr	r3, [pc, #76]	@ (8001cb4 <MX_I2S2_Init+0x54>)
 8001c66:	4a14      	ldr	r2, [pc, #80]	@ (8001cb8 <MX_I2S2_Init+0x58>)
 8001c68:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 8001c6a:	4b12      	ldr	r3, [pc, #72]	@ (8001cb4 <MX_I2S2_Init+0x54>)
 8001c6c:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8001c70:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8001c72:	4b10      	ldr	r3, [pc, #64]	@ (8001cb4 <MX_I2S2_Init+0x54>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B_EXTENDED;
 8001c78:	4b0e      	ldr	r3, [pc, #56]	@ (8001cb4 <MX_I2S2_Init+0x54>)
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8001c7e:	4b0d      	ldr	r3, [pc, #52]	@ (8001cb4 <MX_I2S2_Init+0x54>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_32K;
 8001c84:	4b0b      	ldr	r3, [pc, #44]	@ (8001cb4 <MX_I2S2_Init+0x54>)
 8001c86:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8001c8a:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8001c8c:	4b09      	ldr	r3, [pc, #36]	@ (8001cb4 <MX_I2S2_Init+0x54>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8001c92:	4b08      	ldr	r3, [pc, #32]	@ (8001cb4 <MX_I2S2_Init+0x54>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8001c98:	4b06      	ldr	r3, [pc, #24]	@ (8001cb4 <MX_I2S2_Init+0x54>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8001c9e:	4805      	ldr	r0, [pc, #20]	@ (8001cb4 <MX_I2S2_Init+0x54>)
 8001ca0:	f002 fa12 	bl	80040c8 <HAL_I2S_Init>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d001      	beq.n	8001cae <MX_I2S2_Init+0x4e>
  {
    Error_Handler();
 8001caa:	f000 fab3 	bl	8002214 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8001cae:	bf00      	nop
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	2000423c 	.word	0x2000423c
 8001cb8:	40003800 	.word	0x40003800

08001cbc <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8001cc0:	4b13      	ldr	r3, [pc, #76]	@ (8001d10 <MX_I2S3_Init+0x54>)
 8001cc2:	4a14      	ldr	r2, [pc, #80]	@ (8001d14 <MX_I2S3_Init+0x58>)
 8001cc4:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_RX;
 8001cc6:	4b12      	ldr	r3, [pc, #72]	@ (8001d10 <MX_I2S3_Init+0x54>)
 8001cc8:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8001ccc:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8001cce:	4b10      	ldr	r3, [pc, #64]	@ (8001d10 <MX_I2S3_Init+0x54>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B_EXTENDED;
 8001cd4:	4b0e      	ldr	r3, [pc, #56]	@ (8001d10 <MX_I2S3_Init+0x54>)
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8001cda:	4b0d      	ldr	r3, [pc, #52]	@ (8001d10 <MX_I2S3_Init+0x54>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_32K;
 8001ce0:	4b0b      	ldr	r3, [pc, #44]	@ (8001d10 <MX_I2S3_Init+0x54>)
 8001ce2:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8001ce6:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8001ce8:	4b09      	ldr	r3, [pc, #36]	@ (8001d10 <MX_I2S3_Init+0x54>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8001cee:	4b08      	ldr	r3, [pc, #32]	@ (8001d10 <MX_I2S3_Init+0x54>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8001cf4:	4b06      	ldr	r3, [pc, #24]	@ (8001d10 <MX_I2S3_Init+0x54>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8001cfa:	4805      	ldr	r0, [pc, #20]	@ (8001d10 <MX_I2S3_Init+0x54>)
 8001cfc:	f002 f9e4 	bl	80040c8 <HAL_I2S_Init>
 8001d00:	4603      	mov	r3, r0
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d001      	beq.n	8001d0a <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8001d06:	f000 fa85 	bl	8002214 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8001d0a:	bf00      	nop
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	20004284 	.word	0x20004284
 8001d14:	40003c00 	.word	0x40003c00

08001d18 <MX_I2S4_Init>:
  * @brief I2S4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S4_Init(void)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S4_Init 0 */

  /* USER CODE BEGIN I2S4_Init 1 */

  /* USER CODE END I2S4_Init 1 */
  hi2s4.Instance = SPI4;
 8001d1c:	4b13      	ldr	r3, [pc, #76]	@ (8001d6c <MX_I2S4_Init+0x54>)
 8001d1e:	4a14      	ldr	r2, [pc, #80]	@ (8001d70 <MX_I2S4_Init+0x58>)
 8001d20:	601a      	str	r2, [r3, #0]
  hi2s4.Init.Mode = I2S_MODE_MASTER_RX;
 8001d22:	4b12      	ldr	r3, [pc, #72]	@ (8001d6c <MX_I2S4_Init+0x54>)
 8001d24:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8001d28:	605a      	str	r2, [r3, #4]
  hi2s4.Init.Standard = I2S_STANDARD_PHILIPS;
 8001d2a:	4b10      	ldr	r3, [pc, #64]	@ (8001d6c <MX_I2S4_Init+0x54>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	609a      	str	r2, [r3, #8]
  hi2s4.Init.DataFormat = I2S_DATAFORMAT_16B_EXTENDED;
 8001d30:	4b0e      	ldr	r3, [pc, #56]	@ (8001d6c <MX_I2S4_Init+0x54>)
 8001d32:	2201      	movs	r2, #1
 8001d34:	60da      	str	r2, [r3, #12]
  hi2s4.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8001d36:	4b0d      	ldr	r3, [pc, #52]	@ (8001d6c <MX_I2S4_Init+0x54>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	611a      	str	r2, [r3, #16]
  hi2s4.Init.AudioFreq = I2S_AUDIOFREQ_32K;
 8001d3c:	4b0b      	ldr	r3, [pc, #44]	@ (8001d6c <MX_I2S4_Init+0x54>)
 8001d3e:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8001d42:	615a      	str	r2, [r3, #20]
  hi2s4.Init.CPOL = I2S_CPOL_LOW;
 8001d44:	4b09      	ldr	r3, [pc, #36]	@ (8001d6c <MX_I2S4_Init+0x54>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	619a      	str	r2, [r3, #24]
  hi2s4.Init.ClockSource = I2S_CLOCK_PLL;
 8001d4a:	4b08      	ldr	r3, [pc, #32]	@ (8001d6c <MX_I2S4_Init+0x54>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	61da      	str	r2, [r3, #28]
  hi2s4.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8001d50:	4b06      	ldr	r3, [pc, #24]	@ (8001d6c <MX_I2S4_Init+0x54>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s4) != HAL_OK)
 8001d56:	4805      	ldr	r0, [pc, #20]	@ (8001d6c <MX_I2S4_Init+0x54>)
 8001d58:	f002 f9b6 	bl	80040c8 <HAL_I2S_Init>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d001      	beq.n	8001d66 <MX_I2S4_Init+0x4e>
  {
    Error_Handler();
 8001d62:	f000 fa57 	bl	8002214 <Error_Handler>
  }
  /* USER CODE BEGIN I2S4_Init 2 */

  /* USER CODE END I2S4_Init 2 */

}
 8001d66:	bf00      	nop
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	200042cc 	.word	0x200042cc
 8001d70:	40013400 	.word	0x40013400

08001d74 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b086      	sub	sp, #24
 8001d78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d7a:	f107 0308 	add.w	r3, r7, #8
 8001d7e:	2200      	movs	r2, #0
 8001d80:	601a      	str	r2, [r3, #0]
 8001d82:	605a      	str	r2, [r3, #4]
 8001d84:	609a      	str	r2, [r3, #8]
 8001d86:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d88:	463b      	mov	r3, r7
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	601a      	str	r2, [r3, #0]
 8001d8e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001d90:	4b1e      	ldr	r3, [pc, #120]	@ (8001e0c <MX_TIM1_Init+0x98>)
 8001d92:	4a1f      	ldr	r2, [pc, #124]	@ (8001e10 <MX_TIM1_Init+0x9c>)
 8001d94:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 96-1;
 8001d96:	4b1d      	ldr	r3, [pc, #116]	@ (8001e0c <MX_TIM1_Init+0x98>)
 8001d98:	225f      	movs	r2, #95	@ 0x5f
 8001d9a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d9c:	4b1b      	ldr	r3, [pc, #108]	@ (8001e0c <MX_TIM1_Init+0x98>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 8001da2:	4b1a      	ldr	r3, [pc, #104]	@ (8001e0c <MX_TIM1_Init+0x98>)
 8001da4:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8001da8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001daa:	4b18      	ldr	r3, [pc, #96]	@ (8001e0c <MX_TIM1_Init+0x98>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001db0:	4b16      	ldr	r3, [pc, #88]	@ (8001e0c <MX_TIM1_Init+0x98>)
 8001db2:	2200      	movs	r2, #0
 8001db4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001db6:	4b15      	ldr	r3, [pc, #84]	@ (8001e0c <MX_TIM1_Init+0x98>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001dbc:	4813      	ldr	r0, [pc, #76]	@ (8001e0c <MX_TIM1_Init+0x98>)
 8001dbe:	f003 ff23 	bl	8005c08 <HAL_TIM_Base_Init>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d001      	beq.n	8001dcc <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001dc8:	f000 fa24 	bl	8002214 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001dcc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001dd0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001dd2:	f107 0308 	add.w	r3, r7, #8
 8001dd6:	4619      	mov	r1, r3
 8001dd8:	480c      	ldr	r0, [pc, #48]	@ (8001e0c <MX_TIM1_Init+0x98>)
 8001dda:	f003 ffbf 	bl	8005d5c <HAL_TIM_ConfigClockSource>
 8001dde:	4603      	mov	r3, r0
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d001      	beq.n	8001de8 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001de4:	f000 fa16 	bl	8002214 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001de8:	2300      	movs	r3, #0
 8001dea:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dec:	2300      	movs	r3, #0
 8001dee:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001df0:	463b      	mov	r3, r7
 8001df2:	4619      	mov	r1, r3
 8001df4:	4805      	ldr	r0, [pc, #20]	@ (8001e0c <MX_TIM1_Init+0x98>)
 8001df6:	f004 f99f 	bl	8006138 <HAL_TIMEx_MasterConfigSynchronization>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d001      	beq.n	8001e04 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001e00:	f000 fa08 	bl	8002214 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001e04:	bf00      	nop
 8001e06:	3718      	adds	r7, #24
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	20004494 	.word	0x20004494
 8001e10:	40010000 	.word	0x40010000

08001e14 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001e18:	4b11      	ldr	r3, [pc, #68]	@ (8001e60 <MX_USART2_UART_Init+0x4c>)
 8001e1a:	4a12      	ldr	r2, [pc, #72]	@ (8001e64 <MX_USART2_UART_Init+0x50>)
 8001e1c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001e1e:	4b10      	ldr	r3, [pc, #64]	@ (8001e60 <MX_USART2_UART_Init+0x4c>)
 8001e20:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001e24:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001e26:	4b0e      	ldr	r3, [pc, #56]	@ (8001e60 <MX_USART2_UART_Init+0x4c>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001e2c:	4b0c      	ldr	r3, [pc, #48]	@ (8001e60 <MX_USART2_UART_Init+0x4c>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001e32:	4b0b      	ldr	r3, [pc, #44]	@ (8001e60 <MX_USART2_UART_Init+0x4c>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001e38:	4b09      	ldr	r3, [pc, #36]	@ (8001e60 <MX_USART2_UART_Init+0x4c>)
 8001e3a:	220c      	movs	r2, #12
 8001e3c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e3e:	4b08      	ldr	r3, [pc, #32]	@ (8001e60 <MX_USART2_UART_Init+0x4c>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e44:	4b06      	ldr	r3, [pc, #24]	@ (8001e60 <MX_USART2_UART_Init+0x4c>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001e4a:	4805      	ldr	r0, [pc, #20]	@ (8001e60 <MX_USART2_UART_Init+0x4c>)
 8001e4c:	f004 f9e2 	bl	8006214 <HAL_UART_Init>
 8001e50:	4603      	mov	r3, r0
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d001      	beq.n	8001e5a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001e56:	f000 f9dd 	bl	8002214 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001e5a:	bf00      	nop
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	200044dc 	.word	0x200044dc
 8001e64:	40004400 	.word	0x40004400

08001e68 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001e6c:	4b11      	ldr	r3, [pc, #68]	@ (8001eb4 <MX_USART6_UART_Init+0x4c>)
 8001e6e:	4a12      	ldr	r2, [pc, #72]	@ (8001eb8 <MX_USART6_UART_Init+0x50>)
 8001e70:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001e72:	4b10      	ldr	r3, [pc, #64]	@ (8001eb4 <MX_USART6_UART_Init+0x4c>)
 8001e74:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001e78:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001e7a:	4b0e      	ldr	r3, [pc, #56]	@ (8001eb4 <MX_USART6_UART_Init+0x4c>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001e80:	4b0c      	ldr	r3, [pc, #48]	@ (8001eb4 <MX_USART6_UART_Init+0x4c>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001e86:	4b0b      	ldr	r3, [pc, #44]	@ (8001eb4 <MX_USART6_UART_Init+0x4c>)
 8001e88:	2200      	movs	r2, #0
 8001e8a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001e8c:	4b09      	ldr	r3, [pc, #36]	@ (8001eb4 <MX_USART6_UART_Init+0x4c>)
 8001e8e:	220c      	movs	r2, #12
 8001e90:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e92:	4b08      	ldr	r3, [pc, #32]	@ (8001eb4 <MX_USART6_UART_Init+0x4c>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e98:	4b06      	ldr	r3, [pc, #24]	@ (8001eb4 <MX_USART6_UART_Init+0x4c>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001e9e:	4805      	ldr	r0, [pc, #20]	@ (8001eb4 <MX_USART6_UART_Init+0x4c>)
 8001ea0:	f004 f9b8 	bl	8006214 <HAL_UART_Init>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d001      	beq.n	8001eae <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001eaa:	f000 f9b3 	bl	8002214 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001eae:	bf00      	nop
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	20004524 	.word	0x20004524
 8001eb8:	40011400 	.word	0x40011400

08001ebc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b082      	sub	sp, #8
 8001ec0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	607b      	str	r3, [r7, #4]
 8001ec6:	4b1f      	ldr	r3, [pc, #124]	@ (8001f44 <MX_DMA_Init+0x88>)
 8001ec8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eca:	4a1e      	ldr	r2, [pc, #120]	@ (8001f44 <MX_DMA_Init+0x88>)
 8001ecc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001ed0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ed2:	4b1c      	ldr	r3, [pc, #112]	@ (8001f44 <MX_DMA_Init+0x88>)
 8001ed4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ed6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001eda:	607b      	str	r3, [r7, #4]
 8001edc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001ede:	2300      	movs	r3, #0
 8001ee0:	603b      	str	r3, [r7, #0]
 8001ee2:	4b18      	ldr	r3, [pc, #96]	@ (8001f44 <MX_DMA_Init+0x88>)
 8001ee4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ee6:	4a17      	ldr	r2, [pc, #92]	@ (8001f44 <MX_DMA_Init+0x88>)
 8001ee8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001eec:	6313      	str	r3, [r2, #48]	@ 0x30
 8001eee:	4b15      	ldr	r3, [pc, #84]	@ (8001f44 <MX_DMA_Init+0x88>)
 8001ef0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ef2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ef6:	603b      	str	r3, [r7, #0]
 8001ef8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001efa:	2200      	movs	r2, #0
 8001efc:	2100      	movs	r1, #0
 8001efe:	200b      	movs	r0, #11
 8001f00:	f001 fb15 	bl	800352e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001f04:	200b      	movs	r0, #11
 8001f06:	f001 fb2e 	bl	8003566 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	2100      	movs	r1, #0
 8001f0e:	200e      	movs	r0, #14
 8001f10:	f001 fb0d 	bl	800352e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001f14:	200e      	movs	r0, #14
 8001f16:	f001 fb26 	bl	8003566 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	2100      	movs	r1, #0
 8001f1e:	2038      	movs	r0, #56	@ 0x38
 8001f20:	f001 fb05 	bl	800352e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001f24:	2038      	movs	r0, #56	@ 0x38
 8001f26:	f001 fb1e 	bl	8003566 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	2100      	movs	r1, #0
 8001f2e:	203b      	movs	r0, #59	@ 0x3b
 8001f30:	f001 fafd 	bl	800352e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001f34:	203b      	movs	r0, #59	@ 0x3b
 8001f36:	f001 fb16 	bl	8003566 <HAL_NVIC_EnableIRQ>

}
 8001f3a:	bf00      	nop
 8001f3c:	3708      	adds	r7, #8
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	bf00      	nop
 8001f44:	40023800 	.word	0x40023800

08001f48 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b08a      	sub	sp, #40	@ 0x28
 8001f4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f4e:	f107 0314 	add.w	r3, r7, #20
 8001f52:	2200      	movs	r2, #0
 8001f54:	601a      	str	r2, [r3, #0]
 8001f56:	605a      	str	r2, [r3, #4]
 8001f58:	609a      	str	r2, [r3, #8]
 8001f5a:	60da      	str	r2, [r3, #12]
 8001f5c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f5e:	2300      	movs	r3, #0
 8001f60:	613b      	str	r3, [r7, #16]
 8001f62:	4b3b      	ldr	r3, [pc, #236]	@ (8002050 <MX_GPIO_Init+0x108>)
 8001f64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f66:	4a3a      	ldr	r2, [pc, #232]	@ (8002050 <MX_GPIO_Init+0x108>)
 8001f68:	f043 0304 	orr.w	r3, r3, #4
 8001f6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f6e:	4b38      	ldr	r3, [pc, #224]	@ (8002050 <MX_GPIO_Init+0x108>)
 8001f70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f72:	f003 0304 	and.w	r3, r3, #4
 8001f76:	613b      	str	r3, [r7, #16]
 8001f78:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	60fb      	str	r3, [r7, #12]
 8001f7e:	4b34      	ldr	r3, [pc, #208]	@ (8002050 <MX_GPIO_Init+0x108>)
 8001f80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f82:	4a33      	ldr	r2, [pc, #204]	@ (8002050 <MX_GPIO_Init+0x108>)
 8001f84:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001f88:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f8a:	4b31      	ldr	r3, [pc, #196]	@ (8002050 <MX_GPIO_Init+0x108>)
 8001f8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f92:	60fb      	str	r3, [r7, #12]
 8001f94:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f96:	2300      	movs	r3, #0
 8001f98:	60bb      	str	r3, [r7, #8]
 8001f9a:	4b2d      	ldr	r3, [pc, #180]	@ (8002050 <MX_GPIO_Init+0x108>)
 8001f9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f9e:	4a2c      	ldr	r2, [pc, #176]	@ (8002050 <MX_GPIO_Init+0x108>)
 8001fa0:	f043 0301 	orr.w	r3, r3, #1
 8001fa4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fa6:	4b2a      	ldr	r3, [pc, #168]	@ (8002050 <MX_GPIO_Init+0x108>)
 8001fa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001faa:	f003 0301 	and.w	r3, r3, #1
 8001fae:	60bb      	str	r3, [r7, #8]
 8001fb0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	607b      	str	r3, [r7, #4]
 8001fb6:	4b26      	ldr	r3, [pc, #152]	@ (8002050 <MX_GPIO_Init+0x108>)
 8001fb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fba:	4a25      	ldr	r2, [pc, #148]	@ (8002050 <MX_GPIO_Init+0x108>)
 8001fbc:	f043 0302 	orr.w	r3, r3, #2
 8001fc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fc2:	4b23      	ldr	r3, [pc, #140]	@ (8002050 <MX_GPIO_Init+0x108>)
 8001fc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fc6:	f003 0302 	and.w	r3, r3, #2
 8001fca:	607b      	str	r3, [r7, #4]
 8001fcc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(in3_GPIO_Port, in3_Pin, GPIO_PIN_RESET);
 8001fce:	2200      	movs	r2, #0
 8001fd0:	2180      	movs	r1, #128	@ 0x80
 8001fd2:	4820      	ldr	r0, [pc, #128]	@ (8002054 <MX_GPIO_Init+0x10c>)
 8001fd4:	f002 f846 	bl	8004064 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, in1_Pin|in2_Pin|in4_Pin, GPIO_PIN_RESET);
 8001fd8:	2200      	movs	r2, #0
 8001fda:	2158      	movs	r1, #88	@ 0x58
 8001fdc:	481e      	ldr	r0, [pc, #120]	@ (8002058 <MX_GPIO_Init+0x110>)
 8001fde:	f002 f841 	bl	8004064 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : button_Pin */
  GPIO_InitStruct.Pin = button_Pin;
 8001fe2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001fe6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001fe8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001fec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(button_GPIO_Port, &GPIO_InitStruct);
 8001ff2:	f107 0314 	add.w	r3, r7, #20
 8001ff6:	4619      	mov	r1, r3
 8001ff8:	4816      	ldr	r0, [pc, #88]	@ (8002054 <MX_GPIO_Init+0x10c>)
 8001ffa:	f001 feaf 	bl	8003d5c <HAL_GPIO_Init>

  /*Configure GPIO pin : in3_Pin */
  GPIO_InitStruct.Pin = in3_Pin;
 8001ffe:	2380      	movs	r3, #128	@ 0x80
 8002000:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002002:	2301      	movs	r3, #1
 8002004:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002006:	2300      	movs	r3, #0
 8002008:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800200a:	2300      	movs	r3, #0
 800200c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(in3_GPIO_Port, &GPIO_InitStruct);
 800200e:	f107 0314 	add.w	r3, r7, #20
 8002012:	4619      	mov	r1, r3
 8002014:	480f      	ldr	r0, [pc, #60]	@ (8002054 <MX_GPIO_Init+0x10c>)
 8002016:	f001 fea1 	bl	8003d5c <HAL_GPIO_Init>

  /*Configure GPIO pins : in1_Pin in2_Pin in4_Pin */
  GPIO_InitStruct.Pin = in1_Pin|in2_Pin|in4_Pin;
 800201a:	2358      	movs	r3, #88	@ 0x58
 800201c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800201e:	2301      	movs	r3, #1
 8002020:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002022:	2300      	movs	r3, #0
 8002024:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002026:	2300      	movs	r3, #0
 8002028:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800202a:	f107 0314 	add.w	r3, r7, #20
 800202e:	4619      	mov	r1, r3
 8002030:	4809      	ldr	r0, [pc, #36]	@ (8002058 <MX_GPIO_Init+0x110>)
 8002032:	f001 fe93 	bl	8003d5c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002036:	2200      	movs	r2, #0
 8002038:	2100      	movs	r1, #0
 800203a:	2028      	movs	r0, #40	@ 0x28
 800203c:	f001 fa77 	bl	800352e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002040:	2028      	movs	r0, #40	@ 0x28
 8002042:	f001 fa90 	bl	8003566 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002046:	bf00      	nop
 8002048:	3728      	adds	r7, #40	@ 0x28
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	40023800 	.word	0x40023800
 8002054:	40020800 	.word	0x40020800
 8002058:	40020400 	.word	0x40020400

0800205c <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len){
 800205c:	b580      	push	{r7, lr}
 800205e:	b086      	sub	sp, #24
 8002060:	af00      	add	r7, sp, #0
 8002062:	60f8      	str	r0, [r7, #12]
 8002064:	60b9      	str	r1, [r7, #8]
 8002066:	607a      	str	r2, [r7, #4]
	int DataIdx;
	for (DataIdx = 0; DataIdx  < len; DataIdx++){
 8002068:	2300      	movs	r3, #0
 800206a:	617b      	str	r3, [r7, #20]
 800206c:	e009      	b.n	8002082 <_write+0x26>
		ITM_SendChar(*ptr++);
 800206e:	68bb      	ldr	r3, [r7, #8]
 8002070:	1c5a      	adds	r2, r3, #1
 8002072:	60ba      	str	r2, [r7, #8]
 8002074:	781b      	ldrb	r3, [r3, #0]
 8002076:	4618      	mov	r0, r3
 8002078:	f7ff f8ca 	bl	8001210 <ITM_SendChar>
	for (DataIdx = 0; DataIdx  < len; DataIdx++){
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	3301      	adds	r3, #1
 8002080:	617b      	str	r3, [r7, #20]
 8002082:	697a      	ldr	r2, [r7, #20]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	429a      	cmp	r2, r3
 8002088:	dbf1      	blt.n	800206e <_write+0x12>

	}
	return len;
 800208a:	687b      	ldr	r3, [r7, #4]
}
 800208c:	4618      	mov	r0, r3
 800208e:	3718      	adds	r7, #24
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}

08002094 <HAL_I2S_RxCpltCallback>:

void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s){
 8002094:	b480      	push	{r7}
 8002096:	b083      	sub	sp, #12
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
    if (hi2s->Instance == SPI1) {         // Mic 1 (I2S3)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a1e      	ldr	r2, [pc, #120]	@ (800211c <HAL_I2S_RxCpltCallback+0x88>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d103      	bne.n	80020ae <HAL_I2S_RxCpltCallback+0x1a>
    	half_mic1 = 1;
 80020a6:	4b1e      	ldr	r3, [pc, #120]	@ (8002120 <HAL_I2S_RxCpltCallback+0x8c>)
 80020a8:	2201      	movs	r2, #1
 80020aa:	701a      	strb	r2, [r3, #0]
 80020ac:	e019      	b.n	80020e2 <HAL_I2S_RxCpltCallback+0x4e>
    } else if (hi2s->Instance == SPI2) {  // Mic 2 (I2S2)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4a1c      	ldr	r2, [pc, #112]	@ (8002124 <HAL_I2S_RxCpltCallback+0x90>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d103      	bne.n	80020c0 <HAL_I2S_RxCpltCallback+0x2c>
    	half_mic2 = 1;
 80020b8:	4b1b      	ldr	r3, [pc, #108]	@ (8002128 <HAL_I2S_RxCpltCallback+0x94>)
 80020ba:	2201      	movs	r2, #1
 80020bc:	701a      	strb	r2, [r3, #0]
 80020be:	e010      	b.n	80020e2 <HAL_I2S_RxCpltCallback+0x4e>
    } else if (hi2s->Instance == SPI3) {  // Mic 3 (I2S4)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a19      	ldr	r2, [pc, #100]	@ (800212c <HAL_I2S_RxCpltCallback+0x98>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d103      	bne.n	80020d2 <HAL_I2S_RxCpltCallback+0x3e>
    	half_mic3 = 1;
 80020ca:	4b19      	ldr	r3, [pc, #100]	@ (8002130 <HAL_I2S_RxCpltCallback+0x9c>)
 80020cc:	2201      	movs	r2, #1
 80020ce:	701a      	strb	r2, [r3, #0]
 80020d0:	e007      	b.n	80020e2 <HAL_I2S_RxCpltCallback+0x4e>
    } else if (hi2s->Instance == SPI4) {  // Mic 4 (I2S5)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4a17      	ldr	r2, [pc, #92]	@ (8002134 <HAL_I2S_RxCpltCallback+0xa0>)
 80020d8:	4293      	cmp	r3, r2
 80020da:	d102      	bne.n	80020e2 <HAL_I2S_RxCpltCallback+0x4e>
    	half_mic4 = 1;
 80020dc:	4b16      	ldr	r3, [pc, #88]	@ (8002138 <HAL_I2S_RxCpltCallback+0xa4>)
 80020de:	2201      	movs	r2, #1
 80020e0:	701a      	strb	r2, [r3, #0]
    }

    // When all mics have completed half-buffer
    if (half_mic1 && half_mic2 && half_mic3 && half_mic4) {
 80020e2:	4b0f      	ldr	r3, [pc, #60]	@ (8002120 <HAL_I2S_RxCpltCallback+0x8c>)
 80020e4:	781b      	ldrb	r3, [r3, #0]
 80020e6:	b2db      	uxtb	r3, r3
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d011      	beq.n	8002110 <HAL_I2S_RxCpltCallback+0x7c>
 80020ec:	4b0e      	ldr	r3, [pc, #56]	@ (8002128 <HAL_I2S_RxCpltCallback+0x94>)
 80020ee:	781b      	ldrb	r3, [r3, #0]
 80020f0:	b2db      	uxtb	r3, r3
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d00c      	beq.n	8002110 <HAL_I2S_RxCpltCallback+0x7c>
 80020f6:	4b0e      	ldr	r3, [pc, #56]	@ (8002130 <HAL_I2S_RxCpltCallback+0x9c>)
 80020f8:	781b      	ldrb	r3, [r3, #0]
 80020fa:	b2db      	uxtb	r3, r3
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d007      	beq.n	8002110 <HAL_I2S_RxCpltCallback+0x7c>
 8002100:	4b0d      	ldr	r3, [pc, #52]	@ (8002138 <HAL_I2S_RxCpltCallback+0xa4>)
 8002102:	781b      	ldrb	r3, [r3, #0]
 8002104:	b2db      	uxtb	r3, r3
 8002106:	2b00      	cmp	r3, #0
 8002108:	d002      	beq.n	8002110 <HAL_I2S_RxCpltCallback+0x7c>
    	half_all = 1;
 800210a:	4b0c      	ldr	r3, [pc, #48]	@ (800213c <HAL_I2S_RxCpltCallback+0xa8>)
 800210c:	2201      	movs	r2, #1
 800210e:	701a      	strb	r2, [r3, #0]
    }
}
 8002110:	bf00      	nop
 8002112:	370c      	adds	r7, #12
 8002114:	46bd      	mov	sp, r7
 8002116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211a:	4770      	bx	lr
 800211c:	40013000 	.word	0x40013000
 8002120:	20012598 	.word	0x20012598
 8002124:	40003800 	.word	0x40003800
 8002128:	2001259a 	.word	0x2001259a
 800212c:	40003c00 	.word	0x40003c00
 8002130:	2001259c 	.word	0x2001259c
 8002134:	40013400 	.word	0x40013400
 8002138:	2001259e 	.word	0x2001259e
 800213c:	200125a0 	.word	0x200125a0

08002140 <HAL_I2S_RxHalfCpltCallback>:

void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s){
 8002140:	b480      	push	{r7}
 8002142:	b083      	sub	sp, #12
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
    if (hi2s->Instance == SPI1) {         // Mic 1 (I2S3)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a1e      	ldr	r2, [pc, #120]	@ (80021c8 <HAL_I2S_RxHalfCpltCallback+0x88>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d103      	bne.n	800215a <HAL_I2S_RxHalfCpltCallback+0x1a>
    	full_mic1 = 1;
 8002152:	4b1e      	ldr	r3, [pc, #120]	@ (80021cc <HAL_I2S_RxHalfCpltCallback+0x8c>)
 8002154:	2201      	movs	r2, #1
 8002156:	701a      	strb	r2, [r3, #0]
 8002158:	e019      	b.n	800218e <HAL_I2S_RxHalfCpltCallback+0x4e>
    } else if (hi2s->Instance == SPI2) {  // Mic 2 (I2S2)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a1c      	ldr	r2, [pc, #112]	@ (80021d0 <HAL_I2S_RxHalfCpltCallback+0x90>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d103      	bne.n	800216c <HAL_I2S_RxHalfCpltCallback+0x2c>
    	full_mic2 = 1;
 8002164:	4b1b      	ldr	r3, [pc, #108]	@ (80021d4 <HAL_I2S_RxHalfCpltCallback+0x94>)
 8002166:	2201      	movs	r2, #1
 8002168:	701a      	strb	r2, [r3, #0]
 800216a:	e010      	b.n	800218e <HAL_I2S_RxHalfCpltCallback+0x4e>
    } else if (hi2s->Instance == SPI3) {  // Mic 3 (I2S4)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a19      	ldr	r2, [pc, #100]	@ (80021d8 <HAL_I2S_RxHalfCpltCallback+0x98>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d103      	bne.n	800217e <HAL_I2S_RxHalfCpltCallback+0x3e>
    	full_mic3 = 1;
 8002176:	4b19      	ldr	r3, [pc, #100]	@ (80021dc <HAL_I2S_RxHalfCpltCallback+0x9c>)
 8002178:	2201      	movs	r2, #1
 800217a:	701a      	strb	r2, [r3, #0]
 800217c:	e007      	b.n	800218e <HAL_I2S_RxHalfCpltCallback+0x4e>
    } else if (hi2s->Instance == SPI4) {  // Mic 4 (I2S5)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4a17      	ldr	r2, [pc, #92]	@ (80021e0 <HAL_I2S_RxHalfCpltCallback+0xa0>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d102      	bne.n	800218e <HAL_I2S_RxHalfCpltCallback+0x4e>
    	full_mic4 = 1;
 8002188:	4b16      	ldr	r3, [pc, #88]	@ (80021e4 <HAL_I2S_RxHalfCpltCallback+0xa4>)
 800218a:	2201      	movs	r2, #1
 800218c:	701a      	strb	r2, [r3, #0]
    }

    // When all mics have completed full-buffer
    if (full_mic1 && full_mic2 && full_mic3 && full_mic4) {
 800218e:	4b0f      	ldr	r3, [pc, #60]	@ (80021cc <HAL_I2S_RxHalfCpltCallback+0x8c>)
 8002190:	781b      	ldrb	r3, [r3, #0]
 8002192:	b2db      	uxtb	r3, r3
 8002194:	2b00      	cmp	r3, #0
 8002196:	d011      	beq.n	80021bc <HAL_I2S_RxHalfCpltCallback+0x7c>
 8002198:	4b0e      	ldr	r3, [pc, #56]	@ (80021d4 <HAL_I2S_RxHalfCpltCallback+0x94>)
 800219a:	781b      	ldrb	r3, [r3, #0]
 800219c:	b2db      	uxtb	r3, r3
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d00c      	beq.n	80021bc <HAL_I2S_RxHalfCpltCallback+0x7c>
 80021a2:	4b0e      	ldr	r3, [pc, #56]	@ (80021dc <HAL_I2S_RxHalfCpltCallback+0x9c>)
 80021a4:	781b      	ldrb	r3, [r3, #0]
 80021a6:	b2db      	uxtb	r3, r3
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d007      	beq.n	80021bc <HAL_I2S_RxHalfCpltCallback+0x7c>
 80021ac:	4b0d      	ldr	r3, [pc, #52]	@ (80021e4 <HAL_I2S_RxHalfCpltCallback+0xa4>)
 80021ae:	781b      	ldrb	r3, [r3, #0]
 80021b0:	b2db      	uxtb	r3, r3
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d002      	beq.n	80021bc <HAL_I2S_RxHalfCpltCallback+0x7c>
    	full_all = 1;
 80021b6:	4b0c      	ldr	r3, [pc, #48]	@ (80021e8 <HAL_I2S_RxHalfCpltCallback+0xa8>)
 80021b8:	2201      	movs	r2, #1
 80021ba:	701a      	strb	r2, [r3, #0]
    }
}
 80021bc:	bf00      	nop
 80021be:	370c      	adds	r7, #12
 80021c0:	46bd      	mov	sp, r7
 80021c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c6:	4770      	bx	lr
 80021c8:	40013000 	.word	0x40013000
 80021cc:	20012599 	.word	0x20012599
 80021d0:	40003800 	.word	0x40003800
 80021d4:	2001259b 	.word	0x2001259b
 80021d8:	40003c00 	.word	0x40003c00
 80021dc:	2001259d 	.word	0x2001259d
 80021e0:	40013400 	.word	0x40013400
 80021e4:	2001259f 	.word	0x2001259f
 80021e8:	200125a1 	.word	0x200125a1

080021ec <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80021ec:	b480      	push	{r7}
 80021ee:	b083      	sub	sp, #12
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	4603      	mov	r3, r0
 80021f4:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == button_Pin){
 80021f6:	88fb      	ldrh	r3, [r7, #6]
 80021f8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80021fc:	d102      	bne.n	8002204 <HAL_GPIO_EXTI_Callback+0x18>
		button_flag = 1;
 80021fe:	4b04      	ldr	r3, [pc, #16]	@ (8002210 <HAL_GPIO_EXTI_Callback+0x24>)
 8002200:	2201      	movs	r2, #1
 8002202:	701a      	strb	r2, [r3, #0]
	}
}
 8002204:	bf00      	nop
 8002206:	370c      	adds	r7, #12
 8002208:	46bd      	mov	sp, r7
 800220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220e:	4770      	bx	lr
 8002210:	20012594 	.word	0x20012594

08002214 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002214:	b480      	push	{r7}
 8002216:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002218:	b672      	cpsid	i
}
 800221a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800221c:	bf00      	nop
 800221e:	e7fd      	b.n	800221c <Error_Handler+0x8>

08002220 <myprintf>:
#include <stdarg.h>
#include "stm32f4xx_hal.h"
#include <stdio.h>

extern UART_HandleTypeDef huart2;
void myprintf(const char *fmt, ...) {
 8002220:	b40f      	push	{r0, r1, r2, r3}
 8002222:	b580      	push	{r7, lr}
 8002224:	b082      	sub	sp, #8
 8002226:	af00      	add	r7, sp, #0
    static char buffer[256];
    va_list args;
    va_start(args, fmt);
 8002228:	f107 0314 	add.w	r3, r7, #20
 800222c:	603b      	str	r3, [r7, #0]
    vsnprintf(buffer, sizeof(buffer), fmt, args);
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	693a      	ldr	r2, [r7, #16]
 8002232:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002236:	480b      	ldr	r0, [pc, #44]	@ (8002264 <myprintf+0x44>)
 8002238:	f007 fbb4 	bl	80099a4 <vsniprintf>
    va_end(args);

    int len = strlen(buffer);
 800223c:	4809      	ldr	r0, [pc, #36]	@ (8002264 <myprintf+0x44>)
 800223e:	f7fe f81f 	bl	8000280 <strlen>
 8002242:	4603      	mov	r3, r0
 8002244:	607b      	str	r3, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*)buffer, len, HAL_MAX_DELAY);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	b29a      	uxth	r2, r3
 800224a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800224e:	4905      	ldr	r1, [pc, #20]	@ (8002264 <myprintf+0x44>)
 8002250:	4805      	ldr	r0, [pc, #20]	@ (8002268 <myprintf+0x48>)
 8002252:	f004 f82f 	bl	80062b4 <HAL_UART_Transmit>
}
 8002256:	bf00      	nop
 8002258:	3708      	adds	r7, #8
 800225a:	46bd      	mov	sp, r7
 800225c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002260:	b004      	add	sp, #16
 8002262:	4770      	bx	lr
 8002264:	200125a8 	.word	0x200125a8
 8002268:	200044dc 	.word	0x200044dc
 800226c:	00000000 	.word	0x00000000

08002270 <preprocessing_init>:
		 -0.00124511, -0.00181273, -0.00199172, -0.00183171, -0.00145850,
		 -0.00099502
};

 //Init FIR filter and precomputes hamming window
 void preprocessing_init(void){
 8002270:	b580      	push	{r7, lr}
 8002272:	b084      	sub	sp, #16
 8002274:	af02      	add	r7, sp, #8
 	//init fir filter
 	arm_fir_init_f32(&bandpass_filter, NUM_TAPS, (float32_t*)fir_coeffs, fir_state, PREPROCESSING_FRAME_SIZE);
 8002276:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800227a:	9300      	str	r3, [sp, #0]
 800227c:	4b24      	ldr	r3, [pc, #144]	@ (8002310 <preprocessing_init+0xa0>)
 800227e:	4a25      	ldr	r2, [pc, #148]	@ (8002314 <preprocessing_init+0xa4>)
 8002280:	2140      	movs	r1, #64	@ 0x40
 8002282:	4825      	ldr	r0, [pc, #148]	@ (8002318 <preprocessing_init+0xa8>)
 8002284:	f005 f9a0 	bl	80075c8 <arm_fir_init_f32>

 	//generate hAMMING WINDOW
 	for (int i = 0; i < PREPROCESSING_FRAME_SIZE; i++){
 8002288:	2300      	movs	r3, #0
 800228a:	607b      	str	r3, [r7, #4]
 800228c:	e02e      	b.n	80022ec <preprocessing_init+0x7c>
 		hamming_window[i] = 0.54f - 0.46f * cosf(2.0f * M_PI * i/(PREPROCESSING_FRAME_SIZE -1));
 800228e:	6878      	ldr	r0, [r7, #4]
 8002290:	f7fe f950 	bl	8000534 <__aeabi_i2d>
 8002294:	a31a      	add	r3, pc, #104	@ (adr r3, 8002300 <preprocessing_init+0x90>)
 8002296:	e9d3 2300 	ldrd	r2, r3, [r3]
 800229a:	f7fe f9b5 	bl	8000608 <__aeabi_dmul>
 800229e:	4602      	mov	r2, r0
 80022a0:	460b      	mov	r3, r1
 80022a2:	4610      	mov	r0, r2
 80022a4:	4619      	mov	r1, r3
 80022a6:	a318      	add	r3, pc, #96	@ (adr r3, 8002308 <preprocessing_init+0x98>)
 80022a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022ac:	f7fe fad6 	bl	800085c <__aeabi_ddiv>
 80022b0:	4602      	mov	r2, r0
 80022b2:	460b      	mov	r3, r1
 80022b4:	4610      	mov	r0, r2
 80022b6:	4619      	mov	r1, r3
 80022b8:	f7fe fc7e 	bl	8000bb8 <__aeabi_d2f>
 80022bc:	4603      	mov	r3, r0
 80022be:	ee00 3a10 	vmov	s0, r3
 80022c2:	f006 f877 	bl	80083b4 <cosf>
 80022c6:	eef0 7a40 	vmov.f32	s15, s0
 80022ca:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 800231c <preprocessing_init+0xac>
 80022ce:	ee67 7a87 	vmul.f32	s15, s15, s14
 80022d2:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 8002320 <preprocessing_init+0xb0>
 80022d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022da:	4a12      	ldr	r2, [pc, #72]	@ (8002324 <preprocessing_init+0xb4>)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	009b      	lsls	r3, r3, #2
 80022e0:	4413      	add	r3, r2
 80022e2:	edc3 7a00 	vstr	s15, [r3]
 	for (int i = 0; i < PREPROCESSING_FRAME_SIZE; i++){
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	3301      	adds	r3, #1
 80022ea:	607b      	str	r3, [r7, #4]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80022f2:	dbcc      	blt.n	800228e <preprocessing_init+0x1e>

 	}

 }
 80022f4:	bf00      	nop
 80022f6:	bf00      	nop
 80022f8:	3708      	adds	r7, #8
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	54442d18 	.word	0x54442d18
 8002304:	401921fb 	.word	0x401921fb
 8002308:	00000000 	.word	0x00000000
 800230c:	408ff800 	.word	0x408ff800
 8002310:	200126b4 	.word	0x200126b4
 8002314:	0800bca0 	.word	0x0800bca0
 8002318:	200126a8 	.word	0x200126a8
 800231c:	3eeb851f 	.word	0x3eeb851f
 8002320:	3f0a3d71 	.word	0x3f0a3d71
 8002324:	200137b0 	.word	0x200137b0

08002328 <apply_bandpass_filter>:
 		buffer[i] *= hamming_window[i];
 	}
 }

 //apply bandpass FIR filter
 void apply_bandpass_filter(float32_t* input, float32_t* output){
 8002328:	b580      	push	{r7, lr}
 800232a:	b082      	sub	sp, #8
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
 8002330:	6039      	str	r1, [r7, #0]
 	arm_fir_f32(&bandpass_filter, input,output, PREPROCESSING_FRAME_SIZE);
 8002332:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002336:	683a      	ldr	r2, [r7, #0]
 8002338:	6879      	ldr	r1, [r7, #4]
 800233a:	4803      	ldr	r0, [pc, #12]	@ (8002348 <apply_bandpass_filter+0x20>)
 800233c:	f005 f952 	bl	80075e4 <arm_fir_f32>
 }
 8002340:	bf00      	nop
 8002342:	3708      	adds	r7, #8
 8002344:	46bd      	mov	sp, r7
 8002346:	bd80      	pop	{r7, pc}
 8002348:	200126a8 	.word	0x200126a8

0800234c <prepare_frame>:

 //mic_samples: raw input
 //output_frame: result after bandpass and window
 void prepare_frame(float32_t* mic_samples, float32_t* output_frame){
 800234c:	b580      	push	{r7, lr}
 800234e:	f5ad 5d80 	sub.w	sp, sp, #4096	@ 0x1000
 8002352:	b084      	sub	sp, #16
 8002354:	af00      	add	r7, sp, #0
 8002356:	f107 0310 	add.w	r3, r7, #16
 800235a:	f843 0c0c 	str.w	r0, [r3, #-12]
 800235e:	f107 0310 	add.w	r3, r7, #16
 8002362:	f843 1c10 	str.w	r1, [r3, #-16]
 	float32_t filtered[PREPROCESSING_FRAME_SIZE];
 	//bandpass filter
 	apply_bandpass_filter(mic_samples, filtered);
 8002366:	f107 0310 	add.w	r3, r7, #16
 800236a:	3b04      	subs	r3, #4
 800236c:	f107 0210 	add.w	r2, r7, #16
 8002370:	4619      	mov	r1, r3
 8002372:	f852 0c0c 	ldr.w	r0, [r2, #-12]
 8002376:	f7ff ffd7 	bl	8002328 <apply_bandpass_filter>
 	//apply hamming window
 	for (int i = 0; i < PREPROCESSING_FRAME_SIZE;i++){
 800237a:	2300      	movs	r3, #0
 800237c:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 8002380:	f102 020c 	add.w	r2, r2, #12
 8002384:	6013      	str	r3, [r2, #0]
 8002386:	e030      	b.n	80023ea <prepare_frame+0x9e>
 		output_frame[i] = filtered[i] * hamming_window[i];
 8002388:	f107 0310 	add.w	r3, r7, #16
 800238c:	461a      	mov	r2, r3
 800238e:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8002392:	f103 030c 	add.w	r3, r3, #12
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	009b      	lsls	r3, r3, #2
 800239a:	4413      	add	r3, r2
 800239c:	3b04      	subs	r3, #4
 800239e:	ed93 7a00 	vldr	s14, [r3]
 80023a2:	4a19      	ldr	r2, [pc, #100]	@ (8002408 <prepare_frame+0xbc>)
 80023a4:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 80023a8:	f103 030c 	add.w	r3, r3, #12
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	009b      	lsls	r3, r3, #2
 80023b0:	4413      	add	r3, r2
 80023b2:	edd3 7a00 	vldr	s15, [r3]
 80023b6:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 80023ba:	f103 030c 	add.w	r3, r3, #12
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	009b      	lsls	r3, r3, #2
 80023c2:	f107 0210 	add.w	r2, r7, #16
 80023c6:	f852 2c10 	ldr.w	r2, [r2, #-16]
 80023ca:	4413      	add	r3, r2
 80023cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023d0:	edc3 7a00 	vstr	s15, [r3]
 	for (int i = 0; i < PREPROCESSING_FRAME_SIZE;i++){
 80023d4:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 80023d8:	f103 030c 	add.w	r3, r3, #12
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	3301      	adds	r3, #1
 80023e0:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 80023e4:	f102 020c 	add.w	r2, r2, #12
 80023e8:	6013      	str	r3, [r2, #0]
 80023ea:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 80023ee:	f103 030c 	add.w	r3, r3, #12
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80023f8:	dbc6      	blt.n	8002388 <prepare_frame+0x3c>
 	}

 }
 80023fa:	bf00      	nop
 80023fc:	bf00      	nop
 80023fe:	f507 5780 	add.w	r7, r7, #4096	@ 0x1000
 8002402:	3710      	adds	r7, #16
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}
 8002408:	200137b0 	.word	0x200137b0

0800240c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b082      	sub	sp, #8
 8002410:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002412:	2300      	movs	r3, #0
 8002414:	607b      	str	r3, [r7, #4]
 8002416:	4b10      	ldr	r3, [pc, #64]	@ (8002458 <HAL_MspInit+0x4c>)
 8002418:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800241a:	4a0f      	ldr	r2, [pc, #60]	@ (8002458 <HAL_MspInit+0x4c>)
 800241c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002420:	6453      	str	r3, [r2, #68]	@ 0x44
 8002422:	4b0d      	ldr	r3, [pc, #52]	@ (8002458 <HAL_MspInit+0x4c>)
 8002424:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002426:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800242a:	607b      	str	r3, [r7, #4]
 800242c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800242e:	2300      	movs	r3, #0
 8002430:	603b      	str	r3, [r7, #0]
 8002432:	4b09      	ldr	r3, [pc, #36]	@ (8002458 <HAL_MspInit+0x4c>)
 8002434:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002436:	4a08      	ldr	r2, [pc, #32]	@ (8002458 <HAL_MspInit+0x4c>)
 8002438:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800243c:	6413      	str	r3, [r2, #64]	@ 0x40
 800243e:	4b06      	ldr	r3, [pc, #24]	@ (8002458 <HAL_MspInit+0x4c>)
 8002440:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002442:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002446:	603b      	str	r3, [r7, #0]
 8002448:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800244a:	2007      	movs	r0, #7
 800244c:	f001 f864 	bl	8003518 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002450:	bf00      	nop
 8002452:	3708      	adds	r7, #8
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}
 8002458:	40023800 	.word	0x40023800

0800245c <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b092      	sub	sp, #72	@ 0x48
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002464:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002468:	2200      	movs	r2, #0
 800246a:	601a      	str	r2, [r3, #0]
 800246c:	605a      	str	r2, [r3, #4]
 800246e:	609a      	str	r2, [r3, #8]
 8002470:	60da      	str	r2, [r3, #12]
 8002472:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI1)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a71      	ldr	r2, [pc, #452]	@ (8002640 <HAL_I2S_MspInit+0x1e4>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d15d      	bne.n	800253a <HAL_I2S_MspInit+0xde>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800247e:	2300      	movs	r3, #0
 8002480:	633b      	str	r3, [r7, #48]	@ 0x30
 8002482:	4b70      	ldr	r3, [pc, #448]	@ (8002644 <HAL_I2S_MspInit+0x1e8>)
 8002484:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002486:	4a6f      	ldr	r2, [pc, #444]	@ (8002644 <HAL_I2S_MspInit+0x1e8>)
 8002488:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800248c:	6453      	str	r3, [r2, #68]	@ 0x44
 800248e:	4b6d      	ldr	r3, [pc, #436]	@ (8002644 <HAL_I2S_MspInit+0x1e8>)
 8002490:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002492:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002496:	633b      	str	r3, [r7, #48]	@ 0x30
 8002498:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800249a:	2300      	movs	r3, #0
 800249c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800249e:	4b69      	ldr	r3, [pc, #420]	@ (8002644 <HAL_I2S_MspInit+0x1e8>)
 80024a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024a2:	4a68      	ldr	r2, [pc, #416]	@ (8002644 <HAL_I2S_MspInit+0x1e8>)
 80024a4:	f043 0301 	orr.w	r3, r3, #1
 80024a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80024aa:	4b66      	ldr	r3, [pc, #408]	@ (8002644 <HAL_I2S_MspInit+0x1e8>)
 80024ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024ae:	f003 0301 	and.w	r3, r3, #1
 80024b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80024b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    /**I2S1 GPIO Configuration
    PA4     ------> I2S1_WS
    PA5     ------> I2S1_CK
    PA7     ------> I2S1_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 80024b6:	23b0      	movs	r3, #176	@ 0xb0
 80024b8:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024ba:	2302      	movs	r3, #2
 80024bc:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024be:	2300      	movs	r3, #0
 80024c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024c2:	2300      	movs	r3, #0
 80024c4:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80024c6:	2305      	movs	r3, #5
 80024c8:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024ca:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80024ce:	4619      	mov	r1, r3
 80024d0:	485d      	ldr	r0, [pc, #372]	@ (8002648 <HAL_I2S_MspInit+0x1ec>)
 80024d2:	f001 fc43 	bl	8003d5c <HAL_GPIO_Init>

    /* I2S1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 80024d6:	4b5d      	ldr	r3, [pc, #372]	@ (800264c <HAL_I2S_MspInit+0x1f0>)
 80024d8:	4a5d      	ldr	r2, [pc, #372]	@ (8002650 <HAL_I2S_MspInit+0x1f4>)
 80024da:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 80024dc:	4b5b      	ldr	r3, [pc, #364]	@ (800264c <HAL_I2S_MspInit+0x1f0>)
 80024de:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 80024e2:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80024e4:	4b59      	ldr	r3, [pc, #356]	@ (800264c <HAL_I2S_MspInit+0x1f0>)
 80024e6:	2200      	movs	r2, #0
 80024e8:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80024ea:	4b58      	ldr	r3, [pc, #352]	@ (800264c <HAL_I2S_MspInit+0x1f0>)
 80024ec:	2200      	movs	r2, #0
 80024ee:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80024f0:	4b56      	ldr	r3, [pc, #344]	@ (800264c <HAL_I2S_MspInit+0x1f0>)
 80024f2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80024f6:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80024f8:	4b54      	ldr	r3, [pc, #336]	@ (800264c <HAL_I2S_MspInit+0x1f0>)
 80024fa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80024fe:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002500:	4b52      	ldr	r3, [pc, #328]	@ (800264c <HAL_I2S_MspInit+0x1f0>)
 8002502:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002506:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
 8002508:	4b50      	ldr	r3, [pc, #320]	@ (800264c <HAL_I2S_MspInit+0x1f0>)
 800250a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800250e:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002510:	4b4e      	ldr	r3, [pc, #312]	@ (800264c <HAL_I2S_MspInit+0x1f0>)
 8002512:	2200      	movs	r2, #0
 8002514:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002516:	4b4d      	ldr	r3, [pc, #308]	@ (800264c <HAL_I2S_MspInit+0x1f0>)
 8002518:	2200      	movs	r2, #0
 800251a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 800251c:	484b      	ldr	r0, [pc, #300]	@ (800264c <HAL_I2S_MspInit+0x1f0>)
 800251e:	f001 f83d 	bl	800359c <HAL_DMA_Init>
 8002522:	4603      	mov	r3, r0
 8002524:	2b00      	cmp	r3, #0
 8002526:	d001      	beq.n	800252c <HAL_I2S_MspInit+0xd0>
    {
      Error_Handler();
 8002528:	f7ff fe74 	bl	8002214 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmarx,hdma_spi1_rx);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	4a47      	ldr	r2, [pc, #284]	@ (800264c <HAL_I2S_MspInit+0x1f0>)
 8002530:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002532:	4a46      	ldr	r2, [pc, #280]	@ (800264c <HAL_I2S_MspInit+0x1f0>)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 8002538:	e199      	b.n	800286e <HAL_I2S_MspInit+0x412>
  else if(hi2s->Instance==SPI2)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a45      	ldr	r2, [pc, #276]	@ (8002654 <HAL_I2S_MspInit+0x1f8>)
 8002540:	4293      	cmp	r3, r2
 8002542:	f040 8091 	bne.w	8002668 <HAL_I2S_MspInit+0x20c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002546:	2300      	movs	r3, #0
 8002548:	62bb      	str	r3, [r7, #40]	@ 0x28
 800254a:	4b3e      	ldr	r3, [pc, #248]	@ (8002644 <HAL_I2S_MspInit+0x1e8>)
 800254c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800254e:	4a3d      	ldr	r2, [pc, #244]	@ (8002644 <HAL_I2S_MspInit+0x1e8>)
 8002550:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002554:	6413      	str	r3, [r2, #64]	@ 0x40
 8002556:	4b3b      	ldr	r3, [pc, #236]	@ (8002644 <HAL_I2S_MspInit+0x1e8>)
 8002558:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800255a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800255e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002560:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002562:	2300      	movs	r3, #0
 8002564:	627b      	str	r3, [r7, #36]	@ 0x24
 8002566:	4b37      	ldr	r3, [pc, #220]	@ (8002644 <HAL_I2S_MspInit+0x1e8>)
 8002568:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800256a:	4a36      	ldr	r2, [pc, #216]	@ (8002644 <HAL_I2S_MspInit+0x1e8>)
 800256c:	f043 0304 	orr.w	r3, r3, #4
 8002570:	6313      	str	r3, [r2, #48]	@ 0x30
 8002572:	4b34      	ldr	r3, [pc, #208]	@ (8002644 <HAL_I2S_MspInit+0x1e8>)
 8002574:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002576:	f003 0304 	and.w	r3, r3, #4
 800257a:	627b      	str	r3, [r7, #36]	@ 0x24
 800257c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800257e:	2300      	movs	r3, #0
 8002580:	623b      	str	r3, [r7, #32]
 8002582:	4b30      	ldr	r3, [pc, #192]	@ (8002644 <HAL_I2S_MspInit+0x1e8>)
 8002584:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002586:	4a2f      	ldr	r2, [pc, #188]	@ (8002644 <HAL_I2S_MspInit+0x1e8>)
 8002588:	f043 0302 	orr.w	r3, r3, #2
 800258c:	6313      	str	r3, [r2, #48]	@ 0x30
 800258e:	4b2d      	ldr	r3, [pc, #180]	@ (8002644 <HAL_I2S_MspInit+0x1e8>)
 8002590:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002592:	f003 0302 	and.w	r3, r3, #2
 8002596:	623b      	str	r3, [r7, #32]
 8002598:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800259a:	2308      	movs	r3, #8
 800259c:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800259e:	2302      	movs	r3, #2
 80025a0:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025a2:	2300      	movs	r3, #0
 80025a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025a6:	2300      	movs	r3, #0
 80025a8:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80025aa:	2305      	movs	r3, #5
 80025ac:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025ae:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80025b2:	4619      	mov	r1, r3
 80025b4:	4828      	ldr	r0, [pc, #160]	@ (8002658 <HAL_I2S_MspInit+0x1fc>)
 80025b6:	f001 fbd1 	bl	8003d5c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 80025ba:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80025be:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025c0:	2302      	movs	r3, #2
 80025c2:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025c4:	2300      	movs	r3, #0
 80025c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025c8:	2300      	movs	r3, #0
 80025ca:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80025cc:	2305      	movs	r3, #5
 80025ce:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025d0:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80025d4:	4619      	mov	r1, r3
 80025d6:	4821      	ldr	r0, [pc, #132]	@ (800265c <HAL_I2S_MspInit+0x200>)
 80025d8:	f001 fbc0 	bl	8003d5c <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream3;
 80025dc:	4b20      	ldr	r3, [pc, #128]	@ (8002660 <HAL_I2S_MspInit+0x204>)
 80025de:	4a21      	ldr	r2, [pc, #132]	@ (8002664 <HAL_I2S_MspInit+0x208>)
 80025e0:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 80025e2:	4b1f      	ldr	r3, [pc, #124]	@ (8002660 <HAL_I2S_MspInit+0x204>)
 80025e4:	2200      	movs	r2, #0
 80025e6:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80025e8:	4b1d      	ldr	r3, [pc, #116]	@ (8002660 <HAL_I2S_MspInit+0x204>)
 80025ea:	2200      	movs	r2, #0
 80025ec:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80025ee:	4b1c      	ldr	r3, [pc, #112]	@ (8002660 <HAL_I2S_MspInit+0x204>)
 80025f0:	2200      	movs	r2, #0
 80025f2:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80025f4:	4b1a      	ldr	r3, [pc, #104]	@ (8002660 <HAL_I2S_MspInit+0x204>)
 80025f6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80025fa:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80025fc:	4b18      	ldr	r3, [pc, #96]	@ (8002660 <HAL_I2S_MspInit+0x204>)
 80025fe:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002602:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002604:	4b16      	ldr	r3, [pc, #88]	@ (8002660 <HAL_I2S_MspInit+0x204>)
 8002606:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800260a:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 800260c:	4b14      	ldr	r3, [pc, #80]	@ (8002660 <HAL_I2S_MspInit+0x204>)
 800260e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002612:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002614:	4b12      	ldr	r3, [pc, #72]	@ (8002660 <HAL_I2S_MspInit+0x204>)
 8002616:	2200      	movs	r2, #0
 8002618:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800261a:	4b11      	ldr	r3, [pc, #68]	@ (8002660 <HAL_I2S_MspInit+0x204>)
 800261c:	2200      	movs	r2, #0
 800261e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8002620:	480f      	ldr	r0, [pc, #60]	@ (8002660 <HAL_I2S_MspInit+0x204>)
 8002622:	f000 ffbb 	bl	800359c <HAL_DMA_Init>
 8002626:	4603      	mov	r3, r0
 8002628:	2b00      	cmp	r3, #0
 800262a:	d001      	beq.n	8002630 <HAL_I2S_MspInit+0x1d4>
      Error_Handler();
 800262c:	f7ff fdf2 	bl	8002214 <Error_Handler>
    __HAL_LINKDMA(hi2s,hdmarx,hdma_spi2_rx);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	4a0b      	ldr	r2, [pc, #44]	@ (8002660 <HAL_I2S_MspInit+0x204>)
 8002634:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002636:	4a0a      	ldr	r2, [pc, #40]	@ (8002660 <HAL_I2S_MspInit+0x204>)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6393      	str	r3, [r2, #56]	@ 0x38
}
 800263c:	e117      	b.n	800286e <HAL_I2S_MspInit+0x412>
 800263e:	bf00      	nop
 8002640:	40013000 	.word	0x40013000
 8002644:	40023800 	.word	0x40023800
 8002648:	40020000 	.word	0x40020000
 800264c:	20004314 	.word	0x20004314
 8002650:	40026410 	.word	0x40026410
 8002654:	40003800 	.word	0x40003800
 8002658:	40020800 	.word	0x40020800
 800265c:	40020400 	.word	0x40020400
 8002660:	20004374 	.word	0x20004374
 8002664:	40026058 	.word	0x40026058
  else if(hi2s->Instance==SPI3)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a82      	ldr	r2, [pc, #520]	@ (8002878 <HAL_I2S_MspInit+0x41c>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d17c      	bne.n	800276c <HAL_I2S_MspInit+0x310>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002672:	2300      	movs	r3, #0
 8002674:	61fb      	str	r3, [r7, #28]
 8002676:	4b81      	ldr	r3, [pc, #516]	@ (800287c <HAL_I2S_MspInit+0x420>)
 8002678:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800267a:	4a80      	ldr	r2, [pc, #512]	@ (800287c <HAL_I2S_MspInit+0x420>)
 800267c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002680:	6413      	str	r3, [r2, #64]	@ 0x40
 8002682:	4b7e      	ldr	r3, [pc, #504]	@ (800287c <HAL_I2S_MspInit+0x420>)
 8002684:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002686:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800268a:	61fb      	str	r3, [r7, #28]
 800268c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800268e:	2300      	movs	r3, #0
 8002690:	61bb      	str	r3, [r7, #24]
 8002692:	4b7a      	ldr	r3, [pc, #488]	@ (800287c <HAL_I2S_MspInit+0x420>)
 8002694:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002696:	4a79      	ldr	r2, [pc, #484]	@ (800287c <HAL_I2S_MspInit+0x420>)
 8002698:	f043 0301 	orr.w	r3, r3, #1
 800269c:	6313      	str	r3, [r2, #48]	@ 0x30
 800269e:	4b77      	ldr	r3, [pc, #476]	@ (800287c <HAL_I2S_MspInit+0x420>)
 80026a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026a2:	f003 0301 	and.w	r3, r3, #1
 80026a6:	61bb      	str	r3, [r7, #24]
 80026a8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80026aa:	2300      	movs	r3, #0
 80026ac:	617b      	str	r3, [r7, #20]
 80026ae:	4b73      	ldr	r3, [pc, #460]	@ (800287c <HAL_I2S_MspInit+0x420>)
 80026b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026b2:	4a72      	ldr	r2, [pc, #456]	@ (800287c <HAL_I2S_MspInit+0x420>)
 80026b4:	f043 0304 	orr.w	r3, r3, #4
 80026b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80026ba:	4b70      	ldr	r3, [pc, #448]	@ (800287c <HAL_I2S_MspInit+0x420>)
 80026bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026be:	f003 0304 	and.w	r3, r3, #4
 80026c2:	617b      	str	r3, [r7, #20]
 80026c4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80026c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80026ca:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026cc:	2302      	movs	r3, #2
 80026ce:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026d0:	2300      	movs	r3, #0
 80026d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026d4:	2300      	movs	r3, #0
 80026d6:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80026d8:	2306      	movs	r3, #6
 80026da:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026dc:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80026e0:	4619      	mov	r1, r3
 80026e2:	4867      	ldr	r0, [pc, #412]	@ (8002880 <HAL_I2S_MspInit+0x424>)
 80026e4:	f001 fb3a 	bl	8003d5c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 80026e8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80026ec:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026ee:	2302      	movs	r3, #2
 80026f0:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026f2:	2300      	movs	r3, #0
 80026f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026f6:	2300      	movs	r3, #0
 80026f8:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80026fa:	2306      	movs	r3, #6
 80026fc:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026fe:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002702:	4619      	mov	r1, r3
 8002704:	485f      	ldr	r0, [pc, #380]	@ (8002884 <HAL_I2S_MspInit+0x428>)
 8002706:	f001 fb29 	bl	8003d5c <HAL_GPIO_Init>
    hdma_spi3_rx.Instance = DMA1_Stream0;
 800270a:	4b5f      	ldr	r3, [pc, #380]	@ (8002888 <HAL_I2S_MspInit+0x42c>)
 800270c:	4a5f      	ldr	r2, [pc, #380]	@ (800288c <HAL_I2S_MspInit+0x430>)
 800270e:	601a      	str	r2, [r3, #0]
    hdma_spi3_rx.Init.Channel = DMA_CHANNEL_0;
 8002710:	4b5d      	ldr	r3, [pc, #372]	@ (8002888 <HAL_I2S_MspInit+0x42c>)
 8002712:	2200      	movs	r2, #0
 8002714:	605a      	str	r2, [r3, #4]
    hdma_spi3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002716:	4b5c      	ldr	r3, [pc, #368]	@ (8002888 <HAL_I2S_MspInit+0x42c>)
 8002718:	2200      	movs	r2, #0
 800271a:	609a      	str	r2, [r3, #8]
    hdma_spi3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800271c:	4b5a      	ldr	r3, [pc, #360]	@ (8002888 <HAL_I2S_MspInit+0x42c>)
 800271e:	2200      	movs	r2, #0
 8002720:	60da      	str	r2, [r3, #12]
    hdma_spi3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002722:	4b59      	ldr	r3, [pc, #356]	@ (8002888 <HAL_I2S_MspInit+0x42c>)
 8002724:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002728:	611a      	str	r2, [r3, #16]
    hdma_spi3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800272a:	4b57      	ldr	r3, [pc, #348]	@ (8002888 <HAL_I2S_MspInit+0x42c>)
 800272c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002730:	615a      	str	r2, [r3, #20]
    hdma_spi3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002732:	4b55      	ldr	r3, [pc, #340]	@ (8002888 <HAL_I2S_MspInit+0x42c>)
 8002734:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002738:	619a      	str	r2, [r3, #24]
    hdma_spi3_rx.Init.Mode = DMA_CIRCULAR;
 800273a:	4b53      	ldr	r3, [pc, #332]	@ (8002888 <HAL_I2S_MspInit+0x42c>)
 800273c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002740:	61da      	str	r2, [r3, #28]
    hdma_spi3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002742:	4b51      	ldr	r3, [pc, #324]	@ (8002888 <HAL_I2S_MspInit+0x42c>)
 8002744:	2200      	movs	r2, #0
 8002746:	621a      	str	r2, [r3, #32]
    hdma_spi3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002748:	4b4f      	ldr	r3, [pc, #316]	@ (8002888 <HAL_I2S_MspInit+0x42c>)
 800274a:	2200      	movs	r2, #0
 800274c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi3_rx) != HAL_OK)
 800274e:	484e      	ldr	r0, [pc, #312]	@ (8002888 <HAL_I2S_MspInit+0x42c>)
 8002750:	f000 ff24 	bl	800359c <HAL_DMA_Init>
 8002754:	4603      	mov	r3, r0
 8002756:	2b00      	cmp	r3, #0
 8002758:	d001      	beq.n	800275e <HAL_I2S_MspInit+0x302>
      Error_Handler();
 800275a:	f7ff fd5b 	bl	8002214 <Error_Handler>
    __HAL_LINKDMA(hi2s,hdmarx,hdma_spi3_rx);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	4a49      	ldr	r2, [pc, #292]	@ (8002888 <HAL_I2S_MspInit+0x42c>)
 8002762:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002764:	4a48      	ldr	r2, [pc, #288]	@ (8002888 <HAL_I2S_MspInit+0x42c>)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6393      	str	r3, [r2, #56]	@ 0x38
}
 800276a:	e080      	b.n	800286e <HAL_I2S_MspInit+0x412>
  else if(hi2s->Instance==SPI4)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a47      	ldr	r2, [pc, #284]	@ (8002890 <HAL_I2S_MspInit+0x434>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d17b      	bne.n	800286e <HAL_I2S_MspInit+0x412>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8002776:	2300      	movs	r3, #0
 8002778:	613b      	str	r3, [r7, #16]
 800277a:	4b40      	ldr	r3, [pc, #256]	@ (800287c <HAL_I2S_MspInit+0x420>)
 800277c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800277e:	4a3f      	ldr	r2, [pc, #252]	@ (800287c <HAL_I2S_MspInit+0x420>)
 8002780:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002784:	6453      	str	r3, [r2, #68]	@ 0x44
 8002786:	4b3d      	ldr	r3, [pc, #244]	@ (800287c <HAL_I2S_MspInit+0x420>)
 8002788:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800278a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800278e:	613b      	str	r3, [r7, #16]
 8002790:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002792:	2300      	movs	r3, #0
 8002794:	60fb      	str	r3, [r7, #12]
 8002796:	4b39      	ldr	r3, [pc, #228]	@ (800287c <HAL_I2S_MspInit+0x420>)
 8002798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800279a:	4a38      	ldr	r2, [pc, #224]	@ (800287c <HAL_I2S_MspInit+0x420>)
 800279c:	f043 0301 	orr.w	r3, r3, #1
 80027a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80027a2:	4b36      	ldr	r3, [pc, #216]	@ (800287c <HAL_I2S_MspInit+0x420>)
 80027a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027a6:	f003 0301 	and.w	r3, r3, #1
 80027aa:	60fb      	str	r3, [r7, #12]
 80027ac:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027ae:	2300      	movs	r3, #0
 80027b0:	60bb      	str	r3, [r7, #8]
 80027b2:	4b32      	ldr	r3, [pc, #200]	@ (800287c <HAL_I2S_MspInit+0x420>)
 80027b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027b6:	4a31      	ldr	r2, [pc, #196]	@ (800287c <HAL_I2S_MspInit+0x420>)
 80027b8:	f043 0302 	orr.w	r3, r3, #2
 80027bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80027be:	4b2f      	ldr	r3, [pc, #188]	@ (800287c <HAL_I2S_MspInit+0x420>)
 80027c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027c2:	f003 0302 	and.w	r3, r3, #2
 80027c6:	60bb      	str	r3, [r7, #8]
 80027c8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80027ca:	2302      	movs	r3, #2
 80027cc:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027ce:	2302      	movs	r3, #2
 80027d0:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027d2:	2300      	movs	r3, #0
 80027d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027d6:	2300      	movs	r3, #0
 80027d8:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80027da:	2305      	movs	r3, #5
 80027dc:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027de:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80027e2:	4619      	mov	r1, r3
 80027e4:	4826      	ldr	r0, [pc, #152]	@ (8002880 <HAL_I2S_MspInit+0x424>)
 80027e6:	f001 fab9 	bl	8003d5c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80027ea:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80027ee:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027f0:	2302      	movs	r3, #2
 80027f2:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027f4:	2300      	movs	r3, #0
 80027f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027f8:	2300      	movs	r3, #0
 80027fa:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI4;
 80027fc:	2306      	movs	r3, #6
 80027fe:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002800:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002804:	4619      	mov	r1, r3
 8002806:	4823      	ldr	r0, [pc, #140]	@ (8002894 <HAL_I2S_MspInit+0x438>)
 8002808:	f001 faa8 	bl	8003d5c <HAL_GPIO_Init>
    hdma_spi4_rx.Instance = DMA2_Stream3;
 800280c:	4b22      	ldr	r3, [pc, #136]	@ (8002898 <HAL_I2S_MspInit+0x43c>)
 800280e:	4a23      	ldr	r2, [pc, #140]	@ (800289c <HAL_I2S_MspInit+0x440>)
 8002810:	601a      	str	r2, [r3, #0]
    hdma_spi4_rx.Init.Channel = DMA_CHANNEL_5;
 8002812:	4b21      	ldr	r3, [pc, #132]	@ (8002898 <HAL_I2S_MspInit+0x43c>)
 8002814:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8002818:	605a      	str	r2, [r3, #4]
    hdma_spi4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800281a:	4b1f      	ldr	r3, [pc, #124]	@ (8002898 <HAL_I2S_MspInit+0x43c>)
 800281c:	2200      	movs	r2, #0
 800281e:	609a      	str	r2, [r3, #8]
    hdma_spi4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002820:	4b1d      	ldr	r3, [pc, #116]	@ (8002898 <HAL_I2S_MspInit+0x43c>)
 8002822:	2200      	movs	r2, #0
 8002824:	60da      	str	r2, [r3, #12]
    hdma_spi4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002826:	4b1c      	ldr	r3, [pc, #112]	@ (8002898 <HAL_I2S_MspInit+0x43c>)
 8002828:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800282c:	611a      	str	r2, [r3, #16]
    hdma_spi4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800282e:	4b1a      	ldr	r3, [pc, #104]	@ (8002898 <HAL_I2S_MspInit+0x43c>)
 8002830:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002834:	615a      	str	r2, [r3, #20]
    hdma_spi4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002836:	4b18      	ldr	r3, [pc, #96]	@ (8002898 <HAL_I2S_MspInit+0x43c>)
 8002838:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800283c:	619a      	str	r2, [r3, #24]
    hdma_spi4_rx.Init.Mode = DMA_CIRCULAR;
 800283e:	4b16      	ldr	r3, [pc, #88]	@ (8002898 <HAL_I2S_MspInit+0x43c>)
 8002840:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002844:	61da      	str	r2, [r3, #28]
    hdma_spi4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002846:	4b14      	ldr	r3, [pc, #80]	@ (8002898 <HAL_I2S_MspInit+0x43c>)
 8002848:	2200      	movs	r2, #0
 800284a:	621a      	str	r2, [r3, #32]
    hdma_spi4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800284c:	4b12      	ldr	r3, [pc, #72]	@ (8002898 <HAL_I2S_MspInit+0x43c>)
 800284e:	2200      	movs	r2, #0
 8002850:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi4_rx) != HAL_OK)
 8002852:	4811      	ldr	r0, [pc, #68]	@ (8002898 <HAL_I2S_MspInit+0x43c>)
 8002854:	f000 fea2 	bl	800359c <HAL_DMA_Init>
 8002858:	4603      	mov	r3, r0
 800285a:	2b00      	cmp	r3, #0
 800285c:	d001      	beq.n	8002862 <HAL_I2S_MspInit+0x406>
      Error_Handler();
 800285e:	f7ff fcd9 	bl	8002214 <Error_Handler>
    __HAL_LINKDMA(hi2s,hdmarx,hdma_spi4_rx);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	4a0c      	ldr	r2, [pc, #48]	@ (8002898 <HAL_I2S_MspInit+0x43c>)
 8002866:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002868:	4a0b      	ldr	r2, [pc, #44]	@ (8002898 <HAL_I2S_MspInit+0x43c>)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6393      	str	r3, [r2, #56]	@ 0x38
}
 800286e:	bf00      	nop
 8002870:	3748      	adds	r7, #72	@ 0x48
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}
 8002876:	bf00      	nop
 8002878:	40003c00 	.word	0x40003c00
 800287c:	40023800 	.word	0x40023800
 8002880:	40020000 	.word	0x40020000
 8002884:	40020800 	.word	0x40020800
 8002888:	200043d4 	.word	0x200043d4
 800288c:	40026010 	.word	0x40026010
 8002890:	40013400 	.word	0x40013400
 8002894:	40020400 	.word	0x40020400
 8002898:	20004434 	.word	0x20004434
 800289c:	40026458 	.word	0x40026458

080028a0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80028a0:	b480      	push	{r7}
 80028a2:	b085      	sub	sp, #20
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a0b      	ldr	r2, [pc, #44]	@ (80028dc <HAL_TIM_Base_MspInit+0x3c>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d10d      	bne.n	80028ce <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80028b2:	2300      	movs	r3, #0
 80028b4:	60fb      	str	r3, [r7, #12]
 80028b6:	4b0a      	ldr	r3, [pc, #40]	@ (80028e0 <HAL_TIM_Base_MspInit+0x40>)
 80028b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028ba:	4a09      	ldr	r2, [pc, #36]	@ (80028e0 <HAL_TIM_Base_MspInit+0x40>)
 80028bc:	f043 0301 	orr.w	r3, r3, #1
 80028c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80028c2:	4b07      	ldr	r3, [pc, #28]	@ (80028e0 <HAL_TIM_Base_MspInit+0x40>)
 80028c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028c6:	f003 0301 	and.w	r3, r3, #1
 80028ca:	60fb      	str	r3, [r7, #12]
 80028cc:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 80028ce:	bf00      	nop
 80028d0:	3714      	adds	r7, #20
 80028d2:	46bd      	mov	sp, r7
 80028d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d8:	4770      	bx	lr
 80028da:	bf00      	nop
 80028dc:	40010000 	.word	0x40010000
 80028e0:	40023800 	.word	0x40023800

080028e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b08c      	sub	sp, #48	@ 0x30
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028ec:	f107 031c 	add.w	r3, r7, #28
 80028f0:	2200      	movs	r2, #0
 80028f2:	601a      	str	r2, [r3, #0]
 80028f4:	605a      	str	r2, [r3, #4]
 80028f6:	609a      	str	r2, [r3, #8]
 80028f8:	60da      	str	r2, [r3, #12]
 80028fa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a41      	ldr	r2, [pc, #260]	@ (8002a08 <HAL_UART_MspInit+0x124>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d12c      	bne.n	8002960 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002906:	2300      	movs	r3, #0
 8002908:	61bb      	str	r3, [r7, #24]
 800290a:	4b40      	ldr	r3, [pc, #256]	@ (8002a0c <HAL_UART_MspInit+0x128>)
 800290c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800290e:	4a3f      	ldr	r2, [pc, #252]	@ (8002a0c <HAL_UART_MspInit+0x128>)
 8002910:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002914:	6413      	str	r3, [r2, #64]	@ 0x40
 8002916:	4b3d      	ldr	r3, [pc, #244]	@ (8002a0c <HAL_UART_MspInit+0x128>)
 8002918:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800291a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800291e:	61bb      	str	r3, [r7, #24]
 8002920:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002922:	2300      	movs	r3, #0
 8002924:	617b      	str	r3, [r7, #20]
 8002926:	4b39      	ldr	r3, [pc, #228]	@ (8002a0c <HAL_UART_MspInit+0x128>)
 8002928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800292a:	4a38      	ldr	r2, [pc, #224]	@ (8002a0c <HAL_UART_MspInit+0x128>)
 800292c:	f043 0301 	orr.w	r3, r3, #1
 8002930:	6313      	str	r3, [r2, #48]	@ 0x30
 8002932:	4b36      	ldr	r3, [pc, #216]	@ (8002a0c <HAL_UART_MspInit+0x128>)
 8002934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002936:	f003 0301 	and.w	r3, r3, #1
 800293a:	617b      	str	r3, [r7, #20]
 800293c:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800293e:	230c      	movs	r3, #12
 8002940:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002942:	2302      	movs	r3, #2
 8002944:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002946:	2300      	movs	r3, #0
 8002948:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800294a:	2303      	movs	r3, #3
 800294c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800294e:	2307      	movs	r3, #7
 8002950:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002952:	f107 031c 	add.w	r3, r7, #28
 8002956:	4619      	mov	r1, r3
 8002958:	482d      	ldr	r0, [pc, #180]	@ (8002a10 <HAL_UART_MspInit+0x12c>)
 800295a:	f001 f9ff 	bl	8003d5c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800295e:	e04f      	b.n	8002a00 <HAL_UART_MspInit+0x11c>
  else if(huart->Instance==USART6)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a2b      	ldr	r2, [pc, #172]	@ (8002a14 <HAL_UART_MspInit+0x130>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d14a      	bne.n	8002a00 <HAL_UART_MspInit+0x11c>
    __HAL_RCC_USART6_CLK_ENABLE();
 800296a:	2300      	movs	r3, #0
 800296c:	613b      	str	r3, [r7, #16]
 800296e:	4b27      	ldr	r3, [pc, #156]	@ (8002a0c <HAL_UART_MspInit+0x128>)
 8002970:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002972:	4a26      	ldr	r2, [pc, #152]	@ (8002a0c <HAL_UART_MspInit+0x128>)
 8002974:	f043 0320 	orr.w	r3, r3, #32
 8002978:	6453      	str	r3, [r2, #68]	@ 0x44
 800297a:	4b24      	ldr	r3, [pc, #144]	@ (8002a0c <HAL_UART_MspInit+0x128>)
 800297c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800297e:	f003 0320 	and.w	r3, r3, #32
 8002982:	613b      	str	r3, [r7, #16]
 8002984:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002986:	2300      	movs	r3, #0
 8002988:	60fb      	str	r3, [r7, #12]
 800298a:	4b20      	ldr	r3, [pc, #128]	@ (8002a0c <HAL_UART_MspInit+0x128>)
 800298c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800298e:	4a1f      	ldr	r2, [pc, #124]	@ (8002a0c <HAL_UART_MspInit+0x128>)
 8002990:	f043 0304 	orr.w	r3, r3, #4
 8002994:	6313      	str	r3, [r2, #48]	@ 0x30
 8002996:	4b1d      	ldr	r3, [pc, #116]	@ (8002a0c <HAL_UART_MspInit+0x128>)
 8002998:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800299a:	f003 0304 	and.w	r3, r3, #4
 800299e:	60fb      	str	r3, [r7, #12]
 80029a0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029a2:	2300      	movs	r3, #0
 80029a4:	60bb      	str	r3, [r7, #8]
 80029a6:	4b19      	ldr	r3, [pc, #100]	@ (8002a0c <HAL_UART_MspInit+0x128>)
 80029a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029aa:	4a18      	ldr	r2, [pc, #96]	@ (8002a0c <HAL_UART_MspInit+0x128>)
 80029ac:	f043 0301 	orr.w	r3, r3, #1
 80029b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80029b2:	4b16      	ldr	r3, [pc, #88]	@ (8002a0c <HAL_UART_MspInit+0x128>)
 80029b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029b6:	f003 0301 	and.w	r3, r3, #1
 80029ba:	60bb      	str	r3, [r7, #8]
 80029bc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80029be:	2340      	movs	r3, #64	@ 0x40
 80029c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029c2:	2302      	movs	r3, #2
 80029c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029c6:	2300      	movs	r3, #0
 80029c8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029ca:	2303      	movs	r3, #3
 80029cc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80029ce:	2308      	movs	r3, #8
 80029d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029d2:	f107 031c 	add.w	r3, r7, #28
 80029d6:	4619      	mov	r1, r3
 80029d8:	480f      	ldr	r0, [pc, #60]	@ (8002a18 <HAL_UART_MspInit+0x134>)
 80029da:	f001 f9bf 	bl	8003d5c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80029de:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80029e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029e4:	2302      	movs	r3, #2
 80029e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029e8:	2300      	movs	r3, #0
 80029ea:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029ec:	2303      	movs	r3, #3
 80029ee:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80029f0:	2308      	movs	r3, #8
 80029f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029f4:	f107 031c 	add.w	r3, r7, #28
 80029f8:	4619      	mov	r1, r3
 80029fa:	4805      	ldr	r0, [pc, #20]	@ (8002a10 <HAL_UART_MspInit+0x12c>)
 80029fc:	f001 f9ae 	bl	8003d5c <HAL_GPIO_Init>
}
 8002a00:	bf00      	nop
 8002a02:	3730      	adds	r7, #48	@ 0x30
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bd80      	pop	{r7, pc}
 8002a08:	40004400 	.word	0x40004400
 8002a0c:	40023800 	.word	0x40023800
 8002a10:	40020000 	.word	0x40020000
 8002a14:	40011400 	.word	0x40011400
 8002a18:	40020800 	.word	0x40020800

08002a1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002a20:	bf00      	nop
 8002a22:	e7fd      	b.n	8002a20 <NMI_Handler+0x4>

08002a24 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a24:	b480      	push	{r7}
 8002a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a28:	bf00      	nop
 8002a2a:	e7fd      	b.n	8002a28 <HardFault_Handler+0x4>

08002a2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a30:	bf00      	nop
 8002a32:	e7fd      	b.n	8002a30 <MemManage_Handler+0x4>

08002a34 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a34:	b480      	push	{r7}
 8002a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a38:	bf00      	nop
 8002a3a:	e7fd      	b.n	8002a38 <BusFault_Handler+0x4>

08002a3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a40:	bf00      	nop
 8002a42:	e7fd      	b.n	8002a40 <UsageFault_Handler+0x4>

08002a44 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002a44:	b480      	push	{r7}
 8002a46:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002a48:	bf00      	nop
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a50:	4770      	bx	lr

08002a52 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a52:	b480      	push	{r7}
 8002a54:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a56:	bf00      	nop
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5e:	4770      	bx	lr

08002a60 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002a60:	b480      	push	{r7}
 8002a62:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a64:	bf00      	nop
 8002a66:	46bd      	mov	sp, r7
 8002a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6c:	4770      	bx	lr

08002a6e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a6e:	b580      	push	{r7, lr}
 8002a70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a72:	f000 fc3d 	bl	80032f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a76:	bf00      	nop
 8002a78:	bd80      	pop	{r7, pc}
	...

08002a7c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_rx);
 8002a80:	4802      	ldr	r0, [pc, #8]	@ (8002a8c <DMA1_Stream0_IRQHandler+0x10>)
 8002a82:	f000 ff01 	bl	8003888 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002a86:	bf00      	nop
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	bf00      	nop
 8002a8c:	200043d4 	.word	0x200043d4

08002a90 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8002a94:	4802      	ldr	r0, [pc, #8]	@ (8002aa0 <DMA1_Stream3_IRQHandler+0x10>)
 8002a96:	f000 fef7 	bl	8003888 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8002a9a:	bf00      	nop
 8002a9c:	bd80      	pop	{r7, pc}
 8002a9e:	bf00      	nop
 8002aa0:	20004374 	.word	0x20004374

08002aa4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(button_Pin);
 8002aa8:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002aac:	f001 faf4 	bl	8004098 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002ab0:	bf00      	nop
 8002ab2:	bd80      	pop	{r7, pc}

08002ab4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8002ab8:	4802      	ldr	r0, [pc, #8]	@ (8002ac4 <DMA2_Stream0_IRQHandler+0x10>)
 8002aba:	f000 fee5 	bl	8003888 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002abe:	bf00      	nop
 8002ac0:	bd80      	pop	{r7, pc}
 8002ac2:	bf00      	nop
 8002ac4:	20004314 	.word	0x20004314

08002ac8 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_rx);
 8002acc:	4802      	ldr	r0, [pc, #8]	@ (8002ad8 <DMA2_Stream3_IRQHandler+0x10>)
 8002ace:	f000 fedb 	bl	8003888 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8002ad2:	bf00      	nop
 8002ad4:	bd80      	pop	{r7, pc}
 8002ad6:	bf00      	nop
 8002ad8:	20004434 	.word	0x20004434

08002adc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002adc:	b480      	push	{r7}
 8002ade:	af00      	add	r7, sp, #0
  return 1;
 8002ae0:	2301      	movs	r3, #1
}
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aea:	4770      	bx	lr

08002aec <_kill>:

int _kill(int pid, int sig)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b082      	sub	sp, #8
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
 8002af4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002af6:	f006 ff6f 	bl	80099d8 <__errno>
 8002afa:	4603      	mov	r3, r0
 8002afc:	2216      	movs	r2, #22
 8002afe:	601a      	str	r2, [r3, #0]
  return -1;
 8002b00:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	3708      	adds	r7, #8
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}

08002b0c <_exit>:

void _exit (int status)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b082      	sub	sp, #8
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002b14:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002b18:	6878      	ldr	r0, [r7, #4]
 8002b1a:	f7ff ffe7 	bl	8002aec <_kill>
  while (1) {}    /* Make sure we hang here */
 8002b1e:	bf00      	nop
 8002b20:	e7fd      	b.n	8002b1e <_exit+0x12>

08002b22 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002b22:	b580      	push	{r7, lr}
 8002b24:	b086      	sub	sp, #24
 8002b26:	af00      	add	r7, sp, #0
 8002b28:	60f8      	str	r0, [r7, #12]
 8002b2a:	60b9      	str	r1, [r7, #8]
 8002b2c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b2e:	2300      	movs	r3, #0
 8002b30:	617b      	str	r3, [r7, #20]
 8002b32:	e00a      	b.n	8002b4a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002b34:	f3af 8000 	nop.w
 8002b38:	4601      	mov	r1, r0
 8002b3a:	68bb      	ldr	r3, [r7, #8]
 8002b3c:	1c5a      	adds	r2, r3, #1
 8002b3e:	60ba      	str	r2, [r7, #8]
 8002b40:	b2ca      	uxtb	r2, r1
 8002b42:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b44:	697b      	ldr	r3, [r7, #20]
 8002b46:	3301      	adds	r3, #1
 8002b48:	617b      	str	r3, [r7, #20]
 8002b4a:	697a      	ldr	r2, [r7, #20]
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	429a      	cmp	r2, r3
 8002b50:	dbf0      	blt.n	8002b34 <_read+0x12>
  }

  return len;
 8002b52:	687b      	ldr	r3, [r7, #4]
}
 8002b54:	4618      	mov	r0, r3
 8002b56:	3718      	adds	r7, #24
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bd80      	pop	{r7, pc}

08002b5c <_close>:
  }
  return len;
}

int _close(int file)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	b083      	sub	sp, #12
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002b64:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	370c      	adds	r7, #12
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b72:	4770      	bx	lr

08002b74 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b083      	sub	sp, #12
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
 8002b7c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002b84:	605a      	str	r2, [r3, #4]
  return 0;
 8002b86:	2300      	movs	r3, #0
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	370c      	adds	r7, #12
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b92:	4770      	bx	lr

08002b94 <_isatty>:

int _isatty(int file)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b083      	sub	sp, #12
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002b9c:	2301      	movs	r3, #1
}
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	370c      	adds	r7, #12
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba8:	4770      	bx	lr

08002baa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002baa:	b480      	push	{r7}
 8002bac:	b085      	sub	sp, #20
 8002bae:	af00      	add	r7, sp, #0
 8002bb0:	60f8      	str	r0, [r7, #12]
 8002bb2:	60b9      	str	r1, [r7, #8]
 8002bb4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002bb6:	2300      	movs	r3, #0
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	3714      	adds	r7, #20
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc2:	4770      	bx	lr

08002bc4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b086      	sub	sp, #24
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002bcc:	4a14      	ldr	r2, [pc, #80]	@ (8002c20 <_sbrk+0x5c>)
 8002bce:	4b15      	ldr	r3, [pc, #84]	@ (8002c24 <_sbrk+0x60>)
 8002bd0:	1ad3      	subs	r3, r2, r3
 8002bd2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002bd8:	4b13      	ldr	r3, [pc, #76]	@ (8002c28 <_sbrk+0x64>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d102      	bne.n	8002be6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002be0:	4b11      	ldr	r3, [pc, #68]	@ (8002c28 <_sbrk+0x64>)
 8002be2:	4a12      	ldr	r2, [pc, #72]	@ (8002c2c <_sbrk+0x68>)
 8002be4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002be6:	4b10      	ldr	r3, [pc, #64]	@ (8002c28 <_sbrk+0x64>)
 8002be8:	681a      	ldr	r2, [r3, #0]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	4413      	add	r3, r2
 8002bee:	693a      	ldr	r2, [r7, #16]
 8002bf0:	429a      	cmp	r2, r3
 8002bf2:	d207      	bcs.n	8002c04 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002bf4:	f006 fef0 	bl	80099d8 <__errno>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	220c      	movs	r2, #12
 8002bfc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002bfe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002c02:	e009      	b.n	8002c18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002c04:	4b08      	ldr	r3, [pc, #32]	@ (8002c28 <_sbrk+0x64>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002c0a:	4b07      	ldr	r3, [pc, #28]	@ (8002c28 <_sbrk+0x64>)
 8002c0c:	681a      	ldr	r2, [r3, #0]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	4413      	add	r3, r2
 8002c12:	4a05      	ldr	r2, [pc, #20]	@ (8002c28 <_sbrk+0x64>)
 8002c14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002c16:	68fb      	ldr	r3, [r7, #12]
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	3718      	adds	r7, #24
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}
 8002c20:	20020000 	.word	0x20020000
 8002c24:	00000400 	.word	0x00000400
 8002c28:	200147b0 	.word	0x200147b0
 8002c2c:	20014918 	.word	0x20014918

08002c30 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002c30:	b480      	push	{r7}
 8002c32:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002c34:	4b06      	ldr	r3, [pc, #24]	@ (8002c50 <SystemInit+0x20>)
 8002c36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c3a:	4a05      	ldr	r2, [pc, #20]	@ (8002c50 <SystemInit+0x20>)
 8002c3c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002c40:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002c44:	bf00      	nop
 8002c46:	46bd      	mov	sp, r7
 8002c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4c:	4770      	bx	lr
 8002c4e:	bf00      	nop
 8002c50:	e000ed00 	.word	0xe000ed00

08002c54 <vad_init>:
static uint8_t noise_estimation_done = 0;
static float32_t noise_energy_average = 0.0f;

extern arm_rfft_fast_instance_f32 fft_audio_instance;

void vad_init(void){
 8002c54:	b480      	push	{r7}
 8002c56:	af00      	add	r7, sp, #0
	noise_energy_accum = 0.0f;
 8002c58:	4b09      	ldr	r3, [pc, #36]	@ (8002c80 <vad_init+0x2c>)
 8002c5a:	f04f 0200 	mov.w	r2, #0
 8002c5e:	601a      	str	r2, [r3, #0]
	noise_frame_count  = 0;
 8002c60:	4b08      	ldr	r3, [pc, #32]	@ (8002c84 <vad_init+0x30>)
 8002c62:	2200      	movs	r2, #0
 8002c64:	601a      	str	r2, [r3, #0]
	noise_estimation_done = 0;
 8002c66:	4b08      	ldr	r3, [pc, #32]	@ (8002c88 <vad_init+0x34>)
 8002c68:	2200      	movs	r2, #0
 8002c6a:	701a      	strb	r2, [r3, #0]
	noise_energy_average = 0.0f;
 8002c6c:	4b07      	ldr	r3, [pc, #28]	@ (8002c8c <vad_init+0x38>)
 8002c6e:	f04f 0200 	mov.w	r2, #0
 8002c72:	601a      	str	r2, [r3, #0]
}
 8002c74:	bf00      	nop
 8002c76:	46bd      	mov	sp, r7
 8002c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7c:	4770      	bx	lr
 8002c7e:	bf00      	nop
 8002c80:	200147b4 	.word	0x200147b4
 8002c84:	200147b8 	.word	0x200147b8
 8002c88:	200147bc 	.word	0x200147bc
 8002c8c:	200147c0 	.word	0x200147c0

08002c90 <vad_reset_noise_estimation>:
void vad_reset_noise_estimation(void){
 8002c90:	b480      	push	{r7}
 8002c92:	af00      	add	r7, sp, #0
    noise_energy_accum = 0.0f;
 8002c94:	4b09      	ldr	r3, [pc, #36]	@ (8002cbc <vad_reset_noise_estimation+0x2c>)
 8002c96:	f04f 0200 	mov.w	r2, #0
 8002c9a:	601a      	str	r2, [r3, #0]
    noise_frame_count  = 0;
 8002c9c:	4b08      	ldr	r3, [pc, #32]	@ (8002cc0 <vad_reset_noise_estimation+0x30>)
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	601a      	str	r2, [r3, #0]
    noise_estimation_done = 0;
 8002ca2:	4b08      	ldr	r3, [pc, #32]	@ (8002cc4 <vad_reset_noise_estimation+0x34>)
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	701a      	strb	r2, [r3, #0]
    noise_energy_average = 0.0f;
 8002ca8:	4b07      	ldr	r3, [pc, #28]	@ (8002cc8 <vad_reset_noise_estimation+0x38>)
 8002caa:	f04f 0200 	mov.w	r2, #0
 8002cae:	601a      	str	r2, [r3, #0]
}
 8002cb0:	bf00      	nop
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb8:	4770      	bx	lr
 8002cba:	bf00      	nop
 8002cbc:	200147b4 	.word	0x200147b4
 8002cc0:	200147b8 	.word	0x200147b8
 8002cc4:	200147bc 	.word	0x200147bc
 8002cc8:	200147c0 	.word	0x200147c0

08002ccc <vad_is_noise_estimation_done>:


uint8_t vad_is_noise_estimation_done(void) {
 8002ccc:	b480      	push	{r7}
 8002cce:	af00      	add	r7, sp, #0
    return noise_estimation_done;
 8002cd0:	4b03      	ldr	r3, [pc, #12]	@ (8002ce0 <vad_is_noise_estimation_done+0x14>)
 8002cd2:	781b      	ldrb	r3, [r3, #0]
}
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cdc:	4770      	bx	lr
 8002cde:	bf00      	nop
 8002ce0:	200147bc 	.word	0x200147bc

08002ce4 <vad_get_noise_energy>:

float32_t vad_get_noise_energy(void) {
 8002ce4:	b480      	push	{r7}
 8002ce6:	af00      	add	r7, sp, #0
    return noise_energy_average;
 8002ce8:	4b04      	ldr	r3, [pc, #16]	@ (8002cfc <vad_get_noise_energy+0x18>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	ee07 3a90 	vmov	s15, r3
}
 8002cf0:	eeb0 0a67 	vmov.f32	s0, s15
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfa:	4770      	bx	lr
 8002cfc:	200147c0 	.word	0x200147c0

08002d00 <vad_update_noise_estimation>:

void vad_update_noise_estimation(float32_t* frame){
 8002d00:	b580      	push	{r7, lr}
 8002d02:	f5ad 5dc0 	sub.w	sp, sp, #6144	@ 0x1800
 8002d06:	b084      	sub	sp, #16
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 8002d0e:	f6a3 030c 	subw	r3, r3, #2060	@ 0x80c
 8002d12:	6018      	str	r0, [r3, #0]
	float32_t fft_output[FFT_LENGTH];
	float32_t magnitude[FFT_LENGTH/2];

	//fft
	arm_rfft_fast_f32(&fft_audio_instance, frame,fft_output,0);
 8002d14:	f507 6201 	add.w	r2, r7, #2064	@ 0x810
 8002d18:	3a08      	subs	r2, #8
 8002d1a:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 8002d1e:	f6a3 010c 	subw	r1, r3, #2060	@ 0x80c
 8002d22:	2300      	movs	r3, #0
 8002d24:	6809      	ldr	r1, [r1, #0]
 8002d26:	4844      	ldr	r0, [pc, #272]	@ (8002e38 <vad_update_noise_estimation+0x138>)
 8002d28:	f004 f872 	bl	8006e10 <arm_rfft_fast_f32>
	arm_cmplx_mag_f32(fft_output, magnitude, FFT_LENGTH/2);
 8002d2c:	f107 0110 	add.w	r1, r7, #16
 8002d30:	3908      	subs	r1, #8
 8002d32:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 8002d36:	3b08      	subs	r3, #8
 8002d38:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f004 fed9 	bl	8007af4 <arm_cmplx_mag_f32>

	//compute energy
	float32_t energy = 0.0f;
 8002d42:	f04f 0300 	mov.w	r3, #0
 8002d46:	f507 52c0 	add.w	r2, r7, #6144	@ 0x1800
 8002d4a:	f102 020c 	add.w	r2, r2, #12
 8002d4e:	6013      	str	r3, [r2, #0]
	for (int i = 0; i < FFT_LENGTH/2; i++){
 8002d50:	2300      	movs	r3, #0
 8002d52:	f507 52c0 	add.w	r2, r7, #6144	@ 0x1800
 8002d56:	f102 0208 	add.w	r2, r2, #8
 8002d5a:	6013      	str	r3, [r2, #0]
 8002d5c:	e034      	b.n	8002dc8 <vad_update_noise_estimation+0xc8>
		energy += magnitude[i] *magnitude[i];
 8002d5e:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 8002d62:	f6a3 0208 	subw	r2, r3, #2056	@ 0x808
 8002d66:	f507 53c0 	add.w	r3, r7, #6144	@ 0x1800
 8002d6a:	f103 0308 	add.w	r3, r3, #8
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	009b      	lsls	r3, r3, #2
 8002d72:	4413      	add	r3, r2
 8002d74:	ed93 7a00 	vldr	s14, [r3]
 8002d78:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 8002d7c:	f6a3 0208 	subw	r2, r3, #2056	@ 0x808
 8002d80:	f507 53c0 	add.w	r3, r7, #6144	@ 0x1800
 8002d84:	f103 0308 	add.w	r3, r3, #8
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	009b      	lsls	r3, r3, #2
 8002d8c:	4413      	add	r3, r2
 8002d8e:	edd3 7a00 	vldr	s15, [r3]
 8002d92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d96:	f507 53c0 	add.w	r3, r7, #6144	@ 0x1800
 8002d9a:	f103 030c 	add.w	r3, r3, #12
 8002d9e:	ed93 7a00 	vldr	s14, [r3]
 8002da2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002da6:	f507 53c0 	add.w	r3, r7, #6144	@ 0x1800
 8002daa:	f103 030c 	add.w	r3, r3, #12
 8002dae:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i < FFT_LENGTH/2; i++){
 8002db2:	f507 53c0 	add.w	r3, r7, #6144	@ 0x1800
 8002db6:	f103 0308 	add.w	r3, r3, #8
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	3301      	adds	r3, #1
 8002dbe:	f507 52c0 	add.w	r2, r7, #6144	@ 0x1800
 8002dc2:	f102 0208 	add.w	r2, r2, #8
 8002dc6:	6013      	str	r3, [r2, #0]
 8002dc8:	f507 53c0 	add.w	r3, r7, #6144	@ 0x1800
 8002dcc:	f103 0308 	add.w	r3, r3, #8
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002dd6:	dbc2      	blt.n	8002d5e <vad_update_noise_estimation+0x5e>
	}

	noise_energy_accum += energy;
 8002dd8:	4b18      	ldr	r3, [pc, #96]	@ (8002e3c <vad_update_noise_estimation+0x13c>)
 8002dda:	ed93 7a00 	vldr	s14, [r3]
 8002dde:	f507 53c0 	add.w	r3, r7, #6144	@ 0x1800
 8002de2:	f103 030c 	add.w	r3, r3, #12
 8002de6:	edd3 7a00 	vldr	s15, [r3]
 8002dea:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002dee:	4b13      	ldr	r3, [pc, #76]	@ (8002e3c <vad_update_noise_estimation+0x13c>)
 8002df0:	edc3 7a00 	vstr	s15, [r3]
	noise_frame_count++;
 8002df4:	4b12      	ldr	r3, [pc, #72]	@ (8002e40 <vad_update_noise_estimation+0x140>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	3301      	adds	r3, #1
 8002dfa:	4a11      	ldr	r2, [pc, #68]	@ (8002e40 <vad_update_noise_estimation+0x140>)
 8002dfc:	6013      	str	r3, [r2, #0]

	if (noise_frame_count >= (SAMPLE_RATE/(FFT_LENGTH/2)) * NOISE_CALIBERATION_TIME_SEC){
 8002dfe:	4b10      	ldr	r3, [pc, #64]	@ (8002e40 <vad_update_noise_estimation+0x140>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f5b3 7f9b 	cmp.w	r3, #310	@ 0x136
 8002e06:	d310      	bcc.n	8002e2a <vad_update_noise_estimation+0x12a>
		noise_energy_average = noise_energy_accum / noise_frame_count;
 8002e08:	4b0c      	ldr	r3, [pc, #48]	@ (8002e3c <vad_update_noise_estimation+0x13c>)
 8002e0a:	edd3 6a00 	vldr	s13, [r3]
 8002e0e:	4b0c      	ldr	r3, [pc, #48]	@ (8002e40 <vad_update_noise_estimation+0x140>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	ee07 3a90 	vmov	s15, r3
 8002e16:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002e1a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002e1e:	4b09      	ldr	r3, [pc, #36]	@ (8002e44 <vad_update_noise_estimation+0x144>)
 8002e20:	edc3 7a00 	vstr	s15, [r3]
		noise_estimation_done = 1;
 8002e24:	4b08      	ldr	r3, [pc, #32]	@ (8002e48 <vad_update_noise_estimation+0x148>)
 8002e26:	2201      	movs	r2, #1
 8002e28:	701a      	strb	r2, [r3, #0]
	}
}
 8002e2a:	bf00      	nop
 8002e2c:	f507 57c0 	add.w	r7, r7, #6144	@ 0x1800
 8002e30:	3710      	adds	r7, #16
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}
 8002e36:	bf00      	nop
 8002e38:	2000456c 	.word	0x2000456c
 8002e3c:	200147b4 	.word	0x200147b4
 8002e40:	200147b8 	.word	0x200147b8
 8002e44:	200147c0 	.word	0x200147c0
 8002e48:	200147bc 	.word	0x200147bc

08002e4c <vad_process_mic_fft>:

VADFrameInfo vad_process_mic_fft(MicFFT* mic,arm_rfft_fast_instance_f32* fft_instance, int offset_samples) {
 8002e4c:	b590      	push	{r4, r7, lr}
 8002e4e:	ed2d 8b02 	vpush	{d8}
 8002e52:	b093      	sub	sp, #76	@ 0x4c
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	60f8      	str	r0, [r7, #12]
 8002e58:	60b9      	str	r1, [r7, #8]
 8002e5a:	607a      	str	r2, [r7, #4]
 8002e5c:	603b      	str	r3, [r7, #0]
    VADFrameInfo info = {0};
 8002e5e:	f107 031c 	add.w	r3, r7, #28
 8002e62:	2200      	movs	r2, #0
 8002e64:	601a      	str	r2, [r3, #0]
 8002e66:	605a      	str	r2, [r3, #4]
 8002e68:	609a      	str	r2, [r3, #8]
 8002e6a:	60da      	str	r2, [r3, #12]

    int16_t* samples = mic->raw_buffer;
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	633b      	str	r3, [r7, #48]	@ 0x30
    int base = offset_samples * 2;
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	005b      	lsls	r3, r3, #1
 8002e76:	62fb      	str	r3, [r7, #44]	@ 0x2c

    // Convert int16 → float
    for (int j = 0; j < PREPROCESSING_FRAME_SIZE; j++) {
 8002e78:	2300      	movs	r3, #0
 8002e7a:	647b      	str	r3, [r7, #68]	@ 0x44
 8002e7c:	e016      	b.n	8002eac <vad_process_mic_fft+0x60>
        mic->fft_input[j] =(float32_t)samples[base + j * 2];
 8002e7e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002e80:	005a      	lsls	r2, r3, #1
 8002e82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e84:	4413      	add	r3, r2
 8002e86:	005b      	lsls	r3, r3, #1
 8002e88:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002e8a:	4413      	add	r3, r2
 8002e8c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e90:	ee07 3a90 	vmov	s15, r3
 8002e94:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002e98:	68ba      	ldr	r2, [r7, #8]
 8002e9a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002e9c:	009b      	lsls	r3, r3, #2
 8002e9e:	4413      	add	r3, r2
 8002ea0:	3304      	adds	r3, #4
 8002ea2:	edc3 7a00 	vstr	s15, [r3]
    for (int j = 0; j < PREPROCESSING_FRAME_SIZE; j++) {
 8002ea6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002ea8:	3301      	adds	r3, #1
 8002eaa:	647b      	str	r3, [r7, #68]	@ 0x44
 8002eac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002eae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002eb2:	dbe4      	blt.n	8002e7e <vad_process_mic_fft+0x32>
    }

    // Preprocessing (bandpass + window)
    prepare_frame(mic->fft_input, mic->fft_input);
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	1d1a      	adds	r2, r3, #4
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	3304      	adds	r3, #4
 8002ebc:	4619      	mov	r1, r3
 8002ebe:	4610      	mov	r0, r2
 8002ec0:	f7ff fa44 	bl	800234c <prepare_frame>
//    for (int i = 0; i < PREPROCESSING_FRAME_SIZE; i++) {
//        mic->fft_input[i] *= gain;
//    }

    // FFT + magnitude
    arm_rfft_fast_f32(fft_instance, mic->fft_input, mic->fft_output, 0);
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	1d19      	adds	r1, r3, #4
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	f503 5280 	add.w	r2, r3, #4096	@ 0x1000
 8002ece:	3204      	adds	r2, #4
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	6878      	ldr	r0, [r7, #4]
 8002ed4:	f003 ff9c 	bl	8006e10 <arm_rfft_fast_f32>
    for (int i = 0; i < FFT_LENGTH / 2; i++) {
 8002ed8:	2300      	movs	r3, #0
 8002eda:	643b      	str	r3, [r7, #64]	@ 0x40
 8002edc:	e025      	b.n	8002f2a <vad_process_mic_fft+0xde>
        mic->fft_complex[i].real = mic->fft_output[2 * i];
 8002ede:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002ee0:	005b      	lsls	r3, r3, #1
 8002ee2:	68ba      	ldr	r2, [r7, #8]
 8002ee4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002ee8:	009b      	lsls	r3, r3, #2
 8002eea:	4413      	add	r3, r2
 8002eec:	3304      	adds	r3, #4
 8002eee:	681a      	ldr	r2, [r3, #0]
 8002ef0:	68b9      	ldr	r1, [r7, #8]
 8002ef2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002ef4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ef8:	00db      	lsls	r3, r3, #3
 8002efa:	440b      	add	r3, r1
 8002efc:	3304      	adds	r3, #4
 8002efe:	601a      	str	r2, [r3, #0]
        mic->fft_complex[i].imag = mic->fft_output[2 * i + 1];
 8002f00:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002f02:	005b      	lsls	r3, r3, #1
 8002f04:	3301      	adds	r3, #1
 8002f06:	68ba      	ldr	r2, [r7, #8]
 8002f08:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002f0c:	009b      	lsls	r3, r3, #2
 8002f0e:	4413      	add	r3, r2
 8002f10:	3304      	adds	r3, #4
 8002f12:	681a      	ldr	r2, [r3, #0]
 8002f14:	68b9      	ldr	r1, [r7, #8]
 8002f16:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002f18:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f1c:	00db      	lsls	r3, r3, #3
 8002f1e:	440b      	add	r3, r1
 8002f20:	3308      	adds	r3, #8
 8002f22:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < FFT_LENGTH / 2; i++) {
 8002f24:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002f26:	3301      	adds	r3, #1
 8002f28:	643b      	str	r3, [r7, #64]	@ 0x40
 8002f2a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002f2c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002f30:	dbd5      	blt.n	8002ede <vad_process_mic_fft+0x92>
    }


    arm_cmplx_mag_f32(mic->fft_output, mic->fft_magnitude, PREPROCESSING_FRAME_SIZE / 2);
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002f38:	3304      	adds	r3, #4
 8002f3a:	68ba      	ldr	r2, [r7, #8]
 8002f3c:	f502 5100 	add.w	r1, r2, #8192	@ 0x2000
 8002f40:	3104      	adds	r1, #4
 8002f42:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002f46:	4618      	mov	r0, r3
 8002f48:	f004 fdd4 	bl	8007af4 <arm_cmplx_mag_f32>
    mic->fft_magnitude[0] = 0;
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002f52:	461a      	mov	r2, r3
 8002f54:	f04f 0300 	mov.w	r3, #0
 8002f58:	6053      	str	r3, [r2, #4]

    // Dominant freq
    float32_t max_val = 0;
 8002f5a:	f04f 0300 	mov.w	r3, #0
 8002f5e:	61bb      	str	r3, [r7, #24]
    uint32_t max_bin = 0;
 8002f60:	2300      	movs	r3, #0
 8002f62:	617b      	str	r3, [r7, #20]
    arm_max_f32(mic->fft_magnitude, PREPROCESSING_FRAME_SIZE / 2, &max_val, &max_bin);
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	f503 5000 	add.w	r0, r3, #8192	@ 0x2000
 8002f6a:	3004      	adds	r0, #4
 8002f6c:	f107 0314 	add.w	r3, r7, #20
 8002f70:	f107 0218 	add.w	r2, r7, #24
 8002f74:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002f78:	f003 fd58 	bl	8006a2c <arm_max_f32>

    info.dominant_freq = SAMPLE_RATE * max_bin / PREPROCESSING_FRAME_SIZE;
 8002f7c:	697b      	ldr	r3, [r7, #20]
 8002f7e:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8002f82:	fb02 f303 	mul.w	r3, r2, r3
 8002f86:	0a9b      	lsrs	r3, r3, #10
 8002f88:	ee07 3a90 	vmov	s15, r3
 8002f8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f90:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    *(&info.energy) = 0;
 8002f94:	f04f 0300 	mov.w	r3, #0
 8002f98:	623b      	str	r3, [r7, #32]

    // Energy
    for (int i = 0; i < PREPROCESSING_FRAME_SIZE / 2; i++) {
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002f9e:	e01c      	b.n	8002fda <vad_process_mic_fft+0x18e>
        info.energy += mic->fft_magnitude[i] * mic->fft_magnitude[i];
 8002fa0:	ed97 7a08 	vldr	s14, [r7, #32]
 8002fa4:	68ba      	ldr	r2, [r7, #8]
 8002fa6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002fa8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002fac:	009b      	lsls	r3, r3, #2
 8002fae:	4413      	add	r3, r2
 8002fb0:	3304      	adds	r3, #4
 8002fb2:	edd3 6a00 	vldr	s13, [r3]
 8002fb6:	68ba      	ldr	r2, [r7, #8]
 8002fb8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002fba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002fbe:	009b      	lsls	r3, r3, #2
 8002fc0:	4413      	add	r3, r2
 8002fc2:	3304      	adds	r3, #4
 8002fc4:	edd3 7a00 	vldr	s15, [r3]
 8002fc8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002fcc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002fd0:	edc7 7a08 	vstr	s15, [r7, #32]
    for (int i = 0; i < PREPROCESSING_FRAME_SIZE / 2; i++) {
 8002fd4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002fd6:	3301      	adds	r3, #1
 8002fd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002fda:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002fdc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002fe0:	dbde      	blt.n	8002fa0 <vad_process_mic_fft+0x154>
    }

    // ZCR
    int zero_crossings = 0;
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	63bb      	str	r3, [r7, #56]	@ 0x38
    for (int i = 1; i < PREPROCESSING_FRAME_SIZE; i++) {
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	637b      	str	r3, [r7, #52]	@ 0x34
 8002fea:	e037      	b.n	800305c <vad_process_mic_fft+0x210>
        if ((mic->fft_input[i - 1] >= 0 && mic->fft_input[i] < 0) ||
 8002fec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fee:	3b01      	subs	r3, #1
 8002ff0:	68ba      	ldr	r2, [r7, #8]
 8002ff2:	009b      	lsls	r3, r3, #2
 8002ff4:	4413      	add	r3, r2
 8002ff6:	3304      	adds	r3, #4
 8002ff8:	edd3 7a00 	vldr	s15, [r3]
 8002ffc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003000:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003004:	db0b      	blt.n	800301e <vad_process_mic_fft+0x1d2>
 8003006:	68ba      	ldr	r2, [r7, #8]
 8003008:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800300a:	009b      	lsls	r3, r3, #2
 800300c:	4413      	add	r3, r2
 800300e:	3304      	adds	r3, #4
 8003010:	edd3 7a00 	vldr	s15, [r3]
 8003014:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003018:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800301c:	d418      	bmi.n	8003050 <vad_process_mic_fft+0x204>
            (mic->fft_input[i - 1] < 0 && mic->fft_input[i] >= 0)) {
 800301e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003020:	3b01      	subs	r3, #1
 8003022:	68ba      	ldr	r2, [r7, #8]
 8003024:	009b      	lsls	r3, r3, #2
 8003026:	4413      	add	r3, r2
 8003028:	3304      	adds	r3, #4
 800302a:	edd3 7a00 	vldr	s15, [r3]
        if ((mic->fft_input[i - 1] >= 0 && mic->fft_input[i] < 0) ||
 800302e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003032:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003036:	d50e      	bpl.n	8003056 <vad_process_mic_fft+0x20a>
            (mic->fft_input[i - 1] < 0 && mic->fft_input[i] >= 0)) {
 8003038:	68ba      	ldr	r2, [r7, #8]
 800303a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800303c:	009b      	lsls	r3, r3, #2
 800303e:	4413      	add	r3, r2
 8003040:	3304      	adds	r3, #4
 8003042:	edd3 7a00 	vldr	s15, [r3]
 8003046:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800304a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800304e:	db02      	blt.n	8003056 <vad_process_mic_fft+0x20a>
            zero_crossings++;
 8003050:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003052:	3301      	adds	r3, #1
 8003054:	63bb      	str	r3, [r7, #56]	@ 0x38
    for (int i = 1; i < PREPROCESSING_FRAME_SIZE; i++) {
 8003056:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003058:	3301      	adds	r3, #1
 800305a:	637b      	str	r3, [r7, #52]	@ 0x34
 800305c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800305e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003062:	dbc3      	blt.n	8002fec <vad_process_mic_fft+0x1a0>
        }
    }
    info.zcr = (float)zero_crossings / PREPROCESSING_FRAME_SIZE;
 8003064:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003066:	ee07 3a90 	vmov	s15, r3
 800306a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800306e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8003108 <vad_process_mic_fft+0x2bc>
 8003072:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003076:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

    // VAD Decision
    if (vad_is_noise_estimation_done()) {
 800307a:	f7ff fe27 	bl	8002ccc <vad_is_noise_estimation_done>
 800307e:	4603      	mov	r3, r0
 8003080:	2b00      	cmp	r3, #0
 8003082:	d034      	beq.n	80030ee <vad_process_mic_fft+0x2a2>
        if (info.energy >  vad_get_noise_energy()* VAD_ENERGY_MULTIPLIER &&
 8003084:	ed97 8a08 	vldr	s16, [r7, #32]
 8003088:	f7ff fe2c 	bl	8002ce4 <vad_get_noise_energy>
 800308c:	eef0 7a40 	vmov.f32	s15, s0
 8003090:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 800310c <vad_process_mic_fft+0x2c0>
 8003094:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003098:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800309c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030a0:	dd25      	ble.n	80030ee <vad_process_mic_fft+0x2a2>
            info.zcr > VAD_ZCR_LOW && info.zcr < VAD_ZCR_HIGH &&
 80030a2:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
        if (info.energy >  vad_get_noise_energy()* VAD_ENERGY_MULTIPLIER &&
 80030a6:	eeb5 7a00 	vmov.f32	s14, #80	@ 0x3e800000  0.250
 80030aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80030ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030b2:	dd1c      	ble.n	80030ee <vad_process_mic_fft+0x2a2>
            info.zcr > VAD_ZCR_LOW && info.zcr < VAD_ZCR_HIGH &&
 80030b4:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80030b8:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8003110 <vad_process_mic_fft+0x2c4>
 80030bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80030c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030c4:	d513      	bpl.n	80030ee <vad_process_mic_fft+0x2a2>
            info.dominant_freq > VAD_FREQ_MIN && info.dominant_freq < VAD_FREQ_MAX) {
 80030c6:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
            info.zcr > VAD_ZCR_LOW && info.zcr < VAD_ZCR_HIGH &&
 80030ca:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 8003114 <vad_process_mic_fft+0x2c8>
 80030ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80030d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030d6:	dd0a      	ble.n	80030ee <vad_process_mic_fft+0x2a2>
            info.dominant_freq > VAD_FREQ_MIN && info.dominant_freq < VAD_FREQ_MAX) {
 80030d8:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80030dc:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8003118 <vad_process_mic_fft+0x2cc>
 80030e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80030e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030e8:	d501      	bpl.n	80030ee <vad_process_mic_fft+0x2a2>
            info.is_voice = 1;
 80030ea:	2301      	movs	r3, #1
 80030ec:	773b      	strb	r3, [r7, #28]
        }
    }

    return info;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	461c      	mov	r4, r3
 80030f2:	f107 031c 	add.w	r3, r7, #28
 80030f6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80030f8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80030fc:	68f8      	ldr	r0, [r7, #12]
 80030fe:	374c      	adds	r7, #76	@ 0x4c
 8003100:	46bd      	mov	sp, r7
 8003102:	ecbd 8b02 	vpop	{d8}
 8003106:	bd90      	pop	{r4, r7, pc}
 8003108:	44800000 	.word	0x44800000
 800310c:	3d75c28f 	.word	0x3d75c28f
 8003110:	3f0ccccd 	.word	0x3f0ccccd
 8003114:	43480000 	.word	0x43480000
 8003118:	453b8000 	.word	0x453b8000

0800311c <vad_all_mics_agree>:
uint8_t vad_all_mics_agree(VADFrameInfo* mic_infos){
 800311c:	b480      	push	{r7}
 800311e:	b089      	sub	sp, #36	@ 0x24
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
	int voice_count = 0;
 8003124:	2300      	movs	r3, #0
 8003126:	61fb      	str	r3, [r7, #28]
	    float freq_sum = 0.0f;
 8003128:	f04f 0300 	mov.w	r3, #0
 800312c:	61bb      	str	r3, [r7, #24]

	    // Count how many mics say "voice"
	    for (int i = 0; i < NUM_MICS; i++) {
 800312e:	2300      	movs	r3, #0
 8003130:	617b      	str	r3, [r7, #20]
 8003132:	e018      	b.n	8003166 <vad_all_mics_agree+0x4a>
	        if (mic_infos[i].is_voice) {
 8003134:	697b      	ldr	r3, [r7, #20]
 8003136:	011b      	lsls	r3, r3, #4
 8003138:	687a      	ldr	r2, [r7, #4]
 800313a:	4413      	add	r3, r2
 800313c:	781b      	ldrb	r3, [r3, #0]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d00e      	beq.n	8003160 <vad_all_mics_agree+0x44>
	            voice_count++;
 8003142:	69fb      	ldr	r3, [r7, #28]
 8003144:	3301      	adds	r3, #1
 8003146:	61fb      	str	r3, [r7, #28]
	            freq_sum += mic_infos[i].dominant_freq;
 8003148:	697b      	ldr	r3, [r7, #20]
 800314a:	011b      	lsls	r3, r3, #4
 800314c:	687a      	ldr	r2, [r7, #4]
 800314e:	4413      	add	r3, r2
 8003150:	edd3 7a03 	vldr	s15, [r3, #12]
 8003154:	ed97 7a06 	vldr	s14, [r7, #24]
 8003158:	ee77 7a27 	vadd.f32	s15, s14, s15
 800315c:	edc7 7a06 	vstr	s15, [r7, #24]
	    for (int i = 0; i < NUM_MICS; i++) {
 8003160:	697b      	ldr	r3, [r7, #20]
 8003162:	3301      	adds	r3, #1
 8003164:	617b      	str	r3, [r7, #20]
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	2b03      	cmp	r3, #3
 800316a:	dde3      	ble.n	8003134 <vad_all_mics_agree+0x18>
	        }
	    }

	    // If fewer than N mics detect voice, reject
	    if (voice_count < 2) return 0;
 800316c:	69fb      	ldr	r3, [r7, #28]
 800316e:	2b01      	cmp	r3, #1
 8003170:	dc01      	bgt.n	8003176 <vad_all_mics_agree+0x5a>
 8003172:	2300      	movs	r3, #0
 8003174:	e038      	b.n	80031e8 <vad_all_mics_agree+0xcc>

	    // Optionally check frequency consistency
	    float avg_freq = freq_sum / voice_count;
 8003176:	69fb      	ldr	r3, [r7, #28]
 8003178:	ee07 3a90 	vmov	s15, r3
 800317c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003180:	edd7 6a06 	vldr	s13, [r7, #24]
 8003184:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003188:	edc7 7a02 	vstr	s15, [r7, #8]
	    int consistent = 0;
 800318c:	2300      	movs	r3, #0
 800318e:	613b      	str	r3, [r7, #16]

	    for (int i = 0; i < NUM_MICS; i++) {
 8003190:	2300      	movs	r3, #0
 8003192:	60fb      	str	r3, [r7, #12]
 8003194:	e01f      	b.n	80031d6 <vad_all_mics_agree+0xba>
	        if (mic_infos[i].is_voice &&
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	011b      	lsls	r3, r3, #4
 800319a:	687a      	ldr	r2, [r7, #4]
 800319c:	4413      	add	r3, r2
 800319e:	781b      	ldrb	r3, [r3, #0]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d015      	beq.n	80031d0 <vad_all_mics_agree+0xb4>
	            fabsf(mic_infos[i].dominant_freq - avg_freq) < VAD_FREQ_TOLERANCE) {
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	011b      	lsls	r3, r3, #4
 80031a8:	687a      	ldr	r2, [r7, #4]
 80031aa:	4413      	add	r3, r2
 80031ac:	ed93 7a03 	vldr	s14, [r3, #12]
 80031b0:	edd7 7a02 	vldr	s15, [r7, #8]
 80031b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80031b8:	eef0 7ae7 	vabs.f32	s15, s15
	        if (mic_infos[i].is_voice &&
 80031bc:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 80031f4 <vad_all_mics_agree+0xd8>
 80031c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80031c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031c8:	d502      	bpl.n	80031d0 <vad_all_mics_agree+0xb4>
	            consistent++;
 80031ca:	693b      	ldr	r3, [r7, #16]
 80031cc:	3301      	adds	r3, #1
 80031ce:	613b      	str	r3, [r7, #16]
	    for (int i = 0; i < NUM_MICS; i++) {
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	3301      	adds	r3, #1
 80031d4:	60fb      	str	r3, [r7, #12]
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	2b03      	cmp	r3, #3
 80031da:	dddc      	ble.n	8003196 <vad_all_mics_agree+0x7a>
	        }
	    }
	    return (consistent ==4);
 80031dc:	693b      	ldr	r3, [r7, #16]
 80031de:	2b04      	cmp	r3, #4
 80031e0:	bf0c      	ite	eq
 80031e2:	2301      	moveq	r3, #1
 80031e4:	2300      	movne	r3, #0
 80031e6:	b2db      	uxtb	r3, r3
}
 80031e8:	4618      	mov	r0, r3
 80031ea:	3724      	adds	r7, #36	@ 0x24
 80031ec:	46bd      	mov	sp, r7
 80031ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f2:	4770      	bx	lr
 80031f4:	42c80000 	.word	0x42c80000

080031f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80031f8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003230 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80031fc:	f7ff fd18 	bl	8002c30 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003200:	480c      	ldr	r0, [pc, #48]	@ (8003234 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003202:	490d      	ldr	r1, [pc, #52]	@ (8003238 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003204:	4a0d      	ldr	r2, [pc, #52]	@ (800323c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003206:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003208:	e002      	b.n	8003210 <LoopCopyDataInit>

0800320a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800320a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800320c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800320e:	3304      	adds	r3, #4

08003210 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003210:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003212:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003214:	d3f9      	bcc.n	800320a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003216:	4a0a      	ldr	r2, [pc, #40]	@ (8003240 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003218:	4c0a      	ldr	r4, [pc, #40]	@ (8003244 <LoopFillZerobss+0x22>)
  movs r3, #0
 800321a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800321c:	e001      	b.n	8003222 <LoopFillZerobss>

0800321e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800321e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003220:	3204      	adds	r2, #4

08003222 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003222:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003224:	d3fb      	bcc.n	800321e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003226:	f006 fbdd 	bl	80099e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800322a:	f7fe faa9 	bl	8001780 <main>
  bx  lr    
 800322e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003230:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003234:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003238:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 800323c:	0802997c 	.word	0x0802997c
  ldr r2, =_sbss
 8003240:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8003244:	20014914 	.word	0x20014914

08003248 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003248:	e7fe      	b.n	8003248 <ADC_IRQHandler>
	...

0800324c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003250:	4b0e      	ldr	r3, [pc, #56]	@ (800328c <HAL_Init+0x40>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a0d      	ldr	r2, [pc, #52]	@ (800328c <HAL_Init+0x40>)
 8003256:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800325a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800325c:	4b0b      	ldr	r3, [pc, #44]	@ (800328c <HAL_Init+0x40>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a0a      	ldr	r2, [pc, #40]	@ (800328c <HAL_Init+0x40>)
 8003262:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003266:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003268:	4b08      	ldr	r3, [pc, #32]	@ (800328c <HAL_Init+0x40>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a07      	ldr	r2, [pc, #28]	@ (800328c <HAL_Init+0x40>)
 800326e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003272:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003274:	2003      	movs	r0, #3
 8003276:	f000 f94f 	bl	8003518 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800327a:	2000      	movs	r0, #0
 800327c:	f000 f808 	bl	8003290 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003280:	f7ff f8c4 	bl	800240c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003284:	2300      	movs	r3, #0
}
 8003286:	4618      	mov	r0, r3
 8003288:	bd80      	pop	{r7, pc}
 800328a:	bf00      	nop
 800328c:	40023c00 	.word	0x40023c00

08003290 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b082      	sub	sp, #8
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003298:	4b12      	ldr	r3, [pc, #72]	@ (80032e4 <HAL_InitTick+0x54>)
 800329a:	681a      	ldr	r2, [r3, #0]
 800329c:	4b12      	ldr	r3, [pc, #72]	@ (80032e8 <HAL_InitTick+0x58>)
 800329e:	781b      	ldrb	r3, [r3, #0]
 80032a0:	4619      	mov	r1, r3
 80032a2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80032a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80032aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80032ae:	4618      	mov	r0, r3
 80032b0:	f000 f967 	bl	8003582 <HAL_SYSTICK_Config>
 80032b4:	4603      	mov	r3, r0
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d001      	beq.n	80032be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	e00e      	b.n	80032dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2b0f      	cmp	r3, #15
 80032c2:	d80a      	bhi.n	80032da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80032c4:	2200      	movs	r2, #0
 80032c6:	6879      	ldr	r1, [r7, #4]
 80032c8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80032cc:	f000 f92f 	bl	800352e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80032d0:	4a06      	ldr	r2, [pc, #24]	@ (80032ec <HAL_InitTick+0x5c>)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80032d6:	2300      	movs	r3, #0
 80032d8:	e000      	b.n	80032dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80032da:	2301      	movs	r3, #1
}
 80032dc:	4618      	mov	r0, r3
 80032de:	3708      	adds	r7, #8
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd80      	pop	{r7, pc}
 80032e4:	20000004 	.word	0x20000004
 80032e8:	2000000c 	.word	0x2000000c
 80032ec:	20000008 	.word	0x20000008

080032f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80032f0:	b480      	push	{r7}
 80032f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80032f4:	4b06      	ldr	r3, [pc, #24]	@ (8003310 <HAL_IncTick+0x20>)
 80032f6:	781b      	ldrb	r3, [r3, #0]
 80032f8:	461a      	mov	r2, r3
 80032fa:	4b06      	ldr	r3, [pc, #24]	@ (8003314 <HAL_IncTick+0x24>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4413      	add	r3, r2
 8003300:	4a04      	ldr	r2, [pc, #16]	@ (8003314 <HAL_IncTick+0x24>)
 8003302:	6013      	str	r3, [r2, #0]
}
 8003304:	bf00      	nop
 8003306:	46bd      	mov	sp, r7
 8003308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330c:	4770      	bx	lr
 800330e:	bf00      	nop
 8003310:	2000000c 	.word	0x2000000c
 8003314:	200147c4 	.word	0x200147c4

08003318 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003318:	b480      	push	{r7}
 800331a:	af00      	add	r7, sp, #0
  return uwTick;
 800331c:	4b03      	ldr	r3, [pc, #12]	@ (800332c <HAL_GetTick+0x14>)
 800331e:	681b      	ldr	r3, [r3, #0]
}
 8003320:	4618      	mov	r0, r3
 8003322:	46bd      	mov	sp, r7
 8003324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003328:	4770      	bx	lr
 800332a:	bf00      	nop
 800332c:	200147c4 	.word	0x200147c4

08003330 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b084      	sub	sp, #16
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003338:	f7ff ffee 	bl	8003318 <HAL_GetTick>
 800333c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003348:	d005      	beq.n	8003356 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800334a:	4b0a      	ldr	r3, [pc, #40]	@ (8003374 <HAL_Delay+0x44>)
 800334c:	781b      	ldrb	r3, [r3, #0]
 800334e:	461a      	mov	r2, r3
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	4413      	add	r3, r2
 8003354:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003356:	bf00      	nop
 8003358:	f7ff ffde 	bl	8003318 <HAL_GetTick>
 800335c:	4602      	mov	r2, r0
 800335e:	68bb      	ldr	r3, [r7, #8]
 8003360:	1ad3      	subs	r3, r2, r3
 8003362:	68fa      	ldr	r2, [r7, #12]
 8003364:	429a      	cmp	r2, r3
 8003366:	d8f7      	bhi.n	8003358 <HAL_Delay+0x28>
  {
  }
}
 8003368:	bf00      	nop
 800336a:	bf00      	nop
 800336c:	3710      	adds	r7, #16
 800336e:	46bd      	mov	sp, r7
 8003370:	bd80      	pop	{r7, pc}
 8003372:	bf00      	nop
 8003374:	2000000c 	.word	0x2000000c

08003378 <__NVIC_SetPriorityGrouping>:
{
 8003378:	b480      	push	{r7}
 800337a:	b085      	sub	sp, #20
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	f003 0307 	and.w	r3, r3, #7
 8003386:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003388:	4b0c      	ldr	r3, [pc, #48]	@ (80033bc <__NVIC_SetPriorityGrouping+0x44>)
 800338a:	68db      	ldr	r3, [r3, #12]
 800338c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800338e:	68ba      	ldr	r2, [r7, #8]
 8003390:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003394:	4013      	ands	r3, r2
 8003396:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80033a0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80033a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80033a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80033aa:	4a04      	ldr	r2, [pc, #16]	@ (80033bc <__NVIC_SetPriorityGrouping+0x44>)
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	60d3      	str	r3, [r2, #12]
}
 80033b0:	bf00      	nop
 80033b2:	3714      	adds	r7, #20
 80033b4:	46bd      	mov	sp, r7
 80033b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ba:	4770      	bx	lr
 80033bc:	e000ed00 	.word	0xe000ed00

080033c0 <__NVIC_GetPriorityGrouping>:
{
 80033c0:	b480      	push	{r7}
 80033c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80033c4:	4b04      	ldr	r3, [pc, #16]	@ (80033d8 <__NVIC_GetPriorityGrouping+0x18>)
 80033c6:	68db      	ldr	r3, [r3, #12]
 80033c8:	0a1b      	lsrs	r3, r3, #8
 80033ca:	f003 0307 	and.w	r3, r3, #7
}
 80033ce:	4618      	mov	r0, r3
 80033d0:	46bd      	mov	sp, r7
 80033d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d6:	4770      	bx	lr
 80033d8:	e000ed00 	.word	0xe000ed00

080033dc <__NVIC_EnableIRQ>:
{
 80033dc:	b480      	push	{r7}
 80033de:	b083      	sub	sp, #12
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	4603      	mov	r3, r0
 80033e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	db0b      	blt.n	8003406 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033ee:	79fb      	ldrb	r3, [r7, #7]
 80033f0:	f003 021f 	and.w	r2, r3, #31
 80033f4:	4907      	ldr	r1, [pc, #28]	@ (8003414 <__NVIC_EnableIRQ+0x38>)
 80033f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033fa:	095b      	lsrs	r3, r3, #5
 80033fc:	2001      	movs	r0, #1
 80033fe:	fa00 f202 	lsl.w	r2, r0, r2
 8003402:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003406:	bf00      	nop
 8003408:	370c      	adds	r7, #12
 800340a:	46bd      	mov	sp, r7
 800340c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003410:	4770      	bx	lr
 8003412:	bf00      	nop
 8003414:	e000e100 	.word	0xe000e100

08003418 <__NVIC_SetPriority>:
{
 8003418:	b480      	push	{r7}
 800341a:	b083      	sub	sp, #12
 800341c:	af00      	add	r7, sp, #0
 800341e:	4603      	mov	r3, r0
 8003420:	6039      	str	r1, [r7, #0]
 8003422:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003424:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003428:	2b00      	cmp	r3, #0
 800342a:	db0a      	blt.n	8003442 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	b2da      	uxtb	r2, r3
 8003430:	490c      	ldr	r1, [pc, #48]	@ (8003464 <__NVIC_SetPriority+0x4c>)
 8003432:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003436:	0112      	lsls	r2, r2, #4
 8003438:	b2d2      	uxtb	r2, r2
 800343a:	440b      	add	r3, r1
 800343c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003440:	e00a      	b.n	8003458 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	b2da      	uxtb	r2, r3
 8003446:	4908      	ldr	r1, [pc, #32]	@ (8003468 <__NVIC_SetPriority+0x50>)
 8003448:	79fb      	ldrb	r3, [r7, #7]
 800344a:	f003 030f 	and.w	r3, r3, #15
 800344e:	3b04      	subs	r3, #4
 8003450:	0112      	lsls	r2, r2, #4
 8003452:	b2d2      	uxtb	r2, r2
 8003454:	440b      	add	r3, r1
 8003456:	761a      	strb	r2, [r3, #24]
}
 8003458:	bf00      	nop
 800345a:	370c      	adds	r7, #12
 800345c:	46bd      	mov	sp, r7
 800345e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003462:	4770      	bx	lr
 8003464:	e000e100 	.word	0xe000e100
 8003468:	e000ed00 	.word	0xe000ed00

0800346c <NVIC_EncodePriority>:
{
 800346c:	b480      	push	{r7}
 800346e:	b089      	sub	sp, #36	@ 0x24
 8003470:	af00      	add	r7, sp, #0
 8003472:	60f8      	str	r0, [r7, #12]
 8003474:	60b9      	str	r1, [r7, #8]
 8003476:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	f003 0307 	and.w	r3, r3, #7
 800347e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003480:	69fb      	ldr	r3, [r7, #28]
 8003482:	f1c3 0307 	rsb	r3, r3, #7
 8003486:	2b04      	cmp	r3, #4
 8003488:	bf28      	it	cs
 800348a:	2304      	movcs	r3, #4
 800348c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800348e:	69fb      	ldr	r3, [r7, #28]
 8003490:	3304      	adds	r3, #4
 8003492:	2b06      	cmp	r3, #6
 8003494:	d902      	bls.n	800349c <NVIC_EncodePriority+0x30>
 8003496:	69fb      	ldr	r3, [r7, #28]
 8003498:	3b03      	subs	r3, #3
 800349a:	e000      	b.n	800349e <NVIC_EncodePriority+0x32>
 800349c:	2300      	movs	r3, #0
 800349e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034a0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80034a4:	69bb      	ldr	r3, [r7, #24]
 80034a6:	fa02 f303 	lsl.w	r3, r2, r3
 80034aa:	43da      	mvns	r2, r3
 80034ac:	68bb      	ldr	r3, [r7, #8]
 80034ae:	401a      	ands	r2, r3
 80034b0:	697b      	ldr	r3, [r7, #20]
 80034b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80034b4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	fa01 f303 	lsl.w	r3, r1, r3
 80034be:	43d9      	mvns	r1, r3
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034c4:	4313      	orrs	r3, r2
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	3724      	adds	r7, #36	@ 0x24
 80034ca:	46bd      	mov	sp, r7
 80034cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d0:	4770      	bx	lr
	...

080034d4 <SysTick_Config>:
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b082      	sub	sp, #8
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	3b01      	subs	r3, #1
 80034e0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80034e4:	d301      	bcc.n	80034ea <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80034e6:	2301      	movs	r3, #1
 80034e8:	e00f      	b.n	800350a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80034ea:	4a0a      	ldr	r2, [pc, #40]	@ (8003514 <SysTick_Config+0x40>)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	3b01      	subs	r3, #1
 80034f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80034f2:	210f      	movs	r1, #15
 80034f4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80034f8:	f7ff ff8e 	bl	8003418 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80034fc:	4b05      	ldr	r3, [pc, #20]	@ (8003514 <SysTick_Config+0x40>)
 80034fe:	2200      	movs	r2, #0
 8003500:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003502:	4b04      	ldr	r3, [pc, #16]	@ (8003514 <SysTick_Config+0x40>)
 8003504:	2207      	movs	r2, #7
 8003506:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8003508:	2300      	movs	r3, #0
}
 800350a:	4618      	mov	r0, r3
 800350c:	3708      	adds	r7, #8
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}
 8003512:	bf00      	nop
 8003514:	e000e010 	.word	0xe000e010

08003518 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b082      	sub	sp, #8
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003520:	6878      	ldr	r0, [r7, #4]
 8003522:	f7ff ff29 	bl	8003378 <__NVIC_SetPriorityGrouping>
}
 8003526:	bf00      	nop
 8003528:	3708      	adds	r7, #8
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}

0800352e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800352e:	b580      	push	{r7, lr}
 8003530:	b086      	sub	sp, #24
 8003532:	af00      	add	r7, sp, #0
 8003534:	4603      	mov	r3, r0
 8003536:	60b9      	str	r1, [r7, #8]
 8003538:	607a      	str	r2, [r7, #4]
 800353a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800353c:	2300      	movs	r3, #0
 800353e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003540:	f7ff ff3e 	bl	80033c0 <__NVIC_GetPriorityGrouping>
 8003544:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003546:	687a      	ldr	r2, [r7, #4]
 8003548:	68b9      	ldr	r1, [r7, #8]
 800354a:	6978      	ldr	r0, [r7, #20]
 800354c:	f7ff ff8e 	bl	800346c <NVIC_EncodePriority>
 8003550:	4602      	mov	r2, r0
 8003552:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003556:	4611      	mov	r1, r2
 8003558:	4618      	mov	r0, r3
 800355a:	f7ff ff5d 	bl	8003418 <__NVIC_SetPriority>
}
 800355e:	bf00      	nop
 8003560:	3718      	adds	r7, #24
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}

08003566 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003566:	b580      	push	{r7, lr}
 8003568:	b082      	sub	sp, #8
 800356a:	af00      	add	r7, sp, #0
 800356c:	4603      	mov	r3, r0
 800356e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003570:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003574:	4618      	mov	r0, r3
 8003576:	f7ff ff31 	bl	80033dc <__NVIC_EnableIRQ>
}
 800357a:	bf00      	nop
 800357c:	3708      	adds	r7, #8
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}

08003582 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003582:	b580      	push	{r7, lr}
 8003584:	b082      	sub	sp, #8
 8003586:	af00      	add	r7, sp, #0
 8003588:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800358a:	6878      	ldr	r0, [r7, #4]
 800358c:	f7ff ffa2 	bl	80034d4 <SysTick_Config>
 8003590:	4603      	mov	r3, r0
}
 8003592:	4618      	mov	r0, r3
 8003594:	3708      	adds	r7, #8
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}
	...

0800359c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b086      	sub	sp, #24
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80035a4:	2300      	movs	r3, #0
 80035a6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80035a8:	f7ff feb6 	bl	8003318 <HAL_GetTick>
 80035ac:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d101      	bne.n	80035b8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80035b4:	2301      	movs	r3, #1
 80035b6:	e099      	b.n	80036ec <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2202      	movs	r2, #2
 80035bc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2200      	movs	r2, #0
 80035c4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	681a      	ldr	r2, [r3, #0]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f022 0201 	bic.w	r2, r2, #1
 80035d6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80035d8:	e00f      	b.n	80035fa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80035da:	f7ff fe9d 	bl	8003318 <HAL_GetTick>
 80035de:	4602      	mov	r2, r0
 80035e0:	693b      	ldr	r3, [r7, #16]
 80035e2:	1ad3      	subs	r3, r2, r3
 80035e4:	2b05      	cmp	r3, #5
 80035e6:	d908      	bls.n	80035fa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2220      	movs	r2, #32
 80035ec:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2203      	movs	r2, #3
 80035f2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80035f6:	2303      	movs	r3, #3
 80035f8:	e078      	b.n	80036ec <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f003 0301 	and.w	r3, r3, #1
 8003604:	2b00      	cmp	r3, #0
 8003606:	d1e8      	bne.n	80035da <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003610:	697a      	ldr	r2, [r7, #20]
 8003612:	4b38      	ldr	r3, [pc, #224]	@ (80036f4 <HAL_DMA_Init+0x158>)
 8003614:	4013      	ands	r3, r2
 8003616:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	685a      	ldr	r2, [r3, #4]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003626:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	691b      	ldr	r3, [r3, #16]
 800362c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003632:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	699b      	ldr	r3, [r3, #24]
 8003638:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800363e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6a1b      	ldr	r3, [r3, #32]
 8003644:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003646:	697a      	ldr	r2, [r7, #20]
 8003648:	4313      	orrs	r3, r2
 800364a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003650:	2b04      	cmp	r3, #4
 8003652:	d107      	bne.n	8003664 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800365c:	4313      	orrs	r3, r2
 800365e:	697a      	ldr	r2, [r7, #20]
 8003660:	4313      	orrs	r3, r2
 8003662:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	697a      	ldr	r2, [r7, #20]
 800366a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	695b      	ldr	r3, [r3, #20]
 8003672:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003674:	697b      	ldr	r3, [r7, #20]
 8003676:	f023 0307 	bic.w	r3, r3, #7
 800367a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003680:	697a      	ldr	r2, [r7, #20]
 8003682:	4313      	orrs	r3, r2
 8003684:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800368a:	2b04      	cmp	r3, #4
 800368c:	d117      	bne.n	80036be <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003692:	697a      	ldr	r2, [r7, #20]
 8003694:	4313      	orrs	r3, r2
 8003696:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800369c:	2b00      	cmp	r3, #0
 800369e:	d00e      	beq.n	80036be <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80036a0:	6878      	ldr	r0, [r7, #4]
 80036a2:	f000 fadf 	bl	8003c64 <DMA_CheckFifoParam>
 80036a6:	4603      	mov	r3, r0
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d008      	beq.n	80036be <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2240      	movs	r2, #64	@ 0x40
 80036b0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2201      	movs	r2, #1
 80036b6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80036ba:	2301      	movs	r3, #1
 80036bc:	e016      	b.n	80036ec <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	697a      	ldr	r2, [r7, #20]
 80036c4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80036c6:	6878      	ldr	r0, [r7, #4]
 80036c8:	f000 fa96 	bl	8003bf8 <DMA_CalcBaseAndBitshift>
 80036cc:	4603      	mov	r3, r0
 80036ce:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036d4:	223f      	movs	r2, #63	@ 0x3f
 80036d6:	409a      	lsls	r2, r3
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2200      	movs	r2, #0
 80036e0:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2201      	movs	r2, #1
 80036e6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80036ea:	2300      	movs	r3, #0
}
 80036ec:	4618      	mov	r0, r3
 80036ee:	3718      	adds	r7, #24
 80036f0:	46bd      	mov	sp, r7
 80036f2:	bd80      	pop	{r7, pc}
 80036f4:	f010803f 	.word	0xf010803f

080036f8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b086      	sub	sp, #24
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	60f8      	str	r0, [r7, #12]
 8003700:	60b9      	str	r1, [r7, #8]
 8003702:	607a      	str	r2, [r7, #4]
 8003704:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003706:	2300      	movs	r3, #0
 8003708:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800370e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003716:	2b01      	cmp	r3, #1
 8003718:	d101      	bne.n	800371e <HAL_DMA_Start_IT+0x26>
 800371a:	2302      	movs	r3, #2
 800371c:	e040      	b.n	80037a0 <HAL_DMA_Start_IT+0xa8>
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	2201      	movs	r2, #1
 8003722:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800372c:	b2db      	uxtb	r3, r3
 800372e:	2b01      	cmp	r3, #1
 8003730:	d12f      	bne.n	8003792 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	2202      	movs	r2, #2
 8003736:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	2200      	movs	r2, #0
 800373e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	687a      	ldr	r2, [r7, #4]
 8003744:	68b9      	ldr	r1, [r7, #8]
 8003746:	68f8      	ldr	r0, [r7, #12]
 8003748:	f000 fa28 	bl	8003b9c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003750:	223f      	movs	r2, #63	@ 0x3f
 8003752:	409a      	lsls	r2, r3
 8003754:	693b      	ldr	r3, [r7, #16]
 8003756:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	681a      	ldr	r2, [r3, #0]
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f042 0216 	orr.w	r2, r2, #22
 8003766:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800376c:	2b00      	cmp	r3, #0
 800376e:	d007      	beq.n	8003780 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	681a      	ldr	r2, [r3, #0]
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f042 0208 	orr.w	r2, r2, #8
 800377e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	681a      	ldr	r2, [r3, #0]
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f042 0201 	orr.w	r2, r2, #1
 800378e:	601a      	str	r2, [r3, #0]
 8003790:	e005      	b.n	800379e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	2200      	movs	r2, #0
 8003796:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800379a:	2302      	movs	r3, #2
 800379c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800379e:	7dfb      	ldrb	r3, [r7, #23]
}
 80037a0:	4618      	mov	r0, r3
 80037a2:	3718      	adds	r7, #24
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bd80      	pop	{r7, pc}

080037a8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b084      	sub	sp, #16
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037b4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80037b6:	f7ff fdaf 	bl	8003318 <HAL_GetTick>
 80037ba:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80037c2:	b2db      	uxtb	r3, r3
 80037c4:	2b02      	cmp	r3, #2
 80037c6:	d008      	beq.n	80037da <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2280      	movs	r2, #128	@ 0x80
 80037cc:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2200      	movs	r2, #0
 80037d2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	e052      	b.n	8003880 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	681a      	ldr	r2, [r3, #0]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f022 0216 	bic.w	r2, r2, #22
 80037e8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	695a      	ldr	r2, [r3, #20]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80037f8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d103      	bne.n	800380a <HAL_DMA_Abort+0x62>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003806:	2b00      	cmp	r3, #0
 8003808:	d007      	beq.n	800381a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	681a      	ldr	r2, [r3, #0]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f022 0208 	bic.w	r2, r2, #8
 8003818:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	681a      	ldr	r2, [r3, #0]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f022 0201 	bic.w	r2, r2, #1
 8003828:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800382a:	e013      	b.n	8003854 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800382c:	f7ff fd74 	bl	8003318 <HAL_GetTick>
 8003830:	4602      	mov	r2, r0
 8003832:	68bb      	ldr	r3, [r7, #8]
 8003834:	1ad3      	subs	r3, r2, r3
 8003836:	2b05      	cmp	r3, #5
 8003838:	d90c      	bls.n	8003854 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2220      	movs	r2, #32
 800383e:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2203      	movs	r2, #3
 8003844:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2200      	movs	r2, #0
 800384c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003850:	2303      	movs	r3, #3
 8003852:	e015      	b.n	8003880 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f003 0301 	and.w	r3, r3, #1
 800385e:	2b00      	cmp	r3, #0
 8003860:	d1e4      	bne.n	800382c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003866:	223f      	movs	r2, #63	@ 0x3f
 8003868:	409a      	lsls	r2, r3
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2201      	movs	r2, #1
 8003872:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2200      	movs	r2, #0
 800387a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800387e:	2300      	movs	r3, #0
}
 8003880:	4618      	mov	r0, r3
 8003882:	3710      	adds	r7, #16
 8003884:	46bd      	mov	sp, r7
 8003886:	bd80      	pop	{r7, pc}

08003888 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b086      	sub	sp, #24
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003890:	2300      	movs	r3, #0
 8003892:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003894:	4b8e      	ldr	r3, [pc, #568]	@ (8003ad0 <HAL_DMA_IRQHandler+0x248>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a8e      	ldr	r2, [pc, #568]	@ (8003ad4 <HAL_DMA_IRQHandler+0x24c>)
 800389a:	fba2 2303 	umull	r2, r3, r2, r3
 800389e:	0a9b      	lsrs	r3, r3, #10
 80038a0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038a6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80038a8:	693b      	ldr	r3, [r7, #16]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038b2:	2208      	movs	r2, #8
 80038b4:	409a      	lsls	r2, r3
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	4013      	ands	r3, r2
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d01a      	beq.n	80038f4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f003 0304 	and.w	r3, r3, #4
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d013      	beq.n	80038f4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	681a      	ldr	r2, [r3, #0]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f022 0204 	bic.w	r2, r2, #4
 80038da:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038e0:	2208      	movs	r2, #8
 80038e2:	409a      	lsls	r2, r3
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038ec:	f043 0201 	orr.w	r2, r3, #1
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038f8:	2201      	movs	r2, #1
 80038fa:	409a      	lsls	r2, r3
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	4013      	ands	r3, r2
 8003900:	2b00      	cmp	r3, #0
 8003902:	d012      	beq.n	800392a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	695b      	ldr	r3, [r3, #20]
 800390a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800390e:	2b00      	cmp	r3, #0
 8003910:	d00b      	beq.n	800392a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003916:	2201      	movs	r2, #1
 8003918:	409a      	lsls	r2, r3
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003922:	f043 0202 	orr.w	r2, r3, #2
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800392e:	2204      	movs	r2, #4
 8003930:	409a      	lsls	r2, r3
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	4013      	ands	r3, r2
 8003936:	2b00      	cmp	r3, #0
 8003938:	d012      	beq.n	8003960 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f003 0302 	and.w	r3, r3, #2
 8003944:	2b00      	cmp	r3, #0
 8003946:	d00b      	beq.n	8003960 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800394c:	2204      	movs	r2, #4
 800394e:	409a      	lsls	r2, r3
 8003950:	693b      	ldr	r3, [r7, #16]
 8003952:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003958:	f043 0204 	orr.w	r2, r3, #4
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003964:	2210      	movs	r2, #16
 8003966:	409a      	lsls	r2, r3
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	4013      	ands	r3, r2
 800396c:	2b00      	cmp	r3, #0
 800396e:	d043      	beq.n	80039f8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f003 0308 	and.w	r3, r3, #8
 800397a:	2b00      	cmp	r3, #0
 800397c:	d03c      	beq.n	80039f8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003982:	2210      	movs	r2, #16
 8003984:	409a      	lsls	r2, r3
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003994:	2b00      	cmp	r3, #0
 8003996:	d018      	beq.n	80039ca <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d108      	bne.n	80039b8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d024      	beq.n	80039f8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	4798      	blx	r3
 80039b6:	e01f      	b.n	80039f8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d01b      	beq.n	80039f8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80039c4:	6878      	ldr	r0, [r7, #4]
 80039c6:	4798      	blx	r3
 80039c8:	e016      	b.n	80039f8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d107      	bne.n	80039e8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	681a      	ldr	r2, [r3, #0]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f022 0208 	bic.w	r2, r2, #8
 80039e6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d003      	beq.n	80039f8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039f4:	6878      	ldr	r0, [r7, #4]
 80039f6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039fc:	2220      	movs	r2, #32
 80039fe:	409a      	lsls	r2, r3
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	4013      	ands	r3, r2
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	f000 808f 	beq.w	8003b28 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f003 0310 	and.w	r3, r3, #16
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	f000 8087 	beq.w	8003b28 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a1e:	2220      	movs	r2, #32
 8003a20:	409a      	lsls	r2, r3
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003a2c:	b2db      	uxtb	r3, r3
 8003a2e:	2b05      	cmp	r3, #5
 8003a30:	d136      	bne.n	8003aa0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	681a      	ldr	r2, [r3, #0]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f022 0216 	bic.w	r2, r2, #22
 8003a40:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	695a      	ldr	r2, [r3, #20]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003a50:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d103      	bne.n	8003a62 <HAL_DMA_IRQHandler+0x1da>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d007      	beq.n	8003a72 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	681a      	ldr	r2, [r3, #0]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f022 0208 	bic.w	r2, r2, #8
 8003a70:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a76:	223f      	movs	r2, #63	@ 0x3f
 8003a78:	409a      	lsls	r2, r3
 8003a7a:	693b      	ldr	r3, [r7, #16]
 8003a7c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2201      	movs	r2, #1
 8003a82:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d07e      	beq.n	8003b94 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a9a:	6878      	ldr	r0, [r7, #4]
 8003a9c:	4798      	blx	r3
        }
        return;
 8003a9e:	e079      	b.n	8003b94 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d01d      	beq.n	8003aea <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d10d      	bne.n	8003ad8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d031      	beq.n	8003b28 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ac8:	6878      	ldr	r0, [r7, #4]
 8003aca:	4798      	blx	r3
 8003acc:	e02c      	b.n	8003b28 <HAL_DMA_IRQHandler+0x2a0>
 8003ace:	bf00      	nop
 8003ad0:	20000004 	.word	0x20000004
 8003ad4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d023      	beq.n	8003b28 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ae4:	6878      	ldr	r0, [r7, #4]
 8003ae6:	4798      	blx	r3
 8003ae8:	e01e      	b.n	8003b28 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d10f      	bne.n	8003b18 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	681a      	ldr	r2, [r3, #0]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f022 0210 	bic.w	r2, r2, #16
 8003b06:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2200      	movs	r2, #0
 8003b14:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d003      	beq.n	8003b28 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b24:	6878      	ldr	r0, [r7, #4]
 8003b26:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d032      	beq.n	8003b96 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b34:	f003 0301 	and.w	r3, r3, #1
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d022      	beq.n	8003b82 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2205      	movs	r2, #5
 8003b40:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	681a      	ldr	r2, [r3, #0]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f022 0201 	bic.w	r2, r2, #1
 8003b52:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	3301      	adds	r3, #1
 8003b58:	60bb      	str	r3, [r7, #8]
 8003b5a:	697a      	ldr	r2, [r7, #20]
 8003b5c:	429a      	cmp	r2, r3
 8003b5e:	d307      	bcc.n	8003b70 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f003 0301 	and.w	r3, r3, #1
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d1f2      	bne.n	8003b54 <HAL_DMA_IRQHandler+0x2cc>
 8003b6e:	e000      	b.n	8003b72 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003b70:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2201      	movs	r2, #1
 8003b76:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d005      	beq.n	8003b96 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b8e:	6878      	ldr	r0, [r7, #4]
 8003b90:	4798      	blx	r3
 8003b92:	e000      	b.n	8003b96 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003b94:	bf00      	nop
    }
  }
}
 8003b96:	3718      	adds	r7, #24
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bd80      	pop	{r7, pc}

08003b9c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b085      	sub	sp, #20
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	60f8      	str	r0, [r7, #12]
 8003ba4:	60b9      	str	r1, [r7, #8]
 8003ba6:	607a      	str	r2, [r7, #4]
 8003ba8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	681a      	ldr	r2, [r3, #0]
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003bb8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	683a      	ldr	r2, [r7, #0]
 8003bc0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	689b      	ldr	r3, [r3, #8]
 8003bc6:	2b40      	cmp	r3, #64	@ 0x40
 8003bc8:	d108      	bne.n	8003bdc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	687a      	ldr	r2, [r7, #4]
 8003bd0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	68ba      	ldr	r2, [r7, #8]
 8003bd8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003bda:	e007      	b.n	8003bec <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	68ba      	ldr	r2, [r7, #8]
 8003be2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	687a      	ldr	r2, [r7, #4]
 8003bea:	60da      	str	r2, [r3, #12]
}
 8003bec:	bf00      	nop
 8003bee:	3714      	adds	r7, #20
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf6:	4770      	bx	lr

08003bf8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	b085      	sub	sp, #20
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	b2db      	uxtb	r3, r3
 8003c06:	3b10      	subs	r3, #16
 8003c08:	4a14      	ldr	r2, [pc, #80]	@ (8003c5c <DMA_CalcBaseAndBitshift+0x64>)
 8003c0a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c0e:	091b      	lsrs	r3, r3, #4
 8003c10:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003c12:	4a13      	ldr	r2, [pc, #76]	@ (8003c60 <DMA_CalcBaseAndBitshift+0x68>)
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	4413      	add	r3, r2
 8003c18:	781b      	ldrb	r3, [r3, #0]
 8003c1a:	461a      	mov	r2, r3
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	2b03      	cmp	r3, #3
 8003c24:	d909      	bls.n	8003c3a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003c2e:	f023 0303 	bic.w	r3, r3, #3
 8003c32:	1d1a      	adds	r2, r3, #4
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	659a      	str	r2, [r3, #88]	@ 0x58
 8003c38:	e007      	b.n	8003c4a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003c42:	f023 0303 	bic.w	r3, r3, #3
 8003c46:	687a      	ldr	r2, [r7, #4]
 8003c48:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003c4e:	4618      	mov	r0, r3
 8003c50:	3714      	adds	r7, #20
 8003c52:	46bd      	mov	sp, r7
 8003c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c58:	4770      	bx	lr
 8003c5a:	bf00      	nop
 8003c5c:	aaaaaaab 	.word	0xaaaaaaab
 8003c60:	0800bdb8 	.word	0x0800bdb8

08003c64 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003c64:	b480      	push	{r7}
 8003c66:	b085      	sub	sp, #20
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c74:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	699b      	ldr	r3, [r3, #24]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d11f      	bne.n	8003cbe <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	2b03      	cmp	r3, #3
 8003c82:	d856      	bhi.n	8003d32 <DMA_CheckFifoParam+0xce>
 8003c84:	a201      	add	r2, pc, #4	@ (adr r2, 8003c8c <DMA_CheckFifoParam+0x28>)
 8003c86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c8a:	bf00      	nop
 8003c8c:	08003c9d 	.word	0x08003c9d
 8003c90:	08003caf 	.word	0x08003caf
 8003c94:	08003c9d 	.word	0x08003c9d
 8003c98:	08003d33 	.word	0x08003d33
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ca0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d046      	beq.n	8003d36 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003ca8:	2301      	movs	r3, #1
 8003caa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003cac:	e043      	b.n	8003d36 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cb2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003cb6:	d140      	bne.n	8003d3a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003cb8:	2301      	movs	r3, #1
 8003cba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003cbc:	e03d      	b.n	8003d3a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	699b      	ldr	r3, [r3, #24]
 8003cc2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003cc6:	d121      	bne.n	8003d0c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	2b03      	cmp	r3, #3
 8003ccc:	d837      	bhi.n	8003d3e <DMA_CheckFifoParam+0xda>
 8003cce:	a201      	add	r2, pc, #4	@ (adr r2, 8003cd4 <DMA_CheckFifoParam+0x70>)
 8003cd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cd4:	08003ce5 	.word	0x08003ce5
 8003cd8:	08003ceb 	.word	0x08003ceb
 8003cdc:	08003ce5 	.word	0x08003ce5
 8003ce0:	08003cfd 	.word	0x08003cfd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	73fb      	strb	r3, [r7, #15]
      break;
 8003ce8:	e030      	b.n	8003d4c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cee:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d025      	beq.n	8003d42 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003cfa:	e022      	b.n	8003d42 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d00:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003d04:	d11f      	bne.n	8003d46 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003d06:	2301      	movs	r3, #1
 8003d08:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003d0a:	e01c      	b.n	8003d46 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	2b02      	cmp	r3, #2
 8003d10:	d903      	bls.n	8003d1a <DMA_CheckFifoParam+0xb6>
 8003d12:	68bb      	ldr	r3, [r7, #8]
 8003d14:	2b03      	cmp	r3, #3
 8003d16:	d003      	beq.n	8003d20 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003d18:	e018      	b.n	8003d4c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	73fb      	strb	r3, [r7, #15]
      break;
 8003d1e:	e015      	b.n	8003d4c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d24:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d00e      	beq.n	8003d4a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	73fb      	strb	r3, [r7, #15]
      break;
 8003d30:	e00b      	b.n	8003d4a <DMA_CheckFifoParam+0xe6>
      break;
 8003d32:	bf00      	nop
 8003d34:	e00a      	b.n	8003d4c <DMA_CheckFifoParam+0xe8>
      break;
 8003d36:	bf00      	nop
 8003d38:	e008      	b.n	8003d4c <DMA_CheckFifoParam+0xe8>
      break;
 8003d3a:	bf00      	nop
 8003d3c:	e006      	b.n	8003d4c <DMA_CheckFifoParam+0xe8>
      break;
 8003d3e:	bf00      	nop
 8003d40:	e004      	b.n	8003d4c <DMA_CheckFifoParam+0xe8>
      break;
 8003d42:	bf00      	nop
 8003d44:	e002      	b.n	8003d4c <DMA_CheckFifoParam+0xe8>
      break;   
 8003d46:	bf00      	nop
 8003d48:	e000      	b.n	8003d4c <DMA_CheckFifoParam+0xe8>
      break;
 8003d4a:	bf00      	nop
    }
  } 
  
  return status; 
 8003d4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d4e:	4618      	mov	r0, r3
 8003d50:	3714      	adds	r7, #20
 8003d52:	46bd      	mov	sp, r7
 8003d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d58:	4770      	bx	lr
 8003d5a:	bf00      	nop

08003d5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	b089      	sub	sp, #36	@ 0x24
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
 8003d64:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003d66:	2300      	movs	r3, #0
 8003d68:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003d6e:	2300      	movs	r3, #0
 8003d70:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003d72:	2300      	movs	r3, #0
 8003d74:	61fb      	str	r3, [r7, #28]
 8003d76:	e159      	b.n	800402c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003d78:	2201      	movs	r2, #1
 8003d7a:	69fb      	ldr	r3, [r7, #28]
 8003d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d80:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	697a      	ldr	r2, [r7, #20]
 8003d88:	4013      	ands	r3, r2
 8003d8a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003d8c:	693a      	ldr	r2, [r7, #16]
 8003d8e:	697b      	ldr	r3, [r7, #20]
 8003d90:	429a      	cmp	r2, r3
 8003d92:	f040 8148 	bne.w	8004026 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	f003 0303 	and.w	r3, r3, #3
 8003d9e:	2b01      	cmp	r3, #1
 8003da0:	d005      	beq.n	8003dae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003daa:	2b02      	cmp	r3, #2
 8003dac:	d130      	bne.n	8003e10 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	689b      	ldr	r3, [r3, #8]
 8003db2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003db4:	69fb      	ldr	r3, [r7, #28]
 8003db6:	005b      	lsls	r3, r3, #1
 8003db8:	2203      	movs	r2, #3
 8003dba:	fa02 f303 	lsl.w	r3, r2, r3
 8003dbe:	43db      	mvns	r3, r3
 8003dc0:	69ba      	ldr	r2, [r7, #24]
 8003dc2:	4013      	ands	r3, r2
 8003dc4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	68da      	ldr	r2, [r3, #12]
 8003dca:	69fb      	ldr	r3, [r7, #28]
 8003dcc:	005b      	lsls	r3, r3, #1
 8003dce:	fa02 f303 	lsl.w	r3, r2, r3
 8003dd2:	69ba      	ldr	r2, [r7, #24]
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	69ba      	ldr	r2, [r7, #24]
 8003ddc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003de4:	2201      	movs	r2, #1
 8003de6:	69fb      	ldr	r3, [r7, #28]
 8003de8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dec:	43db      	mvns	r3, r3
 8003dee:	69ba      	ldr	r2, [r7, #24]
 8003df0:	4013      	ands	r3, r2
 8003df2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	091b      	lsrs	r3, r3, #4
 8003dfa:	f003 0201 	and.w	r2, r3, #1
 8003dfe:	69fb      	ldr	r3, [r7, #28]
 8003e00:	fa02 f303 	lsl.w	r3, r2, r3
 8003e04:	69ba      	ldr	r2, [r7, #24]
 8003e06:	4313      	orrs	r3, r2
 8003e08:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	69ba      	ldr	r2, [r7, #24]
 8003e0e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	f003 0303 	and.w	r3, r3, #3
 8003e18:	2b03      	cmp	r3, #3
 8003e1a:	d017      	beq.n	8003e4c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	68db      	ldr	r3, [r3, #12]
 8003e20:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003e22:	69fb      	ldr	r3, [r7, #28]
 8003e24:	005b      	lsls	r3, r3, #1
 8003e26:	2203      	movs	r2, #3
 8003e28:	fa02 f303 	lsl.w	r3, r2, r3
 8003e2c:	43db      	mvns	r3, r3
 8003e2e:	69ba      	ldr	r2, [r7, #24]
 8003e30:	4013      	ands	r3, r2
 8003e32:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	689a      	ldr	r2, [r3, #8]
 8003e38:	69fb      	ldr	r3, [r7, #28]
 8003e3a:	005b      	lsls	r3, r3, #1
 8003e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e40:	69ba      	ldr	r2, [r7, #24]
 8003e42:	4313      	orrs	r3, r2
 8003e44:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	69ba      	ldr	r2, [r7, #24]
 8003e4a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	f003 0303 	and.w	r3, r3, #3
 8003e54:	2b02      	cmp	r3, #2
 8003e56:	d123      	bne.n	8003ea0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003e58:	69fb      	ldr	r3, [r7, #28]
 8003e5a:	08da      	lsrs	r2, r3, #3
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	3208      	adds	r2, #8
 8003e60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e64:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003e66:	69fb      	ldr	r3, [r7, #28]
 8003e68:	f003 0307 	and.w	r3, r3, #7
 8003e6c:	009b      	lsls	r3, r3, #2
 8003e6e:	220f      	movs	r2, #15
 8003e70:	fa02 f303 	lsl.w	r3, r2, r3
 8003e74:	43db      	mvns	r3, r3
 8003e76:	69ba      	ldr	r2, [r7, #24]
 8003e78:	4013      	ands	r3, r2
 8003e7a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	691a      	ldr	r2, [r3, #16]
 8003e80:	69fb      	ldr	r3, [r7, #28]
 8003e82:	f003 0307 	and.w	r3, r3, #7
 8003e86:	009b      	lsls	r3, r3, #2
 8003e88:	fa02 f303 	lsl.w	r3, r2, r3
 8003e8c:	69ba      	ldr	r2, [r7, #24]
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003e92:	69fb      	ldr	r3, [r7, #28]
 8003e94:	08da      	lsrs	r2, r3, #3
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	3208      	adds	r2, #8
 8003e9a:	69b9      	ldr	r1, [r7, #24]
 8003e9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003ea6:	69fb      	ldr	r3, [r7, #28]
 8003ea8:	005b      	lsls	r3, r3, #1
 8003eaa:	2203      	movs	r2, #3
 8003eac:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb0:	43db      	mvns	r3, r3
 8003eb2:	69ba      	ldr	r2, [r7, #24]
 8003eb4:	4013      	ands	r3, r2
 8003eb6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	f003 0203 	and.w	r2, r3, #3
 8003ec0:	69fb      	ldr	r3, [r7, #28]
 8003ec2:	005b      	lsls	r3, r3, #1
 8003ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec8:	69ba      	ldr	r2, [r7, #24]
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	69ba      	ldr	r2, [r7, #24]
 8003ed2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	f000 80a2 	beq.w	8004026 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	60fb      	str	r3, [r7, #12]
 8003ee6:	4b57      	ldr	r3, [pc, #348]	@ (8004044 <HAL_GPIO_Init+0x2e8>)
 8003ee8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003eea:	4a56      	ldr	r2, [pc, #344]	@ (8004044 <HAL_GPIO_Init+0x2e8>)
 8003eec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003ef0:	6453      	str	r3, [r2, #68]	@ 0x44
 8003ef2:	4b54      	ldr	r3, [pc, #336]	@ (8004044 <HAL_GPIO_Init+0x2e8>)
 8003ef4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ef6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003efa:	60fb      	str	r3, [r7, #12]
 8003efc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003efe:	4a52      	ldr	r2, [pc, #328]	@ (8004048 <HAL_GPIO_Init+0x2ec>)
 8003f00:	69fb      	ldr	r3, [r7, #28]
 8003f02:	089b      	lsrs	r3, r3, #2
 8003f04:	3302      	adds	r3, #2
 8003f06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003f0c:	69fb      	ldr	r3, [r7, #28]
 8003f0e:	f003 0303 	and.w	r3, r3, #3
 8003f12:	009b      	lsls	r3, r3, #2
 8003f14:	220f      	movs	r2, #15
 8003f16:	fa02 f303 	lsl.w	r3, r2, r3
 8003f1a:	43db      	mvns	r3, r3
 8003f1c:	69ba      	ldr	r2, [r7, #24]
 8003f1e:	4013      	ands	r3, r2
 8003f20:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	4a49      	ldr	r2, [pc, #292]	@ (800404c <HAL_GPIO_Init+0x2f0>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d019      	beq.n	8003f5e <HAL_GPIO_Init+0x202>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	4a48      	ldr	r2, [pc, #288]	@ (8004050 <HAL_GPIO_Init+0x2f4>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d013      	beq.n	8003f5a <HAL_GPIO_Init+0x1fe>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	4a47      	ldr	r2, [pc, #284]	@ (8004054 <HAL_GPIO_Init+0x2f8>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d00d      	beq.n	8003f56 <HAL_GPIO_Init+0x1fa>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	4a46      	ldr	r2, [pc, #280]	@ (8004058 <HAL_GPIO_Init+0x2fc>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d007      	beq.n	8003f52 <HAL_GPIO_Init+0x1f6>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	4a45      	ldr	r2, [pc, #276]	@ (800405c <HAL_GPIO_Init+0x300>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d101      	bne.n	8003f4e <HAL_GPIO_Init+0x1f2>
 8003f4a:	2304      	movs	r3, #4
 8003f4c:	e008      	b.n	8003f60 <HAL_GPIO_Init+0x204>
 8003f4e:	2307      	movs	r3, #7
 8003f50:	e006      	b.n	8003f60 <HAL_GPIO_Init+0x204>
 8003f52:	2303      	movs	r3, #3
 8003f54:	e004      	b.n	8003f60 <HAL_GPIO_Init+0x204>
 8003f56:	2302      	movs	r3, #2
 8003f58:	e002      	b.n	8003f60 <HAL_GPIO_Init+0x204>
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	e000      	b.n	8003f60 <HAL_GPIO_Init+0x204>
 8003f5e:	2300      	movs	r3, #0
 8003f60:	69fa      	ldr	r2, [r7, #28]
 8003f62:	f002 0203 	and.w	r2, r2, #3
 8003f66:	0092      	lsls	r2, r2, #2
 8003f68:	4093      	lsls	r3, r2
 8003f6a:	69ba      	ldr	r2, [r7, #24]
 8003f6c:	4313      	orrs	r3, r2
 8003f6e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003f70:	4935      	ldr	r1, [pc, #212]	@ (8004048 <HAL_GPIO_Init+0x2ec>)
 8003f72:	69fb      	ldr	r3, [r7, #28]
 8003f74:	089b      	lsrs	r3, r3, #2
 8003f76:	3302      	adds	r3, #2
 8003f78:	69ba      	ldr	r2, [r7, #24]
 8003f7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003f7e:	4b38      	ldr	r3, [pc, #224]	@ (8004060 <HAL_GPIO_Init+0x304>)
 8003f80:	689b      	ldr	r3, [r3, #8]
 8003f82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f84:	693b      	ldr	r3, [r7, #16]
 8003f86:	43db      	mvns	r3, r3
 8003f88:	69ba      	ldr	r2, [r7, #24]
 8003f8a:	4013      	ands	r3, r2
 8003f8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d003      	beq.n	8003fa2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003f9a:	69ba      	ldr	r2, [r7, #24]
 8003f9c:	693b      	ldr	r3, [r7, #16]
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003fa2:	4a2f      	ldr	r2, [pc, #188]	@ (8004060 <HAL_GPIO_Init+0x304>)
 8003fa4:	69bb      	ldr	r3, [r7, #24]
 8003fa6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003fa8:	4b2d      	ldr	r3, [pc, #180]	@ (8004060 <HAL_GPIO_Init+0x304>)
 8003faa:	68db      	ldr	r3, [r3, #12]
 8003fac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003fae:	693b      	ldr	r3, [r7, #16]
 8003fb0:	43db      	mvns	r3, r3
 8003fb2:	69ba      	ldr	r2, [r7, #24]
 8003fb4:	4013      	ands	r3, r2
 8003fb6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d003      	beq.n	8003fcc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003fc4:	69ba      	ldr	r2, [r7, #24]
 8003fc6:	693b      	ldr	r3, [r7, #16]
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003fcc:	4a24      	ldr	r2, [pc, #144]	@ (8004060 <HAL_GPIO_Init+0x304>)
 8003fce:	69bb      	ldr	r3, [r7, #24]
 8003fd0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003fd2:	4b23      	ldr	r3, [pc, #140]	@ (8004060 <HAL_GPIO_Init+0x304>)
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003fd8:	693b      	ldr	r3, [r7, #16]
 8003fda:	43db      	mvns	r3, r3
 8003fdc:	69ba      	ldr	r2, [r7, #24]
 8003fde:	4013      	ands	r3, r2
 8003fe0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d003      	beq.n	8003ff6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003fee:	69ba      	ldr	r2, [r7, #24]
 8003ff0:	693b      	ldr	r3, [r7, #16]
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003ff6:	4a1a      	ldr	r2, [pc, #104]	@ (8004060 <HAL_GPIO_Init+0x304>)
 8003ff8:	69bb      	ldr	r3, [r7, #24]
 8003ffa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003ffc:	4b18      	ldr	r3, [pc, #96]	@ (8004060 <HAL_GPIO_Init+0x304>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004002:	693b      	ldr	r3, [r7, #16]
 8004004:	43db      	mvns	r3, r3
 8004006:	69ba      	ldr	r2, [r7, #24]
 8004008:	4013      	ands	r3, r2
 800400a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004014:	2b00      	cmp	r3, #0
 8004016:	d003      	beq.n	8004020 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004018:	69ba      	ldr	r2, [r7, #24]
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	4313      	orrs	r3, r2
 800401e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004020:	4a0f      	ldr	r2, [pc, #60]	@ (8004060 <HAL_GPIO_Init+0x304>)
 8004022:	69bb      	ldr	r3, [r7, #24]
 8004024:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004026:	69fb      	ldr	r3, [r7, #28]
 8004028:	3301      	adds	r3, #1
 800402a:	61fb      	str	r3, [r7, #28]
 800402c:	69fb      	ldr	r3, [r7, #28]
 800402e:	2b0f      	cmp	r3, #15
 8004030:	f67f aea2 	bls.w	8003d78 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004034:	bf00      	nop
 8004036:	bf00      	nop
 8004038:	3724      	adds	r7, #36	@ 0x24
 800403a:	46bd      	mov	sp, r7
 800403c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004040:	4770      	bx	lr
 8004042:	bf00      	nop
 8004044:	40023800 	.word	0x40023800
 8004048:	40013800 	.word	0x40013800
 800404c:	40020000 	.word	0x40020000
 8004050:	40020400 	.word	0x40020400
 8004054:	40020800 	.word	0x40020800
 8004058:	40020c00 	.word	0x40020c00
 800405c:	40021000 	.word	0x40021000
 8004060:	40013c00 	.word	0x40013c00

08004064 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004064:	b480      	push	{r7}
 8004066:	b083      	sub	sp, #12
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
 800406c:	460b      	mov	r3, r1
 800406e:	807b      	strh	r3, [r7, #2]
 8004070:	4613      	mov	r3, r2
 8004072:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004074:	787b      	ldrb	r3, [r7, #1]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d003      	beq.n	8004082 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800407a:	887a      	ldrh	r2, [r7, #2]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004080:	e003      	b.n	800408a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004082:	887b      	ldrh	r3, [r7, #2]
 8004084:	041a      	lsls	r2, r3, #16
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	619a      	str	r2, [r3, #24]
}
 800408a:	bf00      	nop
 800408c:	370c      	adds	r7, #12
 800408e:	46bd      	mov	sp, r7
 8004090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004094:	4770      	bx	lr
	...

08004098 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b082      	sub	sp, #8
 800409c:	af00      	add	r7, sp, #0
 800409e:	4603      	mov	r3, r0
 80040a0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80040a2:	4b08      	ldr	r3, [pc, #32]	@ (80040c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80040a4:	695a      	ldr	r2, [r3, #20]
 80040a6:	88fb      	ldrh	r3, [r7, #6]
 80040a8:	4013      	ands	r3, r2
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d006      	beq.n	80040bc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80040ae:	4a05      	ldr	r2, [pc, #20]	@ (80040c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80040b0:	88fb      	ldrh	r3, [r7, #6]
 80040b2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80040b4:	88fb      	ldrh	r3, [r7, #6]
 80040b6:	4618      	mov	r0, r3
 80040b8:	f7fe f898 	bl	80021ec <HAL_GPIO_EXTI_Callback>
  }
}
 80040bc:	bf00      	nop
 80040be:	3708      	adds	r7, #8
 80040c0:	46bd      	mov	sp, r7
 80040c2:	bd80      	pop	{r7, pc}
 80040c4:	40013c00 	.word	0x40013c00

080040c8 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b088      	sub	sp, #32
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d101      	bne.n	80040da <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80040d6:	2301      	movs	r3, #1
 80040d8:	e128      	b.n	800432c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80040e0:	b2db      	uxtb	r3, r3
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d109      	bne.n	80040fa <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2200      	movs	r2, #0
 80040ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	4a90      	ldr	r2, [pc, #576]	@ (8004334 <HAL_I2S_Init+0x26c>)
 80040f2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80040f4:	6878      	ldr	r0, [r7, #4]
 80040f6:	f7fe f9b1 	bl	800245c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2202      	movs	r2, #2
 80040fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	69db      	ldr	r3, [r3, #28]
 8004108:	687a      	ldr	r2, [r7, #4]
 800410a:	6812      	ldr	r2, [r2, #0]
 800410c:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8004110:	f023 030f 	bic.w	r3, r3, #15
 8004114:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	2202      	movs	r2, #2
 800411c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	695b      	ldr	r3, [r3, #20]
 8004122:	2b02      	cmp	r3, #2
 8004124:	d060      	beq.n	80041e8 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	68db      	ldr	r3, [r3, #12]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d102      	bne.n	8004134 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800412e:	2310      	movs	r3, #16
 8004130:	617b      	str	r3, [r7, #20]
 8004132:	e001      	b.n	8004138 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8004134:	2320      	movs	r3, #32
 8004136:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	689b      	ldr	r3, [r3, #8]
 800413c:	2b20      	cmp	r3, #32
 800413e:	d802      	bhi.n	8004146 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8004140:	697b      	ldr	r3, [r7, #20]
 8004142:	005b      	lsls	r3, r3, #1
 8004144:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8004146:	2001      	movs	r0, #1
 8004148:	f001 fcfc 	bl	8005b44 <HAL_RCCEx_GetPeriphCLKFreq>
 800414c:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	691b      	ldr	r3, [r3, #16]
 8004152:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004156:	d125      	bne.n	80041a4 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	68db      	ldr	r3, [r3, #12]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d010      	beq.n	8004182 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004160:	697b      	ldr	r3, [r7, #20]
 8004162:	009b      	lsls	r3, r3, #2
 8004164:	68fa      	ldr	r2, [r7, #12]
 8004166:	fbb2 f2f3 	udiv	r2, r2, r3
 800416a:	4613      	mov	r3, r2
 800416c:	009b      	lsls	r3, r3, #2
 800416e:	4413      	add	r3, r2
 8004170:	005b      	lsls	r3, r3, #1
 8004172:	461a      	mov	r2, r3
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	695b      	ldr	r3, [r3, #20]
 8004178:	fbb2 f3f3 	udiv	r3, r2, r3
 800417c:	3305      	adds	r3, #5
 800417e:	613b      	str	r3, [r7, #16]
 8004180:	e01f      	b.n	80041c2 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004182:	697b      	ldr	r3, [r7, #20]
 8004184:	00db      	lsls	r3, r3, #3
 8004186:	68fa      	ldr	r2, [r7, #12]
 8004188:	fbb2 f2f3 	udiv	r2, r2, r3
 800418c:	4613      	mov	r3, r2
 800418e:	009b      	lsls	r3, r3, #2
 8004190:	4413      	add	r3, r2
 8004192:	005b      	lsls	r3, r3, #1
 8004194:	461a      	mov	r2, r3
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	695b      	ldr	r3, [r3, #20]
 800419a:	fbb2 f3f3 	udiv	r3, r2, r3
 800419e:	3305      	adds	r3, #5
 80041a0:	613b      	str	r3, [r7, #16]
 80041a2:	e00e      	b.n	80041c2 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80041a4:	68fa      	ldr	r2, [r7, #12]
 80041a6:	697b      	ldr	r3, [r7, #20]
 80041a8:	fbb2 f2f3 	udiv	r2, r2, r3
 80041ac:	4613      	mov	r3, r2
 80041ae:	009b      	lsls	r3, r3, #2
 80041b0:	4413      	add	r3, r2
 80041b2:	005b      	lsls	r3, r3, #1
 80041b4:	461a      	mov	r2, r3
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	695b      	ldr	r3, [r3, #20]
 80041ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80041be:	3305      	adds	r3, #5
 80041c0:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80041c2:	693b      	ldr	r3, [r7, #16]
 80041c4:	4a5c      	ldr	r2, [pc, #368]	@ (8004338 <HAL_I2S_Init+0x270>)
 80041c6:	fba2 2303 	umull	r2, r3, r2, r3
 80041ca:	08db      	lsrs	r3, r3, #3
 80041cc:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80041ce:	693b      	ldr	r3, [r7, #16]
 80041d0:	f003 0301 	and.w	r3, r3, #1
 80041d4:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80041d6:	693a      	ldr	r2, [r7, #16]
 80041d8:	69bb      	ldr	r3, [r7, #24]
 80041da:	1ad3      	subs	r3, r2, r3
 80041dc:	085b      	lsrs	r3, r3, #1
 80041de:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80041e0:	69bb      	ldr	r3, [r7, #24]
 80041e2:	021b      	lsls	r3, r3, #8
 80041e4:	61bb      	str	r3, [r7, #24]
 80041e6:	e003      	b.n	80041f0 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80041e8:	2302      	movs	r3, #2
 80041ea:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80041ec:	2300      	movs	r3, #0
 80041ee:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80041f0:	69fb      	ldr	r3, [r7, #28]
 80041f2:	2b01      	cmp	r3, #1
 80041f4:	d902      	bls.n	80041fc <HAL_I2S_Init+0x134>
 80041f6:	69fb      	ldr	r3, [r7, #28]
 80041f8:	2bff      	cmp	r3, #255	@ 0xff
 80041fa:	d907      	bls.n	800420c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004200:	f043 0210 	orr.w	r2, r3, #16
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8004208:	2301      	movs	r3, #1
 800420a:	e08f      	b.n	800432c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	691a      	ldr	r2, [r3, #16]
 8004210:	69bb      	ldr	r3, [r7, #24]
 8004212:	ea42 0103 	orr.w	r1, r2, r3
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	69fa      	ldr	r2, [r7, #28]
 800421c:	430a      	orrs	r2, r1
 800421e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	69db      	ldr	r3, [r3, #28]
 8004226:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 800422a:	f023 030f 	bic.w	r3, r3, #15
 800422e:	687a      	ldr	r2, [r7, #4]
 8004230:	6851      	ldr	r1, [r2, #4]
 8004232:	687a      	ldr	r2, [r7, #4]
 8004234:	6892      	ldr	r2, [r2, #8]
 8004236:	4311      	orrs	r1, r2
 8004238:	687a      	ldr	r2, [r7, #4]
 800423a:	68d2      	ldr	r2, [r2, #12]
 800423c:	4311      	orrs	r1, r2
 800423e:	687a      	ldr	r2, [r7, #4]
 8004240:	6992      	ldr	r2, [r2, #24]
 8004242:	430a      	orrs	r2, r1
 8004244:	431a      	orrs	r2, r3
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800424e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6a1b      	ldr	r3, [r3, #32]
 8004254:	2b01      	cmp	r3, #1
 8004256:	d161      	bne.n	800431c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	4a38      	ldr	r2, [pc, #224]	@ (800433c <HAL_I2S_Init+0x274>)
 800425c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4a37      	ldr	r2, [pc, #220]	@ (8004340 <HAL_I2S_Init+0x278>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d101      	bne.n	800426c <HAL_I2S_Init+0x1a4>
 8004268:	4b36      	ldr	r3, [pc, #216]	@ (8004344 <HAL_I2S_Init+0x27c>)
 800426a:	e001      	b.n	8004270 <HAL_I2S_Init+0x1a8>
 800426c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004270:	69db      	ldr	r3, [r3, #28]
 8004272:	687a      	ldr	r2, [r7, #4]
 8004274:	6812      	ldr	r2, [r2, #0]
 8004276:	4932      	ldr	r1, [pc, #200]	@ (8004340 <HAL_I2S_Init+0x278>)
 8004278:	428a      	cmp	r2, r1
 800427a:	d101      	bne.n	8004280 <HAL_I2S_Init+0x1b8>
 800427c:	4a31      	ldr	r2, [pc, #196]	@ (8004344 <HAL_I2S_Init+0x27c>)
 800427e:	e001      	b.n	8004284 <HAL_I2S_Init+0x1bc>
 8004280:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8004284:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8004288:	f023 030f 	bic.w	r3, r3, #15
 800428c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4a2b      	ldr	r2, [pc, #172]	@ (8004340 <HAL_I2S_Init+0x278>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d101      	bne.n	800429c <HAL_I2S_Init+0x1d4>
 8004298:	4b2a      	ldr	r3, [pc, #168]	@ (8004344 <HAL_I2S_Init+0x27c>)
 800429a:	e001      	b.n	80042a0 <HAL_I2S_Init+0x1d8>
 800429c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80042a0:	2202      	movs	r2, #2
 80042a2:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a25      	ldr	r2, [pc, #148]	@ (8004340 <HAL_I2S_Init+0x278>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d101      	bne.n	80042b2 <HAL_I2S_Init+0x1ea>
 80042ae:	4b25      	ldr	r3, [pc, #148]	@ (8004344 <HAL_I2S_Init+0x27c>)
 80042b0:	e001      	b.n	80042b6 <HAL_I2S_Init+0x1ee>
 80042b2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80042b6:	69db      	ldr	r3, [r3, #28]
 80042b8:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80042c2:	d003      	beq.n	80042cc <HAL_I2S_Init+0x204>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d103      	bne.n	80042d4 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80042cc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80042d0:	613b      	str	r3, [r7, #16]
 80042d2:	e001      	b.n	80042d8 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80042d4:	2300      	movs	r3, #0
 80042d6:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80042d8:	693b      	ldr	r3, [r7, #16]
 80042da:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	689b      	ldr	r3, [r3, #8]
 80042e0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80042e2:	4313      	orrs	r3, r2
 80042e4:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	68db      	ldr	r3, [r3, #12]
 80042ea:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80042ec:	4313      	orrs	r3, r2
 80042ee:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	699b      	ldr	r3, [r3, #24]
 80042f4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80042f6:	4313      	orrs	r3, r2
 80042f8:	b29a      	uxth	r2, r3
 80042fa:	897b      	ldrh	r3, [r7, #10]
 80042fc:	4313      	orrs	r3, r2
 80042fe:	b29b      	uxth	r3, r3
 8004300:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8004304:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a0d      	ldr	r2, [pc, #52]	@ (8004340 <HAL_I2S_Init+0x278>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d101      	bne.n	8004314 <HAL_I2S_Init+0x24c>
 8004310:	4b0c      	ldr	r3, [pc, #48]	@ (8004344 <HAL_I2S_Init+0x27c>)
 8004312:	e001      	b.n	8004318 <HAL_I2S_Init+0x250>
 8004314:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004318:	897a      	ldrh	r2, [r7, #10]
 800431a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2200      	movs	r2, #0
 8004320:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2201      	movs	r2, #1
 8004326:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 800432a:	2300      	movs	r3, #0
}
 800432c:	4618      	mov	r0, r3
 800432e:	3720      	adds	r7, #32
 8004330:	46bd      	mov	sp, r7
 8004332:	bd80      	pop	{r7, pc}
 8004334:	080049f9 	.word	0x080049f9
 8004338:	cccccccd 	.word	0xcccccccd
 800433c:	08004b81 	.word	0x08004b81
 8004340:	40003800 	.word	0x40003800
 8004344:	40003400 	.word	0x40003400

08004348 <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b086      	sub	sp, #24
 800434c:	af00      	add	r7, sp, #0
 800434e:	60f8      	str	r0, [r7, #12]
 8004350:	60b9      	str	r1, [r7, #8]
 8004352:	4613      	mov	r3, r2
 8004354:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8004356:	68bb      	ldr	r3, [r7, #8]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d002      	beq.n	8004362 <HAL_I2S_Receive_DMA+0x1a>
 800435c:	88fb      	ldrh	r3, [r7, #6]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d101      	bne.n	8004366 <HAL_I2S_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 8004362:	2301      	movs	r3, #1
 8004364:	e09d      	b.n	80044a2 <HAL_I2S_Receive_DMA+0x15a>
  }

  if (hi2s->State != HAL_I2S_STATE_READY)
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800436c:	b2db      	uxtb	r3, r3
 800436e:	2b01      	cmp	r3, #1
 8004370:	d001      	beq.n	8004376 <HAL_I2S_Receive_DMA+0x2e>
  {
    return HAL_BUSY;
 8004372:	2302      	movs	r3, #2
 8004374:	e095      	b.n	80044a2 <HAL_I2S_Receive_DMA+0x15a>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800437c:	b2db      	uxtb	r3, r3
 800437e:	2b01      	cmp	r3, #1
 8004380:	d101      	bne.n	8004386 <HAL_I2S_Receive_DMA+0x3e>
 8004382:	2302      	movs	r3, #2
 8004384:	e08d      	b.n	80044a2 <HAL_I2S_Receive_DMA+0x15a>
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	2201      	movs	r2, #1
 800438a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	2204      	movs	r2, #4
 8004392:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	2200      	movs	r2, #0
 800439a:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->pRxBuffPtr = pData;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	68ba      	ldr	r2, [r7, #8]
 80043a0:	62da      	str	r2, [r3, #44]	@ 0x2c

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	69db      	ldr	r3, [r3, #28]
 80043a8:	f003 0307 	and.w	r3, r3, #7
 80043ac:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 80043ae:	697b      	ldr	r3, [r7, #20]
 80043b0:	2b03      	cmp	r3, #3
 80043b2:	d002      	beq.n	80043ba <HAL_I2S_Receive_DMA+0x72>
 80043b4:	697b      	ldr	r3, [r7, #20]
 80043b6:	2b05      	cmp	r3, #5
 80043b8:	d10a      	bne.n	80043d0 <HAL_I2S_Receive_DMA+0x88>
  {
    hi2s->RxXferSize = (Size << 1U);
 80043ba:	88fb      	ldrh	r3, [r7, #6]
 80043bc:	005b      	lsls	r3, r3, #1
 80043be:	b29a      	uxth	r2, r3
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	861a      	strh	r2, [r3, #48]	@ 0x30
    hi2s->RxXferCount = (Size << 1U);
 80043c4:	88fb      	ldrh	r3, [r7, #6]
 80043c6:	005b      	lsls	r3, r3, #1
 80043c8:	b29a      	uxth	r2, r3
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	865a      	strh	r2, [r3, #50]	@ 0x32
 80043ce:	e005      	b.n	80043dc <HAL_I2S_Receive_DMA+0x94>
  }
  else
  {
    hi2s->RxXferSize = Size;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	88fa      	ldrh	r2, [r7, #6]
 80043d4:	861a      	strh	r2, [r3, #48]	@ 0x30
    hi2s->RxXferCount = Size;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	88fa      	ldrh	r2, [r7, #6]
 80043da:	865a      	strh	r2, [r3, #50]	@ 0x32
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043e0:	4a32      	ldr	r2, [pc, #200]	@ (80044ac <HAL_I2S_Receive_DMA+0x164>)
 80043e2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043e8:	4a31      	ldr	r2, [pc, #196]	@ (80044b0 <HAL_I2S_Receive_DMA+0x168>)
 80043ea:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043f0:	4a30      	ldr	r2, [pc, #192]	@ (80044b4 <HAL_I2S_Receive_DMA+0x16c>)
 80043f2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	69db      	ldr	r3, [r3, #28]
 80043fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80043fe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004402:	d10a      	bne.n	800441a <HAL_I2S_Receive_DMA+0xd2>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004404:	2300      	movs	r3, #0
 8004406:	613b      	str	r3, [r7, #16]
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	68db      	ldr	r3, [r3, #12]
 800440e:	613b      	str	r3, [r7, #16]
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	689b      	ldr	r3, [r3, #8]
 8004416:	613b      	str	r3, [r7, #16]
 8004418:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	330c      	adds	r3, #12
 8004424:	4619      	mov	r1, r3
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800442a:	461a      	mov	r2, r3
                                 hi2s->RxXferSize))
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8004430:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8004432:	f7ff f961 	bl	80036f8 <HAL_DMA_Start_IT>
 8004436:	4603      	mov	r3, r0
 8004438:	2b00      	cmp	r3, #0
 800443a:	d00f      	beq.n	800445c <HAL_I2S_Receive_DMA+0x114>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004440:	f043 0208 	orr.w	r2, r3, #8
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	2201      	movs	r2, #1
 800444c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    __HAL_UNLOCK(hi2s);
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	2200      	movs	r2, #0
 8004454:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    return HAL_ERROR;
 8004458:	2301      	movs	r3, #1
 800445a:	e022      	b.n	80044a2 <HAL_I2S_Receive_DMA+0x15a>
  }

  __HAL_UNLOCK(hi2s);
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	2200      	movs	r2, #0
 8004460:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	f003 0301 	and.w	r3, r3, #1
 800446e:	2b00      	cmp	r3, #0
 8004470:	d107      	bne.n	8004482 <HAL_I2S_Receive_DMA+0x13a>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	685a      	ldr	r2, [r3, #4]
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f042 0201 	orr.w	r2, r2, #1
 8004480:	605a      	str	r2, [r3, #4]
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	69db      	ldr	r3, [r3, #28]
 8004488:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800448c:	2b00      	cmp	r3, #0
 800448e:	d107      	bne.n	80044a0 <HAL_I2S_Receive_DMA+0x158>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	69da      	ldr	r2, [r3, #28]
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800449e:	61da      	str	r2, [r3, #28]
  }

  return HAL_OK;
 80044a0:	2300      	movs	r3, #0
}
 80044a2:	4618      	mov	r0, r3
 80044a4:	3718      	adds	r7, #24
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bd80      	pop	{r7, pc}
 80044aa:	bf00      	nop
 80044ac:	080048d7 	.word	0x080048d7
 80044b0:	08004895 	.word	0x08004895
 80044b4:	080048f3 	.word	0x080048f3

080044b8 <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b088      	sub	sp, #32
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint32_t tickstart;
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  HAL_StatusTypeDef errorcode = HAL_OK;
 80044c0:	2300      	movs	r3, #0
 80044c2:	77fb      	strb	r3, [r7, #31]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80044cc:	d004      	beq.n	80044d8 <HAL_I2S_DMAStop+0x20>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	f040 80d1 	bne.w	800467a <HAL_I2S_DMAStop+0x1c2>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d00f      	beq.n	8004500 <HAL_I2S_DMAStop+0x48>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044e4:	4618      	mov	r0, r3
 80044e6:	f7ff f95f 	bl	80037a8 <HAL_DMA_Abort>
 80044ea:	4603      	mov	r3, r0
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d007      	beq.n	8004500 <HAL_I2S_DMAStop+0x48>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044f4:	f043 0208 	orr.w	r2, r3, #8
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	645a      	str	r2, [r3, #68]	@ 0x44
        errorcode = HAL_ERROR;
 80044fc:	2301      	movs	r3, #1
 80044fe:	77fb      	strb	r3, [r7, #31]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8004500:	2364      	movs	r3, #100	@ 0x64
 8004502:	2201      	movs	r2, #1
 8004504:	2102      	movs	r1, #2
 8004506:	6878      	ldr	r0, [r7, #4]
 8004508:	f000 fb00 	bl	8004b0c <I2S_WaitFlagStateUntilTimeout>
 800450c:	4603      	mov	r3, r0
 800450e:	2b00      	cmp	r3, #0
 8004510:	d00b      	beq.n	800452a <HAL_I2S_DMAStop+0x72>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004516:	f043 0201 	orr.w	r2, r3, #1
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2201      	movs	r2, #1
 8004522:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      errorcode   = HAL_ERROR;
 8004526:	2301      	movs	r3, #1
 8004528:	77fb      	strb	r3, [r7, #31]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 800452a:	2364      	movs	r3, #100	@ 0x64
 800452c:	2200      	movs	r2, #0
 800452e:	2180      	movs	r1, #128	@ 0x80
 8004530:	6878      	ldr	r0, [r7, #4]
 8004532:	f000 faeb 	bl	8004b0c <I2S_WaitFlagStateUntilTimeout>
 8004536:	4603      	mov	r3, r0
 8004538:	2b00      	cmp	r3, #0
 800453a:	d00b      	beq.n	8004554 <HAL_I2S_DMAStop+0x9c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004540:	f043 0201 	orr.w	r2, r3, #1
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2201      	movs	r2, #1
 800454c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      errorcode   = HAL_ERROR;
 8004550:	2301      	movs	r3, #1
 8004552:	77fb      	strb	r3, [r7, #31]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	69da      	ldr	r2, [r3, #28]
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004562:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004564:	2300      	movs	r3, #0
 8004566:	617b      	str	r3, [r7, #20]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	689b      	ldr	r3, [r3, #8]
 800456e:	617b      	str	r3, [r7, #20]
 8004570:	697b      	ldr	r3, [r7, #20]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	685a      	ldr	r2, [r3, #4]
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f022 0202 	bic.w	r2, r2, #2
 8004580:	605a      	str	r2, [r3, #4]

#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004588:	b2db      	uxtb	r3, r3
 800458a:	2b05      	cmp	r3, #5
 800458c:	f040 8165 	bne.w	800485a <HAL_I2S_DMAStop+0x3a2>
    {
      /* Abort the I2S DMA rx Stream/Channel */
      if (hi2s->hdmarx != NULL)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004594:	2b00      	cmp	r3, #0
 8004596:	d00f      	beq.n	80045b8 <HAL_I2S_DMAStop+0x100>
      {
        /* Disable the I2S DMA rx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800459c:	4618      	mov	r0, r3
 800459e:	f7ff f903 	bl	80037a8 <HAL_DMA_Abort>
 80045a2:	4603      	mov	r3, r0
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d007      	beq.n	80045b8 <HAL_I2S_DMAStop+0x100>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045ac:	f043 0208 	orr.w	r2, r3, #8
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	645a      	str	r2, [r3, #68]	@ 0x44
          errorcode = HAL_ERROR;
 80045b4:	2301      	movs	r3, #1
 80045b6:	77fb      	strb	r3, [r7, #31]
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4a8a      	ldr	r2, [pc, #552]	@ (80047e8 <HAL_I2S_DMAStop+0x330>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d101      	bne.n	80045c6 <HAL_I2S_DMAStop+0x10e>
 80045c2:	4b8a      	ldr	r3, [pc, #552]	@ (80047ec <HAL_I2S_DMAStop+0x334>)
 80045c4:	e001      	b.n	80045ca <HAL_I2S_DMAStop+0x112>
 80045c6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80045ca:	69da      	ldr	r2, [r3, #28]
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4985      	ldr	r1, [pc, #532]	@ (80047e8 <HAL_I2S_DMAStop+0x330>)
 80045d2:	428b      	cmp	r3, r1
 80045d4:	d101      	bne.n	80045da <HAL_I2S_DMAStop+0x122>
 80045d6:	4b85      	ldr	r3, [pc, #532]	@ (80047ec <HAL_I2S_DMAStop+0x334>)
 80045d8:	e001      	b.n	80045de <HAL_I2S_DMAStop+0x126>
 80045da:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80045de:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80045e2:	61da      	str	r2, [r3, #28]

      /* Clear OVR flag */
      __HAL_I2SEXT_CLEAR_OVRFLAG(hi2s);
 80045e4:	2300      	movs	r3, #0
 80045e6:	613b      	str	r3, [r7, #16]
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4a7e      	ldr	r2, [pc, #504]	@ (80047e8 <HAL_I2S_DMAStop+0x330>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d101      	bne.n	80045f6 <HAL_I2S_DMAStop+0x13e>
 80045f2:	4b7e      	ldr	r3, [pc, #504]	@ (80047ec <HAL_I2S_DMAStop+0x334>)
 80045f4:	e001      	b.n	80045fa <HAL_I2S_DMAStop+0x142>
 80045f6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80045fa:	68db      	ldr	r3, [r3, #12]
 80045fc:	613b      	str	r3, [r7, #16]
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4a79      	ldr	r2, [pc, #484]	@ (80047e8 <HAL_I2S_DMAStop+0x330>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d101      	bne.n	800460c <HAL_I2S_DMAStop+0x154>
 8004608:	4b78      	ldr	r3, [pc, #480]	@ (80047ec <HAL_I2S_DMAStop+0x334>)
 800460a:	e001      	b.n	8004610 <HAL_I2S_DMAStop+0x158>
 800460c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004610:	689b      	ldr	r3, [r3, #8]
 8004612:	613b      	str	r3, [r7, #16]
 8004614:	693b      	ldr	r3, [r7, #16]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4a73      	ldr	r2, [pc, #460]	@ (80047e8 <HAL_I2S_DMAStop+0x330>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d101      	bne.n	8004624 <HAL_I2S_DMAStop+0x16c>
 8004620:	4b72      	ldr	r3, [pc, #456]	@ (80047ec <HAL_I2S_DMAStop+0x334>)
 8004622:	e001      	b.n	8004628 <HAL_I2S_DMAStop+0x170>
 8004624:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004628:	685a      	ldr	r2, [r3, #4]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	496e      	ldr	r1, [pc, #440]	@ (80047e8 <HAL_I2S_DMAStop+0x330>)
 8004630:	428b      	cmp	r3, r1
 8004632:	d101      	bne.n	8004638 <HAL_I2S_DMAStop+0x180>
 8004634:	4b6d      	ldr	r3, [pc, #436]	@ (80047ec <HAL_I2S_DMAStop+0x334>)
 8004636:	e001      	b.n	800463c <HAL_I2S_DMAStop+0x184>
 8004638:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800463c:	f022 0201 	bic.w	r2, r2, #1
 8004640:	605a      	str	r2, [r3, #4]

      if (hi2s->Init.Mode == I2S_MODE_SLAVE_TX)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d10c      	bne.n	8004664 <HAL_I2S_DMAStop+0x1ac>
      {
        /* Set the error code */
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800464e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2201      	movs	r2, #1
 800465a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        errorcode = HAL_ERROR;
 800465e:	2301      	movs	r3, #1
 8004660:	77fb      	strb	r3, [r7, #31]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8004662:	e0fa      	b.n	800485a <HAL_I2S_DMAStop+0x3a2>
      }
      else
      {
        /* Read DR to Flush RX Data */
        READ_REG(I2SxEXT(hi2s->Instance)->DR);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a5f      	ldr	r2, [pc, #380]	@ (80047e8 <HAL_I2S_DMAStop+0x330>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d101      	bne.n	8004672 <HAL_I2S_DMAStop+0x1ba>
 800466e:	4b5f      	ldr	r3, [pc, #380]	@ (80047ec <HAL_I2S_DMAStop+0x334>)
 8004670:	e001      	b.n	8004676 <HAL_I2S_DMAStop+0x1be>
 8004672:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004676:	68db      	ldr	r3, [r3, #12]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8004678:	e0ef      	b.n	800485a <HAL_I2S_DMAStop+0x3a2>
      }
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	685b      	ldr	r3, [r3, #4]
 800467e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004682:	d005      	beq.n	8004690 <HAL_I2S_DMAStop+0x1d8>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800468c:	f040 80e5 	bne.w	800485a <HAL_I2S_DMAStop+0x3a2>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004694:	2b00      	cmp	r3, #0
 8004696:	d00f      	beq.n	80046b8 <HAL_I2S_DMAStop+0x200>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800469c:	4618      	mov	r0, r3
 800469e:	f7ff f883 	bl	80037a8 <HAL_DMA_Abort>
 80046a2:	4603      	mov	r3, r0
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d007      	beq.n	80046b8 <HAL_I2S_DMAStop+0x200>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046ac:	f043 0208 	orr.w	r2, r3, #8
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	645a      	str	r2, [r3, #68]	@ 0x44
        errorcode = HAL_ERROR;
 80046b4:	2301      	movs	r3, #1
 80046b6:	77fb      	strb	r3, [r7, #31]
      }
    }
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80046be:	b2db      	uxtb	r3, r3
 80046c0:	2b05      	cmp	r3, #5
 80046c2:	f040 809a 	bne.w	80047fa <HAL_I2S_DMAStop+0x342>
    {
      /* Abort the I2S DMA tx Stream/Channel */
      if (hi2s->hdmatx != NULL)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d00f      	beq.n	80046ee <HAL_I2S_DMAStop+0x236>
      {
        /* Disable the I2S DMA tx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046d2:	4618      	mov	r0, r3
 80046d4:	f7ff f868 	bl	80037a8 <HAL_DMA_Abort>
 80046d8:	4603      	mov	r3, r0
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d007      	beq.n	80046ee <HAL_I2S_DMAStop+0x236>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046e2:	f043 0208 	orr.w	r2, r3, #8
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	645a      	str	r2, [r3, #68]	@ 0x44
          errorcode = HAL_ERROR;
 80046ea:	2301      	movs	r3, #1
 80046ec:	77fb      	strb	r3, [r7, #31]
        }
      }

      tickstart = HAL_GetTick();
 80046ee:	f7fe fe13 	bl	8003318 <HAL_GetTick>
 80046f2:	61b8      	str	r0, [r7, #24]

      /* Wait until TXE flag is set */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 80046f4:	e012      	b.n	800471c <HAL_I2S_DMAStop+0x264>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 80046f6:	f7fe fe0f 	bl	8003318 <HAL_GetTick>
 80046fa:	4602      	mov	r2, r0
 80046fc:	69bb      	ldr	r3, [r7, #24]
 80046fe:	1ad3      	subs	r3, r2, r3
 8004700:	2b64      	cmp	r3, #100	@ 0x64
 8004702:	d90b      	bls.n	800471c <HAL_I2S_DMAStop+0x264>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004708:	f043 0201 	orr.w	r2, r3, #1
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2201      	movs	r2, #1
 8004714:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          errorcode   = HAL_ERROR;
 8004718:	2301      	movs	r3, #1
 800471a:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a31      	ldr	r2, [pc, #196]	@ (80047e8 <HAL_I2S_DMAStop+0x330>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d101      	bne.n	800472a <HAL_I2S_DMAStop+0x272>
 8004726:	4b31      	ldr	r3, [pc, #196]	@ (80047ec <HAL_I2S_DMAStop+0x334>)
 8004728:	e001      	b.n	800472e <HAL_I2S_DMAStop+0x276>
 800472a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800472e:	689b      	ldr	r3, [r3, #8]
 8004730:	f003 0302 	and.w	r3, r3, #2
 8004734:	2b02      	cmp	r3, #2
 8004736:	d1de      	bne.n	80046f6 <HAL_I2S_DMAStop+0x23e>
        }
      }

      /* Wait until BSY flag is Reset */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 8004738:	e012      	b.n	8004760 <HAL_I2S_DMAStop+0x2a8>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 800473a:	f7fe fded 	bl	8003318 <HAL_GetTick>
 800473e:	4602      	mov	r2, r0
 8004740:	69bb      	ldr	r3, [r7, #24]
 8004742:	1ad3      	subs	r3, r2, r3
 8004744:	2b64      	cmp	r3, #100	@ 0x64
 8004746:	d90b      	bls.n	8004760 <HAL_I2S_DMAStop+0x2a8>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800474c:	f043 0201 	orr.w	r2, r3, #1
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2201      	movs	r2, #1
 8004758:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          errorcode   = HAL_ERROR;
 800475c:	2301      	movs	r3, #1
 800475e:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a20      	ldr	r2, [pc, #128]	@ (80047e8 <HAL_I2S_DMAStop+0x330>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d101      	bne.n	800476e <HAL_I2S_DMAStop+0x2b6>
 800476a:	4b20      	ldr	r3, [pc, #128]	@ (80047ec <HAL_I2S_DMAStop+0x334>)
 800476c:	e001      	b.n	8004772 <HAL_I2S_DMAStop+0x2ba>
 800476e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004772:	689b      	ldr	r3, [r3, #8]
 8004774:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004778:	2b80      	cmp	r3, #128	@ 0x80
 800477a:	d0de      	beq.n	800473a <HAL_I2S_DMAStop+0x282>
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4a19      	ldr	r2, [pc, #100]	@ (80047e8 <HAL_I2S_DMAStop+0x330>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d101      	bne.n	800478a <HAL_I2S_DMAStop+0x2d2>
 8004786:	4b19      	ldr	r3, [pc, #100]	@ (80047ec <HAL_I2S_DMAStop+0x334>)
 8004788:	e001      	b.n	800478e <HAL_I2S_DMAStop+0x2d6>
 800478a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800478e:	69da      	ldr	r2, [r3, #28]
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4914      	ldr	r1, [pc, #80]	@ (80047e8 <HAL_I2S_DMAStop+0x330>)
 8004796:	428b      	cmp	r3, r1
 8004798:	d101      	bne.n	800479e <HAL_I2S_DMAStop+0x2e6>
 800479a:	4b14      	ldr	r3, [pc, #80]	@ (80047ec <HAL_I2S_DMAStop+0x334>)
 800479c:	e001      	b.n	80047a2 <HAL_I2S_DMAStop+0x2ea>
 800479e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80047a2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80047a6:	61da      	str	r2, [r3, #28]

      /* Clear UDR flag */
      __HAL_I2SEXT_CLEAR_UDRFLAG(hi2s);
 80047a8:	2300      	movs	r3, #0
 80047aa:	60fb      	str	r3, [r7, #12]
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a0d      	ldr	r2, [pc, #52]	@ (80047e8 <HAL_I2S_DMAStop+0x330>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d101      	bne.n	80047ba <HAL_I2S_DMAStop+0x302>
 80047b6:	4b0d      	ldr	r3, [pc, #52]	@ (80047ec <HAL_I2S_DMAStop+0x334>)
 80047b8:	e001      	b.n	80047be <HAL_I2S_DMAStop+0x306>
 80047ba:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80047be:	689b      	ldr	r3, [r3, #8]
 80047c0:	60fb      	str	r3, [r7, #12]
 80047c2:	68fb      	ldr	r3, [r7, #12]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4a07      	ldr	r2, [pc, #28]	@ (80047e8 <HAL_I2S_DMAStop+0x330>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d101      	bne.n	80047d2 <HAL_I2S_DMAStop+0x31a>
 80047ce:	4b07      	ldr	r3, [pc, #28]	@ (80047ec <HAL_I2S_DMAStop+0x334>)
 80047d0:	e001      	b.n	80047d6 <HAL_I2S_DMAStop+0x31e>
 80047d2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80047d6:	685a      	ldr	r2, [r3, #4]
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4902      	ldr	r1, [pc, #8]	@ (80047e8 <HAL_I2S_DMAStop+0x330>)
 80047de:	428b      	cmp	r3, r1
 80047e0:	d106      	bne.n	80047f0 <HAL_I2S_DMAStop+0x338>
 80047e2:	4b02      	ldr	r3, [pc, #8]	@ (80047ec <HAL_I2S_DMAStop+0x334>)
 80047e4:	e006      	b.n	80047f4 <HAL_I2S_DMAStop+0x33c>
 80047e6:	bf00      	nop
 80047e8:	40003800 	.word	0x40003800
 80047ec:	40003400 	.word	0x40003400
 80047f0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80047f4:	f022 0202 	bic.w	r2, r2, #2
 80047f8:	605a      	str	r2, [r3, #4]
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	69da      	ldr	r2, [r3, #28]
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004808:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800480a:	2300      	movs	r3, #0
 800480c:	60bb      	str	r3, [r7, #8]
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	68db      	ldr	r3, [r3, #12]
 8004814:	60bb      	str	r3, [r7, #8]
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	689b      	ldr	r3, [r3, #8]
 800481c:	60bb      	str	r3, [r7, #8]
 800481e:	68bb      	ldr	r3, [r7, #8]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	685a      	ldr	r2, [r3, #4]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f022 0201 	bic.w	r2, r2, #1
 800482e:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004838:	d10c      	bne.n	8004854 <HAL_I2S_DMAStop+0x39c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800483e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2201      	movs	r2, #1
 800484a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      errorcode = HAL_ERROR;
 800484e:	2301      	movs	r3, #1
 8004850:	77fb      	strb	r3, [r7, #31]
 8004852:	e002      	b.n	800485a <HAL_I2S_DMAStop+0x3a2>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2201      	movs	r2, #1
 800485e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return errorcode;
 8004862:	7ffb      	ldrb	r3, [r7, #31]
}
 8004864:	4618      	mov	r0, r3
 8004866:	3720      	adds	r7, #32
 8004868:	46bd      	mov	sp, r7
 800486a:	bd80      	pop	{r7, pc}

0800486c <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800486c:	b480      	push	{r7}
 800486e:	b083      	sub	sp, #12
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8004874:	bf00      	nop
 8004876:	370c      	adds	r7, #12
 8004878:	46bd      	mov	sp, r7
 800487a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487e:	4770      	bx	lr

08004880 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8004880:	b480      	push	{r7}
 8004882:	b083      	sub	sp, #12
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8004888:	bf00      	nop
 800488a:	370c      	adds	r7, #12
 800488c:	46bd      	mov	sp, r7
 800488e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004892:	4770      	bx	lr

08004894 <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b084      	sub	sp, #16
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048a0:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	69db      	ldr	r3, [r3, #28]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d10e      	bne.n	80048c8 <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	685a      	ldr	r2, [r3, #4]
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f022 0201 	bic.w	r2, r2, #1
 80048b8:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	2200      	movs	r2, #0
 80048be:	865a      	strh	r2, [r3, #50]	@ 0x32
    hi2s->State = HAL_I2S_STATE_READY;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	2201      	movs	r2, #1
 80048c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 80048c8:	68f8      	ldr	r0, [r7, #12]
 80048ca:	f7fd fbe3 	bl	8002094 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80048ce:	bf00      	nop
 80048d0:	3710      	adds	r7, #16
 80048d2:	46bd      	mov	sp, r7
 80048d4:	bd80      	pop	{r7, pc}

080048d6 <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80048d6:	b580      	push	{r7, lr}
 80048d8:	b084      	sub	sp, #16
 80048da:	af00      	add	r7, sp, #0
 80048dc:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048e2:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 80048e4:	68f8      	ldr	r0, [r7, #12]
 80048e6:	f7fd fc2b 	bl	8002140 <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80048ea:	bf00      	nop
 80048ec:	3710      	adds	r7, #16
 80048ee:	46bd      	mov	sp, r7
 80048f0:	bd80      	pop	{r7, pc}

080048f2 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 80048f2:	b580      	push	{r7, lr}
 80048f4:	b084      	sub	sp, #16
 80048f6:	af00      	add	r7, sp, #0
 80048f8:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048fe:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	685a      	ldr	r2, [r3, #4]
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f022 0203 	bic.w	r2, r2, #3
 800490e:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	2200      	movs	r2, #0
 8004914:	855a      	strh	r2, [r3, #42]	@ 0x2a
  hi2s->RxXferCount = 0U;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	2200      	movs	r2, #0
 800491a:	865a      	strh	r2, [r3, #50]	@ 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	2201      	movs	r2, #1
 8004920:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004928:	f043 0208 	orr.w	r2, r3, #8
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8004930:	68f8      	ldr	r0, [r7, #12]
 8004932:	f7ff ffa5 	bl	8004880 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8004936:	bf00      	nop
 8004938:	3710      	adds	r7, #16
 800493a:	46bd      	mov	sp, r7
 800493c:	bd80      	pop	{r7, pc}

0800493e <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800493e:	b580      	push	{r7, lr}
 8004940:	b082      	sub	sp, #8
 8004942:	af00      	add	r7, sp, #0
 8004944:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800494a:	881a      	ldrh	r2, [r3, #0]
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004956:	1c9a      	adds	r2, r3, #2
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004960:	b29b      	uxth	r3, r3
 8004962:	3b01      	subs	r3, #1
 8004964:	b29a      	uxth	r2, r3
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800496e:	b29b      	uxth	r3, r3
 8004970:	2b00      	cmp	r3, #0
 8004972:	d10e      	bne.n	8004992 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	685a      	ldr	r2, [r3, #4]
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004982:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2201      	movs	r2, #1
 8004988:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800498c:	6878      	ldr	r0, [r7, #4]
 800498e:	f7ff ff6d 	bl	800486c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004992:	bf00      	nop
 8004994:	3708      	adds	r7, #8
 8004996:	46bd      	mov	sp, r7
 8004998:	bd80      	pop	{r7, pc}

0800499a <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 800499a:	b580      	push	{r7, lr}
 800499c:	b082      	sub	sp, #8
 800499e:	af00      	add	r7, sp, #0
 80049a0:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	68da      	ldr	r2, [r3, #12]
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049ac:	b292      	uxth	r2, r2
 80049ae:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049b4:	1c9a      	adds	r2, r3, #2
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80049be:	b29b      	uxth	r3, r3
 80049c0:	3b01      	subs	r3, #1
 80049c2:	b29a      	uxth	r2, r3
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80049cc:	b29b      	uxth	r3, r3
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d10e      	bne.n	80049f0 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	685a      	ldr	r2, [r3, #4]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80049e0:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2201      	movs	r2, #1
 80049e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80049ea:	6878      	ldr	r0, [r7, #4]
 80049ec:	f7fd fb52 	bl	8002094 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80049f0:	bf00      	nop
 80049f2:	3708      	adds	r7, #8
 80049f4:	46bd      	mov	sp, r7
 80049f6:	bd80      	pop	{r7, pc}

080049f8 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b086      	sub	sp, #24
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	689b      	ldr	r3, [r3, #8]
 8004a06:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a0e:	b2db      	uxtb	r3, r3
 8004a10:	2b04      	cmp	r3, #4
 8004a12:	d13a      	bne.n	8004a8a <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8004a14:	697b      	ldr	r3, [r7, #20]
 8004a16:	f003 0301 	and.w	r3, r3, #1
 8004a1a:	2b01      	cmp	r3, #1
 8004a1c:	d109      	bne.n	8004a32 <I2S_IRQHandler+0x3a>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a28:	2b40      	cmp	r3, #64	@ 0x40
 8004a2a:	d102      	bne.n	8004a32 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8004a2c:	6878      	ldr	r0, [r7, #4]
 8004a2e:	f7ff ffb4 	bl	800499a <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004a32:	697b      	ldr	r3, [r7, #20]
 8004a34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a38:	2b40      	cmp	r3, #64	@ 0x40
 8004a3a:	d126      	bne.n	8004a8a <I2S_IRQHandler+0x92>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	685b      	ldr	r3, [r3, #4]
 8004a42:	f003 0320 	and.w	r3, r3, #32
 8004a46:	2b20      	cmp	r3, #32
 8004a48:	d11f      	bne.n	8004a8a <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	685a      	ldr	r2, [r3, #4]
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004a58:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	613b      	str	r3, [r7, #16]
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	68db      	ldr	r3, [r3, #12]
 8004a64:	613b      	str	r3, [r7, #16]
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	689b      	ldr	r3, [r3, #8]
 8004a6c:	613b      	str	r3, [r7, #16]
 8004a6e:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2201      	movs	r2, #1
 8004a74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a7c:	f043 0202 	orr.w	r2, r3, #2
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004a84:	6878      	ldr	r0, [r7, #4]
 8004a86:	f7ff fefb 	bl	8004880 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a90:	b2db      	uxtb	r3, r3
 8004a92:	2b03      	cmp	r3, #3
 8004a94:	d136      	bne.n	8004b04 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8004a96:	697b      	ldr	r3, [r7, #20]
 8004a98:	f003 0302 	and.w	r3, r3, #2
 8004a9c:	2b02      	cmp	r3, #2
 8004a9e:	d109      	bne.n	8004ab4 <I2S_IRQHandler+0xbc>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004aaa:	2b80      	cmp	r3, #128	@ 0x80
 8004aac:	d102      	bne.n	8004ab4 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8004aae:	6878      	ldr	r0, [r7, #4]
 8004ab0:	f7ff ff45 	bl	800493e <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004ab4:	697b      	ldr	r3, [r7, #20]
 8004ab6:	f003 0308 	and.w	r3, r3, #8
 8004aba:	2b08      	cmp	r3, #8
 8004abc:	d122      	bne.n	8004b04 <I2S_IRQHandler+0x10c>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	685b      	ldr	r3, [r3, #4]
 8004ac4:	f003 0320 	and.w	r3, r3, #32
 8004ac8:	2b20      	cmp	r3, #32
 8004aca:	d11b      	bne.n	8004b04 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	685a      	ldr	r2, [r3, #4]
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004ada:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004adc:	2300      	movs	r3, #0
 8004ade:	60fb      	str	r3, [r7, #12]
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	689b      	ldr	r3, [r3, #8]
 8004ae6:	60fb      	str	r3, [r7, #12]
 8004ae8:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2201      	movs	r2, #1
 8004aee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004af6:	f043 0204 	orr.w	r2, r3, #4
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004afe:	6878      	ldr	r0, [r7, #4]
 8004b00:	f7ff febe 	bl	8004880 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004b04:	bf00      	nop
 8004b06:	3718      	adds	r7, #24
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	bd80      	pop	{r7, pc}

08004b0c <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b086      	sub	sp, #24
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	60f8      	str	r0, [r7, #12]
 8004b14:	60b9      	str	r1, [r7, #8]
 8004b16:	603b      	str	r3, [r7, #0]
 8004b18:	4613      	mov	r3, r2
 8004b1a:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8004b1c:	f7fe fbfc 	bl	8003318 <HAL_GetTick>
 8004b20:	6178      	str	r0, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8004b22:	e018      	b.n	8004b56 <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004b2a:	d014      	beq.n	8004b56 <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 8004b2c:	f7fe fbf4 	bl	8003318 <HAL_GetTick>
 8004b30:	4602      	mov	r2, r0
 8004b32:	697b      	ldr	r3, [r7, #20]
 8004b34:	1ad3      	subs	r3, r2, r3
 8004b36:	683a      	ldr	r2, [r7, #0]
 8004b38:	429a      	cmp	r2, r3
 8004b3a:	d902      	bls.n	8004b42 <I2S_WaitFlagStateUntilTimeout+0x36>
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d109      	bne.n	8004b56 <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	2201      	movs	r2, #1
 8004b46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 8004b52:	2303      	movs	r3, #3
 8004b54:	e00f      	b.n	8004b76 <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	689a      	ldr	r2, [r3, #8]
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	4013      	ands	r3, r2
 8004b60:	68ba      	ldr	r2, [r7, #8]
 8004b62:	429a      	cmp	r2, r3
 8004b64:	bf0c      	ite	eq
 8004b66:	2301      	moveq	r3, #1
 8004b68:	2300      	movne	r3, #0
 8004b6a:	b2db      	uxtb	r3, r3
 8004b6c:	461a      	mov	r2, r3
 8004b6e:	79fb      	ldrb	r3, [r7, #7]
 8004b70:	429a      	cmp	r2, r3
 8004b72:	d1d7      	bne.n	8004b24 <I2S_WaitFlagStateUntilTimeout+0x18>
      }
    }
  }
  return HAL_OK;
 8004b74:	2300      	movs	r3, #0
}
 8004b76:	4618      	mov	r0, r3
 8004b78:	3718      	adds	r7, #24
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	bd80      	pop	{r7, pc}
	...

08004b80 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b088      	sub	sp, #32
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	689b      	ldr	r3, [r3, #8]
 8004b8e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4a92      	ldr	r2, [pc, #584]	@ (8004de0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d101      	bne.n	8004b9e <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8004b9a:	4b92      	ldr	r3, [pc, #584]	@ (8004de4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004b9c:	e001      	b.n	8004ba2 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8004b9e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004ba2:	689b      	ldr	r3, [r3, #8]
 8004ba4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	685b      	ldr	r3, [r3, #4]
 8004bac:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4a8b      	ldr	r2, [pc, #556]	@ (8004de0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d101      	bne.n	8004bbc <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8004bb8:	4b8a      	ldr	r3, [pc, #552]	@ (8004de4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004bba:	e001      	b.n	8004bc0 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8004bbc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004bc0:	685b      	ldr	r3, [r3, #4]
 8004bc2:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	685b      	ldr	r3, [r3, #4]
 8004bc8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004bcc:	d004      	beq.n	8004bd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	f040 8099 	bne.w	8004d0a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8004bd8:	69fb      	ldr	r3, [r7, #28]
 8004bda:	f003 0302 	and.w	r3, r3, #2
 8004bde:	2b02      	cmp	r3, #2
 8004be0:	d107      	bne.n	8004bf2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8004be2:	697b      	ldr	r3, [r7, #20]
 8004be4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d002      	beq.n	8004bf2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8004bec:	6878      	ldr	r0, [r7, #4]
 8004bee:	f000 f925 	bl	8004e3c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8004bf2:	69bb      	ldr	r3, [r7, #24]
 8004bf4:	f003 0301 	and.w	r3, r3, #1
 8004bf8:	2b01      	cmp	r3, #1
 8004bfa:	d107      	bne.n	8004c0c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8004bfc:	693b      	ldr	r3, [r7, #16]
 8004bfe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d002      	beq.n	8004c0c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8004c06:	6878      	ldr	r0, [r7, #4]
 8004c08:	f000 f9c8 	bl	8004f9c <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004c0c:	69bb      	ldr	r3, [r7, #24]
 8004c0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c12:	2b40      	cmp	r3, #64	@ 0x40
 8004c14:	d13a      	bne.n	8004c8c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8004c16:	693b      	ldr	r3, [r7, #16]
 8004c18:	f003 0320 	and.w	r3, r3, #32
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d035      	beq.n	8004c8c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4a6e      	ldr	r2, [pc, #440]	@ (8004de0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d101      	bne.n	8004c2e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8004c2a:	4b6e      	ldr	r3, [pc, #440]	@ (8004de4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004c2c:	e001      	b.n	8004c32 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8004c2e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004c32:	685a      	ldr	r2, [r3, #4]
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4969      	ldr	r1, [pc, #420]	@ (8004de0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004c3a:	428b      	cmp	r3, r1
 8004c3c:	d101      	bne.n	8004c42 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8004c3e:	4b69      	ldr	r3, [pc, #420]	@ (8004de4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004c40:	e001      	b.n	8004c46 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8004c42:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004c46:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004c4a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	685a      	ldr	r2, [r3, #4]
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004c5a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	60fb      	str	r3, [r7, #12]
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	68db      	ldr	r3, [r3, #12]
 8004c66:	60fb      	str	r3, [r7, #12]
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	689b      	ldr	r3, [r3, #8]
 8004c6e:	60fb      	str	r3, [r7, #12]
 8004c70:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2201      	movs	r2, #1
 8004c76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c7e:	f043 0202 	orr.w	r2, r3, #2
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004c86:	6878      	ldr	r0, [r7, #4]
 8004c88:	f7ff fdfa 	bl	8004880 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004c8c:	69fb      	ldr	r3, [r7, #28]
 8004c8e:	f003 0308 	and.w	r3, r3, #8
 8004c92:	2b08      	cmp	r3, #8
 8004c94:	f040 80c3 	bne.w	8004e1e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8004c98:	697b      	ldr	r3, [r7, #20]
 8004c9a:	f003 0320 	and.w	r3, r3, #32
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	f000 80bd 	beq.w	8004e1e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	685a      	ldr	r2, [r3, #4]
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004cb2:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4a49      	ldr	r2, [pc, #292]	@ (8004de0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d101      	bne.n	8004cc2 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8004cbe:	4b49      	ldr	r3, [pc, #292]	@ (8004de4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004cc0:	e001      	b.n	8004cc6 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8004cc2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004cc6:	685a      	ldr	r2, [r3, #4]
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4944      	ldr	r1, [pc, #272]	@ (8004de0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004cce:	428b      	cmp	r3, r1
 8004cd0:	d101      	bne.n	8004cd6 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8004cd2:	4b44      	ldr	r3, [pc, #272]	@ (8004de4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004cd4:	e001      	b.n	8004cda <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8004cd6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004cda:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004cde:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	60bb      	str	r3, [r7, #8]
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	689b      	ldr	r3, [r3, #8]
 8004cea:	60bb      	str	r3, [r7, #8]
 8004cec:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2201      	movs	r2, #1
 8004cf2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cfa:	f043 0204 	orr.w	r2, r3, #4
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004d02:	6878      	ldr	r0, [r7, #4]
 8004d04:	f7ff fdbc 	bl	8004880 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004d08:	e089      	b.n	8004e1e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8004d0a:	69bb      	ldr	r3, [r7, #24]
 8004d0c:	f003 0302 	and.w	r3, r3, #2
 8004d10:	2b02      	cmp	r3, #2
 8004d12:	d107      	bne.n	8004d24 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8004d14:	693b      	ldr	r3, [r7, #16]
 8004d16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d002      	beq.n	8004d24 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8004d1e:	6878      	ldr	r0, [r7, #4]
 8004d20:	f000 f8be 	bl	8004ea0 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8004d24:	69fb      	ldr	r3, [r7, #28]
 8004d26:	f003 0301 	and.w	r3, r3, #1
 8004d2a:	2b01      	cmp	r3, #1
 8004d2c:	d107      	bne.n	8004d3e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8004d2e:	697b      	ldr	r3, [r7, #20]
 8004d30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d002      	beq.n	8004d3e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8004d38:	6878      	ldr	r0, [r7, #4]
 8004d3a:	f000 f8fd 	bl	8004f38 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004d3e:	69fb      	ldr	r3, [r7, #28]
 8004d40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d44:	2b40      	cmp	r3, #64	@ 0x40
 8004d46:	d12f      	bne.n	8004da8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8004d48:	697b      	ldr	r3, [r7, #20]
 8004d4a:	f003 0320 	and.w	r3, r3, #32
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d02a      	beq.n	8004da8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	685a      	ldr	r2, [r3, #4]
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004d60:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	4a1e      	ldr	r2, [pc, #120]	@ (8004de0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d101      	bne.n	8004d70 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8004d6c:	4b1d      	ldr	r3, [pc, #116]	@ (8004de4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004d6e:	e001      	b.n	8004d74 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8004d70:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004d74:	685a      	ldr	r2, [r3, #4]
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	4919      	ldr	r1, [pc, #100]	@ (8004de0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004d7c:	428b      	cmp	r3, r1
 8004d7e:	d101      	bne.n	8004d84 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8004d80:	4b18      	ldr	r3, [pc, #96]	@ (8004de4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004d82:	e001      	b.n	8004d88 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8004d84:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004d88:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004d8c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2201      	movs	r2, #1
 8004d92:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d9a:	f043 0202 	orr.w	r2, r3, #2
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004da2:	6878      	ldr	r0, [r7, #4]
 8004da4:	f7ff fd6c 	bl	8004880 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004da8:	69bb      	ldr	r3, [r7, #24]
 8004daa:	f003 0308 	and.w	r3, r3, #8
 8004dae:	2b08      	cmp	r3, #8
 8004db0:	d136      	bne.n	8004e20 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8004db2:	693b      	ldr	r3, [r7, #16]
 8004db4:	f003 0320 	and.w	r3, r3, #32
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d031      	beq.n	8004e20 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4a07      	ldr	r2, [pc, #28]	@ (8004de0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d101      	bne.n	8004dca <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8004dc6:	4b07      	ldr	r3, [pc, #28]	@ (8004de4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004dc8:	e001      	b.n	8004dce <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8004dca:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004dce:	685a      	ldr	r2, [r3, #4]
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	4902      	ldr	r1, [pc, #8]	@ (8004de0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004dd6:	428b      	cmp	r3, r1
 8004dd8:	d106      	bne.n	8004de8 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8004dda:	4b02      	ldr	r3, [pc, #8]	@ (8004de4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004ddc:	e006      	b.n	8004dec <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8004dde:	bf00      	nop
 8004de0:	40003800 	.word	0x40003800
 8004de4:	40003400 	.word	0x40003400
 8004de8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004dec:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004df0:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	685a      	ldr	r2, [r3, #4]
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004e00:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2201      	movs	r2, #1
 8004e06:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e0e:	f043 0204 	orr.w	r2, r3, #4
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004e16:	6878      	ldr	r0, [r7, #4]
 8004e18:	f7ff fd32 	bl	8004880 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004e1c:	e000      	b.n	8004e20 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004e1e:	bf00      	nop
}
 8004e20:	bf00      	nop
 8004e22:	3720      	adds	r7, #32
 8004e24:	46bd      	mov	sp, r7
 8004e26:	bd80      	pop	{r7, pc}

08004e28 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004e28:	b480      	push	{r7}
 8004e2a:	b083      	sub	sp, #12
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8004e30:	bf00      	nop
 8004e32:	370c      	adds	r7, #12
 8004e34:	46bd      	mov	sp, r7
 8004e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3a:	4770      	bx	lr

08004e3c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b082      	sub	sp, #8
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e48:	1c99      	adds	r1, r3, #2
 8004e4a:	687a      	ldr	r2, [r7, #4]
 8004e4c:	6251      	str	r1, [r2, #36]	@ 0x24
 8004e4e:	881a      	ldrh	r2, [r3, #0]
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e5a:	b29b      	uxth	r3, r3
 8004e5c:	3b01      	subs	r3, #1
 8004e5e:	b29a      	uxth	r2, r3
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e68:	b29b      	uxth	r3, r3
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d113      	bne.n	8004e96 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	685a      	ldr	r2, [r3, #4]
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004e7c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004e82:	b29b      	uxth	r3, r3
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d106      	bne.n	8004e96 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2201      	movs	r2, #1
 8004e8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004e90:	6878      	ldr	r0, [r7, #4]
 8004e92:	f7ff ffc9 	bl	8004e28 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004e96:	bf00      	nop
 8004e98:	3708      	adds	r7, #8
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	bd80      	pop	{r7, pc}
	...

08004ea0 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b082      	sub	sp, #8
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004eac:	1c99      	adds	r1, r3, #2
 8004eae:	687a      	ldr	r2, [r7, #4]
 8004eb0:	6251      	str	r1, [r2, #36]	@ 0x24
 8004eb2:	8819      	ldrh	r1, [r3, #0]
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	4a1d      	ldr	r2, [pc, #116]	@ (8004f30 <I2SEx_TxISR_I2SExt+0x90>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d101      	bne.n	8004ec2 <I2SEx_TxISR_I2SExt+0x22>
 8004ebe:	4b1d      	ldr	r3, [pc, #116]	@ (8004f34 <I2SEx_TxISR_I2SExt+0x94>)
 8004ec0:	e001      	b.n	8004ec6 <I2SEx_TxISR_I2SExt+0x26>
 8004ec2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004ec6:	460a      	mov	r2, r1
 8004ec8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ece:	b29b      	uxth	r3, r3
 8004ed0:	3b01      	subs	r3, #1
 8004ed2:	b29a      	uxth	r2, r3
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004edc:	b29b      	uxth	r3, r3
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d121      	bne.n	8004f26 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4a12      	ldr	r2, [pc, #72]	@ (8004f30 <I2SEx_TxISR_I2SExt+0x90>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d101      	bne.n	8004ef0 <I2SEx_TxISR_I2SExt+0x50>
 8004eec:	4b11      	ldr	r3, [pc, #68]	@ (8004f34 <I2SEx_TxISR_I2SExt+0x94>)
 8004eee:	e001      	b.n	8004ef4 <I2SEx_TxISR_I2SExt+0x54>
 8004ef0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004ef4:	685a      	ldr	r2, [r3, #4]
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	490d      	ldr	r1, [pc, #52]	@ (8004f30 <I2SEx_TxISR_I2SExt+0x90>)
 8004efc:	428b      	cmp	r3, r1
 8004efe:	d101      	bne.n	8004f04 <I2SEx_TxISR_I2SExt+0x64>
 8004f00:	4b0c      	ldr	r3, [pc, #48]	@ (8004f34 <I2SEx_TxISR_I2SExt+0x94>)
 8004f02:	e001      	b.n	8004f08 <I2SEx_TxISR_I2SExt+0x68>
 8004f04:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004f08:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004f0c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004f12:	b29b      	uxth	r3, r3
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d106      	bne.n	8004f26 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2201      	movs	r2, #1
 8004f1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004f20:	6878      	ldr	r0, [r7, #4]
 8004f22:	f7ff ff81 	bl	8004e28 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004f26:	bf00      	nop
 8004f28:	3708      	adds	r7, #8
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	bd80      	pop	{r7, pc}
 8004f2e:	bf00      	nop
 8004f30:	40003800 	.word	0x40003800
 8004f34:	40003400 	.word	0x40003400

08004f38 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b082      	sub	sp, #8
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	68d8      	ldr	r0, [r3, #12]
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f4a:	1c99      	adds	r1, r3, #2
 8004f4c:	687a      	ldr	r2, [r7, #4]
 8004f4e:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8004f50:	b282      	uxth	r2, r0
 8004f52:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004f58:	b29b      	uxth	r3, r3
 8004f5a:	3b01      	subs	r3, #1
 8004f5c:	b29a      	uxth	r2, r3
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004f66:	b29b      	uxth	r3, r3
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d113      	bne.n	8004f94 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	685a      	ldr	r2, [r3, #4]
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004f7a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f80:	b29b      	uxth	r3, r3
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d106      	bne.n	8004f94 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2201      	movs	r2, #1
 8004f8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004f8e:	6878      	ldr	r0, [r7, #4]
 8004f90:	f7ff ff4a 	bl	8004e28 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004f94:	bf00      	nop
 8004f96:	3708      	adds	r7, #8
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	bd80      	pop	{r7, pc}

08004f9c <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b082      	sub	sp, #8
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4a20      	ldr	r2, [pc, #128]	@ (800502c <I2SEx_RxISR_I2SExt+0x90>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d101      	bne.n	8004fb2 <I2SEx_RxISR_I2SExt+0x16>
 8004fae:	4b20      	ldr	r3, [pc, #128]	@ (8005030 <I2SEx_RxISR_I2SExt+0x94>)
 8004fb0:	e001      	b.n	8004fb6 <I2SEx_RxISR_I2SExt+0x1a>
 8004fb2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004fb6:	68d8      	ldr	r0, [r3, #12]
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fbc:	1c99      	adds	r1, r3, #2
 8004fbe:	687a      	ldr	r2, [r7, #4]
 8004fc0:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8004fc2:	b282      	uxth	r2, r0
 8004fc4:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004fca:	b29b      	uxth	r3, r3
 8004fcc:	3b01      	subs	r3, #1
 8004fce:	b29a      	uxth	r2, r3
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004fd8:	b29b      	uxth	r3, r3
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d121      	bne.n	8005022 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	4a12      	ldr	r2, [pc, #72]	@ (800502c <I2SEx_RxISR_I2SExt+0x90>)
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d101      	bne.n	8004fec <I2SEx_RxISR_I2SExt+0x50>
 8004fe8:	4b11      	ldr	r3, [pc, #68]	@ (8005030 <I2SEx_RxISR_I2SExt+0x94>)
 8004fea:	e001      	b.n	8004ff0 <I2SEx_RxISR_I2SExt+0x54>
 8004fec:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004ff0:	685a      	ldr	r2, [r3, #4]
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	490d      	ldr	r1, [pc, #52]	@ (800502c <I2SEx_RxISR_I2SExt+0x90>)
 8004ff8:	428b      	cmp	r3, r1
 8004ffa:	d101      	bne.n	8005000 <I2SEx_RxISR_I2SExt+0x64>
 8004ffc:	4b0c      	ldr	r3, [pc, #48]	@ (8005030 <I2SEx_RxISR_I2SExt+0x94>)
 8004ffe:	e001      	b.n	8005004 <I2SEx_RxISR_I2SExt+0x68>
 8005000:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005004:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005008:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800500e:	b29b      	uxth	r3, r3
 8005010:	2b00      	cmp	r3, #0
 8005012:	d106      	bne.n	8005022 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2201      	movs	r2, #1
 8005018:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800501c:	6878      	ldr	r0, [r7, #4]
 800501e:	f7ff ff03 	bl	8004e28 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005022:	bf00      	nop
 8005024:	3708      	adds	r7, #8
 8005026:	46bd      	mov	sp, r7
 8005028:	bd80      	pop	{r7, pc}
 800502a:	bf00      	nop
 800502c:	40003800 	.word	0x40003800
 8005030:	40003400 	.word	0x40003400

08005034 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b086      	sub	sp, #24
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d101      	bne.n	8005046 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005042:	2301      	movs	r3, #1
 8005044:	e267      	b.n	8005516 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f003 0301 	and.w	r3, r3, #1
 800504e:	2b00      	cmp	r3, #0
 8005050:	d075      	beq.n	800513e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005052:	4b88      	ldr	r3, [pc, #544]	@ (8005274 <HAL_RCC_OscConfig+0x240>)
 8005054:	689b      	ldr	r3, [r3, #8]
 8005056:	f003 030c 	and.w	r3, r3, #12
 800505a:	2b04      	cmp	r3, #4
 800505c:	d00c      	beq.n	8005078 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800505e:	4b85      	ldr	r3, [pc, #532]	@ (8005274 <HAL_RCC_OscConfig+0x240>)
 8005060:	689b      	ldr	r3, [r3, #8]
 8005062:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005066:	2b08      	cmp	r3, #8
 8005068:	d112      	bne.n	8005090 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800506a:	4b82      	ldr	r3, [pc, #520]	@ (8005274 <HAL_RCC_OscConfig+0x240>)
 800506c:	685b      	ldr	r3, [r3, #4]
 800506e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005072:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005076:	d10b      	bne.n	8005090 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005078:	4b7e      	ldr	r3, [pc, #504]	@ (8005274 <HAL_RCC_OscConfig+0x240>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005080:	2b00      	cmp	r3, #0
 8005082:	d05b      	beq.n	800513c <HAL_RCC_OscConfig+0x108>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	685b      	ldr	r3, [r3, #4]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d157      	bne.n	800513c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800508c:	2301      	movs	r3, #1
 800508e:	e242      	b.n	8005516 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	685b      	ldr	r3, [r3, #4]
 8005094:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005098:	d106      	bne.n	80050a8 <HAL_RCC_OscConfig+0x74>
 800509a:	4b76      	ldr	r3, [pc, #472]	@ (8005274 <HAL_RCC_OscConfig+0x240>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4a75      	ldr	r2, [pc, #468]	@ (8005274 <HAL_RCC_OscConfig+0x240>)
 80050a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80050a4:	6013      	str	r3, [r2, #0]
 80050a6:	e01d      	b.n	80050e4 <HAL_RCC_OscConfig+0xb0>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	685b      	ldr	r3, [r3, #4]
 80050ac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80050b0:	d10c      	bne.n	80050cc <HAL_RCC_OscConfig+0x98>
 80050b2:	4b70      	ldr	r3, [pc, #448]	@ (8005274 <HAL_RCC_OscConfig+0x240>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	4a6f      	ldr	r2, [pc, #444]	@ (8005274 <HAL_RCC_OscConfig+0x240>)
 80050b8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80050bc:	6013      	str	r3, [r2, #0]
 80050be:	4b6d      	ldr	r3, [pc, #436]	@ (8005274 <HAL_RCC_OscConfig+0x240>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4a6c      	ldr	r2, [pc, #432]	@ (8005274 <HAL_RCC_OscConfig+0x240>)
 80050c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80050c8:	6013      	str	r3, [r2, #0]
 80050ca:	e00b      	b.n	80050e4 <HAL_RCC_OscConfig+0xb0>
 80050cc:	4b69      	ldr	r3, [pc, #420]	@ (8005274 <HAL_RCC_OscConfig+0x240>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4a68      	ldr	r2, [pc, #416]	@ (8005274 <HAL_RCC_OscConfig+0x240>)
 80050d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80050d6:	6013      	str	r3, [r2, #0]
 80050d8:	4b66      	ldr	r3, [pc, #408]	@ (8005274 <HAL_RCC_OscConfig+0x240>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4a65      	ldr	r2, [pc, #404]	@ (8005274 <HAL_RCC_OscConfig+0x240>)
 80050de:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80050e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	685b      	ldr	r3, [r3, #4]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d013      	beq.n	8005114 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050ec:	f7fe f914 	bl	8003318 <HAL_GetTick>
 80050f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050f2:	e008      	b.n	8005106 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80050f4:	f7fe f910 	bl	8003318 <HAL_GetTick>
 80050f8:	4602      	mov	r2, r0
 80050fa:	693b      	ldr	r3, [r7, #16]
 80050fc:	1ad3      	subs	r3, r2, r3
 80050fe:	2b64      	cmp	r3, #100	@ 0x64
 8005100:	d901      	bls.n	8005106 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005102:	2303      	movs	r3, #3
 8005104:	e207      	b.n	8005516 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005106:	4b5b      	ldr	r3, [pc, #364]	@ (8005274 <HAL_RCC_OscConfig+0x240>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800510e:	2b00      	cmp	r3, #0
 8005110:	d0f0      	beq.n	80050f4 <HAL_RCC_OscConfig+0xc0>
 8005112:	e014      	b.n	800513e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005114:	f7fe f900 	bl	8003318 <HAL_GetTick>
 8005118:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800511a:	e008      	b.n	800512e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800511c:	f7fe f8fc 	bl	8003318 <HAL_GetTick>
 8005120:	4602      	mov	r2, r0
 8005122:	693b      	ldr	r3, [r7, #16]
 8005124:	1ad3      	subs	r3, r2, r3
 8005126:	2b64      	cmp	r3, #100	@ 0x64
 8005128:	d901      	bls.n	800512e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800512a:	2303      	movs	r3, #3
 800512c:	e1f3      	b.n	8005516 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800512e:	4b51      	ldr	r3, [pc, #324]	@ (8005274 <HAL_RCC_OscConfig+0x240>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005136:	2b00      	cmp	r3, #0
 8005138:	d1f0      	bne.n	800511c <HAL_RCC_OscConfig+0xe8>
 800513a:	e000      	b.n	800513e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800513c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f003 0302 	and.w	r3, r3, #2
 8005146:	2b00      	cmp	r3, #0
 8005148:	d063      	beq.n	8005212 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800514a:	4b4a      	ldr	r3, [pc, #296]	@ (8005274 <HAL_RCC_OscConfig+0x240>)
 800514c:	689b      	ldr	r3, [r3, #8]
 800514e:	f003 030c 	and.w	r3, r3, #12
 8005152:	2b00      	cmp	r3, #0
 8005154:	d00b      	beq.n	800516e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005156:	4b47      	ldr	r3, [pc, #284]	@ (8005274 <HAL_RCC_OscConfig+0x240>)
 8005158:	689b      	ldr	r3, [r3, #8]
 800515a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800515e:	2b08      	cmp	r3, #8
 8005160:	d11c      	bne.n	800519c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005162:	4b44      	ldr	r3, [pc, #272]	@ (8005274 <HAL_RCC_OscConfig+0x240>)
 8005164:	685b      	ldr	r3, [r3, #4]
 8005166:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800516a:	2b00      	cmp	r3, #0
 800516c:	d116      	bne.n	800519c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800516e:	4b41      	ldr	r3, [pc, #260]	@ (8005274 <HAL_RCC_OscConfig+0x240>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f003 0302 	and.w	r3, r3, #2
 8005176:	2b00      	cmp	r3, #0
 8005178:	d005      	beq.n	8005186 <HAL_RCC_OscConfig+0x152>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	68db      	ldr	r3, [r3, #12]
 800517e:	2b01      	cmp	r3, #1
 8005180:	d001      	beq.n	8005186 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005182:	2301      	movs	r3, #1
 8005184:	e1c7      	b.n	8005516 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005186:	4b3b      	ldr	r3, [pc, #236]	@ (8005274 <HAL_RCC_OscConfig+0x240>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	691b      	ldr	r3, [r3, #16]
 8005192:	00db      	lsls	r3, r3, #3
 8005194:	4937      	ldr	r1, [pc, #220]	@ (8005274 <HAL_RCC_OscConfig+0x240>)
 8005196:	4313      	orrs	r3, r2
 8005198:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800519a:	e03a      	b.n	8005212 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	68db      	ldr	r3, [r3, #12]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d020      	beq.n	80051e6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80051a4:	4b34      	ldr	r3, [pc, #208]	@ (8005278 <HAL_RCC_OscConfig+0x244>)
 80051a6:	2201      	movs	r2, #1
 80051a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051aa:	f7fe f8b5 	bl	8003318 <HAL_GetTick>
 80051ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051b0:	e008      	b.n	80051c4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80051b2:	f7fe f8b1 	bl	8003318 <HAL_GetTick>
 80051b6:	4602      	mov	r2, r0
 80051b8:	693b      	ldr	r3, [r7, #16]
 80051ba:	1ad3      	subs	r3, r2, r3
 80051bc:	2b02      	cmp	r3, #2
 80051be:	d901      	bls.n	80051c4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80051c0:	2303      	movs	r3, #3
 80051c2:	e1a8      	b.n	8005516 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051c4:	4b2b      	ldr	r3, [pc, #172]	@ (8005274 <HAL_RCC_OscConfig+0x240>)
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f003 0302 	and.w	r3, r3, #2
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d0f0      	beq.n	80051b2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051d0:	4b28      	ldr	r3, [pc, #160]	@ (8005274 <HAL_RCC_OscConfig+0x240>)
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	691b      	ldr	r3, [r3, #16]
 80051dc:	00db      	lsls	r3, r3, #3
 80051de:	4925      	ldr	r1, [pc, #148]	@ (8005274 <HAL_RCC_OscConfig+0x240>)
 80051e0:	4313      	orrs	r3, r2
 80051e2:	600b      	str	r3, [r1, #0]
 80051e4:	e015      	b.n	8005212 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80051e6:	4b24      	ldr	r3, [pc, #144]	@ (8005278 <HAL_RCC_OscConfig+0x244>)
 80051e8:	2200      	movs	r2, #0
 80051ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051ec:	f7fe f894 	bl	8003318 <HAL_GetTick>
 80051f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80051f2:	e008      	b.n	8005206 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80051f4:	f7fe f890 	bl	8003318 <HAL_GetTick>
 80051f8:	4602      	mov	r2, r0
 80051fa:	693b      	ldr	r3, [r7, #16]
 80051fc:	1ad3      	subs	r3, r2, r3
 80051fe:	2b02      	cmp	r3, #2
 8005200:	d901      	bls.n	8005206 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005202:	2303      	movs	r3, #3
 8005204:	e187      	b.n	8005516 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005206:	4b1b      	ldr	r3, [pc, #108]	@ (8005274 <HAL_RCC_OscConfig+0x240>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f003 0302 	and.w	r3, r3, #2
 800520e:	2b00      	cmp	r3, #0
 8005210:	d1f0      	bne.n	80051f4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f003 0308 	and.w	r3, r3, #8
 800521a:	2b00      	cmp	r3, #0
 800521c:	d036      	beq.n	800528c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	695b      	ldr	r3, [r3, #20]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d016      	beq.n	8005254 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005226:	4b15      	ldr	r3, [pc, #84]	@ (800527c <HAL_RCC_OscConfig+0x248>)
 8005228:	2201      	movs	r2, #1
 800522a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800522c:	f7fe f874 	bl	8003318 <HAL_GetTick>
 8005230:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005232:	e008      	b.n	8005246 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005234:	f7fe f870 	bl	8003318 <HAL_GetTick>
 8005238:	4602      	mov	r2, r0
 800523a:	693b      	ldr	r3, [r7, #16]
 800523c:	1ad3      	subs	r3, r2, r3
 800523e:	2b02      	cmp	r3, #2
 8005240:	d901      	bls.n	8005246 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005242:	2303      	movs	r3, #3
 8005244:	e167      	b.n	8005516 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005246:	4b0b      	ldr	r3, [pc, #44]	@ (8005274 <HAL_RCC_OscConfig+0x240>)
 8005248:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800524a:	f003 0302 	and.w	r3, r3, #2
 800524e:	2b00      	cmp	r3, #0
 8005250:	d0f0      	beq.n	8005234 <HAL_RCC_OscConfig+0x200>
 8005252:	e01b      	b.n	800528c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005254:	4b09      	ldr	r3, [pc, #36]	@ (800527c <HAL_RCC_OscConfig+0x248>)
 8005256:	2200      	movs	r2, #0
 8005258:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800525a:	f7fe f85d 	bl	8003318 <HAL_GetTick>
 800525e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005260:	e00e      	b.n	8005280 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005262:	f7fe f859 	bl	8003318 <HAL_GetTick>
 8005266:	4602      	mov	r2, r0
 8005268:	693b      	ldr	r3, [r7, #16]
 800526a:	1ad3      	subs	r3, r2, r3
 800526c:	2b02      	cmp	r3, #2
 800526e:	d907      	bls.n	8005280 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005270:	2303      	movs	r3, #3
 8005272:	e150      	b.n	8005516 <HAL_RCC_OscConfig+0x4e2>
 8005274:	40023800 	.word	0x40023800
 8005278:	42470000 	.word	0x42470000
 800527c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005280:	4b88      	ldr	r3, [pc, #544]	@ (80054a4 <HAL_RCC_OscConfig+0x470>)
 8005282:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005284:	f003 0302 	and.w	r3, r3, #2
 8005288:	2b00      	cmp	r3, #0
 800528a:	d1ea      	bne.n	8005262 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f003 0304 	and.w	r3, r3, #4
 8005294:	2b00      	cmp	r3, #0
 8005296:	f000 8097 	beq.w	80053c8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800529a:	2300      	movs	r3, #0
 800529c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800529e:	4b81      	ldr	r3, [pc, #516]	@ (80054a4 <HAL_RCC_OscConfig+0x470>)
 80052a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d10f      	bne.n	80052ca <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80052aa:	2300      	movs	r3, #0
 80052ac:	60bb      	str	r3, [r7, #8]
 80052ae:	4b7d      	ldr	r3, [pc, #500]	@ (80054a4 <HAL_RCC_OscConfig+0x470>)
 80052b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052b2:	4a7c      	ldr	r2, [pc, #496]	@ (80054a4 <HAL_RCC_OscConfig+0x470>)
 80052b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80052b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80052ba:	4b7a      	ldr	r3, [pc, #488]	@ (80054a4 <HAL_RCC_OscConfig+0x470>)
 80052bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80052c2:	60bb      	str	r3, [r7, #8]
 80052c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80052c6:	2301      	movs	r3, #1
 80052c8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052ca:	4b77      	ldr	r3, [pc, #476]	@ (80054a8 <HAL_RCC_OscConfig+0x474>)
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d118      	bne.n	8005308 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80052d6:	4b74      	ldr	r3, [pc, #464]	@ (80054a8 <HAL_RCC_OscConfig+0x474>)
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4a73      	ldr	r2, [pc, #460]	@ (80054a8 <HAL_RCC_OscConfig+0x474>)
 80052dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80052e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80052e2:	f7fe f819 	bl	8003318 <HAL_GetTick>
 80052e6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052e8:	e008      	b.n	80052fc <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052ea:	f7fe f815 	bl	8003318 <HAL_GetTick>
 80052ee:	4602      	mov	r2, r0
 80052f0:	693b      	ldr	r3, [r7, #16]
 80052f2:	1ad3      	subs	r3, r2, r3
 80052f4:	2b02      	cmp	r3, #2
 80052f6:	d901      	bls.n	80052fc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80052f8:	2303      	movs	r3, #3
 80052fa:	e10c      	b.n	8005516 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052fc:	4b6a      	ldr	r3, [pc, #424]	@ (80054a8 <HAL_RCC_OscConfig+0x474>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005304:	2b00      	cmp	r3, #0
 8005306:	d0f0      	beq.n	80052ea <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	689b      	ldr	r3, [r3, #8]
 800530c:	2b01      	cmp	r3, #1
 800530e:	d106      	bne.n	800531e <HAL_RCC_OscConfig+0x2ea>
 8005310:	4b64      	ldr	r3, [pc, #400]	@ (80054a4 <HAL_RCC_OscConfig+0x470>)
 8005312:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005314:	4a63      	ldr	r2, [pc, #396]	@ (80054a4 <HAL_RCC_OscConfig+0x470>)
 8005316:	f043 0301 	orr.w	r3, r3, #1
 800531a:	6713      	str	r3, [r2, #112]	@ 0x70
 800531c:	e01c      	b.n	8005358 <HAL_RCC_OscConfig+0x324>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	689b      	ldr	r3, [r3, #8]
 8005322:	2b05      	cmp	r3, #5
 8005324:	d10c      	bne.n	8005340 <HAL_RCC_OscConfig+0x30c>
 8005326:	4b5f      	ldr	r3, [pc, #380]	@ (80054a4 <HAL_RCC_OscConfig+0x470>)
 8005328:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800532a:	4a5e      	ldr	r2, [pc, #376]	@ (80054a4 <HAL_RCC_OscConfig+0x470>)
 800532c:	f043 0304 	orr.w	r3, r3, #4
 8005330:	6713      	str	r3, [r2, #112]	@ 0x70
 8005332:	4b5c      	ldr	r3, [pc, #368]	@ (80054a4 <HAL_RCC_OscConfig+0x470>)
 8005334:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005336:	4a5b      	ldr	r2, [pc, #364]	@ (80054a4 <HAL_RCC_OscConfig+0x470>)
 8005338:	f043 0301 	orr.w	r3, r3, #1
 800533c:	6713      	str	r3, [r2, #112]	@ 0x70
 800533e:	e00b      	b.n	8005358 <HAL_RCC_OscConfig+0x324>
 8005340:	4b58      	ldr	r3, [pc, #352]	@ (80054a4 <HAL_RCC_OscConfig+0x470>)
 8005342:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005344:	4a57      	ldr	r2, [pc, #348]	@ (80054a4 <HAL_RCC_OscConfig+0x470>)
 8005346:	f023 0301 	bic.w	r3, r3, #1
 800534a:	6713      	str	r3, [r2, #112]	@ 0x70
 800534c:	4b55      	ldr	r3, [pc, #340]	@ (80054a4 <HAL_RCC_OscConfig+0x470>)
 800534e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005350:	4a54      	ldr	r2, [pc, #336]	@ (80054a4 <HAL_RCC_OscConfig+0x470>)
 8005352:	f023 0304 	bic.w	r3, r3, #4
 8005356:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	689b      	ldr	r3, [r3, #8]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d015      	beq.n	800538c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005360:	f7fd ffda 	bl	8003318 <HAL_GetTick>
 8005364:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005366:	e00a      	b.n	800537e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005368:	f7fd ffd6 	bl	8003318 <HAL_GetTick>
 800536c:	4602      	mov	r2, r0
 800536e:	693b      	ldr	r3, [r7, #16]
 8005370:	1ad3      	subs	r3, r2, r3
 8005372:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005376:	4293      	cmp	r3, r2
 8005378:	d901      	bls.n	800537e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800537a:	2303      	movs	r3, #3
 800537c:	e0cb      	b.n	8005516 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800537e:	4b49      	ldr	r3, [pc, #292]	@ (80054a4 <HAL_RCC_OscConfig+0x470>)
 8005380:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005382:	f003 0302 	and.w	r3, r3, #2
 8005386:	2b00      	cmp	r3, #0
 8005388:	d0ee      	beq.n	8005368 <HAL_RCC_OscConfig+0x334>
 800538a:	e014      	b.n	80053b6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800538c:	f7fd ffc4 	bl	8003318 <HAL_GetTick>
 8005390:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005392:	e00a      	b.n	80053aa <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005394:	f7fd ffc0 	bl	8003318 <HAL_GetTick>
 8005398:	4602      	mov	r2, r0
 800539a:	693b      	ldr	r3, [r7, #16]
 800539c:	1ad3      	subs	r3, r2, r3
 800539e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d901      	bls.n	80053aa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80053a6:	2303      	movs	r3, #3
 80053a8:	e0b5      	b.n	8005516 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80053aa:	4b3e      	ldr	r3, [pc, #248]	@ (80054a4 <HAL_RCC_OscConfig+0x470>)
 80053ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053ae:	f003 0302 	and.w	r3, r3, #2
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d1ee      	bne.n	8005394 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80053b6:	7dfb      	ldrb	r3, [r7, #23]
 80053b8:	2b01      	cmp	r3, #1
 80053ba:	d105      	bne.n	80053c8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80053bc:	4b39      	ldr	r3, [pc, #228]	@ (80054a4 <HAL_RCC_OscConfig+0x470>)
 80053be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053c0:	4a38      	ldr	r2, [pc, #224]	@ (80054a4 <HAL_RCC_OscConfig+0x470>)
 80053c2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80053c6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	699b      	ldr	r3, [r3, #24]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	f000 80a1 	beq.w	8005514 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80053d2:	4b34      	ldr	r3, [pc, #208]	@ (80054a4 <HAL_RCC_OscConfig+0x470>)
 80053d4:	689b      	ldr	r3, [r3, #8]
 80053d6:	f003 030c 	and.w	r3, r3, #12
 80053da:	2b08      	cmp	r3, #8
 80053dc:	d05c      	beq.n	8005498 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	699b      	ldr	r3, [r3, #24]
 80053e2:	2b02      	cmp	r3, #2
 80053e4:	d141      	bne.n	800546a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053e6:	4b31      	ldr	r3, [pc, #196]	@ (80054ac <HAL_RCC_OscConfig+0x478>)
 80053e8:	2200      	movs	r2, #0
 80053ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053ec:	f7fd ff94 	bl	8003318 <HAL_GetTick>
 80053f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053f2:	e008      	b.n	8005406 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053f4:	f7fd ff90 	bl	8003318 <HAL_GetTick>
 80053f8:	4602      	mov	r2, r0
 80053fa:	693b      	ldr	r3, [r7, #16]
 80053fc:	1ad3      	subs	r3, r2, r3
 80053fe:	2b02      	cmp	r3, #2
 8005400:	d901      	bls.n	8005406 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005402:	2303      	movs	r3, #3
 8005404:	e087      	b.n	8005516 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005406:	4b27      	ldr	r3, [pc, #156]	@ (80054a4 <HAL_RCC_OscConfig+0x470>)
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800540e:	2b00      	cmp	r3, #0
 8005410:	d1f0      	bne.n	80053f4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	69da      	ldr	r2, [r3, #28]
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6a1b      	ldr	r3, [r3, #32]
 800541a:	431a      	orrs	r2, r3
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005420:	019b      	lsls	r3, r3, #6
 8005422:	431a      	orrs	r2, r3
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005428:	085b      	lsrs	r3, r3, #1
 800542a:	3b01      	subs	r3, #1
 800542c:	041b      	lsls	r3, r3, #16
 800542e:	431a      	orrs	r2, r3
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005434:	061b      	lsls	r3, r3, #24
 8005436:	491b      	ldr	r1, [pc, #108]	@ (80054a4 <HAL_RCC_OscConfig+0x470>)
 8005438:	4313      	orrs	r3, r2
 800543a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800543c:	4b1b      	ldr	r3, [pc, #108]	@ (80054ac <HAL_RCC_OscConfig+0x478>)
 800543e:	2201      	movs	r2, #1
 8005440:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005442:	f7fd ff69 	bl	8003318 <HAL_GetTick>
 8005446:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005448:	e008      	b.n	800545c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800544a:	f7fd ff65 	bl	8003318 <HAL_GetTick>
 800544e:	4602      	mov	r2, r0
 8005450:	693b      	ldr	r3, [r7, #16]
 8005452:	1ad3      	subs	r3, r2, r3
 8005454:	2b02      	cmp	r3, #2
 8005456:	d901      	bls.n	800545c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005458:	2303      	movs	r3, #3
 800545a:	e05c      	b.n	8005516 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800545c:	4b11      	ldr	r3, [pc, #68]	@ (80054a4 <HAL_RCC_OscConfig+0x470>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005464:	2b00      	cmp	r3, #0
 8005466:	d0f0      	beq.n	800544a <HAL_RCC_OscConfig+0x416>
 8005468:	e054      	b.n	8005514 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800546a:	4b10      	ldr	r3, [pc, #64]	@ (80054ac <HAL_RCC_OscConfig+0x478>)
 800546c:	2200      	movs	r2, #0
 800546e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005470:	f7fd ff52 	bl	8003318 <HAL_GetTick>
 8005474:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005476:	e008      	b.n	800548a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005478:	f7fd ff4e 	bl	8003318 <HAL_GetTick>
 800547c:	4602      	mov	r2, r0
 800547e:	693b      	ldr	r3, [r7, #16]
 8005480:	1ad3      	subs	r3, r2, r3
 8005482:	2b02      	cmp	r3, #2
 8005484:	d901      	bls.n	800548a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005486:	2303      	movs	r3, #3
 8005488:	e045      	b.n	8005516 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800548a:	4b06      	ldr	r3, [pc, #24]	@ (80054a4 <HAL_RCC_OscConfig+0x470>)
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005492:	2b00      	cmp	r3, #0
 8005494:	d1f0      	bne.n	8005478 <HAL_RCC_OscConfig+0x444>
 8005496:	e03d      	b.n	8005514 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	699b      	ldr	r3, [r3, #24]
 800549c:	2b01      	cmp	r3, #1
 800549e:	d107      	bne.n	80054b0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80054a0:	2301      	movs	r3, #1
 80054a2:	e038      	b.n	8005516 <HAL_RCC_OscConfig+0x4e2>
 80054a4:	40023800 	.word	0x40023800
 80054a8:	40007000 	.word	0x40007000
 80054ac:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80054b0:	4b1b      	ldr	r3, [pc, #108]	@ (8005520 <HAL_RCC_OscConfig+0x4ec>)
 80054b2:	685b      	ldr	r3, [r3, #4]
 80054b4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	699b      	ldr	r3, [r3, #24]
 80054ba:	2b01      	cmp	r3, #1
 80054bc:	d028      	beq.n	8005510 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80054c8:	429a      	cmp	r2, r3
 80054ca:	d121      	bne.n	8005510 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80054d6:	429a      	cmp	r2, r3
 80054d8:	d11a      	bne.n	8005510 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80054da:	68fa      	ldr	r2, [r7, #12]
 80054dc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80054e0:	4013      	ands	r3, r2
 80054e2:	687a      	ldr	r2, [r7, #4]
 80054e4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80054e6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d111      	bne.n	8005510 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054f6:	085b      	lsrs	r3, r3, #1
 80054f8:	3b01      	subs	r3, #1
 80054fa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80054fc:	429a      	cmp	r2, r3
 80054fe:	d107      	bne.n	8005510 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800550a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800550c:	429a      	cmp	r2, r3
 800550e:	d001      	beq.n	8005514 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005510:	2301      	movs	r3, #1
 8005512:	e000      	b.n	8005516 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005514:	2300      	movs	r3, #0
}
 8005516:	4618      	mov	r0, r3
 8005518:	3718      	adds	r7, #24
 800551a:	46bd      	mov	sp, r7
 800551c:	bd80      	pop	{r7, pc}
 800551e:	bf00      	nop
 8005520:	40023800 	.word	0x40023800

08005524 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b084      	sub	sp, #16
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
 800552c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d101      	bne.n	8005538 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005534:	2301      	movs	r3, #1
 8005536:	e0cc      	b.n	80056d2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005538:	4b68      	ldr	r3, [pc, #416]	@ (80056dc <HAL_RCC_ClockConfig+0x1b8>)
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f003 0307 	and.w	r3, r3, #7
 8005540:	683a      	ldr	r2, [r7, #0]
 8005542:	429a      	cmp	r2, r3
 8005544:	d90c      	bls.n	8005560 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005546:	4b65      	ldr	r3, [pc, #404]	@ (80056dc <HAL_RCC_ClockConfig+0x1b8>)
 8005548:	683a      	ldr	r2, [r7, #0]
 800554a:	b2d2      	uxtb	r2, r2
 800554c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800554e:	4b63      	ldr	r3, [pc, #396]	@ (80056dc <HAL_RCC_ClockConfig+0x1b8>)
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f003 0307 	and.w	r3, r3, #7
 8005556:	683a      	ldr	r2, [r7, #0]
 8005558:	429a      	cmp	r2, r3
 800555a:	d001      	beq.n	8005560 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800555c:	2301      	movs	r3, #1
 800555e:	e0b8      	b.n	80056d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f003 0302 	and.w	r3, r3, #2
 8005568:	2b00      	cmp	r3, #0
 800556a:	d020      	beq.n	80055ae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f003 0304 	and.w	r3, r3, #4
 8005574:	2b00      	cmp	r3, #0
 8005576:	d005      	beq.n	8005584 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005578:	4b59      	ldr	r3, [pc, #356]	@ (80056e0 <HAL_RCC_ClockConfig+0x1bc>)
 800557a:	689b      	ldr	r3, [r3, #8]
 800557c:	4a58      	ldr	r2, [pc, #352]	@ (80056e0 <HAL_RCC_ClockConfig+0x1bc>)
 800557e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005582:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f003 0308 	and.w	r3, r3, #8
 800558c:	2b00      	cmp	r3, #0
 800558e:	d005      	beq.n	800559c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005590:	4b53      	ldr	r3, [pc, #332]	@ (80056e0 <HAL_RCC_ClockConfig+0x1bc>)
 8005592:	689b      	ldr	r3, [r3, #8]
 8005594:	4a52      	ldr	r2, [pc, #328]	@ (80056e0 <HAL_RCC_ClockConfig+0x1bc>)
 8005596:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800559a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800559c:	4b50      	ldr	r3, [pc, #320]	@ (80056e0 <HAL_RCC_ClockConfig+0x1bc>)
 800559e:	689b      	ldr	r3, [r3, #8]
 80055a0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	689b      	ldr	r3, [r3, #8]
 80055a8:	494d      	ldr	r1, [pc, #308]	@ (80056e0 <HAL_RCC_ClockConfig+0x1bc>)
 80055aa:	4313      	orrs	r3, r2
 80055ac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f003 0301 	and.w	r3, r3, #1
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d044      	beq.n	8005644 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	685b      	ldr	r3, [r3, #4]
 80055be:	2b01      	cmp	r3, #1
 80055c0:	d107      	bne.n	80055d2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055c2:	4b47      	ldr	r3, [pc, #284]	@ (80056e0 <HAL_RCC_ClockConfig+0x1bc>)
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d119      	bne.n	8005602 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80055ce:	2301      	movs	r3, #1
 80055d0:	e07f      	b.n	80056d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	685b      	ldr	r3, [r3, #4]
 80055d6:	2b02      	cmp	r3, #2
 80055d8:	d003      	beq.n	80055e2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80055de:	2b03      	cmp	r3, #3
 80055e0:	d107      	bne.n	80055f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80055e2:	4b3f      	ldr	r3, [pc, #252]	@ (80056e0 <HAL_RCC_ClockConfig+0x1bc>)
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d109      	bne.n	8005602 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80055ee:	2301      	movs	r3, #1
 80055f0:	e06f      	b.n	80056d2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80055f2:	4b3b      	ldr	r3, [pc, #236]	@ (80056e0 <HAL_RCC_ClockConfig+0x1bc>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f003 0302 	and.w	r3, r3, #2
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d101      	bne.n	8005602 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80055fe:	2301      	movs	r3, #1
 8005600:	e067      	b.n	80056d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005602:	4b37      	ldr	r3, [pc, #220]	@ (80056e0 <HAL_RCC_ClockConfig+0x1bc>)
 8005604:	689b      	ldr	r3, [r3, #8]
 8005606:	f023 0203 	bic.w	r2, r3, #3
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	685b      	ldr	r3, [r3, #4]
 800560e:	4934      	ldr	r1, [pc, #208]	@ (80056e0 <HAL_RCC_ClockConfig+0x1bc>)
 8005610:	4313      	orrs	r3, r2
 8005612:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005614:	f7fd fe80 	bl	8003318 <HAL_GetTick>
 8005618:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800561a:	e00a      	b.n	8005632 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800561c:	f7fd fe7c 	bl	8003318 <HAL_GetTick>
 8005620:	4602      	mov	r2, r0
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	1ad3      	subs	r3, r2, r3
 8005626:	f241 3288 	movw	r2, #5000	@ 0x1388
 800562a:	4293      	cmp	r3, r2
 800562c:	d901      	bls.n	8005632 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800562e:	2303      	movs	r3, #3
 8005630:	e04f      	b.n	80056d2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005632:	4b2b      	ldr	r3, [pc, #172]	@ (80056e0 <HAL_RCC_ClockConfig+0x1bc>)
 8005634:	689b      	ldr	r3, [r3, #8]
 8005636:	f003 020c 	and.w	r2, r3, #12
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	685b      	ldr	r3, [r3, #4]
 800563e:	009b      	lsls	r3, r3, #2
 8005640:	429a      	cmp	r2, r3
 8005642:	d1eb      	bne.n	800561c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005644:	4b25      	ldr	r3, [pc, #148]	@ (80056dc <HAL_RCC_ClockConfig+0x1b8>)
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f003 0307 	and.w	r3, r3, #7
 800564c:	683a      	ldr	r2, [r7, #0]
 800564e:	429a      	cmp	r2, r3
 8005650:	d20c      	bcs.n	800566c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005652:	4b22      	ldr	r3, [pc, #136]	@ (80056dc <HAL_RCC_ClockConfig+0x1b8>)
 8005654:	683a      	ldr	r2, [r7, #0]
 8005656:	b2d2      	uxtb	r2, r2
 8005658:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800565a:	4b20      	ldr	r3, [pc, #128]	@ (80056dc <HAL_RCC_ClockConfig+0x1b8>)
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f003 0307 	and.w	r3, r3, #7
 8005662:	683a      	ldr	r2, [r7, #0]
 8005664:	429a      	cmp	r2, r3
 8005666:	d001      	beq.n	800566c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005668:	2301      	movs	r3, #1
 800566a:	e032      	b.n	80056d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f003 0304 	and.w	r3, r3, #4
 8005674:	2b00      	cmp	r3, #0
 8005676:	d008      	beq.n	800568a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005678:	4b19      	ldr	r3, [pc, #100]	@ (80056e0 <HAL_RCC_ClockConfig+0x1bc>)
 800567a:	689b      	ldr	r3, [r3, #8]
 800567c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	68db      	ldr	r3, [r3, #12]
 8005684:	4916      	ldr	r1, [pc, #88]	@ (80056e0 <HAL_RCC_ClockConfig+0x1bc>)
 8005686:	4313      	orrs	r3, r2
 8005688:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f003 0308 	and.w	r3, r3, #8
 8005692:	2b00      	cmp	r3, #0
 8005694:	d009      	beq.n	80056aa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005696:	4b12      	ldr	r3, [pc, #72]	@ (80056e0 <HAL_RCC_ClockConfig+0x1bc>)
 8005698:	689b      	ldr	r3, [r3, #8]
 800569a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	691b      	ldr	r3, [r3, #16]
 80056a2:	00db      	lsls	r3, r3, #3
 80056a4:	490e      	ldr	r1, [pc, #56]	@ (80056e0 <HAL_RCC_ClockConfig+0x1bc>)
 80056a6:	4313      	orrs	r3, r2
 80056a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80056aa:	f000 f821 	bl	80056f0 <HAL_RCC_GetSysClockFreq>
 80056ae:	4602      	mov	r2, r0
 80056b0:	4b0b      	ldr	r3, [pc, #44]	@ (80056e0 <HAL_RCC_ClockConfig+0x1bc>)
 80056b2:	689b      	ldr	r3, [r3, #8]
 80056b4:	091b      	lsrs	r3, r3, #4
 80056b6:	f003 030f 	and.w	r3, r3, #15
 80056ba:	490a      	ldr	r1, [pc, #40]	@ (80056e4 <HAL_RCC_ClockConfig+0x1c0>)
 80056bc:	5ccb      	ldrb	r3, [r1, r3]
 80056be:	fa22 f303 	lsr.w	r3, r2, r3
 80056c2:	4a09      	ldr	r2, [pc, #36]	@ (80056e8 <HAL_RCC_ClockConfig+0x1c4>)
 80056c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80056c6:	4b09      	ldr	r3, [pc, #36]	@ (80056ec <HAL_RCC_ClockConfig+0x1c8>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4618      	mov	r0, r3
 80056cc:	f7fd fde0 	bl	8003290 <HAL_InitTick>

  return HAL_OK;
 80056d0:	2300      	movs	r3, #0
}
 80056d2:	4618      	mov	r0, r3
 80056d4:	3710      	adds	r7, #16
 80056d6:	46bd      	mov	sp, r7
 80056d8:	bd80      	pop	{r7, pc}
 80056da:	bf00      	nop
 80056dc:	40023c00 	.word	0x40023c00
 80056e0:	40023800 	.word	0x40023800
 80056e4:	0800bda0 	.word	0x0800bda0
 80056e8:	20000004 	.word	0x20000004
 80056ec:	20000008 	.word	0x20000008

080056f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80056f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80056f4:	b094      	sub	sp, #80	@ 0x50
 80056f6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80056f8:	2300      	movs	r3, #0
 80056fa:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80056fc:	2300      	movs	r3, #0
 80056fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8005700:	2300      	movs	r3, #0
 8005702:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005704:	2300      	movs	r3, #0
 8005706:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005708:	4b79      	ldr	r3, [pc, #484]	@ (80058f0 <HAL_RCC_GetSysClockFreq+0x200>)
 800570a:	689b      	ldr	r3, [r3, #8]
 800570c:	f003 030c 	and.w	r3, r3, #12
 8005710:	2b08      	cmp	r3, #8
 8005712:	d00d      	beq.n	8005730 <HAL_RCC_GetSysClockFreq+0x40>
 8005714:	2b08      	cmp	r3, #8
 8005716:	f200 80e1 	bhi.w	80058dc <HAL_RCC_GetSysClockFreq+0x1ec>
 800571a:	2b00      	cmp	r3, #0
 800571c:	d002      	beq.n	8005724 <HAL_RCC_GetSysClockFreq+0x34>
 800571e:	2b04      	cmp	r3, #4
 8005720:	d003      	beq.n	800572a <HAL_RCC_GetSysClockFreq+0x3a>
 8005722:	e0db      	b.n	80058dc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005724:	4b73      	ldr	r3, [pc, #460]	@ (80058f4 <HAL_RCC_GetSysClockFreq+0x204>)
 8005726:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005728:	e0db      	b.n	80058e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800572a:	4b73      	ldr	r3, [pc, #460]	@ (80058f8 <HAL_RCC_GetSysClockFreq+0x208>)
 800572c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800572e:	e0d8      	b.n	80058e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005730:	4b6f      	ldr	r3, [pc, #444]	@ (80058f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005732:	685b      	ldr	r3, [r3, #4]
 8005734:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005738:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800573a:	4b6d      	ldr	r3, [pc, #436]	@ (80058f0 <HAL_RCC_GetSysClockFreq+0x200>)
 800573c:	685b      	ldr	r3, [r3, #4]
 800573e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005742:	2b00      	cmp	r3, #0
 8005744:	d063      	beq.n	800580e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005746:	4b6a      	ldr	r3, [pc, #424]	@ (80058f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005748:	685b      	ldr	r3, [r3, #4]
 800574a:	099b      	lsrs	r3, r3, #6
 800574c:	2200      	movs	r2, #0
 800574e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005750:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005752:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005754:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005758:	633b      	str	r3, [r7, #48]	@ 0x30
 800575a:	2300      	movs	r3, #0
 800575c:	637b      	str	r3, [r7, #52]	@ 0x34
 800575e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005762:	4622      	mov	r2, r4
 8005764:	462b      	mov	r3, r5
 8005766:	f04f 0000 	mov.w	r0, #0
 800576a:	f04f 0100 	mov.w	r1, #0
 800576e:	0159      	lsls	r1, r3, #5
 8005770:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005774:	0150      	lsls	r0, r2, #5
 8005776:	4602      	mov	r2, r0
 8005778:	460b      	mov	r3, r1
 800577a:	4621      	mov	r1, r4
 800577c:	1a51      	subs	r1, r2, r1
 800577e:	6139      	str	r1, [r7, #16]
 8005780:	4629      	mov	r1, r5
 8005782:	eb63 0301 	sbc.w	r3, r3, r1
 8005786:	617b      	str	r3, [r7, #20]
 8005788:	f04f 0200 	mov.w	r2, #0
 800578c:	f04f 0300 	mov.w	r3, #0
 8005790:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005794:	4659      	mov	r1, fp
 8005796:	018b      	lsls	r3, r1, #6
 8005798:	4651      	mov	r1, sl
 800579a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800579e:	4651      	mov	r1, sl
 80057a0:	018a      	lsls	r2, r1, #6
 80057a2:	4651      	mov	r1, sl
 80057a4:	ebb2 0801 	subs.w	r8, r2, r1
 80057a8:	4659      	mov	r1, fp
 80057aa:	eb63 0901 	sbc.w	r9, r3, r1
 80057ae:	f04f 0200 	mov.w	r2, #0
 80057b2:	f04f 0300 	mov.w	r3, #0
 80057b6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80057ba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80057be:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80057c2:	4690      	mov	r8, r2
 80057c4:	4699      	mov	r9, r3
 80057c6:	4623      	mov	r3, r4
 80057c8:	eb18 0303 	adds.w	r3, r8, r3
 80057cc:	60bb      	str	r3, [r7, #8]
 80057ce:	462b      	mov	r3, r5
 80057d0:	eb49 0303 	adc.w	r3, r9, r3
 80057d4:	60fb      	str	r3, [r7, #12]
 80057d6:	f04f 0200 	mov.w	r2, #0
 80057da:	f04f 0300 	mov.w	r3, #0
 80057de:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80057e2:	4629      	mov	r1, r5
 80057e4:	024b      	lsls	r3, r1, #9
 80057e6:	4621      	mov	r1, r4
 80057e8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80057ec:	4621      	mov	r1, r4
 80057ee:	024a      	lsls	r2, r1, #9
 80057f0:	4610      	mov	r0, r2
 80057f2:	4619      	mov	r1, r3
 80057f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80057f6:	2200      	movs	r2, #0
 80057f8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80057fa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80057fc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005800:	f7fb fa2a 	bl	8000c58 <__aeabi_uldivmod>
 8005804:	4602      	mov	r2, r0
 8005806:	460b      	mov	r3, r1
 8005808:	4613      	mov	r3, r2
 800580a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800580c:	e058      	b.n	80058c0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800580e:	4b38      	ldr	r3, [pc, #224]	@ (80058f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005810:	685b      	ldr	r3, [r3, #4]
 8005812:	099b      	lsrs	r3, r3, #6
 8005814:	2200      	movs	r2, #0
 8005816:	4618      	mov	r0, r3
 8005818:	4611      	mov	r1, r2
 800581a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800581e:	623b      	str	r3, [r7, #32]
 8005820:	2300      	movs	r3, #0
 8005822:	627b      	str	r3, [r7, #36]	@ 0x24
 8005824:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005828:	4642      	mov	r2, r8
 800582a:	464b      	mov	r3, r9
 800582c:	f04f 0000 	mov.w	r0, #0
 8005830:	f04f 0100 	mov.w	r1, #0
 8005834:	0159      	lsls	r1, r3, #5
 8005836:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800583a:	0150      	lsls	r0, r2, #5
 800583c:	4602      	mov	r2, r0
 800583e:	460b      	mov	r3, r1
 8005840:	4641      	mov	r1, r8
 8005842:	ebb2 0a01 	subs.w	sl, r2, r1
 8005846:	4649      	mov	r1, r9
 8005848:	eb63 0b01 	sbc.w	fp, r3, r1
 800584c:	f04f 0200 	mov.w	r2, #0
 8005850:	f04f 0300 	mov.w	r3, #0
 8005854:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005858:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800585c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005860:	ebb2 040a 	subs.w	r4, r2, sl
 8005864:	eb63 050b 	sbc.w	r5, r3, fp
 8005868:	f04f 0200 	mov.w	r2, #0
 800586c:	f04f 0300 	mov.w	r3, #0
 8005870:	00eb      	lsls	r3, r5, #3
 8005872:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005876:	00e2      	lsls	r2, r4, #3
 8005878:	4614      	mov	r4, r2
 800587a:	461d      	mov	r5, r3
 800587c:	4643      	mov	r3, r8
 800587e:	18e3      	adds	r3, r4, r3
 8005880:	603b      	str	r3, [r7, #0]
 8005882:	464b      	mov	r3, r9
 8005884:	eb45 0303 	adc.w	r3, r5, r3
 8005888:	607b      	str	r3, [r7, #4]
 800588a:	f04f 0200 	mov.w	r2, #0
 800588e:	f04f 0300 	mov.w	r3, #0
 8005892:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005896:	4629      	mov	r1, r5
 8005898:	028b      	lsls	r3, r1, #10
 800589a:	4621      	mov	r1, r4
 800589c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80058a0:	4621      	mov	r1, r4
 80058a2:	028a      	lsls	r2, r1, #10
 80058a4:	4610      	mov	r0, r2
 80058a6:	4619      	mov	r1, r3
 80058a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80058aa:	2200      	movs	r2, #0
 80058ac:	61bb      	str	r3, [r7, #24]
 80058ae:	61fa      	str	r2, [r7, #28]
 80058b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80058b4:	f7fb f9d0 	bl	8000c58 <__aeabi_uldivmod>
 80058b8:	4602      	mov	r2, r0
 80058ba:	460b      	mov	r3, r1
 80058bc:	4613      	mov	r3, r2
 80058be:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80058c0:	4b0b      	ldr	r3, [pc, #44]	@ (80058f0 <HAL_RCC_GetSysClockFreq+0x200>)
 80058c2:	685b      	ldr	r3, [r3, #4]
 80058c4:	0c1b      	lsrs	r3, r3, #16
 80058c6:	f003 0303 	and.w	r3, r3, #3
 80058ca:	3301      	adds	r3, #1
 80058cc:	005b      	lsls	r3, r3, #1
 80058ce:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80058d0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80058d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80058d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80058d8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80058da:	e002      	b.n	80058e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80058dc:	4b05      	ldr	r3, [pc, #20]	@ (80058f4 <HAL_RCC_GetSysClockFreq+0x204>)
 80058de:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80058e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80058e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80058e4:	4618      	mov	r0, r3
 80058e6:	3750      	adds	r7, #80	@ 0x50
 80058e8:	46bd      	mov	sp, r7
 80058ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80058ee:	bf00      	nop
 80058f0:	40023800 	.word	0x40023800
 80058f4:	00f42400 	.word	0x00f42400
 80058f8:	007a1200 	.word	0x007a1200

080058fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80058fc:	b480      	push	{r7}
 80058fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005900:	4b03      	ldr	r3, [pc, #12]	@ (8005910 <HAL_RCC_GetHCLKFreq+0x14>)
 8005902:	681b      	ldr	r3, [r3, #0]
}
 8005904:	4618      	mov	r0, r3
 8005906:	46bd      	mov	sp, r7
 8005908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590c:	4770      	bx	lr
 800590e:	bf00      	nop
 8005910:	20000004 	.word	0x20000004

08005914 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005918:	f7ff fff0 	bl	80058fc <HAL_RCC_GetHCLKFreq>
 800591c:	4602      	mov	r2, r0
 800591e:	4b05      	ldr	r3, [pc, #20]	@ (8005934 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005920:	689b      	ldr	r3, [r3, #8]
 8005922:	0a9b      	lsrs	r3, r3, #10
 8005924:	f003 0307 	and.w	r3, r3, #7
 8005928:	4903      	ldr	r1, [pc, #12]	@ (8005938 <HAL_RCC_GetPCLK1Freq+0x24>)
 800592a:	5ccb      	ldrb	r3, [r1, r3]
 800592c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005930:	4618      	mov	r0, r3
 8005932:	bd80      	pop	{r7, pc}
 8005934:	40023800 	.word	0x40023800
 8005938:	0800bdb0 	.word	0x0800bdb0

0800593c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800593c:	b580      	push	{r7, lr}
 800593e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005940:	f7ff ffdc 	bl	80058fc <HAL_RCC_GetHCLKFreq>
 8005944:	4602      	mov	r2, r0
 8005946:	4b05      	ldr	r3, [pc, #20]	@ (800595c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005948:	689b      	ldr	r3, [r3, #8]
 800594a:	0b5b      	lsrs	r3, r3, #13
 800594c:	f003 0307 	and.w	r3, r3, #7
 8005950:	4903      	ldr	r1, [pc, #12]	@ (8005960 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005952:	5ccb      	ldrb	r3, [r1, r3]
 8005954:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005958:	4618      	mov	r0, r3
 800595a:	bd80      	pop	{r7, pc}
 800595c:	40023800 	.word	0x40023800
 8005960:	0800bdb0 	.word	0x0800bdb0

08005964 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005964:	b580      	push	{r7, lr}
 8005966:	b086      	sub	sp, #24
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800596c:	2300      	movs	r3, #0
 800596e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005970:	2300      	movs	r3, #0
 8005972:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f003 0301 	and.w	r3, r3, #1
 800597c:	2b00      	cmp	r3, #0
 800597e:	d105      	bne.n	800598c <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005988:	2b00      	cmp	r3, #0
 800598a:	d038      	beq.n	80059fe <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800598c:	4b68      	ldr	r3, [pc, #416]	@ (8005b30 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800598e:	2200      	movs	r2, #0
 8005990:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005992:	f7fd fcc1 	bl	8003318 <HAL_GetTick>
 8005996:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005998:	e008      	b.n	80059ac <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800599a:	f7fd fcbd 	bl	8003318 <HAL_GetTick>
 800599e:	4602      	mov	r2, r0
 80059a0:	697b      	ldr	r3, [r7, #20]
 80059a2:	1ad3      	subs	r3, r2, r3
 80059a4:	2b02      	cmp	r3, #2
 80059a6:	d901      	bls.n	80059ac <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80059a8:	2303      	movs	r3, #3
 80059aa:	e0bd      	b.n	8005b28 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80059ac:	4b61      	ldr	r3, [pc, #388]	@ (8005b34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d1f0      	bne.n	800599a <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN,
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	685a      	ldr	r2, [r3, #4]
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	689b      	ldr	r3, [r3, #8]
 80059c0:	019b      	lsls	r3, r3, #6
 80059c2:	431a      	orrs	r2, r3
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	68db      	ldr	r3, [r3, #12]
 80059c8:	071b      	lsls	r3, r3, #28
 80059ca:	495a      	ldr	r1, [pc, #360]	@ (8005b34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80059cc:	4313      	orrs	r3, r2
 80059ce:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80059d2:	4b57      	ldr	r3, [pc, #348]	@ (8005b30 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80059d4:	2201      	movs	r2, #1
 80059d6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80059d8:	f7fd fc9e 	bl	8003318 <HAL_GetTick>
 80059dc:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80059de:	e008      	b.n	80059f2 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80059e0:	f7fd fc9a 	bl	8003318 <HAL_GetTick>
 80059e4:	4602      	mov	r2, r0
 80059e6:	697b      	ldr	r3, [r7, #20]
 80059e8:	1ad3      	subs	r3, r2, r3
 80059ea:	2b02      	cmp	r3, #2
 80059ec:	d901      	bls.n	80059f2 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80059ee:	2303      	movs	r3, #3
 80059f0:	e09a      	b.n	8005b28 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80059f2:	4b50      	ldr	r3, [pc, #320]	@ (8005b34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d0f0      	beq.n	80059e0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f003 0302 	and.w	r3, r3, #2
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	f000 8083 	beq.w	8005b12 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	60fb      	str	r3, [r7, #12]
 8005a10:	4b48      	ldr	r3, [pc, #288]	@ (8005b34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a14:	4a47      	ldr	r2, [pc, #284]	@ (8005b34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a16:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005a1a:	6413      	str	r3, [r2, #64]	@ 0x40
 8005a1c:	4b45      	ldr	r3, [pc, #276]	@ (8005b34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a20:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005a24:	60fb      	str	r3, [r7, #12]
 8005a26:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005a28:	4b43      	ldr	r3, [pc, #268]	@ (8005b38 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	4a42      	ldr	r2, [pc, #264]	@ (8005b38 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005a2e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005a32:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005a34:	f7fd fc70 	bl	8003318 <HAL_GetTick>
 8005a38:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005a3a:	e008      	b.n	8005a4e <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a3c:	f7fd fc6c 	bl	8003318 <HAL_GetTick>
 8005a40:	4602      	mov	r2, r0
 8005a42:	697b      	ldr	r3, [r7, #20]
 8005a44:	1ad3      	subs	r3, r2, r3
 8005a46:	2b02      	cmp	r3, #2
 8005a48:	d901      	bls.n	8005a4e <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8005a4a:	2303      	movs	r3, #3
 8005a4c:	e06c      	b.n	8005b28 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005a4e:	4b3a      	ldr	r3, [pc, #232]	@ (8005b38 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d0f0      	beq.n	8005a3c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005a5a:	4b36      	ldr	r3, [pc, #216]	@ (8005b34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a5e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005a62:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005a64:	693b      	ldr	r3, [r7, #16]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d02f      	beq.n	8005aca <HAL_RCCEx_PeriphCLKConfig+0x166>
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	691b      	ldr	r3, [r3, #16]
 8005a6e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005a72:	693a      	ldr	r2, [r7, #16]
 8005a74:	429a      	cmp	r2, r3
 8005a76:	d028      	beq.n	8005aca <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005a78:	4b2e      	ldr	r3, [pc, #184]	@ (8005b34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a7c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005a80:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005a82:	4b2e      	ldr	r3, [pc, #184]	@ (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005a84:	2201      	movs	r2, #1
 8005a86:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005a88:	4b2c      	ldr	r3, [pc, #176]	@ (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005a8e:	4a29      	ldr	r2, [pc, #164]	@ (8005b34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a90:	693b      	ldr	r3, [r7, #16]
 8005a92:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005a94:	4b27      	ldr	r3, [pc, #156]	@ (8005b34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a98:	f003 0301 	and.w	r3, r3, #1
 8005a9c:	2b01      	cmp	r3, #1
 8005a9e:	d114      	bne.n	8005aca <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005aa0:	f7fd fc3a 	bl	8003318 <HAL_GetTick>
 8005aa4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005aa6:	e00a      	b.n	8005abe <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005aa8:	f7fd fc36 	bl	8003318 <HAL_GetTick>
 8005aac:	4602      	mov	r2, r0
 8005aae:	697b      	ldr	r3, [r7, #20]
 8005ab0:	1ad3      	subs	r3, r2, r3
 8005ab2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d901      	bls.n	8005abe <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8005aba:	2303      	movs	r3, #3
 8005abc:	e034      	b.n	8005b28 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005abe:	4b1d      	ldr	r3, [pc, #116]	@ (8005b34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ac0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ac2:	f003 0302 	and.w	r3, r3, #2
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d0ee      	beq.n	8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	691b      	ldr	r3, [r3, #16]
 8005ace:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005ad2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005ad6:	d10d      	bne.n	8005af4 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8005ad8:	4b16      	ldr	r3, [pc, #88]	@ (8005b34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ada:	689b      	ldr	r3, [r3, #8]
 8005adc:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	691b      	ldr	r3, [r3, #16]
 8005ae4:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8005ae8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005aec:	4911      	ldr	r1, [pc, #68]	@ (8005b34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005aee:	4313      	orrs	r3, r2
 8005af0:	608b      	str	r3, [r1, #8]
 8005af2:	e005      	b.n	8005b00 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8005af4:	4b0f      	ldr	r3, [pc, #60]	@ (8005b34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005af6:	689b      	ldr	r3, [r3, #8]
 8005af8:	4a0e      	ldr	r2, [pc, #56]	@ (8005b34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005afa:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8005afe:	6093      	str	r3, [r2, #8]
 8005b00:	4b0c      	ldr	r3, [pc, #48]	@ (8005b34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b02:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	691b      	ldr	r3, [r3, #16]
 8005b08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b0c:	4909      	ldr	r1, [pc, #36]	@ (8005b34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b0e:	4313      	orrs	r3, r2
 8005b10:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f003 0308 	and.w	r3, r3, #8
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d003      	beq.n	8005b26 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	7d1a      	ldrb	r2, [r3, #20]
 8005b22:	4b07      	ldr	r3, [pc, #28]	@ (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8005b24:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005b26:	2300      	movs	r3, #0
}
 8005b28:	4618      	mov	r0, r3
 8005b2a:	3718      	adds	r7, #24
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	bd80      	pop	{r7, pc}
 8005b30:	42470068 	.word	0x42470068
 8005b34:	40023800 	.word	0x40023800
 8005b38:	40007000 	.word	0x40007000
 8005b3c:	42470e40 	.word	0x42470e40
 8005b40:	424711e0 	.word	0x424711e0

08005b44 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005b44:	b480      	push	{r7}
 8005b46:	b087      	sub	sp, #28
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8005b50:	2300      	movs	r3, #0
 8005b52:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8005b54:	2300      	movs	r3, #0
 8005b56:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8005b58:	2300      	movs	r3, #0
 8005b5a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2b01      	cmp	r3, #1
 8005b60:	d141      	bne.n	8005be6 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8005b62:	4b25      	ldr	r3, [pc, #148]	@ (8005bf8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005b64:	689b      	ldr	r3, [r3, #8]
 8005b66:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005b6a:	60fb      	str	r3, [r7, #12]
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d006      	beq.n	8005b80 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005b78:	d131      	bne.n	8005bde <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8005b7a:	4b20      	ldr	r3, [pc, #128]	@ (8005bfc <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8005b7c:	617b      	str	r3, [r7, #20]
          break;
 8005b7e:	e031      	b.n	8005be4 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
        case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005b80:	4b1d      	ldr	r3, [pc, #116]	@ (8005bf8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005b82:	685b      	ldr	r3, [r3, #4]
 8005b84:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005b88:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005b8c:	d109      	bne.n	8005ba2 <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8005b8e:	4b1a      	ldr	r3, [pc, #104]	@ (8005bf8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005b90:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005b94:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005b98:	4a19      	ldr	r2, [pc, #100]	@ (8005c00 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8005b9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b9e:	613b      	str	r3, [r7, #16]
 8005ba0:	e008      	b.n	8005bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8005ba2:	4b15      	ldr	r3, [pc, #84]	@ (8005bf8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005ba4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005ba8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005bac:	4a15      	ldr	r2, [pc, #84]	@ (8005c04 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 8005bae:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bb2:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8005bb4:	4b10      	ldr	r3, [pc, #64]	@ (8005bf8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005bb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005bba:	099b      	lsrs	r3, r3, #6
 8005bbc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005bc0:	693b      	ldr	r3, [r7, #16]
 8005bc2:	fb02 f303 	mul.w	r3, r2, r3
 8005bc6:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8005bc8:	4b0b      	ldr	r3, [pc, #44]	@ (8005bf8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005bca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005bce:	0f1b      	lsrs	r3, r3, #28
 8005bd0:	f003 0307 	and.w	r3, r3, #7
 8005bd4:	68ba      	ldr	r2, [r7, #8]
 8005bd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bda:	617b      	str	r3, [r7, #20]
          break;
 8005bdc:	e002      	b.n	8005be4 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8005bde:	2300      	movs	r3, #0
 8005be0:	617b      	str	r3, [r7, #20]
          break;
 8005be2:	bf00      	nop
        }
      }
      break;
 8005be4:	e000      	b.n	8005be8 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
    }
    default:
    {
      break;
 8005be6:	bf00      	nop
    }
  }
  return frequency;
 8005be8:	697b      	ldr	r3, [r7, #20]
}
 8005bea:	4618      	mov	r0, r3
 8005bec:	371c      	adds	r7, #28
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf4:	4770      	bx	lr
 8005bf6:	bf00      	nop
 8005bf8:	40023800 	.word	0x40023800
 8005bfc:	00bb8000 	.word	0x00bb8000
 8005c00:	007a1200 	.word	0x007a1200
 8005c04:	00f42400 	.word	0x00f42400

08005c08 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b082      	sub	sp, #8
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d101      	bne.n	8005c1a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005c16:	2301      	movs	r3, #1
 8005c18:	e041      	b.n	8005c9e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005c20:	b2db      	uxtb	r3, r3
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d106      	bne.n	8005c34 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2200      	movs	r2, #0
 8005c2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005c2e:	6878      	ldr	r0, [r7, #4]
 8005c30:	f7fc fe36 	bl	80028a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2202      	movs	r2, #2
 8005c38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681a      	ldr	r2, [r3, #0]
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	3304      	adds	r3, #4
 8005c44:	4619      	mov	r1, r3
 8005c46:	4610      	mov	r0, r2
 8005c48:	f000 f950 	bl	8005eec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2201      	movs	r2, #1
 8005c50:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2201      	movs	r2, #1
 8005c58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2201      	movs	r2, #1
 8005c60:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2201      	movs	r2, #1
 8005c68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2201      	movs	r2, #1
 8005c70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2201      	movs	r2, #1
 8005c78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2201      	movs	r2, #1
 8005c80:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2201      	movs	r2, #1
 8005c88:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2201      	movs	r2, #1
 8005c90:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2201      	movs	r2, #1
 8005c98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005c9c:	2300      	movs	r3, #0
}
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	3708      	adds	r7, #8
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	bd80      	pop	{r7, pc}
	...

08005ca8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005ca8:	b480      	push	{r7}
 8005caa:	b085      	sub	sp, #20
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005cb6:	b2db      	uxtb	r3, r3
 8005cb8:	2b01      	cmp	r3, #1
 8005cba:	d001      	beq.n	8005cc0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005cbc:	2301      	movs	r3, #1
 8005cbe:	e03c      	b.n	8005d3a <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2202      	movs	r2, #2
 8005cc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	4a1e      	ldr	r2, [pc, #120]	@ (8005d48 <HAL_TIM_Base_Start+0xa0>)
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d018      	beq.n	8005d04 <HAL_TIM_Base_Start+0x5c>
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005cda:	d013      	beq.n	8005d04 <HAL_TIM_Base_Start+0x5c>
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	4a1a      	ldr	r2, [pc, #104]	@ (8005d4c <HAL_TIM_Base_Start+0xa4>)
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d00e      	beq.n	8005d04 <HAL_TIM_Base_Start+0x5c>
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	4a19      	ldr	r2, [pc, #100]	@ (8005d50 <HAL_TIM_Base_Start+0xa8>)
 8005cec:	4293      	cmp	r3, r2
 8005cee:	d009      	beq.n	8005d04 <HAL_TIM_Base_Start+0x5c>
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	4a17      	ldr	r2, [pc, #92]	@ (8005d54 <HAL_TIM_Base_Start+0xac>)
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d004      	beq.n	8005d04 <HAL_TIM_Base_Start+0x5c>
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	4a16      	ldr	r2, [pc, #88]	@ (8005d58 <HAL_TIM_Base_Start+0xb0>)
 8005d00:	4293      	cmp	r3, r2
 8005d02:	d111      	bne.n	8005d28 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	689b      	ldr	r3, [r3, #8]
 8005d0a:	f003 0307 	and.w	r3, r3, #7
 8005d0e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	2b06      	cmp	r3, #6
 8005d14:	d010      	beq.n	8005d38 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	681a      	ldr	r2, [r3, #0]
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f042 0201 	orr.w	r2, r2, #1
 8005d24:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d26:	e007      	b.n	8005d38 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	681a      	ldr	r2, [r3, #0]
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f042 0201 	orr.w	r2, r2, #1
 8005d36:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005d38:	2300      	movs	r3, #0
}
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	3714      	adds	r7, #20
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d44:	4770      	bx	lr
 8005d46:	bf00      	nop
 8005d48:	40010000 	.word	0x40010000
 8005d4c:	40000400 	.word	0x40000400
 8005d50:	40000800 	.word	0x40000800
 8005d54:	40000c00 	.word	0x40000c00
 8005d58:	40014000 	.word	0x40014000

08005d5c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b084      	sub	sp, #16
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
 8005d64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005d66:	2300      	movs	r3, #0
 8005d68:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005d70:	2b01      	cmp	r3, #1
 8005d72:	d101      	bne.n	8005d78 <HAL_TIM_ConfigClockSource+0x1c>
 8005d74:	2302      	movs	r3, #2
 8005d76:	e0b4      	b.n	8005ee2 <HAL_TIM_ConfigClockSource+0x186>
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2201      	movs	r2, #1
 8005d7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2202      	movs	r2, #2
 8005d84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	689b      	ldr	r3, [r3, #8]
 8005d8e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005d90:	68bb      	ldr	r3, [r7, #8]
 8005d92:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005d96:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d98:	68bb      	ldr	r3, [r7, #8]
 8005d9a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005d9e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	68ba      	ldr	r2, [r7, #8]
 8005da6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005db0:	d03e      	beq.n	8005e30 <HAL_TIM_ConfigClockSource+0xd4>
 8005db2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005db6:	f200 8087 	bhi.w	8005ec8 <HAL_TIM_ConfigClockSource+0x16c>
 8005dba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005dbe:	f000 8086 	beq.w	8005ece <HAL_TIM_ConfigClockSource+0x172>
 8005dc2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005dc6:	d87f      	bhi.n	8005ec8 <HAL_TIM_ConfigClockSource+0x16c>
 8005dc8:	2b70      	cmp	r3, #112	@ 0x70
 8005dca:	d01a      	beq.n	8005e02 <HAL_TIM_ConfigClockSource+0xa6>
 8005dcc:	2b70      	cmp	r3, #112	@ 0x70
 8005dce:	d87b      	bhi.n	8005ec8 <HAL_TIM_ConfigClockSource+0x16c>
 8005dd0:	2b60      	cmp	r3, #96	@ 0x60
 8005dd2:	d050      	beq.n	8005e76 <HAL_TIM_ConfigClockSource+0x11a>
 8005dd4:	2b60      	cmp	r3, #96	@ 0x60
 8005dd6:	d877      	bhi.n	8005ec8 <HAL_TIM_ConfigClockSource+0x16c>
 8005dd8:	2b50      	cmp	r3, #80	@ 0x50
 8005dda:	d03c      	beq.n	8005e56 <HAL_TIM_ConfigClockSource+0xfa>
 8005ddc:	2b50      	cmp	r3, #80	@ 0x50
 8005dde:	d873      	bhi.n	8005ec8 <HAL_TIM_ConfigClockSource+0x16c>
 8005de0:	2b40      	cmp	r3, #64	@ 0x40
 8005de2:	d058      	beq.n	8005e96 <HAL_TIM_ConfigClockSource+0x13a>
 8005de4:	2b40      	cmp	r3, #64	@ 0x40
 8005de6:	d86f      	bhi.n	8005ec8 <HAL_TIM_ConfigClockSource+0x16c>
 8005de8:	2b30      	cmp	r3, #48	@ 0x30
 8005dea:	d064      	beq.n	8005eb6 <HAL_TIM_ConfigClockSource+0x15a>
 8005dec:	2b30      	cmp	r3, #48	@ 0x30
 8005dee:	d86b      	bhi.n	8005ec8 <HAL_TIM_ConfigClockSource+0x16c>
 8005df0:	2b20      	cmp	r3, #32
 8005df2:	d060      	beq.n	8005eb6 <HAL_TIM_ConfigClockSource+0x15a>
 8005df4:	2b20      	cmp	r3, #32
 8005df6:	d867      	bhi.n	8005ec8 <HAL_TIM_ConfigClockSource+0x16c>
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d05c      	beq.n	8005eb6 <HAL_TIM_ConfigClockSource+0x15a>
 8005dfc:	2b10      	cmp	r3, #16
 8005dfe:	d05a      	beq.n	8005eb6 <HAL_TIM_ConfigClockSource+0x15a>
 8005e00:	e062      	b.n	8005ec8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005e12:	f000 f971 	bl	80060f8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	689b      	ldr	r3, [r3, #8]
 8005e1c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005e1e:	68bb      	ldr	r3, [r7, #8]
 8005e20:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005e24:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	68ba      	ldr	r2, [r7, #8]
 8005e2c:	609a      	str	r2, [r3, #8]
      break;
 8005e2e:	e04f      	b.n	8005ed0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005e40:	f000 f95a 	bl	80060f8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	689a      	ldr	r2, [r3, #8]
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005e52:	609a      	str	r2, [r3, #8]
      break;
 8005e54:	e03c      	b.n	8005ed0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e62:	461a      	mov	r2, r3
 8005e64:	f000 f8ce 	bl	8006004 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	2150      	movs	r1, #80	@ 0x50
 8005e6e:	4618      	mov	r0, r3
 8005e70:	f000 f927 	bl	80060c2 <TIM_ITRx_SetConfig>
      break;
 8005e74:	e02c      	b.n	8005ed0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005e82:	461a      	mov	r2, r3
 8005e84:	f000 f8ed 	bl	8006062 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	2160      	movs	r1, #96	@ 0x60
 8005e8e:	4618      	mov	r0, r3
 8005e90:	f000 f917 	bl	80060c2 <TIM_ITRx_SetConfig>
      break;
 8005e94:	e01c      	b.n	8005ed0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ea2:	461a      	mov	r2, r3
 8005ea4:	f000 f8ae 	bl	8006004 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	2140      	movs	r1, #64	@ 0x40
 8005eae:	4618      	mov	r0, r3
 8005eb0:	f000 f907 	bl	80060c2 <TIM_ITRx_SetConfig>
      break;
 8005eb4:	e00c      	b.n	8005ed0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681a      	ldr	r2, [r3, #0]
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	4619      	mov	r1, r3
 8005ec0:	4610      	mov	r0, r2
 8005ec2:	f000 f8fe 	bl	80060c2 <TIM_ITRx_SetConfig>
      break;
 8005ec6:	e003      	b.n	8005ed0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005ec8:	2301      	movs	r3, #1
 8005eca:	73fb      	strb	r3, [r7, #15]
      break;
 8005ecc:	e000      	b.n	8005ed0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005ece:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2201      	movs	r2, #1
 8005ed4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2200      	movs	r2, #0
 8005edc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005ee0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	3710      	adds	r7, #16
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	bd80      	pop	{r7, pc}
	...

08005eec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005eec:	b480      	push	{r7}
 8005eee:	b085      	sub	sp, #20
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
 8005ef4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	4a3a      	ldr	r2, [pc, #232]	@ (8005fe8 <TIM_Base_SetConfig+0xfc>)
 8005f00:	4293      	cmp	r3, r2
 8005f02:	d00f      	beq.n	8005f24 <TIM_Base_SetConfig+0x38>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f0a:	d00b      	beq.n	8005f24 <TIM_Base_SetConfig+0x38>
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	4a37      	ldr	r2, [pc, #220]	@ (8005fec <TIM_Base_SetConfig+0x100>)
 8005f10:	4293      	cmp	r3, r2
 8005f12:	d007      	beq.n	8005f24 <TIM_Base_SetConfig+0x38>
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	4a36      	ldr	r2, [pc, #216]	@ (8005ff0 <TIM_Base_SetConfig+0x104>)
 8005f18:	4293      	cmp	r3, r2
 8005f1a:	d003      	beq.n	8005f24 <TIM_Base_SetConfig+0x38>
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	4a35      	ldr	r2, [pc, #212]	@ (8005ff4 <TIM_Base_SetConfig+0x108>)
 8005f20:	4293      	cmp	r3, r2
 8005f22:	d108      	bne.n	8005f36 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f2a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	685b      	ldr	r3, [r3, #4]
 8005f30:	68fa      	ldr	r2, [r7, #12]
 8005f32:	4313      	orrs	r3, r2
 8005f34:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	4a2b      	ldr	r2, [pc, #172]	@ (8005fe8 <TIM_Base_SetConfig+0xfc>)
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d01b      	beq.n	8005f76 <TIM_Base_SetConfig+0x8a>
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f44:	d017      	beq.n	8005f76 <TIM_Base_SetConfig+0x8a>
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	4a28      	ldr	r2, [pc, #160]	@ (8005fec <TIM_Base_SetConfig+0x100>)
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d013      	beq.n	8005f76 <TIM_Base_SetConfig+0x8a>
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	4a27      	ldr	r2, [pc, #156]	@ (8005ff0 <TIM_Base_SetConfig+0x104>)
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d00f      	beq.n	8005f76 <TIM_Base_SetConfig+0x8a>
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	4a26      	ldr	r2, [pc, #152]	@ (8005ff4 <TIM_Base_SetConfig+0x108>)
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	d00b      	beq.n	8005f76 <TIM_Base_SetConfig+0x8a>
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	4a25      	ldr	r2, [pc, #148]	@ (8005ff8 <TIM_Base_SetConfig+0x10c>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d007      	beq.n	8005f76 <TIM_Base_SetConfig+0x8a>
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	4a24      	ldr	r2, [pc, #144]	@ (8005ffc <TIM_Base_SetConfig+0x110>)
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d003      	beq.n	8005f76 <TIM_Base_SetConfig+0x8a>
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	4a23      	ldr	r2, [pc, #140]	@ (8006000 <TIM_Base_SetConfig+0x114>)
 8005f72:	4293      	cmp	r3, r2
 8005f74:	d108      	bne.n	8005f88 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005f7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	68db      	ldr	r3, [r3, #12]
 8005f82:	68fa      	ldr	r2, [r7, #12]
 8005f84:	4313      	orrs	r3, r2
 8005f86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	695b      	ldr	r3, [r3, #20]
 8005f92:	4313      	orrs	r3, r2
 8005f94:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	68fa      	ldr	r2, [r7, #12]
 8005f9a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	689a      	ldr	r2, [r3, #8]
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	681a      	ldr	r2, [r3, #0]
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	4a0e      	ldr	r2, [pc, #56]	@ (8005fe8 <TIM_Base_SetConfig+0xfc>)
 8005fb0:	4293      	cmp	r3, r2
 8005fb2:	d103      	bne.n	8005fbc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	691a      	ldr	r2, [r3, #16]
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2201      	movs	r2, #1
 8005fc0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	691b      	ldr	r3, [r3, #16]
 8005fc6:	f003 0301 	and.w	r3, r3, #1
 8005fca:	2b01      	cmp	r3, #1
 8005fcc:	d105      	bne.n	8005fda <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	691b      	ldr	r3, [r3, #16]
 8005fd2:	f023 0201 	bic.w	r2, r3, #1
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	611a      	str	r2, [r3, #16]
  }
}
 8005fda:	bf00      	nop
 8005fdc:	3714      	adds	r7, #20
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe4:	4770      	bx	lr
 8005fe6:	bf00      	nop
 8005fe8:	40010000 	.word	0x40010000
 8005fec:	40000400 	.word	0x40000400
 8005ff0:	40000800 	.word	0x40000800
 8005ff4:	40000c00 	.word	0x40000c00
 8005ff8:	40014000 	.word	0x40014000
 8005ffc:	40014400 	.word	0x40014400
 8006000:	40014800 	.word	0x40014800

08006004 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006004:	b480      	push	{r7}
 8006006:	b087      	sub	sp, #28
 8006008:	af00      	add	r7, sp, #0
 800600a:	60f8      	str	r0, [r7, #12]
 800600c:	60b9      	str	r1, [r7, #8]
 800600e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	6a1b      	ldr	r3, [r3, #32]
 8006014:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	6a1b      	ldr	r3, [r3, #32]
 800601a:	f023 0201 	bic.w	r2, r3, #1
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	699b      	ldr	r3, [r3, #24]
 8006026:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006028:	693b      	ldr	r3, [r7, #16]
 800602a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800602e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	011b      	lsls	r3, r3, #4
 8006034:	693a      	ldr	r2, [r7, #16]
 8006036:	4313      	orrs	r3, r2
 8006038:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800603a:	697b      	ldr	r3, [r7, #20]
 800603c:	f023 030a 	bic.w	r3, r3, #10
 8006040:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006042:	697a      	ldr	r2, [r7, #20]
 8006044:	68bb      	ldr	r3, [r7, #8]
 8006046:	4313      	orrs	r3, r2
 8006048:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	693a      	ldr	r2, [r7, #16]
 800604e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	697a      	ldr	r2, [r7, #20]
 8006054:	621a      	str	r2, [r3, #32]
}
 8006056:	bf00      	nop
 8006058:	371c      	adds	r7, #28
 800605a:	46bd      	mov	sp, r7
 800605c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006060:	4770      	bx	lr

08006062 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006062:	b480      	push	{r7}
 8006064:	b087      	sub	sp, #28
 8006066:	af00      	add	r7, sp, #0
 8006068:	60f8      	str	r0, [r7, #12]
 800606a:	60b9      	str	r1, [r7, #8]
 800606c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	6a1b      	ldr	r3, [r3, #32]
 8006072:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	6a1b      	ldr	r3, [r3, #32]
 8006078:	f023 0210 	bic.w	r2, r3, #16
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	699b      	ldr	r3, [r3, #24]
 8006084:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006086:	693b      	ldr	r3, [r7, #16]
 8006088:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800608c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	031b      	lsls	r3, r3, #12
 8006092:	693a      	ldr	r2, [r7, #16]
 8006094:	4313      	orrs	r3, r2
 8006096:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006098:	697b      	ldr	r3, [r7, #20]
 800609a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800609e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80060a0:	68bb      	ldr	r3, [r7, #8]
 80060a2:	011b      	lsls	r3, r3, #4
 80060a4:	697a      	ldr	r2, [r7, #20]
 80060a6:	4313      	orrs	r3, r2
 80060a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	693a      	ldr	r2, [r7, #16]
 80060ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	697a      	ldr	r2, [r7, #20]
 80060b4:	621a      	str	r2, [r3, #32]
}
 80060b6:	bf00      	nop
 80060b8:	371c      	adds	r7, #28
 80060ba:	46bd      	mov	sp, r7
 80060bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c0:	4770      	bx	lr

080060c2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80060c2:	b480      	push	{r7}
 80060c4:	b085      	sub	sp, #20
 80060c6:	af00      	add	r7, sp, #0
 80060c8:	6078      	str	r0, [r7, #4]
 80060ca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	689b      	ldr	r3, [r3, #8]
 80060d0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80060d8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80060da:	683a      	ldr	r2, [r7, #0]
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	4313      	orrs	r3, r2
 80060e0:	f043 0307 	orr.w	r3, r3, #7
 80060e4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	68fa      	ldr	r2, [r7, #12]
 80060ea:	609a      	str	r2, [r3, #8]
}
 80060ec:	bf00      	nop
 80060ee:	3714      	adds	r7, #20
 80060f0:	46bd      	mov	sp, r7
 80060f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f6:	4770      	bx	lr

080060f8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80060f8:	b480      	push	{r7}
 80060fa:	b087      	sub	sp, #28
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	60f8      	str	r0, [r7, #12]
 8006100:	60b9      	str	r1, [r7, #8]
 8006102:	607a      	str	r2, [r7, #4]
 8006104:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	689b      	ldr	r3, [r3, #8]
 800610a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800610c:	697b      	ldr	r3, [r7, #20]
 800610e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006112:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	021a      	lsls	r2, r3, #8
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	431a      	orrs	r2, r3
 800611c:	68bb      	ldr	r3, [r7, #8]
 800611e:	4313      	orrs	r3, r2
 8006120:	697a      	ldr	r2, [r7, #20]
 8006122:	4313      	orrs	r3, r2
 8006124:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	697a      	ldr	r2, [r7, #20]
 800612a:	609a      	str	r2, [r3, #8]
}
 800612c:	bf00      	nop
 800612e:	371c      	adds	r7, #28
 8006130:	46bd      	mov	sp, r7
 8006132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006136:	4770      	bx	lr

08006138 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006138:	b480      	push	{r7}
 800613a:	b085      	sub	sp, #20
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
 8006140:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006148:	2b01      	cmp	r3, #1
 800614a:	d101      	bne.n	8006150 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800614c:	2302      	movs	r3, #2
 800614e:	e050      	b.n	80061f2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2201      	movs	r2, #1
 8006154:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2202      	movs	r2, #2
 800615c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	685b      	ldr	r3, [r3, #4]
 8006166:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	689b      	ldr	r3, [r3, #8]
 800616e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006176:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	68fa      	ldr	r2, [r7, #12]
 800617e:	4313      	orrs	r3, r2
 8006180:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	68fa      	ldr	r2, [r7, #12]
 8006188:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	4a1c      	ldr	r2, [pc, #112]	@ (8006200 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006190:	4293      	cmp	r3, r2
 8006192:	d018      	beq.n	80061c6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800619c:	d013      	beq.n	80061c6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	4a18      	ldr	r2, [pc, #96]	@ (8006204 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80061a4:	4293      	cmp	r3, r2
 80061a6:	d00e      	beq.n	80061c6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	4a16      	ldr	r2, [pc, #88]	@ (8006208 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d009      	beq.n	80061c6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	4a15      	ldr	r2, [pc, #84]	@ (800620c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80061b8:	4293      	cmp	r3, r2
 80061ba:	d004      	beq.n	80061c6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	4a13      	ldr	r2, [pc, #76]	@ (8006210 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d10c      	bne.n	80061e0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80061c6:	68bb      	ldr	r3, [r7, #8]
 80061c8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80061cc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	685b      	ldr	r3, [r3, #4]
 80061d2:	68ba      	ldr	r2, [r7, #8]
 80061d4:	4313      	orrs	r3, r2
 80061d6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	68ba      	ldr	r2, [r7, #8]
 80061de:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2201      	movs	r2, #1
 80061e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2200      	movs	r2, #0
 80061ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80061f0:	2300      	movs	r3, #0
}
 80061f2:	4618      	mov	r0, r3
 80061f4:	3714      	adds	r7, #20
 80061f6:	46bd      	mov	sp, r7
 80061f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fc:	4770      	bx	lr
 80061fe:	bf00      	nop
 8006200:	40010000 	.word	0x40010000
 8006204:	40000400 	.word	0x40000400
 8006208:	40000800 	.word	0x40000800
 800620c:	40000c00 	.word	0x40000c00
 8006210:	40014000 	.word	0x40014000

08006214 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006214:	b580      	push	{r7, lr}
 8006216:	b082      	sub	sp, #8
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d101      	bne.n	8006226 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006222:	2301      	movs	r3, #1
 8006224:	e042      	b.n	80062ac <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800622c:	b2db      	uxtb	r3, r3
 800622e:	2b00      	cmp	r3, #0
 8006230:	d106      	bne.n	8006240 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	2200      	movs	r2, #0
 8006236:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800623a:	6878      	ldr	r0, [r7, #4]
 800623c:	f7fc fb52 	bl	80028e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2224      	movs	r2, #36	@ 0x24
 8006244:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	68da      	ldr	r2, [r3, #12]
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006256:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006258:	6878      	ldr	r0, [r7, #4]
 800625a:	f000 f973 	bl	8006544 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	691a      	ldr	r2, [r3, #16]
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800626c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	695a      	ldr	r2, [r3, #20]
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800627c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	68da      	ldr	r2, [r3, #12]
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800628c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2200      	movs	r2, #0
 8006292:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2220      	movs	r2, #32
 8006298:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2220      	movs	r2, #32
 80062a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2200      	movs	r2, #0
 80062a8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80062aa:	2300      	movs	r3, #0
}
 80062ac:	4618      	mov	r0, r3
 80062ae:	3708      	adds	r7, #8
 80062b0:	46bd      	mov	sp, r7
 80062b2:	bd80      	pop	{r7, pc}

080062b4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b08a      	sub	sp, #40	@ 0x28
 80062b8:	af02      	add	r7, sp, #8
 80062ba:	60f8      	str	r0, [r7, #12]
 80062bc:	60b9      	str	r1, [r7, #8]
 80062be:	603b      	str	r3, [r7, #0]
 80062c0:	4613      	mov	r3, r2
 80062c2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80062c4:	2300      	movs	r3, #0
 80062c6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80062ce:	b2db      	uxtb	r3, r3
 80062d0:	2b20      	cmp	r3, #32
 80062d2:	d175      	bne.n	80063c0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80062d4:	68bb      	ldr	r3, [r7, #8]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d002      	beq.n	80062e0 <HAL_UART_Transmit+0x2c>
 80062da:	88fb      	ldrh	r3, [r7, #6]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d101      	bne.n	80062e4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80062e0:	2301      	movs	r3, #1
 80062e2:	e06e      	b.n	80063c2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	2200      	movs	r2, #0
 80062e8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	2221      	movs	r2, #33	@ 0x21
 80062ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80062f2:	f7fd f811 	bl	8003318 <HAL_GetTick>
 80062f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	88fa      	ldrh	r2, [r7, #6]
 80062fc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	88fa      	ldrh	r2, [r7, #6]
 8006302:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	689b      	ldr	r3, [r3, #8]
 8006308:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800630c:	d108      	bne.n	8006320 <HAL_UART_Transmit+0x6c>
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	691b      	ldr	r3, [r3, #16]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d104      	bne.n	8006320 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006316:	2300      	movs	r3, #0
 8006318:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800631a:	68bb      	ldr	r3, [r7, #8]
 800631c:	61bb      	str	r3, [r7, #24]
 800631e:	e003      	b.n	8006328 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006320:	68bb      	ldr	r3, [r7, #8]
 8006322:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006324:	2300      	movs	r3, #0
 8006326:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006328:	e02e      	b.n	8006388 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	9300      	str	r3, [sp, #0]
 800632e:	697b      	ldr	r3, [r7, #20]
 8006330:	2200      	movs	r2, #0
 8006332:	2180      	movs	r1, #128	@ 0x80
 8006334:	68f8      	ldr	r0, [r7, #12]
 8006336:	f000 f848 	bl	80063ca <UART_WaitOnFlagUntilTimeout>
 800633a:	4603      	mov	r3, r0
 800633c:	2b00      	cmp	r3, #0
 800633e:	d005      	beq.n	800634c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	2220      	movs	r2, #32
 8006344:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8006348:	2303      	movs	r3, #3
 800634a:	e03a      	b.n	80063c2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800634c:	69fb      	ldr	r3, [r7, #28]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d10b      	bne.n	800636a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006352:	69bb      	ldr	r3, [r7, #24]
 8006354:	881b      	ldrh	r3, [r3, #0]
 8006356:	461a      	mov	r2, r3
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006360:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006362:	69bb      	ldr	r3, [r7, #24]
 8006364:	3302      	adds	r3, #2
 8006366:	61bb      	str	r3, [r7, #24]
 8006368:	e007      	b.n	800637a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800636a:	69fb      	ldr	r3, [r7, #28]
 800636c:	781a      	ldrb	r2, [r3, #0]
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006374:	69fb      	ldr	r3, [r7, #28]
 8006376:	3301      	adds	r3, #1
 8006378:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800637e:	b29b      	uxth	r3, r3
 8006380:	3b01      	subs	r3, #1
 8006382:	b29a      	uxth	r2, r3
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800638c:	b29b      	uxth	r3, r3
 800638e:	2b00      	cmp	r3, #0
 8006390:	d1cb      	bne.n	800632a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006392:	683b      	ldr	r3, [r7, #0]
 8006394:	9300      	str	r3, [sp, #0]
 8006396:	697b      	ldr	r3, [r7, #20]
 8006398:	2200      	movs	r2, #0
 800639a:	2140      	movs	r1, #64	@ 0x40
 800639c:	68f8      	ldr	r0, [r7, #12]
 800639e:	f000 f814 	bl	80063ca <UART_WaitOnFlagUntilTimeout>
 80063a2:	4603      	mov	r3, r0
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d005      	beq.n	80063b4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	2220      	movs	r2, #32
 80063ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80063b0:	2303      	movs	r3, #3
 80063b2:	e006      	b.n	80063c2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	2220      	movs	r2, #32
 80063b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80063bc:	2300      	movs	r3, #0
 80063be:	e000      	b.n	80063c2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80063c0:	2302      	movs	r3, #2
  }
}
 80063c2:	4618      	mov	r0, r3
 80063c4:	3720      	adds	r7, #32
 80063c6:	46bd      	mov	sp, r7
 80063c8:	bd80      	pop	{r7, pc}

080063ca <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80063ca:	b580      	push	{r7, lr}
 80063cc:	b086      	sub	sp, #24
 80063ce:	af00      	add	r7, sp, #0
 80063d0:	60f8      	str	r0, [r7, #12]
 80063d2:	60b9      	str	r1, [r7, #8]
 80063d4:	603b      	str	r3, [r7, #0]
 80063d6:	4613      	mov	r3, r2
 80063d8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80063da:	e03b      	b.n	8006454 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80063dc:	6a3b      	ldr	r3, [r7, #32]
 80063de:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80063e2:	d037      	beq.n	8006454 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80063e4:	f7fc ff98 	bl	8003318 <HAL_GetTick>
 80063e8:	4602      	mov	r2, r0
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	1ad3      	subs	r3, r2, r3
 80063ee:	6a3a      	ldr	r2, [r7, #32]
 80063f0:	429a      	cmp	r2, r3
 80063f2:	d302      	bcc.n	80063fa <UART_WaitOnFlagUntilTimeout+0x30>
 80063f4:	6a3b      	ldr	r3, [r7, #32]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d101      	bne.n	80063fe <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80063fa:	2303      	movs	r3, #3
 80063fc:	e03a      	b.n	8006474 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	68db      	ldr	r3, [r3, #12]
 8006404:	f003 0304 	and.w	r3, r3, #4
 8006408:	2b00      	cmp	r3, #0
 800640a:	d023      	beq.n	8006454 <UART_WaitOnFlagUntilTimeout+0x8a>
 800640c:	68bb      	ldr	r3, [r7, #8]
 800640e:	2b80      	cmp	r3, #128	@ 0x80
 8006410:	d020      	beq.n	8006454 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006412:	68bb      	ldr	r3, [r7, #8]
 8006414:	2b40      	cmp	r3, #64	@ 0x40
 8006416:	d01d      	beq.n	8006454 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f003 0308 	and.w	r3, r3, #8
 8006422:	2b08      	cmp	r3, #8
 8006424:	d116      	bne.n	8006454 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006426:	2300      	movs	r3, #0
 8006428:	617b      	str	r3, [r7, #20]
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	617b      	str	r3, [r7, #20]
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	685b      	ldr	r3, [r3, #4]
 8006438:	617b      	str	r3, [r7, #20]
 800643a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800643c:	68f8      	ldr	r0, [r7, #12]
 800643e:	f000 f81d 	bl	800647c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	2208      	movs	r2, #8
 8006446:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	2200      	movs	r2, #0
 800644c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8006450:	2301      	movs	r3, #1
 8006452:	e00f      	b.n	8006474 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	681a      	ldr	r2, [r3, #0]
 800645a:	68bb      	ldr	r3, [r7, #8]
 800645c:	4013      	ands	r3, r2
 800645e:	68ba      	ldr	r2, [r7, #8]
 8006460:	429a      	cmp	r2, r3
 8006462:	bf0c      	ite	eq
 8006464:	2301      	moveq	r3, #1
 8006466:	2300      	movne	r3, #0
 8006468:	b2db      	uxtb	r3, r3
 800646a:	461a      	mov	r2, r3
 800646c:	79fb      	ldrb	r3, [r7, #7]
 800646e:	429a      	cmp	r2, r3
 8006470:	d0b4      	beq.n	80063dc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006472:	2300      	movs	r3, #0
}
 8006474:	4618      	mov	r0, r3
 8006476:	3718      	adds	r7, #24
 8006478:	46bd      	mov	sp, r7
 800647a:	bd80      	pop	{r7, pc}

0800647c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800647c:	b480      	push	{r7}
 800647e:	b095      	sub	sp, #84	@ 0x54
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	330c      	adds	r3, #12
 800648a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800648c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800648e:	e853 3f00 	ldrex	r3, [r3]
 8006492:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006494:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006496:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800649a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	330c      	adds	r3, #12
 80064a2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80064a4:	643a      	str	r2, [r7, #64]	@ 0x40
 80064a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064a8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80064aa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80064ac:	e841 2300 	strex	r3, r2, [r1]
 80064b0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80064b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d1e5      	bne.n	8006484 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	3314      	adds	r3, #20
 80064be:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064c0:	6a3b      	ldr	r3, [r7, #32]
 80064c2:	e853 3f00 	ldrex	r3, [r3]
 80064c6:	61fb      	str	r3, [r7, #28]
   return(result);
 80064c8:	69fb      	ldr	r3, [r7, #28]
 80064ca:	f023 0301 	bic.w	r3, r3, #1
 80064ce:	64bb      	str	r3, [r7, #72]	@ 0x48
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	3314      	adds	r3, #20
 80064d6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80064d8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80064da:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064dc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80064de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80064e0:	e841 2300 	strex	r3, r2, [r1]
 80064e4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80064e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d1e5      	bne.n	80064b8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064f0:	2b01      	cmp	r3, #1
 80064f2:	d119      	bne.n	8006528 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	330c      	adds	r3, #12
 80064fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	e853 3f00 	ldrex	r3, [r3]
 8006502:	60bb      	str	r3, [r7, #8]
   return(result);
 8006504:	68bb      	ldr	r3, [r7, #8]
 8006506:	f023 0310 	bic.w	r3, r3, #16
 800650a:	647b      	str	r3, [r7, #68]	@ 0x44
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	330c      	adds	r3, #12
 8006512:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006514:	61ba      	str	r2, [r7, #24]
 8006516:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006518:	6979      	ldr	r1, [r7, #20]
 800651a:	69ba      	ldr	r2, [r7, #24]
 800651c:	e841 2300 	strex	r3, r2, [r1]
 8006520:	613b      	str	r3, [r7, #16]
   return(result);
 8006522:	693b      	ldr	r3, [r7, #16]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d1e5      	bne.n	80064f4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2220      	movs	r2, #32
 800652c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2200      	movs	r2, #0
 8006534:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006536:	bf00      	nop
 8006538:	3754      	adds	r7, #84	@ 0x54
 800653a:	46bd      	mov	sp, r7
 800653c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006540:	4770      	bx	lr
	...

08006544 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006544:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006548:	b0c0      	sub	sp, #256	@ 0x100
 800654a:	af00      	add	r7, sp, #0
 800654c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006550:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	691b      	ldr	r3, [r3, #16]
 8006558:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800655c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006560:	68d9      	ldr	r1, [r3, #12]
 8006562:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006566:	681a      	ldr	r2, [r3, #0]
 8006568:	ea40 0301 	orr.w	r3, r0, r1
 800656c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800656e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006572:	689a      	ldr	r2, [r3, #8]
 8006574:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006578:	691b      	ldr	r3, [r3, #16]
 800657a:	431a      	orrs	r2, r3
 800657c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006580:	695b      	ldr	r3, [r3, #20]
 8006582:	431a      	orrs	r2, r3
 8006584:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006588:	69db      	ldr	r3, [r3, #28]
 800658a:	4313      	orrs	r3, r2
 800658c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006590:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	68db      	ldr	r3, [r3, #12]
 8006598:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800659c:	f021 010c 	bic.w	r1, r1, #12
 80065a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065a4:	681a      	ldr	r2, [r3, #0]
 80065a6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80065aa:	430b      	orrs	r3, r1
 80065ac:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80065ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	695b      	ldr	r3, [r3, #20]
 80065b6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80065ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065be:	6999      	ldr	r1, [r3, #24]
 80065c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065c4:	681a      	ldr	r2, [r3, #0]
 80065c6:	ea40 0301 	orr.w	r3, r0, r1
 80065ca:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80065cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065d0:	681a      	ldr	r2, [r3, #0]
 80065d2:	4b8f      	ldr	r3, [pc, #572]	@ (8006810 <UART_SetConfig+0x2cc>)
 80065d4:	429a      	cmp	r2, r3
 80065d6:	d005      	beq.n	80065e4 <UART_SetConfig+0xa0>
 80065d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065dc:	681a      	ldr	r2, [r3, #0]
 80065de:	4b8d      	ldr	r3, [pc, #564]	@ (8006814 <UART_SetConfig+0x2d0>)
 80065e0:	429a      	cmp	r2, r3
 80065e2:	d104      	bne.n	80065ee <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80065e4:	f7ff f9aa 	bl	800593c <HAL_RCC_GetPCLK2Freq>
 80065e8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80065ec:	e003      	b.n	80065f6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80065ee:	f7ff f991 	bl	8005914 <HAL_RCC_GetPCLK1Freq>
 80065f2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80065f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065fa:	69db      	ldr	r3, [r3, #28]
 80065fc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006600:	f040 810c 	bne.w	800681c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006604:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006608:	2200      	movs	r2, #0
 800660a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800660e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006612:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006616:	4622      	mov	r2, r4
 8006618:	462b      	mov	r3, r5
 800661a:	1891      	adds	r1, r2, r2
 800661c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800661e:	415b      	adcs	r3, r3
 8006620:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006622:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006626:	4621      	mov	r1, r4
 8006628:	eb12 0801 	adds.w	r8, r2, r1
 800662c:	4629      	mov	r1, r5
 800662e:	eb43 0901 	adc.w	r9, r3, r1
 8006632:	f04f 0200 	mov.w	r2, #0
 8006636:	f04f 0300 	mov.w	r3, #0
 800663a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800663e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006642:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006646:	4690      	mov	r8, r2
 8006648:	4699      	mov	r9, r3
 800664a:	4623      	mov	r3, r4
 800664c:	eb18 0303 	adds.w	r3, r8, r3
 8006650:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006654:	462b      	mov	r3, r5
 8006656:	eb49 0303 	adc.w	r3, r9, r3
 800665a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800665e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006662:	685b      	ldr	r3, [r3, #4]
 8006664:	2200      	movs	r2, #0
 8006666:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800666a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800666e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006672:	460b      	mov	r3, r1
 8006674:	18db      	adds	r3, r3, r3
 8006676:	653b      	str	r3, [r7, #80]	@ 0x50
 8006678:	4613      	mov	r3, r2
 800667a:	eb42 0303 	adc.w	r3, r2, r3
 800667e:	657b      	str	r3, [r7, #84]	@ 0x54
 8006680:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006684:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006688:	f7fa fae6 	bl	8000c58 <__aeabi_uldivmod>
 800668c:	4602      	mov	r2, r0
 800668e:	460b      	mov	r3, r1
 8006690:	4b61      	ldr	r3, [pc, #388]	@ (8006818 <UART_SetConfig+0x2d4>)
 8006692:	fba3 2302 	umull	r2, r3, r3, r2
 8006696:	095b      	lsrs	r3, r3, #5
 8006698:	011c      	lsls	r4, r3, #4
 800669a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800669e:	2200      	movs	r2, #0
 80066a0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80066a4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80066a8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80066ac:	4642      	mov	r2, r8
 80066ae:	464b      	mov	r3, r9
 80066b0:	1891      	adds	r1, r2, r2
 80066b2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80066b4:	415b      	adcs	r3, r3
 80066b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80066b8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80066bc:	4641      	mov	r1, r8
 80066be:	eb12 0a01 	adds.w	sl, r2, r1
 80066c2:	4649      	mov	r1, r9
 80066c4:	eb43 0b01 	adc.w	fp, r3, r1
 80066c8:	f04f 0200 	mov.w	r2, #0
 80066cc:	f04f 0300 	mov.w	r3, #0
 80066d0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80066d4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80066d8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80066dc:	4692      	mov	sl, r2
 80066de:	469b      	mov	fp, r3
 80066e0:	4643      	mov	r3, r8
 80066e2:	eb1a 0303 	adds.w	r3, sl, r3
 80066e6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80066ea:	464b      	mov	r3, r9
 80066ec:	eb4b 0303 	adc.w	r3, fp, r3
 80066f0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80066f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066f8:	685b      	ldr	r3, [r3, #4]
 80066fa:	2200      	movs	r2, #0
 80066fc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006700:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006704:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006708:	460b      	mov	r3, r1
 800670a:	18db      	adds	r3, r3, r3
 800670c:	643b      	str	r3, [r7, #64]	@ 0x40
 800670e:	4613      	mov	r3, r2
 8006710:	eb42 0303 	adc.w	r3, r2, r3
 8006714:	647b      	str	r3, [r7, #68]	@ 0x44
 8006716:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800671a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800671e:	f7fa fa9b 	bl	8000c58 <__aeabi_uldivmod>
 8006722:	4602      	mov	r2, r0
 8006724:	460b      	mov	r3, r1
 8006726:	4611      	mov	r1, r2
 8006728:	4b3b      	ldr	r3, [pc, #236]	@ (8006818 <UART_SetConfig+0x2d4>)
 800672a:	fba3 2301 	umull	r2, r3, r3, r1
 800672e:	095b      	lsrs	r3, r3, #5
 8006730:	2264      	movs	r2, #100	@ 0x64
 8006732:	fb02 f303 	mul.w	r3, r2, r3
 8006736:	1acb      	subs	r3, r1, r3
 8006738:	00db      	lsls	r3, r3, #3
 800673a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800673e:	4b36      	ldr	r3, [pc, #216]	@ (8006818 <UART_SetConfig+0x2d4>)
 8006740:	fba3 2302 	umull	r2, r3, r3, r2
 8006744:	095b      	lsrs	r3, r3, #5
 8006746:	005b      	lsls	r3, r3, #1
 8006748:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800674c:	441c      	add	r4, r3
 800674e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006752:	2200      	movs	r2, #0
 8006754:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006758:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800675c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006760:	4642      	mov	r2, r8
 8006762:	464b      	mov	r3, r9
 8006764:	1891      	adds	r1, r2, r2
 8006766:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006768:	415b      	adcs	r3, r3
 800676a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800676c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006770:	4641      	mov	r1, r8
 8006772:	1851      	adds	r1, r2, r1
 8006774:	6339      	str	r1, [r7, #48]	@ 0x30
 8006776:	4649      	mov	r1, r9
 8006778:	414b      	adcs	r3, r1
 800677a:	637b      	str	r3, [r7, #52]	@ 0x34
 800677c:	f04f 0200 	mov.w	r2, #0
 8006780:	f04f 0300 	mov.w	r3, #0
 8006784:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006788:	4659      	mov	r1, fp
 800678a:	00cb      	lsls	r3, r1, #3
 800678c:	4651      	mov	r1, sl
 800678e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006792:	4651      	mov	r1, sl
 8006794:	00ca      	lsls	r2, r1, #3
 8006796:	4610      	mov	r0, r2
 8006798:	4619      	mov	r1, r3
 800679a:	4603      	mov	r3, r0
 800679c:	4642      	mov	r2, r8
 800679e:	189b      	adds	r3, r3, r2
 80067a0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80067a4:	464b      	mov	r3, r9
 80067a6:	460a      	mov	r2, r1
 80067a8:	eb42 0303 	adc.w	r3, r2, r3
 80067ac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80067b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067b4:	685b      	ldr	r3, [r3, #4]
 80067b6:	2200      	movs	r2, #0
 80067b8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80067bc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80067c0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80067c4:	460b      	mov	r3, r1
 80067c6:	18db      	adds	r3, r3, r3
 80067c8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80067ca:	4613      	mov	r3, r2
 80067cc:	eb42 0303 	adc.w	r3, r2, r3
 80067d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80067d2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80067d6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80067da:	f7fa fa3d 	bl	8000c58 <__aeabi_uldivmod>
 80067de:	4602      	mov	r2, r0
 80067e0:	460b      	mov	r3, r1
 80067e2:	4b0d      	ldr	r3, [pc, #52]	@ (8006818 <UART_SetConfig+0x2d4>)
 80067e4:	fba3 1302 	umull	r1, r3, r3, r2
 80067e8:	095b      	lsrs	r3, r3, #5
 80067ea:	2164      	movs	r1, #100	@ 0x64
 80067ec:	fb01 f303 	mul.w	r3, r1, r3
 80067f0:	1ad3      	subs	r3, r2, r3
 80067f2:	00db      	lsls	r3, r3, #3
 80067f4:	3332      	adds	r3, #50	@ 0x32
 80067f6:	4a08      	ldr	r2, [pc, #32]	@ (8006818 <UART_SetConfig+0x2d4>)
 80067f8:	fba2 2303 	umull	r2, r3, r2, r3
 80067fc:	095b      	lsrs	r3, r3, #5
 80067fe:	f003 0207 	and.w	r2, r3, #7
 8006802:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	4422      	add	r2, r4
 800680a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800680c:	e106      	b.n	8006a1c <UART_SetConfig+0x4d8>
 800680e:	bf00      	nop
 8006810:	40011000 	.word	0x40011000
 8006814:	40011400 	.word	0x40011400
 8006818:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800681c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006820:	2200      	movs	r2, #0
 8006822:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006826:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800682a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800682e:	4642      	mov	r2, r8
 8006830:	464b      	mov	r3, r9
 8006832:	1891      	adds	r1, r2, r2
 8006834:	6239      	str	r1, [r7, #32]
 8006836:	415b      	adcs	r3, r3
 8006838:	627b      	str	r3, [r7, #36]	@ 0x24
 800683a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800683e:	4641      	mov	r1, r8
 8006840:	1854      	adds	r4, r2, r1
 8006842:	4649      	mov	r1, r9
 8006844:	eb43 0501 	adc.w	r5, r3, r1
 8006848:	f04f 0200 	mov.w	r2, #0
 800684c:	f04f 0300 	mov.w	r3, #0
 8006850:	00eb      	lsls	r3, r5, #3
 8006852:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006856:	00e2      	lsls	r2, r4, #3
 8006858:	4614      	mov	r4, r2
 800685a:	461d      	mov	r5, r3
 800685c:	4643      	mov	r3, r8
 800685e:	18e3      	adds	r3, r4, r3
 8006860:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006864:	464b      	mov	r3, r9
 8006866:	eb45 0303 	adc.w	r3, r5, r3
 800686a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800686e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006872:	685b      	ldr	r3, [r3, #4]
 8006874:	2200      	movs	r2, #0
 8006876:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800687a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800687e:	f04f 0200 	mov.w	r2, #0
 8006882:	f04f 0300 	mov.w	r3, #0
 8006886:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800688a:	4629      	mov	r1, r5
 800688c:	008b      	lsls	r3, r1, #2
 800688e:	4621      	mov	r1, r4
 8006890:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006894:	4621      	mov	r1, r4
 8006896:	008a      	lsls	r2, r1, #2
 8006898:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800689c:	f7fa f9dc 	bl	8000c58 <__aeabi_uldivmod>
 80068a0:	4602      	mov	r2, r0
 80068a2:	460b      	mov	r3, r1
 80068a4:	4b60      	ldr	r3, [pc, #384]	@ (8006a28 <UART_SetConfig+0x4e4>)
 80068a6:	fba3 2302 	umull	r2, r3, r3, r2
 80068aa:	095b      	lsrs	r3, r3, #5
 80068ac:	011c      	lsls	r4, r3, #4
 80068ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80068b2:	2200      	movs	r2, #0
 80068b4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80068b8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80068bc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80068c0:	4642      	mov	r2, r8
 80068c2:	464b      	mov	r3, r9
 80068c4:	1891      	adds	r1, r2, r2
 80068c6:	61b9      	str	r1, [r7, #24]
 80068c8:	415b      	adcs	r3, r3
 80068ca:	61fb      	str	r3, [r7, #28]
 80068cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80068d0:	4641      	mov	r1, r8
 80068d2:	1851      	adds	r1, r2, r1
 80068d4:	6139      	str	r1, [r7, #16]
 80068d6:	4649      	mov	r1, r9
 80068d8:	414b      	adcs	r3, r1
 80068da:	617b      	str	r3, [r7, #20]
 80068dc:	f04f 0200 	mov.w	r2, #0
 80068e0:	f04f 0300 	mov.w	r3, #0
 80068e4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80068e8:	4659      	mov	r1, fp
 80068ea:	00cb      	lsls	r3, r1, #3
 80068ec:	4651      	mov	r1, sl
 80068ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80068f2:	4651      	mov	r1, sl
 80068f4:	00ca      	lsls	r2, r1, #3
 80068f6:	4610      	mov	r0, r2
 80068f8:	4619      	mov	r1, r3
 80068fa:	4603      	mov	r3, r0
 80068fc:	4642      	mov	r2, r8
 80068fe:	189b      	adds	r3, r3, r2
 8006900:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006904:	464b      	mov	r3, r9
 8006906:	460a      	mov	r2, r1
 8006908:	eb42 0303 	adc.w	r3, r2, r3
 800690c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006910:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006914:	685b      	ldr	r3, [r3, #4]
 8006916:	2200      	movs	r2, #0
 8006918:	67bb      	str	r3, [r7, #120]	@ 0x78
 800691a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800691c:	f04f 0200 	mov.w	r2, #0
 8006920:	f04f 0300 	mov.w	r3, #0
 8006924:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006928:	4649      	mov	r1, r9
 800692a:	008b      	lsls	r3, r1, #2
 800692c:	4641      	mov	r1, r8
 800692e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006932:	4641      	mov	r1, r8
 8006934:	008a      	lsls	r2, r1, #2
 8006936:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800693a:	f7fa f98d 	bl	8000c58 <__aeabi_uldivmod>
 800693e:	4602      	mov	r2, r0
 8006940:	460b      	mov	r3, r1
 8006942:	4611      	mov	r1, r2
 8006944:	4b38      	ldr	r3, [pc, #224]	@ (8006a28 <UART_SetConfig+0x4e4>)
 8006946:	fba3 2301 	umull	r2, r3, r3, r1
 800694a:	095b      	lsrs	r3, r3, #5
 800694c:	2264      	movs	r2, #100	@ 0x64
 800694e:	fb02 f303 	mul.w	r3, r2, r3
 8006952:	1acb      	subs	r3, r1, r3
 8006954:	011b      	lsls	r3, r3, #4
 8006956:	3332      	adds	r3, #50	@ 0x32
 8006958:	4a33      	ldr	r2, [pc, #204]	@ (8006a28 <UART_SetConfig+0x4e4>)
 800695a:	fba2 2303 	umull	r2, r3, r2, r3
 800695e:	095b      	lsrs	r3, r3, #5
 8006960:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006964:	441c      	add	r4, r3
 8006966:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800696a:	2200      	movs	r2, #0
 800696c:	673b      	str	r3, [r7, #112]	@ 0x70
 800696e:	677a      	str	r2, [r7, #116]	@ 0x74
 8006970:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006974:	4642      	mov	r2, r8
 8006976:	464b      	mov	r3, r9
 8006978:	1891      	adds	r1, r2, r2
 800697a:	60b9      	str	r1, [r7, #8]
 800697c:	415b      	adcs	r3, r3
 800697e:	60fb      	str	r3, [r7, #12]
 8006980:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006984:	4641      	mov	r1, r8
 8006986:	1851      	adds	r1, r2, r1
 8006988:	6039      	str	r1, [r7, #0]
 800698a:	4649      	mov	r1, r9
 800698c:	414b      	adcs	r3, r1
 800698e:	607b      	str	r3, [r7, #4]
 8006990:	f04f 0200 	mov.w	r2, #0
 8006994:	f04f 0300 	mov.w	r3, #0
 8006998:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800699c:	4659      	mov	r1, fp
 800699e:	00cb      	lsls	r3, r1, #3
 80069a0:	4651      	mov	r1, sl
 80069a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80069a6:	4651      	mov	r1, sl
 80069a8:	00ca      	lsls	r2, r1, #3
 80069aa:	4610      	mov	r0, r2
 80069ac:	4619      	mov	r1, r3
 80069ae:	4603      	mov	r3, r0
 80069b0:	4642      	mov	r2, r8
 80069b2:	189b      	adds	r3, r3, r2
 80069b4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80069b6:	464b      	mov	r3, r9
 80069b8:	460a      	mov	r2, r1
 80069ba:	eb42 0303 	adc.w	r3, r2, r3
 80069be:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80069c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069c4:	685b      	ldr	r3, [r3, #4]
 80069c6:	2200      	movs	r2, #0
 80069c8:	663b      	str	r3, [r7, #96]	@ 0x60
 80069ca:	667a      	str	r2, [r7, #100]	@ 0x64
 80069cc:	f04f 0200 	mov.w	r2, #0
 80069d0:	f04f 0300 	mov.w	r3, #0
 80069d4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80069d8:	4649      	mov	r1, r9
 80069da:	008b      	lsls	r3, r1, #2
 80069dc:	4641      	mov	r1, r8
 80069de:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80069e2:	4641      	mov	r1, r8
 80069e4:	008a      	lsls	r2, r1, #2
 80069e6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80069ea:	f7fa f935 	bl	8000c58 <__aeabi_uldivmod>
 80069ee:	4602      	mov	r2, r0
 80069f0:	460b      	mov	r3, r1
 80069f2:	4b0d      	ldr	r3, [pc, #52]	@ (8006a28 <UART_SetConfig+0x4e4>)
 80069f4:	fba3 1302 	umull	r1, r3, r3, r2
 80069f8:	095b      	lsrs	r3, r3, #5
 80069fa:	2164      	movs	r1, #100	@ 0x64
 80069fc:	fb01 f303 	mul.w	r3, r1, r3
 8006a00:	1ad3      	subs	r3, r2, r3
 8006a02:	011b      	lsls	r3, r3, #4
 8006a04:	3332      	adds	r3, #50	@ 0x32
 8006a06:	4a08      	ldr	r2, [pc, #32]	@ (8006a28 <UART_SetConfig+0x4e4>)
 8006a08:	fba2 2303 	umull	r2, r3, r2, r3
 8006a0c:	095b      	lsrs	r3, r3, #5
 8006a0e:	f003 020f 	and.w	r2, r3, #15
 8006a12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	4422      	add	r2, r4
 8006a1a:	609a      	str	r2, [r3, #8]
}
 8006a1c:	bf00      	nop
 8006a1e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006a22:	46bd      	mov	sp, r7
 8006a24:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006a28:	51eb851f 	.word	0x51eb851f

08006a2c <arm_max_f32>:
 8006a2c:	f101 3cff 	add.w	ip, r1, #4294967295	@ 0xffffffff
 8006a30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006a32:	4607      	mov	r7, r0
 8006a34:	ea5f 0e9c 	movs.w	lr, ip, lsr #2
 8006a38:	ecf7 7a01 	vldmia	r7!, {s15}
 8006a3c:	d063      	beq.n	8006b06 <arm_max_f32+0xda>
 8006a3e:	f10e 0601 	add.w	r6, lr, #1
 8006a42:	3014      	adds	r0, #20
 8006a44:	00b6      	lsls	r6, r6, #2
 8006a46:	2404      	movs	r4, #4
 8006a48:	2500      	movs	r5, #0
 8006a4a:	ed10 7a04 	vldr	s14, [r0, #-16]
 8006a4e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006a52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a56:	bf48      	it	mi
 8006a58:	eef0 7a47 	vmovmi.f32	s15, s14
 8006a5c:	ed10 7a03 	vldr	s14, [r0, #-12]
 8006a60:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006a64:	bf48      	it	mi
 8006a66:	1ee5      	submi	r5, r4, #3
 8006a68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a6c:	bf48      	it	mi
 8006a6e:	eef0 7a47 	vmovmi.f32	s15, s14
 8006a72:	ed10 7a02 	vldr	s14, [r0, #-8]
 8006a76:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006a7a:	bf48      	it	mi
 8006a7c:	1ea5      	submi	r5, r4, #2
 8006a7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a82:	bf48      	it	mi
 8006a84:	eef0 7a47 	vmovmi.f32	s15, s14
 8006a88:	ed10 7a01 	vldr	s14, [r0, #-4]
 8006a8c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006a90:	bf48      	it	mi
 8006a92:	f104 35ff 	addmi.w	r5, r4, #4294967295	@ 0xffffffff
 8006a96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a9a:	bf48      	it	mi
 8006a9c:	4625      	movmi	r5, r4
 8006a9e:	f104 0404 	add.w	r4, r4, #4
 8006aa2:	bf48      	it	mi
 8006aa4:	eef0 7a47 	vmovmi.f32	s15, s14
 8006aa8:	42b4      	cmp	r4, r6
 8006aaa:	f100 0010 	add.w	r0, r0, #16
 8006aae:	d1cc      	bne.n	8006a4a <arm_max_f32+0x1e>
 8006ab0:	eb07 170e 	add.w	r7, r7, lr, lsl #4
 8006ab4:	f01c 0003 	ands.w	r0, ip, #3
 8006ab8:	d021      	beq.n	8006afe <arm_max_f32+0xd2>
 8006aba:	ed97 7a00 	vldr	s14, [r7]
 8006abe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006ac2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ac6:	bfc4      	itt	gt
 8006ac8:	eef0 7a47 	vmovgt.f32	s15, s14
 8006acc:	1a0d      	subgt	r5, r1, r0
 8006ace:	3801      	subs	r0, #1
 8006ad0:	d015      	beq.n	8006afe <arm_max_f32+0xd2>
 8006ad2:	ed97 7a01 	vldr	s14, [r7, #4]
 8006ad6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006ada:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ade:	bf44      	itt	mi
 8006ae0:	eef0 7a47 	vmovmi.f32	s15, s14
 8006ae4:	1a0d      	submi	r5, r1, r0
 8006ae6:	2801      	cmp	r0, #1
 8006ae8:	d009      	beq.n	8006afe <arm_max_f32+0xd2>
 8006aea:	ed97 7a02 	vldr	s14, [r7, #8]
 8006aee:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006af2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006af6:	bf44      	itt	mi
 8006af8:	eef0 7a47 	vmovmi.f32	s15, s14
 8006afc:	4665      	movmi	r5, ip
 8006afe:	edc2 7a00 	vstr	s15, [r2]
 8006b02:	601d      	str	r5, [r3, #0]
 8006b04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b06:	4675      	mov	r5, lr
 8006b08:	e7d4      	b.n	8006ab4 <arm_max_f32+0x88>
 8006b0a:	bf00      	nop

08006b0c <arm_rfft_32_fast_init_f32>:
 8006b0c:	b150      	cbz	r0, 8006b24 <arm_rfft_32_fast_init_f32+0x18>
 8006b0e:	b510      	push	{r4, lr}
 8006b10:	2110      	movs	r1, #16
 8006b12:	4604      	mov	r4, r0
 8006b14:	f001 f912 	bl	8007d3c <arm_cfft_init_f32>
 8006b18:	b918      	cbnz	r0, 8006b22 <arm_rfft_32_fast_init_f32+0x16>
 8006b1a:	4b04      	ldr	r3, [pc, #16]	@ (8006b2c <arm_rfft_32_fast_init_f32+0x20>)
 8006b1c:	6163      	str	r3, [r4, #20]
 8006b1e:	2220      	movs	r2, #32
 8006b20:	8222      	strh	r2, [r4, #16]
 8006b22:	bd10      	pop	{r4, pc}
 8006b24:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006b28:	4770      	bx	lr
 8006b2a:	bf00      	nop
 8006b2c:	08024818 	.word	0x08024818

08006b30 <arm_rfft_64_fast_init_f32>:
 8006b30:	b150      	cbz	r0, 8006b48 <arm_rfft_64_fast_init_f32+0x18>
 8006b32:	b510      	push	{r4, lr}
 8006b34:	2120      	movs	r1, #32
 8006b36:	4604      	mov	r4, r0
 8006b38:	f001 f900 	bl	8007d3c <arm_cfft_init_f32>
 8006b3c:	b918      	cbnz	r0, 8006b46 <arm_rfft_64_fast_init_f32+0x16>
 8006b3e:	4b04      	ldr	r3, [pc, #16]	@ (8006b50 <arm_rfft_64_fast_init_f32+0x20>)
 8006b40:	6163      	str	r3, [r4, #20]
 8006b42:	2240      	movs	r2, #64	@ 0x40
 8006b44:	8222      	strh	r2, [r4, #16]
 8006b46:	bd10      	pop	{r4, pc}
 8006b48:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006b4c:	4770      	bx	lr
 8006b4e:	bf00      	nop
 8006b50:	08029098 	.word	0x08029098

08006b54 <arm_rfft_128_fast_init_f32>:
 8006b54:	b150      	cbz	r0, 8006b6c <arm_rfft_128_fast_init_f32+0x18>
 8006b56:	b510      	push	{r4, lr}
 8006b58:	2140      	movs	r1, #64	@ 0x40
 8006b5a:	4604      	mov	r4, r0
 8006b5c:	f001 f8ee 	bl	8007d3c <arm_cfft_init_f32>
 8006b60:	b918      	cbnz	r0, 8006b6a <arm_rfft_128_fast_init_f32+0x16>
 8006b62:	4b04      	ldr	r3, [pc, #16]	@ (8006b74 <arm_rfft_128_fast_init_f32+0x20>)
 8006b64:	6163      	str	r3, [r4, #20]
 8006b66:	2280      	movs	r2, #128	@ 0x80
 8006b68:	8222      	strh	r2, [r4, #16]
 8006b6a:	bd10      	pop	{r4, pc}
 8006b6c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006b70:	4770      	bx	lr
 8006b72:	bf00      	nop
 8006b74:	08022218 	.word	0x08022218

08006b78 <arm_rfft_256_fast_init_f32>:
 8006b78:	b158      	cbz	r0, 8006b92 <arm_rfft_256_fast_init_f32+0x1a>
 8006b7a:	b510      	push	{r4, lr}
 8006b7c:	2180      	movs	r1, #128	@ 0x80
 8006b7e:	4604      	mov	r4, r0
 8006b80:	f001 f8dc 	bl	8007d3c <arm_cfft_init_f32>
 8006b84:	b920      	cbnz	r0, 8006b90 <arm_rfft_256_fast_init_f32+0x18>
 8006b86:	4b04      	ldr	r3, [pc, #16]	@ (8006b98 <arm_rfft_256_fast_init_f32+0x20>)
 8006b88:	6163      	str	r3, [r4, #20]
 8006b8a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006b8e:	8222      	strh	r2, [r4, #16]
 8006b90:	bd10      	pop	{r4, pc}
 8006b92:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006b96:	4770      	bx	lr
 8006b98:	08024418 	.word	0x08024418

08006b9c <arm_rfft_512_fast_init_f32>:
 8006b9c:	b160      	cbz	r0, 8006bb8 <arm_rfft_512_fast_init_f32+0x1c>
 8006b9e:	b510      	push	{r4, lr}
 8006ba0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8006ba4:	4604      	mov	r4, r0
 8006ba6:	f001 f8c9 	bl	8007d3c <arm_cfft_init_f32>
 8006baa:	b920      	cbnz	r0, 8006bb6 <arm_rfft_512_fast_init_f32+0x1a>
 8006bac:	4b04      	ldr	r3, [pc, #16]	@ (8006bc0 <arm_rfft_512_fast_init_f32+0x24>)
 8006bae:	6163      	str	r3, [r4, #20]
 8006bb0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006bb4:	8222      	strh	r2, [r4, #16]
 8006bb6:	bd10      	pop	{r4, pc}
 8006bb8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006bbc:	4770      	bx	lr
 8006bbe:	bf00      	nop
 8006bc0:	08028898 	.word	0x08028898

08006bc4 <arm_rfft_1024_fast_init_f32>:
 8006bc4:	b160      	cbz	r0, 8006be0 <arm_rfft_1024_fast_init_f32+0x1c>
 8006bc6:	b510      	push	{r4, lr}
 8006bc8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8006bcc:	4604      	mov	r4, r0
 8006bce:	f001 f8b5 	bl	8007d3c <arm_cfft_init_f32>
 8006bd2:	b920      	cbnz	r0, 8006bde <arm_rfft_1024_fast_init_f32+0x1a>
 8006bd4:	4b04      	ldr	r3, [pc, #16]	@ (8006be8 <arm_rfft_1024_fast_init_f32+0x24>)
 8006bd6:	6163      	str	r3, [r4, #20]
 8006bd8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006bdc:	8222      	strh	r2, [r4, #16]
 8006bde:	bd10      	pop	{r4, pc}
 8006be0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006be4:	4770      	bx	lr
 8006be6:	bf00      	nop
 8006be8:	08021218 	.word	0x08021218

08006bec <arm_rfft_2048_fast_init_f32>:
 8006bec:	b160      	cbz	r0, 8006c08 <arm_rfft_2048_fast_init_f32+0x1c>
 8006bee:	b510      	push	{r4, lr}
 8006bf0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8006bf4:	4604      	mov	r4, r0
 8006bf6:	f001 f8a1 	bl	8007d3c <arm_cfft_init_f32>
 8006bfa:	b920      	cbnz	r0, 8006c06 <arm_rfft_2048_fast_init_f32+0x1a>
 8006bfc:	4b04      	ldr	r3, [pc, #16]	@ (8006c10 <arm_rfft_2048_fast_init_f32+0x24>)
 8006bfe:	6163      	str	r3, [r4, #20]
 8006c00:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006c04:	8222      	strh	r2, [r4, #16]
 8006c06:	bd10      	pop	{r4, pc}
 8006c08:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006c0c:	4770      	bx	lr
 8006c0e:	bf00      	nop
 8006c10:	08022418 	.word	0x08022418

08006c14 <arm_rfft_4096_fast_init_f32>:
 8006c14:	b160      	cbz	r0, 8006c30 <arm_rfft_4096_fast_init_f32+0x1c>
 8006c16:	b510      	push	{r4, lr}
 8006c18:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8006c1c:	4604      	mov	r4, r0
 8006c1e:	f001 f88d 	bl	8007d3c <arm_cfft_init_f32>
 8006c22:	b920      	cbnz	r0, 8006c2e <arm_rfft_4096_fast_init_f32+0x1a>
 8006c24:	4b04      	ldr	r3, [pc, #16]	@ (8006c38 <arm_rfft_4096_fast_init_f32+0x24>)
 8006c26:	6163      	str	r3, [r4, #20]
 8006c28:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8006c2c:	8222      	strh	r2, [r4, #16]
 8006c2e:	bd10      	pop	{r4, pc}
 8006c30:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006c34:	4770      	bx	lr
 8006c36:	bf00      	nop
 8006c38:	08024898 	.word	0x08024898

08006c3c <arm_rfft_fast_init_f32>:
 8006c3c:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8006c40:	d024      	beq.n	8006c8c <arm_rfft_fast_init_f32+0x50>
 8006c42:	d807      	bhi.n	8006c54 <arm_rfft_fast_init_f32+0x18>
 8006c44:	2980      	cmp	r1, #128	@ 0x80
 8006c46:	d01c      	beq.n	8006c82 <arm_rfft_fast_init_f32+0x46>
 8006c48:	d90c      	bls.n	8006c64 <arm_rfft_fast_init_f32+0x28>
 8006c4a:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 8006c4e:	d11a      	bne.n	8006c86 <arm_rfft_fast_init_f32+0x4a>
 8006c50:	4b0f      	ldr	r3, [pc, #60]	@ (8006c90 <arm_rfft_fast_init_f32+0x54>)
 8006c52:	4718      	bx	r3
 8006c54:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
 8006c58:	d011      	beq.n	8006c7e <arm_rfft_fast_init_f32+0x42>
 8006c5a:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 8006c5e:	d107      	bne.n	8006c70 <arm_rfft_fast_init_f32+0x34>
 8006c60:	4b0c      	ldr	r3, [pc, #48]	@ (8006c94 <arm_rfft_fast_init_f32+0x58>)
 8006c62:	4718      	bx	r3
 8006c64:	2920      	cmp	r1, #32
 8006c66:	d008      	beq.n	8006c7a <arm_rfft_fast_init_f32+0x3e>
 8006c68:	2940      	cmp	r1, #64	@ 0x40
 8006c6a:	d10c      	bne.n	8006c86 <arm_rfft_fast_init_f32+0x4a>
 8006c6c:	4b0a      	ldr	r3, [pc, #40]	@ (8006c98 <arm_rfft_fast_init_f32+0x5c>)
 8006c6e:	e7f0      	b.n	8006c52 <arm_rfft_fast_init_f32+0x16>
 8006c70:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8006c74:	d107      	bne.n	8006c86 <arm_rfft_fast_init_f32+0x4a>
 8006c76:	4b09      	ldr	r3, [pc, #36]	@ (8006c9c <arm_rfft_fast_init_f32+0x60>)
 8006c78:	e7eb      	b.n	8006c52 <arm_rfft_fast_init_f32+0x16>
 8006c7a:	4b09      	ldr	r3, [pc, #36]	@ (8006ca0 <arm_rfft_fast_init_f32+0x64>)
 8006c7c:	e7e9      	b.n	8006c52 <arm_rfft_fast_init_f32+0x16>
 8006c7e:	4b09      	ldr	r3, [pc, #36]	@ (8006ca4 <arm_rfft_fast_init_f32+0x68>)
 8006c80:	e7e7      	b.n	8006c52 <arm_rfft_fast_init_f32+0x16>
 8006c82:	4b09      	ldr	r3, [pc, #36]	@ (8006ca8 <arm_rfft_fast_init_f32+0x6c>)
 8006c84:	e7e5      	b.n	8006c52 <arm_rfft_fast_init_f32+0x16>
 8006c86:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006c8a:	4770      	bx	lr
 8006c8c:	4b07      	ldr	r3, [pc, #28]	@ (8006cac <arm_rfft_fast_init_f32+0x70>)
 8006c8e:	e7e0      	b.n	8006c52 <arm_rfft_fast_init_f32+0x16>
 8006c90:	08006b79 	.word	0x08006b79
 8006c94:	08006c15 	.word	0x08006c15
 8006c98:	08006b31 	.word	0x08006b31
 8006c9c:	08006bc5 	.word	0x08006bc5
 8006ca0:	08006b0d 	.word	0x08006b0d
 8006ca4:	08006bed 	.word	0x08006bed
 8006ca8:	08006b55 	.word	0x08006b55
 8006cac:	08006b9d 	.word	0x08006b9d

08006cb0 <stage_rfft_f32>:
 8006cb0:	b410      	push	{r4}
 8006cb2:	edd1 7a00 	vldr	s15, [r1]
 8006cb6:	ed91 7a01 	vldr	s14, [r1, #4]
 8006cba:	8804      	ldrh	r4, [r0, #0]
 8006cbc:	6940      	ldr	r0, [r0, #20]
 8006cbe:	ee37 7a07 	vadd.f32	s14, s14, s14
 8006cc2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8006cc6:	eeb6 4a00 	vmov.f32	s8, #96	@ 0x3f000000  0.5
 8006cca:	ee77 6a87 	vadd.f32	s13, s15, s14
 8006cce:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006cd2:	3c01      	subs	r4, #1
 8006cd4:	ee26 7a84 	vmul.f32	s14, s13, s8
 8006cd8:	ee67 7a84 	vmul.f32	s15, s15, s8
 8006cdc:	eb01 03c4 	add.w	r3, r1, r4, lsl #3
 8006ce0:	ed82 7a00 	vstr	s14, [r2]
 8006ce4:	edc2 7a01 	vstr	s15, [r2, #4]
 8006ce8:	3010      	adds	r0, #16
 8006cea:	3210      	adds	r2, #16
 8006cec:	3b08      	subs	r3, #8
 8006cee:	3110      	adds	r1, #16
 8006cf0:	ed11 5a02 	vldr	s10, [r1, #-8]
 8006cf4:	ed93 7a02 	vldr	s14, [r3, #8]
 8006cf8:	ed50 6a02 	vldr	s13, [r0, #-8]
 8006cfc:	edd3 4a03 	vldr	s9, [r3, #12]
 8006d00:	ed51 7a01 	vldr	s15, [r1, #-4]
 8006d04:	ed10 6a01 	vldr	s12, [r0, #-4]
 8006d08:	ee77 5a45 	vsub.f32	s11, s14, s10
 8006d0c:	ee37 7a05 	vadd.f32	s14, s14, s10
 8006d10:	ee66 3aa5 	vmul.f32	s7, s13, s11
 8006d14:	ee34 5aa7 	vadd.f32	s10, s9, s15
 8006d18:	ee66 5a25 	vmul.f32	s11, s12, s11
 8006d1c:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8006d20:	ee37 7a23 	vadd.f32	s14, s14, s7
 8006d24:	ee66 6a85 	vmul.f32	s13, s13, s10
 8006d28:	ee26 6a05 	vmul.f32	s12, s12, s10
 8006d2c:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8006d30:	ee37 7a06 	vadd.f32	s14, s14, s12
 8006d34:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006d38:	ee27 7a04 	vmul.f32	s14, s14, s8
 8006d3c:	ee67 7a84 	vmul.f32	s15, s15, s8
 8006d40:	3c01      	subs	r4, #1
 8006d42:	ed02 7a02 	vstr	s14, [r2, #-8]
 8006d46:	ed42 7a01 	vstr	s15, [r2, #-4]
 8006d4a:	f1a3 0308 	sub.w	r3, r3, #8
 8006d4e:	f101 0108 	add.w	r1, r1, #8
 8006d52:	f100 0008 	add.w	r0, r0, #8
 8006d56:	f102 0208 	add.w	r2, r2, #8
 8006d5a:	d1c9      	bne.n	8006cf0 <stage_rfft_f32+0x40>
 8006d5c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006d60:	4770      	bx	lr
 8006d62:	bf00      	nop

08006d64 <merge_rfft_f32>:
 8006d64:	b410      	push	{r4}
 8006d66:	edd1 7a00 	vldr	s15, [r1]
 8006d6a:	edd1 6a01 	vldr	s13, [r1, #4]
 8006d6e:	8804      	ldrh	r4, [r0, #0]
 8006d70:	6940      	ldr	r0, [r0, #20]
 8006d72:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8006d76:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006d7a:	eeb6 4a00 	vmov.f32	s8, #96	@ 0x3f000000  0.5
 8006d7e:	ee27 7a04 	vmul.f32	s14, s14, s8
 8006d82:	ee67 7a84 	vmul.f32	s15, s15, s8
 8006d86:	3c01      	subs	r4, #1
 8006d88:	ed82 7a00 	vstr	s14, [r2]
 8006d8c:	edc2 7a01 	vstr	s15, [r2, #4]
 8006d90:	b3dc      	cbz	r4, 8006e0a <merge_rfft_f32+0xa6>
 8006d92:	00e3      	lsls	r3, r4, #3
 8006d94:	3b08      	subs	r3, #8
 8006d96:	440b      	add	r3, r1
 8006d98:	3010      	adds	r0, #16
 8006d9a:	3210      	adds	r2, #16
 8006d9c:	3110      	adds	r1, #16
 8006d9e:	ed11 5a02 	vldr	s10, [r1, #-8]
 8006da2:	ed93 7a02 	vldr	s14, [r3, #8]
 8006da6:	ed50 6a02 	vldr	s13, [r0, #-8]
 8006daa:	edd3 4a03 	vldr	s9, [r3, #12]
 8006dae:	ed51 7a01 	vldr	s15, [r1, #-4]
 8006db2:	ed10 6a01 	vldr	s12, [r0, #-4]
 8006db6:	ee75 5a47 	vsub.f32	s11, s10, s14
 8006dba:	ee37 7a05 	vadd.f32	s14, s14, s10
 8006dbe:	ee66 3aa5 	vmul.f32	s7, s13, s11
 8006dc2:	ee34 5aa7 	vadd.f32	s10, s9, s15
 8006dc6:	ee66 5a25 	vmul.f32	s11, s12, s11
 8006dca:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8006dce:	ee37 7a63 	vsub.f32	s14, s14, s7
 8006dd2:	ee66 6a85 	vmul.f32	s13, s13, s10
 8006dd6:	ee26 6a05 	vmul.f32	s12, s12, s10
 8006dda:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8006dde:	ee37 7a46 	vsub.f32	s14, s14, s12
 8006de2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006de6:	ee27 7a04 	vmul.f32	s14, s14, s8
 8006dea:	ee67 7a84 	vmul.f32	s15, s15, s8
 8006dee:	3c01      	subs	r4, #1
 8006df0:	ed02 7a02 	vstr	s14, [r2, #-8]
 8006df4:	ed42 7a01 	vstr	s15, [r2, #-4]
 8006df8:	f1a3 0308 	sub.w	r3, r3, #8
 8006dfc:	f101 0108 	add.w	r1, r1, #8
 8006e00:	f100 0008 	add.w	r0, r0, #8
 8006e04:	f102 0208 	add.w	r2, r2, #8
 8006e08:	d1c9      	bne.n	8006d9e <merge_rfft_f32+0x3a>
 8006e0a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006e0e:	4770      	bx	lr

08006e10 <arm_rfft_fast_f32>:
 8006e10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e14:	461c      	mov	r4, r3
 8006e16:	4605      	mov	r5, r0
 8006e18:	4616      	mov	r6, r2
 8006e1a:	b14b      	cbz	r3, 8006e30 <arm_rfft_fast_f32+0x20>
 8006e1c:	f7ff ffa2 	bl	8006d64 <merge_rfft_f32>
 8006e20:	4622      	mov	r2, r4
 8006e22:	4631      	mov	r1, r6
 8006e24:	4628      	mov	r0, r5
 8006e26:	2301      	movs	r3, #1
 8006e28:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006e2c:	f000 bb34 	b.w	8007498 <arm_cfft_f32>
 8006e30:	460f      	mov	r7, r1
 8006e32:	461a      	mov	r2, r3
 8006e34:	2301      	movs	r3, #1
 8006e36:	f000 fb2f 	bl	8007498 <arm_cfft_f32>
 8006e3a:	4632      	mov	r2, r6
 8006e3c:	4639      	mov	r1, r7
 8006e3e:	4628      	mov	r0, r5
 8006e40:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006e44:	f7ff bf34 	b.w	8006cb0 <stage_rfft_f32>

08006e48 <arm_cfft_radix8by2_f32>:
 8006e48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e4c:	ed2d 8b08 	vpush	{d8-d11}
 8006e50:	f8b0 c000 	ldrh.w	ip, [r0]
 8006e54:	6842      	ldr	r2, [r0, #4]
 8006e56:	4607      	mov	r7, r0
 8006e58:	4608      	mov	r0, r1
 8006e5a:	eb00 088c 	add.w	r8, r0, ip, lsl #2
 8006e5e:	ea4f 015c 	mov.w	r1, ip, lsr #1
 8006e62:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8006e66:	b082      	sub	sp, #8
 8006e68:	f000 80b0 	beq.w	8006fcc <arm_cfft_radix8by2_f32+0x184>
 8006e6c:	008c      	lsls	r4, r1, #2
 8006e6e:	3410      	adds	r4, #16
 8006e70:	f100 0310 	add.w	r3, r0, #16
 8006e74:	1906      	adds	r6, r0, r4
 8006e76:	3210      	adds	r2, #16
 8006e78:	4444      	add	r4, r8
 8006e7a:	eb03 1c0c 	add.w	ip, r3, ip, lsl #4
 8006e7e:	f108 0510 	add.w	r5, r8, #16
 8006e82:	ed15 2a04 	vldr	s4, [r5, #-16]
 8006e86:	ed55 2a03 	vldr	s5, [r5, #-12]
 8006e8a:	ed54 4a04 	vldr	s9, [r4, #-16]
 8006e8e:	ed14 4a03 	vldr	s8, [r4, #-12]
 8006e92:	ed14 6a02 	vldr	s12, [r4, #-8]
 8006e96:	ed54 5a01 	vldr	s11, [r4, #-4]
 8006e9a:	ed53 3a04 	vldr	s7, [r3, #-16]
 8006e9e:	ed15 0a02 	vldr	s0, [r5, #-8]
 8006ea2:	ed55 0a01 	vldr	s1, [r5, #-4]
 8006ea6:	ed56 6a04 	vldr	s13, [r6, #-16]
 8006eaa:	ed16 3a03 	vldr	s6, [r6, #-12]
 8006eae:	ed13 7a03 	vldr	s14, [r3, #-12]
 8006eb2:	ed13 5a02 	vldr	s10, [r3, #-8]
 8006eb6:	ed53 7a01 	vldr	s15, [r3, #-4]
 8006eba:	ed16 1a02 	vldr	s2, [r6, #-8]
 8006ebe:	ed56 1a01 	vldr	s3, [r6, #-4]
 8006ec2:	ee73 ba82 	vadd.f32	s23, s7, s4
 8006ec6:	ee37 ba22 	vadd.f32	s22, s14, s5
 8006eca:	ee76 9aa4 	vadd.f32	s19, s13, s9
 8006ece:	ee33 9a04 	vadd.f32	s18, s6, s8
 8006ed2:	ee31 8aa5 	vadd.f32	s16, s3, s11
 8006ed6:	ee75 aa00 	vadd.f32	s21, s10, s0
 8006eda:	ee37 aaa0 	vadd.f32	s20, s15, s1
 8006ede:	ee71 8a06 	vadd.f32	s17, s2, s12
 8006ee2:	ed43 ba04 	vstr	s23, [r3, #-16]
 8006ee6:	ed03 ba03 	vstr	s22, [r3, #-12]
 8006eea:	ed43 aa02 	vstr	s21, [r3, #-8]
 8006eee:	ed03 aa01 	vstr	s20, [r3, #-4]
 8006ef2:	ed06 8a01 	vstr	s16, [r6, #-4]
 8006ef6:	ed46 9a04 	vstr	s19, [r6, #-16]
 8006efa:	ed06 9a03 	vstr	s18, [r6, #-12]
 8006efe:	ed46 8a02 	vstr	s17, [r6, #-8]
 8006f02:	ee37 7a62 	vsub.f32	s14, s14, s5
 8006f06:	ee74 4ae6 	vsub.f32	s9, s9, s13
 8006f0a:	ee34 4a43 	vsub.f32	s8, s8, s6
 8006f0e:	ed52 6a03 	vldr	s13, [r2, #-12]
 8006f12:	ed12 3a04 	vldr	s6, [r2, #-16]
 8006f16:	ee73 3ac2 	vsub.f32	s7, s7, s4
 8006f1a:	ee27 8a26 	vmul.f32	s16, s14, s13
 8006f1e:	ee64 2aa6 	vmul.f32	s5, s9, s13
 8006f22:	ee23 2a83 	vmul.f32	s4, s7, s6
 8006f26:	ee64 4a83 	vmul.f32	s9, s9, s6
 8006f2a:	ee63 3aa6 	vmul.f32	s7, s7, s13
 8006f2e:	ee27 7a03 	vmul.f32	s14, s14, s6
 8006f32:	ee64 6a26 	vmul.f32	s13, s8, s13
 8006f36:	ee24 4a03 	vmul.f32	s8, s8, s6
 8006f3a:	ee37 7a63 	vsub.f32	s14, s14, s7
 8006f3e:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8006f42:	ee32 4ac4 	vsub.f32	s8, s5, s8
 8006f46:	ee32 3a08 	vadd.f32	s6, s4, s16
 8006f4a:	ed05 7a03 	vstr	s14, [r5, #-12]
 8006f4e:	ed05 3a04 	vstr	s6, [r5, #-16]
 8006f52:	ed04 4a04 	vstr	s8, [r4, #-16]
 8006f56:	ed44 6a03 	vstr	s13, [r4, #-12]
 8006f5a:	ed12 7a01 	vldr	s14, [r2, #-4]
 8006f5e:	ee76 6a41 	vsub.f32	s13, s12, s2
 8006f62:	ee35 5a40 	vsub.f32	s10, s10, s0
 8006f66:	ee35 6ae1 	vsub.f32	s12, s11, s3
 8006f6a:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8006f6e:	ed52 5a02 	vldr	s11, [r2, #-8]
 8006f72:	ee67 3a87 	vmul.f32	s7, s15, s14
 8006f76:	ee66 4a87 	vmul.f32	s9, s13, s14
 8006f7a:	ee25 4a25 	vmul.f32	s8, s10, s11
 8006f7e:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8006f82:	ee25 5a07 	vmul.f32	s10, s10, s14
 8006f86:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8006f8a:	ee26 7a07 	vmul.f32	s14, s12, s14
 8006f8e:	ee26 6a25 	vmul.f32	s12, s12, s11
 8006f92:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8006f96:	ee74 5a23 	vadd.f32	s11, s8, s7
 8006f9a:	ee34 6ac6 	vsub.f32	s12, s9, s12
 8006f9e:	ee37 7a26 	vadd.f32	s14, s14, s13
 8006fa2:	3310      	adds	r3, #16
 8006fa4:	4563      	cmp	r3, ip
 8006fa6:	ed45 5a02 	vstr	s11, [r5, #-8]
 8006faa:	f106 0610 	add.w	r6, r6, #16
 8006fae:	ed45 7a01 	vstr	s15, [r5, #-4]
 8006fb2:	f102 0210 	add.w	r2, r2, #16
 8006fb6:	ed04 6a02 	vstr	s12, [r4, #-8]
 8006fba:	ed04 7a01 	vstr	s14, [r4, #-4]
 8006fbe:	f105 0510 	add.w	r5, r5, #16
 8006fc2:	f104 0410 	add.w	r4, r4, #16
 8006fc6:	f47f af5c 	bne.w	8006e82 <arm_cfft_radix8by2_f32+0x3a>
 8006fca:	687a      	ldr	r2, [r7, #4]
 8006fcc:	b289      	uxth	r1, r1
 8006fce:	2302      	movs	r3, #2
 8006fd0:	9101      	str	r1, [sp, #4]
 8006fd2:	f000 ff05 	bl	8007de0 <arm_radix8_butterfly_f32>
 8006fd6:	9901      	ldr	r1, [sp, #4]
 8006fd8:	687a      	ldr	r2, [r7, #4]
 8006fda:	4640      	mov	r0, r8
 8006fdc:	2302      	movs	r3, #2
 8006fde:	b002      	add	sp, #8
 8006fe0:	ecbd 8b08 	vpop	{d8-d11}
 8006fe4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006fe8:	f000 befa 	b.w	8007de0 <arm_radix8_butterfly_f32>

08006fec <arm_cfft_radix8by4_f32>:
 8006fec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ff0:	ed2d 8b0a 	vpush	{d8-d12}
 8006ff4:	8803      	ldrh	r3, [r0, #0]
 8006ff6:	6842      	ldr	r2, [r0, #4]
 8006ff8:	b08d      	sub	sp, #52	@ 0x34
 8006ffa:	085b      	lsrs	r3, r3, #1
 8006ffc:	900a      	str	r0, [sp, #40]	@ 0x28
 8006ffe:	4608      	mov	r0, r1
 8007000:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007004:	edd1 5a00 	vldr	s11, [r1]
 8007008:	edd0 7a00 	vldr	s15, [r0]
 800700c:	edd1 3a01 	vldr	s7, [r1, #4]
 8007010:	ed90 5a01 	vldr	s10, [r0, #4]
 8007014:	9108      	str	r1, [sp, #32]
 8007016:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 800701a:	ed96 7a00 	vldr	s14, [r6]
 800701e:	ed96 4a01 	vldr	s8, [r6, #4]
 8007022:	9607      	str	r6, [sp, #28]
 8007024:	ee37 6aa5 	vadd.f32	s12, s15, s11
 8007028:	eb01 0883 	add.w	r8, r1, r3, lsl #2
 800702c:	edd8 4a00 	vldr	s9, [r8]
 8007030:	ed98 3a01 	vldr	s6, [r8, #4]
 8007034:	ee77 6a06 	vadd.f32	s13, s14, s12
 8007038:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800703c:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8007040:	4604      	mov	r4, r0
 8007042:	edc0 6a00 	vstr	s13, [r0]
 8007046:	edd6 5a01 	vldr	s11, [r6, #4]
 800704a:	edd8 2a01 	vldr	s5, [r8, #4]
 800704e:	ee75 6a23 	vadd.f32	s13, s10, s7
 8007052:	ee35 5a63 	vsub.f32	s10, s10, s7
 8007056:	ee36 6a47 	vsub.f32	s12, s12, s14
 800705a:	ee74 3a27 	vadd.f32	s7, s8, s15
 800705e:	ee76 5aa5 	vadd.f32	s11, s13, s11
 8007062:	ee77 7ac4 	vsub.f32	s15, s15, s8
 8007066:	ee76 6ac4 	vsub.f32	s13, s13, s8
 800706a:	3408      	adds	r4, #8
 800706c:	ee35 4a47 	vsub.f32	s8, s10, s14
 8007070:	460d      	mov	r5, r1
 8007072:	ee37 7a05 	vadd.f32	s14, s14, s10
 8007076:	4637      	mov	r7, r6
 8007078:	9402      	str	r4, [sp, #8]
 800707a:	3708      	adds	r7, #8
 800707c:	460c      	mov	r4, r1
 800707e:	3508      	adds	r5, #8
 8007080:	0859      	lsrs	r1, r3, #1
 8007082:	9109      	str	r1, [sp, #36]	@ 0x24
 8007084:	9706      	str	r7, [sp, #24]
 8007086:	9505      	str	r5, [sp, #20]
 8007088:	f102 0708 	add.w	r7, r2, #8
 800708c:	ee36 6a64 	vsub.f32	s12, s12, s9
 8007090:	ee76 6ac3 	vsub.f32	s13, s13, s6
 8007094:	ee75 5aa2 	vadd.f32	s11, s11, s5
 8007098:	ee73 3ac3 	vsub.f32	s7, s7, s6
 800709c:	ee77 7a83 	vadd.f32	s15, s15, s6
 80070a0:	ee34 5a24 	vadd.f32	s10, s8, s9
 80070a4:	ee37 7a64 	vsub.f32	s14, s14, s9
 80070a8:	3902      	subs	r1, #2
 80070aa:	4645      	mov	r5, r8
 80070ac:	9701      	str	r7, [sp, #4]
 80070ae:	f102 0c18 	add.w	ip, r2, #24
 80070b2:	f102 0710 	add.w	r7, r2, #16
 80070b6:	3508      	adds	r5, #8
 80070b8:	0849      	lsrs	r1, r1, #1
 80070ba:	edc0 5a01 	vstr	s11, [r0, #4]
 80070be:	9703      	str	r7, [sp, #12]
 80070c0:	edc6 3a00 	vstr	s7, [r6]
 80070c4:	ed86 5a01 	vstr	s10, [r6, #4]
 80070c8:	f8cd c000 	str.w	ip, [sp]
 80070cc:	ed84 6a00 	vstr	s12, [r4]
 80070d0:	edc4 6a01 	vstr	s13, [r4, #4]
 80070d4:	9504      	str	r5, [sp, #16]
 80070d6:	edc8 7a00 	vstr	s15, [r8]
 80070da:	ed88 7a01 	vstr	s14, [r8, #4]
 80070de:	910b      	str	r1, [sp, #44]	@ 0x2c
 80070e0:	f000 8138 	beq.w	8007354 <arm_cfft_radix8by4_f32+0x368>
 80070e4:	009b      	lsls	r3, r3, #2
 80070e6:	3b0c      	subs	r3, #12
 80070e8:	f1a6 0c0c 	sub.w	ip, r6, #12
 80070ec:	f106 0510 	add.w	r5, r6, #16
 80070f0:	4626      	mov	r6, r4
 80070f2:	46bb      	mov	fp, r7
 80070f4:	f102 0a20 	add.w	sl, r2, #32
 80070f8:	f102 0930 	add.w	r9, r2, #48	@ 0x30
 80070fc:	f106 0710 	add.w	r7, r6, #16
 8007100:	4443      	add	r3, r8
 8007102:	f100 0e10 	add.w	lr, r0, #16
 8007106:	3c0c      	subs	r4, #12
 8007108:	f1a8 060c 	sub.w	r6, r8, #12
 800710c:	f108 0210 	add.w	r2, r8, #16
 8007110:	ed1e 5a02 	vldr	s10, [lr, #-8]
 8007114:	ed57 5a02 	vldr	s11, [r7, #-8]
 8007118:	ed55 7a02 	vldr	s15, [r5, #-8]
 800711c:	ed52 1a02 	vldr	s3, [r2, #-8]
 8007120:	ed57 6a01 	vldr	s13, [r7, #-4]
 8007124:	ed1e 0a01 	vldr	s0, [lr, #-4]
 8007128:	ed12 1a01 	vldr	s2, [r2, #-4]
 800712c:	ed15 8a01 	vldr	s16, [r5, #-4]
 8007130:	ee35 4a25 	vadd.f32	s8, s10, s11
 8007134:	ee30 6a26 	vadd.f32	s12, s0, s13
 8007138:	ee37 7a84 	vadd.f32	s14, s15, s8
 800713c:	ee30 0a66 	vsub.f32	s0, s0, s13
 8007140:	ee37 7a21 	vadd.f32	s14, s14, s3
 8007144:	ee75 5a65 	vsub.f32	s11, s10, s11
 8007148:	ed0e 7a02 	vstr	s14, [lr, #-8]
 800714c:	ed15 7a01 	vldr	s14, [r5, #-4]
 8007150:	ed52 6a01 	vldr	s13, [r2, #-4]
 8007154:	ee36 7a07 	vadd.f32	s14, s12, s14
 8007158:	ee78 aa25 	vadd.f32	s21, s16, s11
 800715c:	ee37 7a26 	vadd.f32	s14, s14, s13
 8007160:	ee70 3a67 	vsub.f32	s7, s0, s15
 8007164:	ed0e 7a01 	vstr	s14, [lr, #-4]
 8007168:	ed96 7a02 	vldr	s14, [r6, #8]
 800716c:	ed9c 2a02 	vldr	s4, [ip, #8]
 8007170:	ed94 ba02 	vldr	s22, [r4, #8]
 8007174:	edd3 9a02 	vldr	s19, [r3, #8]
 8007178:	edd6 2a01 	vldr	s5, [r6, #4]
 800717c:	ed9c 9a01 	vldr	s18, [ip, #4]
 8007180:	ed93 5a01 	vldr	s10, [r3, #4]
 8007184:	edd4 0a01 	vldr	s1, [r4, #4]
 8007188:	ee72 6a07 	vadd.f32	s13, s4, s14
 800718c:	ee32 2a47 	vsub.f32	s4, s4, s14
 8007190:	ee7b 8a26 	vadd.f32	s17, s22, s13
 8007194:	ee79 4a22 	vadd.f32	s9, s18, s5
 8007198:	ee38 7aa9 	vadd.f32	s14, s17, s19
 800719c:	ee79 2a62 	vsub.f32	s5, s18, s5
 80071a0:	ed8c 7a02 	vstr	s14, [ip, #8]
 80071a4:	ed94 7a01 	vldr	s14, [r4, #4]
 80071a8:	edd3 8a01 	vldr	s17, [r3, #4]
 80071ac:	ee34 7a87 	vadd.f32	s14, s9, s14
 80071b0:	ee3b 3a69 	vsub.f32	s6, s22, s19
 80071b4:	ee37 7a28 	vadd.f32	s14, s14, s17
 80071b8:	ee32 9a60 	vsub.f32	s18, s4, s1
 80071bc:	ed8c 7a01 	vstr	s14, [ip, #4]
 80071c0:	ed1b 7a01 	vldr	s14, [fp, #-4]
 80071c4:	ed1b aa02 	vldr	s20, [fp, #-8]
 80071c8:	ee73 8a22 	vadd.f32	s17, s6, s5
 80071cc:	ee39 9a05 	vadd.f32	s18, s18, s10
 80071d0:	ee7a aac1 	vsub.f32	s21, s21, s2
 80071d4:	ee73 3aa1 	vadd.f32	s7, s7, s3
 80071d8:	ee2a ca8a 	vmul.f32	s24, s21, s20
 80071dc:	ee69 ba07 	vmul.f32	s23, s18, s14
 80071e0:	ee6a aa87 	vmul.f32	s21, s21, s14
 80071e4:	ee29 9a0a 	vmul.f32	s18, s18, s20
 80071e8:	ee63 ca87 	vmul.f32	s25, s7, s14
 80071ec:	ee63 3a8a 	vmul.f32	s7, s7, s20
 80071f0:	ee28 aa8a 	vmul.f32	s20, s17, s20
 80071f4:	ee68 8a87 	vmul.f32	s17, s17, s14
 80071f8:	ee73 3aea 	vsub.f32	s7, s7, s21
 80071fc:	ee78 8a89 	vadd.f32	s17, s17, s18
 8007200:	ee3c 7a2c 	vadd.f32	s14, s24, s25
 8007204:	ee3b aaca 	vsub.f32	s20, s23, s20
 8007208:	ee34 4a67 	vsub.f32	s8, s8, s15
 800720c:	ee76 6acb 	vsub.f32	s13, s13, s22
 8007210:	ee36 6a48 	vsub.f32	s12, s12, s16
 8007214:	ee74 4ae0 	vsub.f32	s9, s9, s1
 8007218:	ed05 7a02 	vstr	s14, [r5, #-8]
 800721c:	ed45 3a01 	vstr	s7, [r5, #-4]
 8007220:	edc4 8a01 	vstr	s17, [r4, #4]
 8007224:	ed84 aa02 	vstr	s20, [r4, #8]
 8007228:	ed5a 3a04 	vldr	s7, [sl, #-16]
 800722c:	ee36 7ae9 	vsub.f32	s14, s13, s19
 8007230:	ee74 4ac5 	vsub.f32	s9, s9, s10
 8007234:	ed5a 6a03 	vldr	s13, [sl, #-12]
 8007238:	ee34 4a61 	vsub.f32	s8, s8, s3
 800723c:	ee36 6a41 	vsub.f32	s12, s12, s2
 8007240:	ee67 8a63 	vnmul.f32	s17, s14, s7
 8007244:	ee66 9a26 	vmul.f32	s19, s12, s13
 8007248:	ee24 9a23 	vmul.f32	s18, s8, s7
 800724c:	ee26 6a23 	vmul.f32	s12, s12, s7
 8007250:	ee24 4a26 	vmul.f32	s8, s8, s13
 8007254:	ee27 7a26 	vmul.f32	s14, s14, s13
 8007258:	ee64 6aa6 	vmul.f32	s13, s9, s13
 800725c:	ee64 4aa3 	vmul.f32	s9, s9, s7
 8007260:	ee36 6a44 	vsub.f32	s12, s12, s8
 8007264:	ee37 7a64 	vsub.f32	s14, s14, s9
 8007268:	ee38 4ae6 	vsub.f32	s8, s17, s13
 800726c:	ee79 3a29 	vadd.f32	s7, s18, s19
 8007270:	ee75 6a60 	vsub.f32	s13, s10, s1
 8007274:	ee75 5ac8 	vsub.f32	s11, s11, s16
 8007278:	ee77 7a80 	vadd.f32	s15, s15, s0
 800727c:	ed47 3a02 	vstr	s7, [r7, #-8]
 8007280:	ed07 6a01 	vstr	s12, [r7, #-4]
 8007284:	ed86 7a01 	vstr	s14, [r6, #4]
 8007288:	ed86 4a02 	vstr	s8, [r6, #8]
 800728c:	ee35 6a81 	vadd.f32	s12, s11, s2
 8007290:	ee36 7ac2 	vsub.f32	s14, s13, s4
 8007294:	ed59 5a06 	vldr	s11, [r9, #-24]	@ 0xffffffe8
 8007298:	ed59 6a05 	vldr	s13, [r9, #-20]	@ 0xffffffec
 800729c:	ee33 3a62 	vsub.f32	s6, s6, s5
 80072a0:	ee77 7ae1 	vsub.f32	s15, s15, s3
 80072a4:	ee67 2a26 	vmul.f32	s5, s14, s13
 80072a8:	ee67 4aa6 	vmul.f32	s9, s15, s13
 80072ac:	ee26 5a25 	vmul.f32	s10, s12, s11
 80072b0:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80072b4:	ee26 6a26 	vmul.f32	s12, s12, s13
 80072b8:	ee27 7a25 	vmul.f32	s14, s14, s11
 80072bc:	ee63 6a26 	vmul.f32	s13, s6, s13
 80072c0:	ee23 3a25 	vmul.f32	s6, s6, s11
 80072c4:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80072c8:	ee75 5a24 	vadd.f32	s11, s10, s9
 80072cc:	ee32 3ac3 	vsub.f32	s6, s5, s6
 80072d0:	ee36 7a87 	vadd.f32	s14, s13, s14
 80072d4:	3901      	subs	r1, #1
 80072d6:	ed42 5a02 	vstr	s11, [r2, #-8]
 80072da:	ed42 7a01 	vstr	s15, [r2, #-4]
 80072de:	f10e 0e08 	add.w	lr, lr, #8
 80072e2:	ed83 3a02 	vstr	s6, [r3, #8]
 80072e6:	ed83 7a01 	vstr	s14, [r3, #4]
 80072ea:	f1ac 0c08 	sub.w	ip, ip, #8
 80072ee:	f10b 0b08 	add.w	fp, fp, #8
 80072f2:	f105 0508 	add.w	r5, r5, #8
 80072f6:	f1a4 0408 	sub.w	r4, r4, #8
 80072fa:	f10a 0a10 	add.w	sl, sl, #16
 80072fe:	f107 0708 	add.w	r7, r7, #8
 8007302:	f1a6 0608 	sub.w	r6, r6, #8
 8007306:	f109 0918 	add.w	r9, r9, #24
 800730a:	f102 0208 	add.w	r2, r2, #8
 800730e:	f1a3 0308 	sub.w	r3, r3, #8
 8007312:	f47f aefd 	bne.w	8007110 <arm_cfft_radix8by4_f32+0x124>
 8007316:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007318:	9902      	ldr	r1, [sp, #8]
 800731a:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800731e:	9102      	str	r1, [sp, #8]
 8007320:	9901      	ldr	r1, [sp, #4]
 8007322:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8007326:	9101      	str	r1, [sp, #4]
 8007328:	9906      	ldr	r1, [sp, #24]
 800732a:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800732e:	9106      	str	r1, [sp, #24]
 8007330:	9903      	ldr	r1, [sp, #12]
 8007332:	eb01 1102 	add.w	r1, r1, r2, lsl #4
 8007336:	9103      	str	r1, [sp, #12]
 8007338:	9905      	ldr	r1, [sp, #20]
 800733a:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800733e:	9105      	str	r1, [sp, #20]
 8007340:	9904      	ldr	r1, [sp, #16]
 8007342:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8007346:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800734a:	9204      	str	r2, [sp, #16]
 800734c:	9a00      	ldr	r2, [sp, #0]
 800734e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007352:	9300      	str	r3, [sp, #0]
 8007354:	9902      	ldr	r1, [sp, #8]
 8007356:	9d05      	ldr	r5, [sp, #20]
 8007358:	ed91 4a00 	vldr	s8, [r1]
 800735c:	edd5 6a00 	vldr	s13, [r5]
 8007360:	9b06      	ldr	r3, [sp, #24]
 8007362:	9c04      	ldr	r4, [sp, #16]
 8007364:	edd3 7a00 	vldr	s15, [r3]
 8007368:	ed94 3a00 	vldr	s6, [r4]
 800736c:	edd5 4a01 	vldr	s9, [r5, #4]
 8007370:	edd1 3a01 	vldr	s7, [r1, #4]
 8007374:	ed94 2a01 	vldr	s4, [r4, #4]
 8007378:	ed93 7a01 	vldr	s14, [r3, #4]
 800737c:	9a01      	ldr	r2, [sp, #4]
 800737e:	ee34 6a26 	vadd.f32	s12, s8, s13
 8007382:	ee73 5aa4 	vadd.f32	s11, s7, s9
 8007386:	ee37 5a86 	vadd.f32	s10, s15, s12
 800738a:	ee73 3ae4 	vsub.f32	s7, s7, s9
 800738e:	ee35 5a03 	vadd.f32	s10, s10, s6
 8007392:	ee74 6a66 	vsub.f32	s13, s8, s13
 8007396:	ed81 5a00 	vstr	s10, [r1]
 800739a:	ed93 5a01 	vldr	s10, [r3, #4]
 800739e:	edd4 4a01 	vldr	s9, [r4, #4]
 80073a2:	ee35 5a85 	vadd.f32	s10, s11, s10
 80073a6:	ee37 4a26 	vadd.f32	s8, s14, s13
 80073aa:	ee35 5a24 	vadd.f32	s10, s10, s9
 80073ae:	ee73 4ae7 	vsub.f32	s9, s7, s15
 80073b2:	ed81 5a01 	vstr	s10, [r1, #4]
 80073b6:	edd2 1a00 	vldr	s3, [r2]
 80073ba:	edd2 2a01 	vldr	s5, [r2, #4]
 80073be:	f8bd 1024 	ldrh.w	r1, [sp, #36]	@ 0x24
 80073c2:	ee34 5a83 	vadd.f32	s10, s9, s6
 80073c6:	ee34 4a42 	vsub.f32	s8, s8, s4
 80073ca:	ee36 6a67 	vsub.f32	s12, s12, s15
 80073ce:	ee64 4a21 	vmul.f32	s9, s8, s3
 80073d2:	ee24 4a22 	vmul.f32	s8, s8, s5
 80073d6:	ee65 2a22 	vmul.f32	s5, s10, s5
 80073da:	ee25 5a21 	vmul.f32	s10, s10, s3
 80073de:	ee74 2aa2 	vadd.f32	s5, s9, s5
 80073e2:	ee35 5a44 	vsub.f32	s10, s10, s8
 80073e6:	edc3 2a00 	vstr	s5, [r3]
 80073ea:	ed83 5a01 	vstr	s10, [r3, #4]
 80073ee:	ee75 5ac7 	vsub.f32	s11, s11, s14
 80073f2:	9b03      	ldr	r3, [sp, #12]
 80073f4:	ee36 6a43 	vsub.f32	s12, s12, s6
 80073f8:	ed93 4a01 	vldr	s8, [r3, #4]
 80073fc:	ed93 5a00 	vldr	s10, [r3]
 8007400:	9b00      	ldr	r3, [sp, #0]
 8007402:	ee75 5ac2 	vsub.f32	s11, s11, s4
 8007406:	ee66 4a05 	vmul.f32	s9, s12, s10
 800740a:	ee25 5a85 	vmul.f32	s10, s11, s10
 800740e:	ee26 6a04 	vmul.f32	s12, s12, s8
 8007412:	ee65 5a84 	vmul.f32	s11, s11, s8
 8007416:	ee35 6a46 	vsub.f32	s12, s10, s12
 800741a:	ee74 5aa5 	vadd.f32	s11, s9, s11
 800741e:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8007422:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8007426:	ed85 6a01 	vstr	s12, [r5, #4]
 800742a:	edc5 5a00 	vstr	s11, [r5]
 800742e:	edd3 5a01 	vldr	s11, [r3, #4]
 8007432:	edd3 6a00 	vldr	s13, [r3]
 8007436:	ee37 7a02 	vadd.f32	s14, s14, s4
 800743a:	ee77 7ac3 	vsub.f32	s15, s15, s6
 800743e:	ee27 6a26 	vmul.f32	s12, s14, s13
 8007442:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8007446:	ee27 7a25 	vmul.f32	s14, s14, s11
 800744a:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800744e:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8007452:	ee76 7a27 	vadd.f32	s15, s12, s15
 8007456:	ed84 7a01 	vstr	s14, [r4, #4]
 800745a:	edc4 7a00 	vstr	s15, [r4]
 800745e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007460:	9100      	str	r1, [sp, #0]
 8007462:	6862      	ldr	r2, [r4, #4]
 8007464:	2304      	movs	r3, #4
 8007466:	f000 fcbb 	bl	8007de0 <arm_radix8_butterfly_f32>
 800746a:	9807      	ldr	r0, [sp, #28]
 800746c:	9900      	ldr	r1, [sp, #0]
 800746e:	6862      	ldr	r2, [r4, #4]
 8007470:	2304      	movs	r3, #4
 8007472:	f000 fcb5 	bl	8007de0 <arm_radix8_butterfly_f32>
 8007476:	9808      	ldr	r0, [sp, #32]
 8007478:	9900      	ldr	r1, [sp, #0]
 800747a:	6862      	ldr	r2, [r4, #4]
 800747c:	2304      	movs	r3, #4
 800747e:	f000 fcaf 	bl	8007de0 <arm_radix8_butterfly_f32>
 8007482:	9900      	ldr	r1, [sp, #0]
 8007484:	6862      	ldr	r2, [r4, #4]
 8007486:	4640      	mov	r0, r8
 8007488:	2304      	movs	r3, #4
 800748a:	b00d      	add	sp, #52	@ 0x34
 800748c:	ecbd 8b0a 	vpop	{d8-d12}
 8007490:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007494:	f000 bca4 	b.w	8007de0 <arm_radix8_butterfly_f32>

08007498 <arm_cfft_f32>:
 8007498:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800749c:	2a01      	cmp	r2, #1
 800749e:	8805      	ldrh	r5, [r0, #0]
 80074a0:	4607      	mov	r7, r0
 80074a2:	4690      	mov	r8, r2
 80074a4:	460c      	mov	r4, r1
 80074a6:	4699      	mov	r9, r3
 80074a8:	d05c      	beq.n	8007564 <arm_cfft_f32+0xcc>
 80074aa:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 80074ae:	d054      	beq.n	800755a <arm_cfft_f32+0xc2>
 80074b0:	d810      	bhi.n	80074d4 <arm_cfft_f32+0x3c>
 80074b2:	2d40      	cmp	r5, #64	@ 0x40
 80074b4:	d015      	beq.n	80074e2 <arm_cfft_f32+0x4a>
 80074b6:	d94c      	bls.n	8007552 <arm_cfft_f32+0xba>
 80074b8:	2d80      	cmp	r5, #128	@ 0x80
 80074ba:	d103      	bne.n	80074c4 <arm_cfft_f32+0x2c>
 80074bc:	4621      	mov	r1, r4
 80074be:	4638      	mov	r0, r7
 80074c0:	f7ff fcc2 	bl	8006e48 <arm_cfft_radix8by2_f32>
 80074c4:	f1b9 0f00 	cmp.w	r9, #0
 80074c8:	d114      	bne.n	80074f4 <arm_cfft_f32+0x5c>
 80074ca:	f1b8 0f01 	cmp.w	r8, #1
 80074ce:	d019      	beq.n	8007504 <arm_cfft_f32+0x6c>
 80074d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80074d4:	f5b5 6f00 	cmp.w	r5, #2048	@ 0x800
 80074d8:	d03f      	beq.n	800755a <arm_cfft_f32+0xc2>
 80074da:	d933      	bls.n	8007544 <arm_cfft_f32+0xac>
 80074dc:	f5b5 5f80 	cmp.w	r5, #4096	@ 0x1000
 80074e0:	d1f0      	bne.n	80074c4 <arm_cfft_f32+0x2c>
 80074e2:	687a      	ldr	r2, [r7, #4]
 80074e4:	2301      	movs	r3, #1
 80074e6:	4629      	mov	r1, r5
 80074e8:	4620      	mov	r0, r4
 80074ea:	f000 fc79 	bl	8007de0 <arm_radix8_butterfly_f32>
 80074ee:	f1b9 0f00 	cmp.w	r9, #0
 80074f2:	d0ea      	beq.n	80074ca <arm_cfft_f32+0x32>
 80074f4:	68ba      	ldr	r2, [r7, #8]
 80074f6:	89b9      	ldrh	r1, [r7, #12]
 80074f8:	4620      	mov	r0, r4
 80074fa:	f000 f845 	bl	8007588 <arm_bitreversal_32>
 80074fe:	f1b8 0f01 	cmp.w	r8, #1
 8007502:	d1e5      	bne.n	80074d0 <arm_cfft_f32+0x38>
 8007504:	ee07 5a90 	vmov	s15, r5
 8007508:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800750c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007510:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8007514:	2d00      	cmp	r5, #0
 8007516:	d0db      	beq.n	80074d0 <arm_cfft_f32+0x38>
 8007518:	f104 0108 	add.w	r1, r4, #8
 800751c:	2300      	movs	r3, #0
 800751e:	3301      	adds	r3, #1
 8007520:	429d      	cmp	r5, r3
 8007522:	f101 0108 	add.w	r1, r1, #8
 8007526:	ed11 7a04 	vldr	s14, [r1, #-16]
 800752a:	ed51 7a03 	vldr	s15, [r1, #-12]
 800752e:	ee27 7a26 	vmul.f32	s14, s14, s13
 8007532:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8007536:	ed01 7a04 	vstr	s14, [r1, #-16]
 800753a:	ed41 7a03 	vstr	s15, [r1, #-12]
 800753e:	d1ee      	bne.n	800751e <arm_cfft_f32+0x86>
 8007540:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007544:	f5b5 7f00 	cmp.w	r5, #512	@ 0x200
 8007548:	d0cb      	beq.n	80074e2 <arm_cfft_f32+0x4a>
 800754a:	f5b5 6f80 	cmp.w	r5, #1024	@ 0x400
 800754e:	d0b5      	beq.n	80074bc <arm_cfft_f32+0x24>
 8007550:	e7b8      	b.n	80074c4 <arm_cfft_f32+0x2c>
 8007552:	2d10      	cmp	r5, #16
 8007554:	d0b2      	beq.n	80074bc <arm_cfft_f32+0x24>
 8007556:	2d20      	cmp	r5, #32
 8007558:	d1b4      	bne.n	80074c4 <arm_cfft_f32+0x2c>
 800755a:	4621      	mov	r1, r4
 800755c:	4638      	mov	r0, r7
 800755e:	f7ff fd45 	bl	8006fec <arm_cfft_radix8by4_f32>
 8007562:	e7af      	b.n	80074c4 <arm_cfft_f32+0x2c>
 8007564:	b16d      	cbz	r5, 8007582 <arm_cfft_f32+0xea>
 8007566:	310c      	adds	r1, #12
 8007568:	2600      	movs	r6, #0
 800756a:	ed51 7a02 	vldr	s15, [r1, #-8]
 800756e:	3601      	adds	r6, #1
 8007570:	eef1 7a67 	vneg.f32	s15, s15
 8007574:	42b5      	cmp	r5, r6
 8007576:	ed41 7a02 	vstr	s15, [r1, #-8]
 800757a:	f101 0108 	add.w	r1, r1, #8
 800757e:	d1f4      	bne.n	800756a <arm_cfft_f32+0xd2>
 8007580:	e793      	b.n	80074aa <arm_cfft_f32+0x12>
 8007582:	2b00      	cmp	r3, #0
 8007584:	d0a4      	beq.n	80074d0 <arm_cfft_f32+0x38>
 8007586:	e7b5      	b.n	80074f4 <arm_cfft_f32+0x5c>

08007588 <arm_bitreversal_32>:
 8007588:	b1e9      	cbz	r1, 80075c6 <arm_bitreversal_32+0x3e>
 800758a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800758c:	2500      	movs	r5, #0
 800758e:	f102 0e02 	add.w	lr, r2, #2
 8007592:	f83e 4015 	ldrh.w	r4, [lr, r5, lsl #1]
 8007596:	f832 3015 	ldrh.w	r3, [r2, r5, lsl #1]
 800759a:	08a4      	lsrs	r4, r4, #2
 800759c:	089b      	lsrs	r3, r3, #2
 800759e:	f850 6024 	ldr.w	r6, [r0, r4, lsl #2]
 80075a2:	f850 c023 	ldr.w	ip, [r0, r3, lsl #2]
 80075a6:	f840 6023 	str.w	r6, [r0, r3, lsl #2]
 80075aa:	00a6      	lsls	r6, r4, #2
 80075ac:	009b      	lsls	r3, r3, #2
 80075ae:	f840 c024 	str.w	ip, [r0, r4, lsl #2]
 80075b2:	3304      	adds	r3, #4
 80075b4:	1d34      	adds	r4, r6, #4
 80075b6:	3502      	adds	r5, #2
 80075b8:	58c6      	ldr	r6, [r0, r3]
 80075ba:	5907      	ldr	r7, [r0, r4]
 80075bc:	50c7      	str	r7, [r0, r3]
 80075be:	428d      	cmp	r5, r1
 80075c0:	5106      	str	r6, [r0, r4]
 80075c2:	d3e6      	bcc.n	8007592 <arm_bitreversal_32+0xa>
 80075c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80075c6:	4770      	bx	lr

080075c8 <arm_fir_init_f32>:
 80075c8:	b538      	push	{r3, r4, r5, lr}
 80075ca:	9d04      	ldr	r5, [sp, #16]
 80075cc:	8001      	strh	r1, [r0, #0]
 80075ce:	3d01      	subs	r5, #1
 80075d0:	440d      	add	r5, r1
 80075d2:	6082      	str	r2, [r0, #8]
 80075d4:	4604      	mov	r4, r0
 80075d6:	00aa      	lsls	r2, r5, #2
 80075d8:	4618      	mov	r0, r3
 80075da:	2100      	movs	r1, #0
 80075dc:	f002 f9f0 	bl	80099c0 <memset>
 80075e0:	6060      	str	r0, [r4, #4]
 80075e2:	bd38      	pop	{r3, r4, r5, pc}

080075e4 <arm_fir_f32>:
 80075e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075e8:	ed2d 8b10 	vpush	{d8-d15}
 80075ec:	b08b      	sub	sp, #44	@ 0x2c
 80075ee:	f8b0 c000 	ldrh.w	ip, [r0]
 80075f2:	9003      	str	r0, [sp, #12]
 80075f4:	e9d0 9401 	ldrd	r9, r4, [r0, #4]
 80075f8:	f10c 4080 	add.w	r0, ip, #1073741824	@ 0x40000000
 80075fc:	3801      	subs	r0, #1
 80075fe:	9304      	str	r3, [sp, #16]
 8007600:	eb09 0580 	add.w	r5, r9, r0, lsl #2
 8007604:	08db      	lsrs	r3, r3, #3
 8007606:	9402      	str	r4, [sp, #8]
 8007608:	9500      	str	r5, [sp, #0]
 800760a:	9301      	str	r3, [sp, #4]
 800760c:	f000 81f6 	beq.w	80079fc <arm_fir_f32+0x418>
 8007610:	469e      	mov	lr, r3
 8007612:	ea4f 03dc 	mov.w	r3, ip, lsr #3
 8007616:	4620      	mov	r0, r4
 8007618:	015e      	lsls	r6, r3, #5
 800761a:	eb04 1443 	add.w	r4, r4, r3, lsl #5
 800761e:	3020      	adds	r0, #32
 8007620:	9605      	str	r6, [sp, #20]
 8007622:	9406      	str	r4, [sp, #24]
 8007624:	f00c 0a07 	and.w	sl, ip, #7
 8007628:	9007      	str	r0, [sp, #28]
 800762a:	f109 0b1c 	add.w	fp, r9, #28
 800762e:	f8cd 9024 	str.w	r9, [sp, #36]	@ 0x24
 8007632:	e9dd 8905 	ldrd	r8, r9, [sp, #20]
 8007636:	e9cd 1205 	strd	r1, r2, [sp, #20]
 800763a:	eb00 1743 	add.w	r7, r0, r3, lsl #5
 800763e:	4650      	mov	r0, sl
 8007640:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8007644:	f8cd c020 	str.w	ip, [sp, #32]
 8007648:	f101 0620 	add.w	r6, r1, #32
 800764c:	3520      	adds	r5, #32
 800764e:	f102 0420 	add.w	r4, r2, #32
 8007652:	469c      	mov	ip, r3
 8007654:	f856 3c20 	ldr.w	r3, [r6, #-32]
 8007658:	f845 3c20 	str.w	r3, [r5, #-32]
 800765c:	f856 3c1c 	ldr.w	r3, [r6, #-28]
 8007660:	f845 3c1c 	str.w	r3, [r5, #-28]
 8007664:	f856 3c18 	ldr.w	r3, [r6, #-24]
 8007668:	f845 3c18 	str.w	r3, [r5, #-24]
 800766c:	f856 3c14 	ldr.w	r3, [r6, #-20]
 8007670:	f845 3c14 	str.w	r3, [r5, #-20]
 8007674:	f856 3c10 	ldr.w	r3, [r6, #-16]
 8007678:	f845 3c10 	str.w	r3, [r5, #-16]
 800767c:	f856 3c0c 	ldr.w	r3, [r6, #-12]
 8007680:	f845 3c0c 	str.w	r3, [r5, #-12]
 8007684:	f856 3c08 	ldr.w	r3, [r6, #-8]
 8007688:	f845 3c08 	str.w	r3, [r5, #-8]
 800768c:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8007690:	f845 3c04 	str.w	r3, [r5, #-4]
 8007694:	ed1b 2a07 	vldr	s4, [fp, #-28]	@ 0xffffffe4
 8007698:	ed1b 1a06 	vldr	s2, [fp, #-24]	@ 0xffffffe8
 800769c:	ed5b 0a05 	vldr	s1, [fp, #-20]	@ 0xffffffec
 80076a0:	ed1b 0a04 	vldr	s0, [fp, #-16]
 80076a4:	ed1b 8a03 	vldr	s16, [fp, #-12]
 80076a8:	ed5b 1a02 	vldr	s3, [fp, #-8]
 80076ac:	ed5b 8a01 	vldr	s17, [fp, #-4]
 80076b0:	eddf 6aa2 	vldr	s13, [pc, #648]	@ 800793c <arm_fir_f32+0x358>
 80076b4:	465a      	mov	r2, fp
 80076b6:	f1bc 0f00 	cmp.w	ip, #0
 80076ba:	f000 8207 	beq.w	8007acc <arm_fir_f32+0x4e8>
 80076be:	f10b 0120 	add.w	r1, fp, #32
 80076c2:	eef0 ba66 	vmov.f32	s23, s13
 80076c6:	eeb0 6a66 	vmov.f32	s12, s13
 80076ca:	eeb0 9a66 	vmov.f32	s18, s13
 80076ce:	eef0 9a66 	vmov.f32	s19, s13
 80076d2:	eeb0 aa66 	vmov.f32	s20, s13
 80076d6:	eef0 aa66 	vmov.f32	s21, s13
 80076da:	eeb0 ba66 	vmov.f32	s22, s13
 80076de:	460a      	mov	r2, r1
 80076e0:	4653      	mov	r3, sl
 80076e2:	ed13 7a08 	vldr	s14, [r3, #-32]	@ 0xffffffe0
 80076e6:	ed52 4a08 	vldr	s9, [r2, #-32]	@ 0xffffffe0
 80076ea:	ed53 ea07 	vldr	s29, [r3, #-28]	@ 0xffffffe4
 80076ee:	ed13 ea06 	vldr	s28, [r3, #-24]	@ 0xffffffe8
 80076f2:	ed53 da05 	vldr	s27, [r3, #-20]	@ 0xffffffec
 80076f6:	ed53 ca04 	vldr	s25, [r3, #-16]
 80076fa:	ed53 2a03 	vldr	s5, [r3, #-12]
 80076fe:	ed13 4a02 	vldr	s8, [r3, #-8]
 8007702:	ed13 5a01 	vldr	s10, [r3, #-4]
 8007706:	ee67 fa02 	vmul.f32	s31, s14, s4
 800770a:	ee27 da01 	vmul.f32	s26, s14, s2
 800770e:	ed12 2a07 	vldr	s4, [r2, #-28]	@ 0xffffffe4
 8007712:	ee27 ca20 	vmul.f32	s24, s14, s1
 8007716:	ee27 3a00 	vmul.f32	s6, s14, s0
 800771a:	ee67 3a08 	vmul.f32	s7, s14, s16
 800771e:	ee67 5a21 	vmul.f32	s11, s14, s3
 8007722:	ee27 fa28 	vmul.f32	s30, s14, s17
 8007726:	ee67 7a24 	vmul.f32	s15, s14, s9
 800772a:	ee3f ba8b 	vadd.f32	s22, s31, s22
 800772e:	ee7d aa2a 	vadd.f32	s21, s26, s21
 8007732:	ee6e fa81 	vmul.f32	s31, s29, s2
 8007736:	ee2e daa0 	vmul.f32	s26, s29, s1
 800773a:	ed12 1a06 	vldr	s2, [r2, #-24]	@ 0xffffffe8
 800773e:	ee3c aa0a 	vadd.f32	s20, s24, s20
 8007742:	ee73 9a29 	vadd.f32	s19, s6, s19
 8007746:	ee2e ca80 	vmul.f32	s24, s29, s0
 800774a:	ee2e 3a88 	vmul.f32	s6, s29, s16
 800774e:	ee33 9a89 	vadd.f32	s18, s7, s18
 8007752:	ee35 6a86 	vadd.f32	s12, s11, s12
 8007756:	ee6e 3aa1 	vmul.f32	s7, s29, s3
 800775a:	ee6e 5aa8 	vmul.f32	s11, s29, s17
 800775e:	ee7f ba2b 	vadd.f32	s23, s30, s23
 8007762:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007766:	ee24 faae 	vmul.f32	s30, s9, s29
 800776a:	ee6e ea82 	vmul.f32	s29, s29, s4
 800776e:	ee2e 7a20 	vmul.f32	s14, s28, s1
 8007772:	ee3f ba8b 	vadd.f32	s22, s31, s22
 8007776:	ed52 0a05 	vldr	s1, [r2, #-20]	@ 0xffffffec
 800777a:	ee7d aa2a 	vadd.f32	s21, s26, s21
 800777e:	ee3c aa0a 	vadd.f32	s20, s24, s20
 8007782:	ee2e da00 	vmul.f32	s26, s28, s0
 8007786:	ee2e ca08 	vmul.f32	s24, s28, s16
 800778a:	ee73 9a29 	vadd.f32	s19, s6, s19
 800778e:	ee33 9a89 	vadd.f32	s18, s7, s18
 8007792:	ee2e 3a21 	vmul.f32	s6, s28, s3
 8007796:	ee6e 3a28 	vmul.f32	s7, s28, s17
 800779a:	ee35 6a86 	vadd.f32	s12, s11, s12
 800779e:	ee7f ba2b 	vadd.f32	s23, s30, s23
 80077a2:	ee64 5a8e 	vmul.f32	s11, s9, s28
 80077a6:	ee22 fa0e 	vmul.f32	s30, s4, s28
 80077aa:	ee7e 7aa7 	vadd.f32	s15, s29, s15
 80077ae:	ee2e ea01 	vmul.f32	s28, s28, s2
 80077b2:	ee6d 6a80 	vmul.f32	s13, s27, s0
 80077b6:	ee7d aa2a 	vadd.f32	s21, s26, s21
 80077ba:	ed12 0a04 	vldr	s0, [r2, #-16]
 80077be:	ee2d da88 	vmul.f32	s26, s27, s16
 80077c2:	ee37 ba0b 	vadd.f32	s22, s14, s22
 80077c6:	ee3c aa0a 	vadd.f32	s20, s24, s20
 80077ca:	ee73 9a29 	vadd.f32	s19, s6, s19
 80077ce:	ee2d caa1 	vmul.f32	s24, s27, s3
 80077d2:	ee2d 3aa8 	vmul.f32	s6, s27, s17
 80077d6:	ee33 9a89 	vadd.f32	s18, s7, s18
 80077da:	ee35 6a86 	vadd.f32	s12, s11, s12
 80077de:	ee64 3aad 	vmul.f32	s7, s9, s27
 80077e2:	ee62 5a2d 	vmul.f32	s11, s4, s27
 80077e6:	ee7f ba2b 	vadd.f32	s23, s30, s23
 80077ea:	ee7e 7a27 	vadd.f32	s15, s28, s15
 80077ee:	ee21 fa2d 	vmul.f32	s30, s2, s27
 80077f2:	ee6d daa0 	vmul.f32	s27, s27, s1
 80077f6:	ee6c fa88 	vmul.f32	s31, s25, s16
 80077fa:	ee36 ba8b 	vadd.f32	s22, s13, s22
 80077fe:	ed12 8a03 	vldr	s16, [r2, #-12]
 8007802:	ee3d da2a 	vadd.f32	s26, s26, s21
 8007806:	ee3c aa0a 	vadd.f32	s20, s24, s20
 800780a:	ee6c aaa1 	vmul.f32	s21, s25, s3
 800780e:	ee2c caa8 	vmul.f32	s24, s25, s17
 8007812:	ee73 9a29 	vadd.f32	s19, s6, s19
 8007816:	ee33 9a89 	vadd.f32	s18, s7, s18
 800781a:	ee24 3aac 	vmul.f32	s6, s9, s25
 800781e:	ee62 3a2c 	vmul.f32	s7, s4, s25
 8007822:	ee35 6a86 	vadd.f32	s12, s11, s12
 8007826:	ee7f ba2b 	vadd.f32	s23, s30, s23
 800782a:	ee61 5a2c 	vmul.f32	s11, s2, s25
 800782e:	ee20 faac 	vmul.f32	s30, s1, s25
 8007832:	ee7d 7aa7 	vadd.f32	s15, s27, s15
 8007836:	ee6c ca80 	vmul.f32	s25, s25, s0
 800783a:	ee62 eaa1 	vmul.f32	s29, s5, s3
 800783e:	ee3a da8d 	vadd.f32	s26, s21, s26
 8007842:	ed52 1a02 	vldr	s3, [r2, #-8]
 8007846:	ee62 aaa8 	vmul.f32	s21, s5, s17
 800784a:	ee3f ba8b 	vadd.f32	s22, s31, s22
 800784e:	ee3c aa0a 	vadd.f32	s20, s24, s20
 8007852:	ee73 9a29 	vadd.f32	s19, s6, s19
 8007856:	ee24 caa2 	vmul.f32	s24, s9, s5
 800785a:	ee22 3a22 	vmul.f32	s6, s4, s5
 800785e:	ee33 9a89 	vadd.f32	s18, s7, s18
 8007862:	ee35 6a86 	vadd.f32	s12, s11, s12
 8007866:	ee61 3a22 	vmul.f32	s7, s2, s5
 800786a:	ee60 5aa2 	vmul.f32	s11, s1, s5
 800786e:	ee7f ba2b 	vadd.f32	s23, s30, s23
 8007872:	ee7c 7aa7 	vadd.f32	s15, s25, s15
 8007876:	ee20 fa22 	vmul.f32	s30, s0, s5
 800787a:	ee62 2a88 	vmul.f32	s5, s5, s16
 800787e:	ee7e fa8b 	vadd.f32	s31, s29, s22
 8007882:	ee72 7aa7 	vadd.f32	s15, s5, s15
 8007886:	ee24 ba28 	vmul.f32	s22, s8, s17
 800788a:	ee7a aa8d 	vadd.f32	s21, s21, s26
 800788e:	ee3c aa0a 	vadd.f32	s20, s24, s20
 8007892:	ee24 da84 	vmul.f32	s26, s9, s8
 8007896:	ee22 ca04 	vmul.f32	s24, s4, s8
 800789a:	ee73 9a29 	vadd.f32	s19, s6, s19
 800789e:	ee33 9a89 	vadd.f32	s18, s7, s18
 80078a2:	ee21 3a04 	vmul.f32	s6, s2, s8
 80078a6:	ee60 3a84 	vmul.f32	s7, s1, s8
 80078aa:	ee35 6a86 	vadd.f32	s12, s11, s12
 80078ae:	ee7f ba2b 	vadd.f32	s23, s30, s23
 80078b2:	ee60 5a04 	vmul.f32	s11, s0, s8
 80078b6:	ee28 7a04 	vmul.f32	s14, s16, s8
 80078ba:	ee64 6a21 	vmul.f32	s13, s8, s3
 80078be:	ed52 8a01 	vldr	s17, [r2, #-4]
 80078c2:	ee73 9a29 	vadd.f32	s19, s6, s19
 80078c6:	ee33 9a89 	vadd.f32	s18, s7, s18
 80078ca:	ee35 6a86 	vadd.f32	s12, s11, s12
 80078ce:	ee37 7a2b 	vadd.f32	s14, s14, s23
 80078d2:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80078d6:	ee3b ba2f 	vadd.f32	s22, s22, s31
 80078da:	ee64 4a85 	vmul.f32	s9, s9, s10
 80078de:	ee7d aa2a 	vadd.f32	s21, s26, s21
 80078e2:	ee22 4a05 	vmul.f32	s8, s4, s10
 80078e6:	ee3c aa0a 	vadd.f32	s20, s24, s20
 80078ea:	ee61 2a05 	vmul.f32	s5, s2, s10
 80078ee:	ee20 3a85 	vmul.f32	s6, s1, s10
 80078f2:	ee60 3a05 	vmul.f32	s7, s0, s10
 80078f6:	ee68 5a05 	vmul.f32	s11, s16, s10
 80078fa:	ee61 ba85 	vmul.f32	s23, s3, s10
 80078fe:	ee65 7a28 	vmul.f32	s15, s10, s17
 8007902:	3320      	adds	r3, #32
 8007904:	429f      	cmp	r7, r3
 8007906:	ee34 ba8b 	vadd.f32	s22, s9, s22
 800790a:	ee74 aa2a 	vadd.f32	s21, s8, s21
 800790e:	ee32 aa8a 	vadd.f32	s20, s5, s20
 8007912:	ee73 9a29 	vadd.f32	s19, s6, s19
 8007916:	ee33 9a89 	vadd.f32	s18, s7, s18
 800791a:	ee35 6a86 	vadd.f32	s12, s11, s12
 800791e:	ee7b ba87 	vadd.f32	s23, s23, s14
 8007922:	ee77 6aa6 	vadd.f32	s13, s15, s13
 8007926:	f102 0220 	add.w	r2, r2, #32
 800792a:	f47f aeda 	bne.w	80076e2 <arm_fir_f32+0xfe>
 800792e:	eb0b 0208 	add.w	r2, fp, r8
 8007932:	46cb      	mov	fp, r9
 8007934:	b3c0      	cbz	r0, 80079a8 <arm_fir_f32+0x3c4>
 8007936:	4603      	mov	r3, r0
 8007938:	e004      	b.n	8007944 <arm_fir_f32+0x360>
 800793a:	bf00      	nop
 800793c:	00000000 	.word	0x00000000
 8007940:	eef0 8a65 	vmov.f32	s17, s11
 8007944:	ecfb 7a01 	vldmia	fp!, {s15}
 8007948:	ecf2 5a01 	vldmia	r2!, {s11}
 800794c:	ee27 2a82 	vmul.f32	s4, s15, s4
 8007950:	ee67 2a81 	vmul.f32	s5, s15, s2
 8007954:	ee27 3aa0 	vmul.f32	s6, s15, s1
 8007958:	ee67 3a80 	vmul.f32	s7, s15, s0
 800795c:	ee27 4a88 	vmul.f32	s8, s15, s16
 8007960:	ee67 4aa1 	vmul.f32	s9, s15, s3
 8007964:	ee28 5aa7 	vmul.f32	s10, s17, s15
 8007968:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800796c:	3b01      	subs	r3, #1
 800796e:	ee3b ba02 	vadd.f32	s22, s22, s4
 8007972:	ee7a aaa2 	vadd.f32	s21, s21, s5
 8007976:	eeb0 2a41 	vmov.f32	s4, s2
 800797a:	ee3a aa03 	vadd.f32	s20, s20, s6
 800797e:	eeb0 1a60 	vmov.f32	s2, s1
 8007982:	ee79 9aa3 	vadd.f32	s19, s19, s7
 8007986:	eef0 0a40 	vmov.f32	s1, s0
 800798a:	ee39 9a04 	vadd.f32	s18, s18, s8
 800798e:	eeb0 0a48 	vmov.f32	s0, s16
 8007992:	ee36 6a24 	vadd.f32	s12, s12, s9
 8007996:	eeb0 8a61 	vmov.f32	s16, s3
 800799a:	ee7b ba85 	vadd.f32	s23, s23, s10
 800799e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80079a2:	eef0 1a68 	vmov.f32	s3, s17
 80079a6:	d1cb      	bne.n	8007940 <arm_fir_f32+0x35c>
 80079a8:	f1be 0e01 	subs.w	lr, lr, #1
 80079ac:	ed04 ba08 	vstr	s22, [r4, #-32]	@ 0xffffffe0
 80079b0:	ed44 aa07 	vstr	s21, [r4, #-28]	@ 0xffffffe4
 80079b4:	ed04 aa06 	vstr	s20, [r4, #-24]	@ 0xffffffe8
 80079b8:	ed44 9a05 	vstr	s19, [r4, #-20]	@ 0xffffffec
 80079bc:	ed04 9a04 	vstr	s18, [r4, #-16]
 80079c0:	ed04 6a03 	vstr	s12, [r4, #-12]
 80079c4:	ed44 ba02 	vstr	s23, [r4, #-8]
 80079c8:	ed44 6a01 	vstr	s13, [r4, #-4]
 80079cc:	f106 0620 	add.w	r6, r6, #32
 80079d0:	f105 0520 	add.w	r5, r5, #32
 80079d4:	f104 0420 	add.w	r4, r4, #32
 80079d8:	468b      	mov	fp, r1
 80079da:	f47f ae3b 	bne.w	8007654 <arm_fir_f32+0x70>
 80079de:	e9dd 1205 	ldrd	r1, r2, [sp, #20]
 80079e2:	e9dd c908 	ldrd	ip, r9, [sp, #32]
 80079e6:	9b01      	ldr	r3, [sp, #4]
 80079e8:	9800      	ldr	r0, [sp, #0]
 80079ea:	eb01 1143 	add.w	r1, r1, r3, lsl #5
 80079ee:	eb02 1243 	add.w	r2, r2, r3, lsl #5
 80079f2:	eb09 1943 	add.w	r9, r9, r3, lsl #5
 80079f6:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 80079fa:	9300      	str	r3, [sp, #0]
 80079fc:	9b04      	ldr	r3, [sp, #16]
 80079fe:	f013 0607 	ands.w	r6, r3, #7
 8007a02:	d026      	beq.n	8007a52 <arm_fir_f32+0x46e>
 8007a04:	ea4f 0e86 	mov.w	lr, r6, lsl #2
 8007a08:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 8007a0c:	4633      	mov	r3, r6
 8007a0e:	9f00      	ldr	r7, [sp, #0]
 8007a10:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8007a14:	4666      	mov	r6, ip
 8007a16:	464d      	mov	r5, r9
 8007a18:	469c      	mov	ip, r3
 8007a1a:	f851 3b04 	ldr.w	r3, [r1], #4
 8007a1e:	f847 3b04 	str.w	r3, [r7], #4
 8007a22:	ed1f 7a3a 	vldr	s14, [pc, #-232]	@ 800793c <arm_fir_f32+0x358>
 8007a26:	b166      	cbz	r6, 8007a42 <arm_fir_f32+0x45e>
 8007a28:	4633      	mov	r3, r6
 8007a2a:	4644      	mov	r4, r8
 8007a2c:	4628      	mov	r0, r5
 8007a2e:	ecf0 7a01 	vldmia	r0!, {s15}
 8007a32:	ecf4 6a01 	vldmia	r4!, {s13}
 8007a36:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007a3a:	3b01      	subs	r3, #1
 8007a3c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007a40:	d1f5      	bne.n	8007a2e <arm_fir_f32+0x44a>
 8007a42:	4561      	cmp	r1, ip
 8007a44:	eca2 7a01 	vstmia	r2!, {s14}
 8007a48:	f105 0504 	add.w	r5, r5, #4
 8007a4c:	d1e5      	bne.n	8007a1a <arm_fir_f32+0x436>
 8007a4e:	46b4      	mov	ip, r6
 8007a50:	44f1      	add	r9, lr
 8007a52:	9b03      	ldr	r3, [sp, #12]
 8007a54:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 8007a58:	ea5f 059c 	movs.w	r5, ip, lsr #2
 8007a5c:	685c      	ldr	r4, [r3, #4]
 8007a5e:	d01e      	beq.n	8007a9e <arm_fir_f32+0x4ba>
 8007a60:	f109 0210 	add.w	r2, r9, #16
 8007a64:	f104 0310 	add.w	r3, r4, #16
 8007a68:	4629      	mov	r1, r5
 8007a6a:	f852 0c10 	ldr.w	r0, [r2, #-16]
 8007a6e:	f843 0c10 	str.w	r0, [r3, #-16]
 8007a72:	f852 0c0c 	ldr.w	r0, [r2, #-12]
 8007a76:	f843 0c0c 	str.w	r0, [r3, #-12]
 8007a7a:	f852 0c08 	ldr.w	r0, [r2, #-8]
 8007a7e:	f843 0c08 	str.w	r0, [r3, #-8]
 8007a82:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8007a86:	f843 0c04 	str.w	r0, [r3, #-4]
 8007a8a:	3901      	subs	r1, #1
 8007a8c:	f102 0210 	add.w	r2, r2, #16
 8007a90:	f103 0310 	add.w	r3, r3, #16
 8007a94:	d1e9      	bne.n	8007a6a <arm_fir_f32+0x486>
 8007a96:	eb09 1905 	add.w	r9, r9, r5, lsl #4
 8007a9a:	eb04 1405 	add.w	r4, r4, r5, lsl #4
 8007a9e:	f01c 0c03 	ands.w	ip, ip, #3
 8007aa2:	d00e      	beq.n	8007ac2 <arm_fir_f32+0x4de>
 8007aa4:	f8d9 3000 	ldr.w	r3, [r9]
 8007aa8:	6023      	str	r3, [r4, #0]
 8007aaa:	f1bc 0c01 	subs.w	ip, ip, #1
 8007aae:	d008      	beq.n	8007ac2 <arm_fir_f32+0x4de>
 8007ab0:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8007ab4:	6063      	str	r3, [r4, #4]
 8007ab6:	f1bc 0f01 	cmp.w	ip, #1
 8007aba:	bf1c      	itt	ne
 8007abc:	f8d9 3008 	ldrne.w	r3, [r9, #8]
 8007ac0:	60a3      	strne	r3, [r4, #8]
 8007ac2:	b00b      	add	sp, #44	@ 0x2c
 8007ac4:	ecbd 8b10 	vpop	{d8-d15}
 8007ac8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007acc:	f8dd b008 	ldr.w	fp, [sp, #8]
 8007ad0:	eef0 ba66 	vmov.f32	s23, s13
 8007ad4:	eeb0 6a66 	vmov.f32	s12, s13
 8007ad8:	eeb0 9a66 	vmov.f32	s18, s13
 8007adc:	eef0 9a66 	vmov.f32	s19, s13
 8007ae0:	eeb0 aa66 	vmov.f32	s20, s13
 8007ae4:	eef0 aa66 	vmov.f32	s21, s13
 8007ae8:	eeb0 ba66 	vmov.f32	s22, s13
 8007aec:	f102 0120 	add.w	r1, r2, #32
 8007af0:	e720      	b.n	8007934 <arm_fir_f32+0x350>
 8007af2:	bf00      	nop

08007af4 <arm_cmplx_mag_f32>:
 8007af4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007af8:	ed2d 8b02 	vpush	{d8}
 8007afc:	0897      	lsrs	r7, r2, #2
 8007afe:	b084      	sub	sp, #16
 8007b00:	d077      	beq.n	8007bf2 <arm_cmplx_mag_f32+0xfe>
 8007b02:	f04f 0800 	mov.w	r8, #0
 8007b06:	f100 0420 	add.w	r4, r0, #32
 8007b0a:	f101 0510 	add.w	r5, r1, #16
 8007b0e:	463e      	mov	r6, r7
 8007b10:	ed14 0a08 	vldr	s0, [r4, #-32]	@ 0xffffffe0
 8007b14:	ed54 7a07 	vldr	s15, [r4, #-28]	@ 0xffffffe4
 8007b18:	ee20 0a00 	vmul.f32	s0, s0, s0
 8007b1c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8007b20:	ee30 0a27 	vadd.f32	s0, s0, s15
 8007b24:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8007b28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b2c:	f2c0 80c5 	blt.w	8007cba <arm_cmplx_mag_f32+0x1c6>
 8007b30:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8007b34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b38:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8007b3c:	f100 80cb 	bmi.w	8007cd6 <arm_cmplx_mag_f32+0x1e2>
 8007b40:	ed05 8a04 	vstr	s16, [r5, #-16]
 8007b44:	ed14 0a06 	vldr	s0, [r4, #-24]	@ 0xffffffe8
 8007b48:	ed54 7a05 	vldr	s15, [r4, #-20]	@ 0xffffffec
 8007b4c:	ee20 0a00 	vmul.f32	s0, s0, s0
 8007b50:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8007b54:	ee30 0a27 	vadd.f32	s0, s0, s15
 8007b58:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8007b5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b60:	f2c0 80a8 	blt.w	8007cb4 <arm_cmplx_mag_f32+0x1c0>
 8007b64:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8007b68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b6c:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8007b70:	f100 80a8 	bmi.w	8007cc4 <arm_cmplx_mag_f32+0x1d0>
 8007b74:	ed05 8a03 	vstr	s16, [r5, #-12]
 8007b78:	ed14 0a04 	vldr	s0, [r4, #-16]
 8007b7c:	ed54 7a03 	vldr	s15, [r4, #-12]
 8007b80:	ee20 0a00 	vmul.f32	s0, s0, s0
 8007b84:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8007b88:	ee30 0a27 	vadd.f32	s0, s0, s15
 8007b8c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8007b90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b94:	f2c0 808b 	blt.w	8007cae <arm_cmplx_mag_f32+0x1ba>
 8007b98:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8007b9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ba0:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8007ba4:	f100 80a9 	bmi.w	8007cfa <arm_cmplx_mag_f32+0x206>
 8007ba8:	ed05 8a02 	vstr	s16, [r5, #-8]
 8007bac:	ed14 0a02 	vldr	s0, [r4, #-8]
 8007bb0:	ed54 7a01 	vldr	s15, [r4, #-4]
 8007bb4:	ee20 0a00 	vmul.f32	s0, s0, s0
 8007bb8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8007bbc:	ee30 0a27 	vadd.f32	s0, s0, s15
 8007bc0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8007bc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007bc8:	db6e      	blt.n	8007ca8 <arm_cmplx_mag_f32+0x1b4>
 8007bca:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8007bce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007bd2:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8007bd6:	f100 8087 	bmi.w	8007ce8 <arm_cmplx_mag_f32+0x1f4>
 8007bda:	ed05 8a01 	vstr	s16, [r5, #-4]
 8007bde:	3e01      	subs	r6, #1
 8007be0:	f104 0420 	add.w	r4, r4, #32
 8007be4:	f105 0510 	add.w	r5, r5, #16
 8007be8:	d192      	bne.n	8007b10 <arm_cmplx_mag_f32+0x1c>
 8007bea:	eb00 1047 	add.w	r0, r0, r7, lsl #5
 8007bee:	eb01 1107 	add.w	r1, r1, r7, lsl #4
 8007bf2:	f012 0203 	ands.w	r2, r2, #3
 8007bf6:	d052      	beq.n	8007c9e <arm_cmplx_mag_f32+0x1aa>
 8007bf8:	ed90 0a00 	vldr	s0, [r0]
 8007bfc:	edd0 7a01 	vldr	s15, [r0, #4]
 8007c00:	ee20 0a00 	vmul.f32	s0, s0, s0
 8007c04:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8007c08:	2300      	movs	r3, #0
 8007c0a:	ee37 0a80 	vadd.f32	s0, s15, s0
 8007c0e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8007c12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c16:	bfb8      	it	lt
 8007c18:	600b      	strlt	r3, [r1, #0]
 8007c1a:	db08      	blt.n	8007c2e <arm_cmplx_mag_f32+0x13a>
 8007c1c:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8007c20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c24:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8007c28:	d479      	bmi.n	8007d1e <arm_cmplx_mag_f32+0x22a>
 8007c2a:	ed81 8a00 	vstr	s16, [r1]
 8007c2e:	3a01      	subs	r2, #1
 8007c30:	d035      	beq.n	8007c9e <arm_cmplx_mag_f32+0x1aa>
 8007c32:	ed90 0a02 	vldr	s0, [r0, #8]
 8007c36:	edd0 7a03 	vldr	s15, [r0, #12]
 8007c3a:	ee20 0a00 	vmul.f32	s0, s0, s0
 8007c3e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8007c42:	2300      	movs	r3, #0
 8007c44:	ee37 0a80 	vadd.f32	s0, s15, s0
 8007c48:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8007c4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c50:	bfb8      	it	lt
 8007c52:	604b      	strlt	r3, [r1, #4]
 8007c54:	db08      	blt.n	8007c68 <arm_cmplx_mag_f32+0x174>
 8007c56:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8007c5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c5e:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8007c62:	d453      	bmi.n	8007d0c <arm_cmplx_mag_f32+0x218>
 8007c64:	ed81 8a01 	vstr	s16, [r1, #4]
 8007c68:	2a01      	cmp	r2, #1
 8007c6a:	d018      	beq.n	8007c9e <arm_cmplx_mag_f32+0x1aa>
 8007c6c:	ed90 0a04 	vldr	s0, [r0, #16]
 8007c70:	edd0 7a05 	vldr	s15, [r0, #20]
 8007c74:	ee20 0a00 	vmul.f32	s0, s0, s0
 8007c78:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8007c7c:	2300      	movs	r3, #0
 8007c7e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8007c82:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8007c86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c8a:	db19      	blt.n	8007cc0 <arm_cmplx_mag_f32+0x1cc>
 8007c8c:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8007c90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c94:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8007c98:	d44a      	bmi.n	8007d30 <arm_cmplx_mag_f32+0x23c>
 8007c9a:	ed81 8a02 	vstr	s16, [r1, #8]
 8007c9e:	b004      	add	sp, #16
 8007ca0:	ecbd 8b02 	vpop	{d8}
 8007ca4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ca8:	f845 8c04 	str.w	r8, [r5, #-4]
 8007cac:	e797      	b.n	8007bde <arm_cmplx_mag_f32+0xea>
 8007cae:	f845 8c08 	str.w	r8, [r5, #-8]
 8007cb2:	e77b      	b.n	8007bac <arm_cmplx_mag_f32+0xb8>
 8007cb4:	f845 8c0c 	str.w	r8, [r5, #-12]
 8007cb8:	e75e      	b.n	8007b78 <arm_cmplx_mag_f32+0x84>
 8007cba:	f845 8c10 	str.w	r8, [r5, #-16]
 8007cbe:	e741      	b.n	8007b44 <arm_cmplx_mag_f32+0x50>
 8007cc0:	608b      	str	r3, [r1, #8]
 8007cc2:	e7ec      	b.n	8007c9e <arm_cmplx_mag_f32+0x1aa>
 8007cc4:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8007cc8:	9001      	str	r0, [sp, #4]
 8007cca:	f000 fb55 	bl	8008378 <sqrtf>
 8007cce:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8007cd2:	9801      	ldr	r0, [sp, #4]
 8007cd4:	e74e      	b.n	8007b74 <arm_cmplx_mag_f32+0x80>
 8007cd6:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8007cda:	9001      	str	r0, [sp, #4]
 8007cdc:	f000 fb4c 	bl	8008378 <sqrtf>
 8007ce0:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8007ce4:	9801      	ldr	r0, [sp, #4]
 8007ce6:	e72b      	b.n	8007b40 <arm_cmplx_mag_f32+0x4c>
 8007ce8:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8007cec:	9001      	str	r0, [sp, #4]
 8007cee:	f000 fb43 	bl	8008378 <sqrtf>
 8007cf2:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8007cf6:	9801      	ldr	r0, [sp, #4]
 8007cf8:	e76f      	b.n	8007bda <arm_cmplx_mag_f32+0xe6>
 8007cfa:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8007cfe:	9001      	str	r0, [sp, #4]
 8007d00:	f000 fb3a 	bl	8008378 <sqrtf>
 8007d04:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8007d08:	9801      	ldr	r0, [sp, #4]
 8007d0a:	e74d      	b.n	8007ba8 <arm_cmplx_mag_f32+0xb4>
 8007d0c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007d10:	9201      	str	r2, [sp, #4]
 8007d12:	f000 fb31 	bl	8008378 <sqrtf>
 8007d16:	e9dd 2001 	ldrd	r2, r0, [sp, #4]
 8007d1a:	9903      	ldr	r1, [sp, #12]
 8007d1c:	e7a2      	b.n	8007c64 <arm_cmplx_mag_f32+0x170>
 8007d1e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007d22:	9201      	str	r2, [sp, #4]
 8007d24:	f000 fb28 	bl	8008378 <sqrtf>
 8007d28:	e9dd 2001 	ldrd	r2, r0, [sp, #4]
 8007d2c:	9903      	ldr	r1, [sp, #12]
 8007d2e:	e77c      	b.n	8007c2a <arm_cmplx_mag_f32+0x136>
 8007d30:	9101      	str	r1, [sp, #4]
 8007d32:	f000 fb21 	bl	8008378 <sqrtf>
 8007d36:	9901      	ldr	r1, [sp, #4]
 8007d38:	e7af      	b.n	8007c9a <arm_cmplx_mag_f32+0x1a6>
 8007d3a:	bf00      	nop

08007d3c <arm_cfft_init_f32>:
 8007d3c:	4603      	mov	r3, r0
 8007d3e:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 8007d42:	f04f 0000 	mov.w	r0, #0
 8007d46:	b410      	push	{r4}
 8007d48:	8019      	strh	r1, [r3, #0]
 8007d4a:	6058      	str	r0, [r3, #4]
 8007d4c:	d033      	beq.n	8007db6 <arm_cfft_init_f32+0x7a>
 8007d4e:	d918      	bls.n	8007d82 <arm_cfft_init_f32+0x46>
 8007d50:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
 8007d54:	d027      	beq.n	8007da6 <arm_cfft_init_f32+0x6a>
 8007d56:	d90c      	bls.n	8007d72 <arm_cfft_init_f32+0x36>
 8007d58:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 8007d5c:	d11e      	bne.n	8007d9c <arm_cfft_init_f32+0x60>
 8007d5e:	4a17      	ldr	r2, [pc, #92]	@ (8007dbc <arm_cfft_init_f32+0x80>)
 8007d60:	8994      	ldrh	r4, [r2, #12]
 8007d62:	819c      	strh	r4, [r3, #12]
 8007d64:	e9d2 2101 	ldrd	r2, r1, [r2, #4]
 8007d68:	e9c3 2101 	strd	r2, r1, [r3, #4]
 8007d6c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007d70:	4770      	bx	lr
 8007d72:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8007d76:	d018      	beq.n	8007daa <arm_cfft_init_f32+0x6e>
 8007d78:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8007d7c:	d10e      	bne.n	8007d9c <arm_cfft_init_f32+0x60>
 8007d7e:	4a10      	ldr	r2, [pc, #64]	@ (8007dc0 <arm_cfft_init_f32+0x84>)
 8007d80:	e7ee      	b.n	8007d60 <arm_cfft_init_f32+0x24>
 8007d82:	2940      	cmp	r1, #64	@ 0x40
 8007d84:	d013      	beq.n	8007dae <arm_cfft_init_f32+0x72>
 8007d86:	d903      	bls.n	8007d90 <arm_cfft_init_f32+0x54>
 8007d88:	2980      	cmp	r1, #128	@ 0x80
 8007d8a:	d107      	bne.n	8007d9c <arm_cfft_init_f32+0x60>
 8007d8c:	4a0d      	ldr	r2, [pc, #52]	@ (8007dc4 <arm_cfft_init_f32+0x88>)
 8007d8e:	e7e7      	b.n	8007d60 <arm_cfft_init_f32+0x24>
 8007d90:	2910      	cmp	r1, #16
 8007d92:	d00e      	beq.n	8007db2 <arm_cfft_init_f32+0x76>
 8007d94:	2920      	cmp	r1, #32
 8007d96:	d101      	bne.n	8007d9c <arm_cfft_init_f32+0x60>
 8007d98:	4a0b      	ldr	r2, [pc, #44]	@ (8007dc8 <arm_cfft_init_f32+0x8c>)
 8007d9a:	e7e1      	b.n	8007d60 <arm_cfft_init_f32+0x24>
 8007d9c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007da0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007da4:	4770      	bx	lr
 8007da6:	4a09      	ldr	r2, [pc, #36]	@ (8007dcc <arm_cfft_init_f32+0x90>)
 8007da8:	e7da      	b.n	8007d60 <arm_cfft_init_f32+0x24>
 8007daa:	4a09      	ldr	r2, [pc, #36]	@ (8007dd0 <arm_cfft_init_f32+0x94>)
 8007dac:	e7d8      	b.n	8007d60 <arm_cfft_init_f32+0x24>
 8007dae:	4a09      	ldr	r2, [pc, #36]	@ (8007dd4 <arm_cfft_init_f32+0x98>)
 8007db0:	e7d6      	b.n	8007d60 <arm_cfft_init_f32+0x24>
 8007db2:	4a09      	ldr	r2, [pc, #36]	@ (8007dd8 <arm_cfft_init_f32+0x9c>)
 8007db4:	e7d4      	b.n	8007d60 <arm_cfft_init_f32+0x24>
 8007db6:	4a09      	ldr	r2, [pc, #36]	@ (8007ddc <arm_cfft_init_f32+0xa0>)
 8007db8:	e7d2      	b.n	8007d60 <arm_cfft_init_f32+0x24>
 8007dba:	bf00      	nop
 8007dbc:	080291f8 	.word	0x080291f8
 8007dc0:	08029198 	.word	0x08029198
 8007dc4:	080291a8 	.word	0x080291a8
 8007dc8:	080291e8 	.word	0x080291e8
 8007dcc:	080291c8 	.word	0x080291c8
 8007dd0:	08029208 	.word	0x08029208
 8007dd4:	08029218 	.word	0x08029218
 8007dd8:	080291b8 	.word	0x080291b8
 8007ddc:	080291d8 	.word	0x080291d8

08007de0 <arm_radix8_butterfly_f32>:
 8007de0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007de4:	ed2d 8b10 	vpush	{d8-d15}
 8007de8:	b093      	sub	sp, #76	@ 0x4c
 8007dea:	e9cd 320e 	strd	r3, r2, [sp, #56]	@ 0x38
 8007dee:	4603      	mov	r3, r0
 8007df0:	3304      	adds	r3, #4
 8007df2:	ed9f bac0 	vldr	s22, [pc, #768]	@ 80080f4 <arm_radix8_butterfly_f32+0x314>
 8007df6:	9010      	str	r0, [sp, #64]	@ 0x40
 8007df8:	468b      	mov	fp, r1
 8007dfa:	9311      	str	r3, [sp, #68]	@ 0x44
 8007dfc:	4689      	mov	r9, r1
 8007dfe:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8007e00:	ea4f 05db 	mov.w	r5, fp, lsr #3
 8007e04:	eb04 1245 	add.w	r2, r4, r5, lsl #5
 8007e08:	eb02 1105 	add.w	r1, r2, r5, lsl #4
 8007e0c:	eba5 0385 	sub.w	r3, r5, r5, lsl #2
 8007e10:	ea4f 08c5 	mov.w	r8, r5, lsl #3
 8007e14:	ea4f 1e05 	mov.w	lr, r5, lsl #4
 8007e18:	eb05 0a85 	add.w	sl, r5, r5, lsl #2
 8007e1c:	9100      	str	r1, [sp, #0]
 8007e1e:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 8007e22:	f108 0004 	add.w	r0, r8, #4
 8007e26:	f10e 0104 	add.w	r1, lr, #4
 8007e2a:	462e      	mov	r6, r5
 8007e2c:	4420      	add	r0, r4
 8007e2e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007e32:	4421      	add	r1, r4
 8007e34:	ea4f 04ca 	mov.w	r4, sl, lsl #3
 8007e38:	960d      	str	r6, [sp, #52]	@ 0x34
 8007e3a:	9402      	str	r4, [sp, #8]
 8007e3c:	012c      	lsls	r4, r5, #4
 8007e3e:	ebc6 0cc6 	rsb	ip, r6, r6, lsl #3
 8007e42:	9403      	str	r4, [sp, #12]
 8007e44:	00ec      	lsls	r4, r5, #3
 8007e46:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8007e48:	9404      	str	r4, [sp, #16]
 8007e4a:	ea4f 04cc 	mov.w	r4, ip, lsl #3
 8007e4e:	9405      	str	r4, [sp, #20]
 8007e50:	016c      	lsls	r4, r5, #5
 8007e52:	9401      	str	r4, [sp, #4]
 8007e54:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8007e56:	9c00      	ldr	r4, [sp, #0]
 8007e58:	eb03 1746 	add.w	r7, r3, r6, lsl #5
 8007e5c:	ea4f 0acb 	mov.w	sl, fp, lsl #3
 8007e60:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8007e64:	f04f 0c00 	mov.w	ip, #0
 8007e68:	edd6 6a00 	vldr	s13, [r6]
 8007e6c:	edd7 1a00 	vldr	s3, [r7]
 8007e70:	ed15 aa01 	vldr	s20, [r5, #-4]
 8007e74:	edd2 5a00 	vldr	s11, [r2]
 8007e78:	ed51 9a01 	vldr	s19, [r1, #-4]
 8007e7c:	ed94 6a00 	vldr	s12, [r4]
 8007e80:	ed50 7a01 	vldr	s15, [r0, #-4]
 8007e84:	ed93 3a00 	vldr	s6, [r3]
 8007e88:	ee39 0a86 	vadd.f32	s0, s19, s12
 8007e8c:	ee33 2a21 	vadd.f32	s4, s6, s3
 8007e90:	ee37 5aa6 	vadd.f32	s10, s15, s13
 8007e94:	ee7a 4a25 	vadd.f32	s9, s20, s11
 8007e98:	ee35 7a02 	vadd.f32	s14, s10, s4
 8007e9c:	ee34 4a80 	vadd.f32	s8, s9, s0
 8007ea0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007ea4:	ee74 6a07 	vadd.f32	s13, s8, s14
 8007ea8:	ee34 4a47 	vsub.f32	s8, s8, s14
 8007eac:	ed45 6a01 	vstr	s13, [r5, #-4]
 8007eb0:	ed82 4a00 	vstr	s8, [r2]
 8007eb4:	edd0 6a00 	vldr	s13, [r0]
 8007eb8:	ed96 9a01 	vldr	s18, [r6, #4]
 8007ebc:	edd3 2a01 	vldr	s5, [r3, #4]
 8007ec0:	edd7 8a01 	vldr	s17, [r7, #4]
 8007ec4:	edd5 0a00 	vldr	s1, [r5]
 8007ec8:	edd2 3a01 	vldr	s7, [r2, #4]
 8007ecc:	ed94 8a01 	vldr	s16, [r4, #4]
 8007ed0:	ed91 7a00 	vldr	s14, [r1]
 8007ed4:	ee33 3a61 	vsub.f32	s6, s6, s3
 8007ed8:	ee36 4ac9 	vsub.f32	s8, s13, s18
 8007edc:	ee72 aae8 	vsub.f32	s21, s5, s17
 8007ee0:	ee77 1ac3 	vsub.f32	s3, s15, s6
 8007ee4:	ee34 1a2a 	vadd.f32	s2, s8, s21
 8007ee8:	ee77 7a83 	vadd.f32	s15, s15, s6
 8007eec:	ee34 4a6a 	vsub.f32	s8, s8, s21
 8007ef0:	ee30 3aa3 	vadd.f32	s6, s1, s7
 8007ef4:	ee39 6ac6 	vsub.f32	s12, s19, s12
 8007ef8:	ee70 3ae3 	vsub.f32	s7, s1, s7
 8007efc:	ee72 2aa8 	vadd.f32	s5, s5, s17
 8007f00:	ee77 0a08 	vadd.f32	s1, s14, s16
 8007f04:	ee21 1a0b 	vmul.f32	s2, s2, s22
 8007f08:	ee37 7a48 	vsub.f32	s14, s14, s16
 8007f0c:	ee61 1a8b 	vmul.f32	s3, s3, s22
 8007f10:	ee7a 5a65 	vsub.f32	s11, s20, s11
 8007f14:	ee76 6a89 	vadd.f32	s13, s13, s18
 8007f18:	ee24 4a0b 	vmul.f32	s8, s8, s22
 8007f1c:	ee67 7a8b 	vmul.f32	s15, s15, s22
 8007f20:	ee74 4ac0 	vsub.f32	s9, s9, s0
 8007f24:	ee35 5a42 	vsub.f32	s10, s10, s4
 8007f28:	ee36 0aa2 	vadd.f32	s0, s13, s5
 8007f2c:	ee33 2a20 	vadd.f32	s4, s6, s1
 8007f30:	ee76 6ae2 	vsub.f32	s13, s13, s5
 8007f34:	ee33 3a60 	vsub.f32	s6, s6, s1
 8007f38:	ee75 2aa1 	vadd.f32	s5, s11, s3
 8007f3c:	ee77 0a01 	vadd.f32	s1, s14, s2
 8007f40:	ee75 5ae1 	vsub.f32	s11, s11, s3
 8007f44:	ee37 7a41 	vsub.f32	s14, s14, s2
 8007f48:	ee73 1a84 	vadd.f32	s3, s7, s8
 8007f4c:	ee33 4ac4 	vsub.f32	s8, s7, s8
 8007f50:	ee76 3a27 	vadd.f32	s7, s12, s15
 8007f54:	ee76 7a67 	vsub.f32	s15, s12, s15
 8007f58:	ee32 8a00 	vadd.f32	s16, s4, s0
 8007f5c:	ee33 1a45 	vsub.f32	s2, s6, s10
 8007f60:	ee32 2a40 	vsub.f32	s4, s4, s0
 8007f64:	ee35 5a03 	vadd.f32	s10, s10, s6
 8007f68:	ee34 0aa6 	vadd.f32	s0, s9, s13
 8007f6c:	ee32 3aa0 	vadd.f32	s6, s5, s1
 8007f70:	ee74 6ae6 	vsub.f32	s13, s9, s13
 8007f74:	ee34 6a67 	vsub.f32	s12, s8, s15
 8007f78:	ee75 4a87 	vadd.f32	s9, s11, s14
 8007f7c:	ee72 2ae0 	vsub.f32	s5, s5, s1
 8007f80:	ee35 7ac7 	vsub.f32	s14, s11, s14
 8007f84:	ee77 7a84 	vadd.f32	s15, s15, s8
 8007f88:	ee71 5ae3 	vsub.f32	s11, s3, s7
 8007f8c:	44dc      	add	ip, fp
 8007f8e:	ee73 3aa1 	vadd.f32	s7, s7, s3
 8007f92:	45e1      	cmp	r9, ip
 8007f94:	ed85 8a00 	vstr	s16, [r5]
 8007f98:	ed82 2a01 	vstr	s4, [r2, #4]
 8007f9c:	4455      	add	r5, sl
 8007f9e:	ed01 0a01 	vstr	s0, [r1, #-4]
 8007fa2:	4452      	add	r2, sl
 8007fa4:	edc4 6a00 	vstr	s13, [r4]
 8007fa8:	ed81 1a00 	vstr	s2, [r1]
 8007fac:	ed84 5a01 	vstr	s10, [r4, #4]
 8007fb0:	4451      	add	r1, sl
 8007fb2:	ed00 3a01 	vstr	s6, [r0, #-4]
 8007fb6:	4454      	add	r4, sl
 8007fb8:	edc7 2a00 	vstr	s5, [r7]
 8007fbc:	edc6 4a00 	vstr	s9, [r6]
 8007fc0:	ed83 7a00 	vstr	s14, [r3]
 8007fc4:	edc0 5a00 	vstr	s11, [r0]
 8007fc8:	edc7 3a01 	vstr	s7, [r7, #4]
 8007fcc:	4450      	add	r0, sl
 8007fce:	ed86 6a01 	vstr	s12, [r6, #4]
 8007fd2:	4457      	add	r7, sl
 8007fd4:	edc3 7a01 	vstr	s15, [r3, #4]
 8007fd8:	4456      	add	r6, sl
 8007fda:	4453      	add	r3, sl
 8007fdc:	f63f af44 	bhi.w	8007e68 <arm_radix8_butterfly_f32+0x88>
 8007fe0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007fe2:	2b07      	cmp	r3, #7
 8007fe4:	f240 81c3 	bls.w	800836e <arm_radix8_butterfly_f32+0x58e>
 8007fe8:	9805      	ldr	r0, [sp, #20]
 8007fea:	9a01      	ldr	r2, [sp, #4]
 8007fec:	9b03      	ldr	r3, [sp, #12]
 8007fee:	9d04      	ldr	r5, [sp, #16]
 8007ff0:	9902      	ldr	r1, [sp, #8]
 8007ff2:	f100 0c08 	add.w	ip, r0, #8
 8007ff6:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8007ff8:	3208      	adds	r2, #8
 8007ffa:	1882      	adds	r2, r0, r2
 8007ffc:	3308      	adds	r3, #8
 8007ffe:	920a      	str	r2, [sp, #40]	@ 0x28
 8008000:	4602      	mov	r2, r0
 8008002:	18d3      	adds	r3, r2, r3
 8008004:	3108      	adds	r1, #8
 8008006:	3508      	adds	r5, #8
 8008008:	1851      	adds	r1, r2, r1
 800800a:	9307      	str	r3, [sp, #28]
 800800c:	4613      	mov	r3, r2
 800800e:	442a      	add	r2, r5
 8008010:	9206      	str	r2, [sp, #24]
 8008012:	461a      	mov	r2, r3
 8008014:	4462      	add	r2, ip
 8008016:	f10e 0e0c 	add.w	lr, lr, #12
 800801a:	9205      	str	r2, [sp, #20]
 800801c:	461a      	mov	r2, r3
 800801e:	4472      	add	r2, lr
 8008020:	f108 0808 	add.w	r8, r8, #8
 8008024:	330c      	adds	r3, #12
 8008026:	4440      	add	r0, r8
 8008028:	f04f 0e00 	mov.w	lr, #0
 800802c:	9203      	str	r2, [sp, #12]
 800802e:	9304      	str	r3, [sp, #16]
 8008030:	465a      	mov	r2, fp
 8008032:	464b      	mov	r3, r9
 8008034:	46f3      	mov	fp, lr
 8008036:	46d1      	mov	r9, sl
 8008038:	9009      	str	r0, [sp, #36]	@ 0x24
 800803a:	9108      	str	r1, [sp, #32]
 800803c:	f04f 0801 	mov.w	r8, #1
 8008040:	469a      	mov	sl, r3
 8008042:	4696      	mov	lr, r2
 8008044:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008046:	449b      	add	fp, r3
 8008048:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800804a:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800804e:	eb03 02cb 	add.w	r2, r3, fp, lsl #3
 8008052:	eb02 00cb 	add.w	r0, r2, fp, lsl #3
 8008056:	eb00 04cb 	add.w	r4, r0, fp, lsl #3
 800805a:	eb04 05cb 	add.w	r5, r4, fp, lsl #3
 800805e:	eb05 06cb 	add.w	r6, r5, fp, lsl #3
 8008062:	930c      	str	r3, [sp, #48]	@ 0x30
 8008064:	eb06 07cb 	add.w	r7, r6, fp, lsl #3
 8008068:	ebab 038b 	sub.w	r3, fp, fp, lsl #2
 800806c:	920b      	str	r2, [sp, #44]	@ 0x2c
 800806e:	eb07 1203 	add.w	r2, r7, r3, lsl #4
 8008072:	eb02 0ccb 	add.w	ip, r2, fp, lsl #3
 8008076:	eb0c 03cb 	add.w	r3, ip, fp, lsl #3
 800807a:	9202      	str	r2, [sp, #8]
 800807c:	eb03 02cb 	add.w	r2, r3, fp, lsl #3
 8008080:	9301      	str	r3, [sp, #4]
 8008082:	4613      	mov	r3, r2
 8008084:	edd3 da01 	vldr	s27, [r3, #4]
 8008088:	9b01      	ldr	r3, [sp, #4]
 800808a:	edd0 7a00 	vldr	s15, [r0]
 800808e:	ed93 da01 	vldr	s26, [r3, #4]
 8008092:	9b02      	ldr	r3, [sp, #8]
 8008094:	edcd 7a02 	vstr	s15, [sp, #8]
 8008098:	ed93 ca01 	vldr	s24, [r3, #4]
 800809c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800809e:	eddc ca01 	vldr	s25, [ip, #4]
 80080a2:	edd3 7a00 	vldr	s15, [r3]
 80080a6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80080a8:	edcd 7a01 	vstr	s15, [sp, #4]
 80080ac:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 80080b0:	eb02 01cb 	add.w	r1, r2, fp, lsl #3
 80080b4:	9200      	str	r2, [sp, #0]
 80080b6:	eb01 02cb 	add.w	r2, r1, fp, lsl #3
 80080ba:	edd3 7a00 	vldr	s15, [r3]
 80080be:	ed92 fa01 	vldr	s30, [r2, #4]
 80080c2:	9a00      	ldr	r2, [sp, #0]
 80080c4:	edd1 ea01 	vldr	s29, [r1, #4]
 80080c8:	ed92 ea01 	vldr	s28, [r2, #4]
 80080cc:	edd7 ba00 	vldr	s23, [r7]
 80080d0:	edd6 aa00 	vldr	s21, [r6]
 80080d4:	ed95 aa00 	vldr	s20, [r5]
 80080d8:	edd4 9a00 	vldr	s19, [r4]
 80080dc:	edcd 7a00 	vstr	s15, [sp]
 80080e0:	e9dd 7603 	ldrd	r7, r6, [sp, #12]
 80080e4:	e9dd 5405 	ldrd	r5, r4, [sp, #20]
 80080e8:	e9dd 0107 	ldrd	r0, r1, [sp, #28]
 80080ec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	@ 0x24
 80080f0:	46c4      	mov	ip, r8
 80080f2:	e001      	b.n	80080f8 <arm_radix8_butterfly_f32+0x318>
 80080f4:	3f3504f3 	.word	0x3f3504f3
 80080f8:	ed91 6a00 	vldr	s12, [r1]
 80080fc:	ed93 5a00 	vldr	s10, [r3]
 8008100:	edd0 fa00 	vldr	s31, [r0]
 8008104:	edd4 7a00 	vldr	s15, [r4]
 8008108:	ed95 7a00 	vldr	s14, [r5]
 800810c:	ed56 3a01 	vldr	s7, [r6, #-4]
 8008110:	ed17 3a01 	vldr	s6, [r7, #-4]
 8008114:	ed92 2a00 	vldr	s4, [r2]
 8008118:	ed96 0a00 	vldr	s0, [r6]
 800811c:	ee33 8a85 	vadd.f32	s16, s7, s10
 8008120:	ee32 1a06 	vadd.f32	s2, s4, s12
 8008124:	ee33 4a2f 	vadd.f32	s8, s6, s31
 8008128:	ee77 4a87 	vadd.f32	s9, s15, s14
 800812c:	ee78 1a04 	vadd.f32	s3, s16, s8
 8008130:	ee71 6a24 	vadd.f32	s13, s2, s9
 8008134:	ee32 2a46 	vsub.f32	s4, s4, s12
 8008138:	ee31 6aa6 	vadd.f32	s12, s3, s13
 800813c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008140:	ed06 6a01 	vstr	s12, [r6, #-4]
 8008144:	edd4 8a01 	vldr	s17, [r4, #4]
 8008148:	ed92 9a01 	vldr	s18, [r2, #4]
 800814c:	edd7 0a00 	vldr	s1, [r7]
 8008150:	edd1 2a01 	vldr	s5, [r1, #4]
 8008154:	ed95 7a01 	vldr	s14, [r5, #4]
 8008158:	ed93 6a01 	vldr	s12, [r3, #4]
 800815c:	edd0 5a01 	vldr	s11, [r0, #4]
 8008160:	ee73 3ac5 	vsub.f32	s7, s7, s10
 8008164:	ee33 3a6f 	vsub.f32	s6, s6, s31
 8008168:	ee39 5a62 	vsub.f32	s10, s18, s5
 800816c:	ee78 fac7 	vsub.f32	s31, s17, s14
 8008170:	ee38 4a44 	vsub.f32	s8, s16, s8
 8008174:	ee38 7a87 	vadd.f32	s14, s17, s14
 8008178:	ee30 8aa5 	vadd.f32	s16, s1, s11
 800817c:	ee79 2a22 	vadd.f32	s5, s18, s5
 8008180:	ee32 9a27 	vadd.f32	s18, s4, s15
 8008184:	ee72 7a67 	vsub.f32	s15, s4, s15
 8008188:	ee30 2a06 	vadd.f32	s4, s0, s12
 800818c:	ee75 8a6f 	vsub.f32	s17, s10, s31
 8008190:	ee71 4a64 	vsub.f32	s9, s2, s9
 8008194:	ee35 5a2f 	vadd.f32	s10, s10, s31
 8008198:	ee32 1a08 	vadd.f32	s2, s4, s16
 800819c:	ee72 fa87 	vadd.f32	s31, s5, s14
 80081a0:	ee32 2a48 	vsub.f32	s4, s4, s16
 80081a4:	ee68 8a8b 	vmul.f32	s17, s17, s22
 80081a8:	ee25 5a0b 	vmul.f32	s10, s10, s22
 80081ac:	ee70 5ae5 	vsub.f32	s11, s1, s11
 80081b0:	ee72 2ac7 	vsub.f32	s5, s5, s14
 80081b4:	ee71 6ae6 	vsub.f32	s13, s3, s13
 80081b8:	ee29 9a0b 	vmul.f32	s18, s18, s22
 80081bc:	ee71 1a6f 	vsub.f32	s3, s2, s31
 80081c0:	ee67 7a8b 	vmul.f32	s15, s15, s22
 80081c4:	ee30 6a46 	vsub.f32	s12, s0, s12
 80081c8:	ee74 0a22 	vadd.f32	s1, s8, s5
 80081cc:	ee36 0a28 	vadd.f32	s0, s12, s17
 80081d0:	ee74 2a62 	vsub.f32	s5, s8, s5
 80081d4:	ee36 6a68 	vsub.f32	s12, s12, s17
 80081d8:	ee32 4a64 	vsub.f32	s8, s4, s9
 80081dc:	ee73 8a09 	vadd.f32	s17, s6, s18
 80081e0:	ee74 4a82 	vadd.f32	s9, s9, s4
 80081e4:	ee33 9a49 	vsub.f32	s18, s6, s18
 80081e8:	ee2d 2aa1 	vmul.f32	s4, s27, s3
 80081ec:	ee35 3a85 	vadd.f32	s6, s11, s10
 80081f0:	ee75 5ac5 	vsub.f32	s11, s11, s10
 80081f4:	ee33 5aa7 	vadd.f32	s10, s7, s15
 80081f8:	ee73 7ae7 	vsub.f32	s15, s7, s15
 80081fc:	ee69 3aa6 	vmul.f32	s7, s19, s13
 8008200:	ee30 7a68 	vsub.f32	s14, s0, s17
 8008204:	ee35 8a03 	vadd.f32	s16, s10, s6
 8008208:	ee38 0a80 	vadd.f32	s0, s17, s0
 800820c:	ee73 3a82 	vadd.f32	s7, s7, s4
 8008210:	ee69 8aa1 	vmul.f32	s17, s19, s3
 8008214:	ed9d 2a00 	vldr	s4, [sp]
 8008218:	eddd 1a01 	vldr	s3, [sp, #4]
 800821c:	ee35 5a43 	vsub.f32	s10, s10, s6
 8008220:	ee71 fa2f 	vadd.f32	s31, s2, s31
 8008224:	ee37 3aa5 	vadd.f32	s6, s15, s11
 8008228:	ee21 1aa0 	vmul.f32	s2, s3, s1
 800822c:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8008230:	ee6d 6aa6 	vmul.f32	s13, s27, s13
 8008234:	ee76 5a49 	vsub.f32	s11, s12, s18
 8008238:	ee6c 0aa0 	vmul.f32	s1, s25, s1
 800823c:	ee39 6a06 	vadd.f32	s12, s18, s12
 8008240:	ee2c 9a84 	vmul.f32	s18, s25, s8
 8008244:	ee21 4a84 	vmul.f32	s8, s3, s8
 8008248:	ee6c 1a07 	vmul.f32	s3, s24, s14
 800824c:	ee22 7a07 	vmul.f32	s14, s4, s14
 8008250:	ee22 2a08 	vmul.f32	s4, s4, s16
 8008254:	ee2c 8a08 	vmul.f32	s16, s24, s16
 8008258:	ee78 6ae6 	vsub.f32	s13, s17, s13
 800825c:	ee31 1a09 	vadd.f32	s2, s2, s18
 8008260:	ee6a 8aa2 	vmul.f32	s17, s21, s5
 8008264:	ee2e 9aa4 	vmul.f32	s18, s29, s9
 8008268:	ee74 0a60 	vsub.f32	s1, s8, s1
 800826c:	ee37 7a48 	vsub.f32	s14, s14, s16
 8008270:	ee2f 4a00 	vmul.f32	s8, s30, s0
 8008274:	ee2b 8a85 	vmul.f32	s16, s23, s10
 8008278:	ee72 1a21 	vadd.f32	s3, s4, s3
 800827c:	ee6a 4aa4 	vmul.f32	s9, s21, s9
 8008280:	ee38 2a89 	vadd.f32	s4, s17, s18
 8008284:	ee2f 5a05 	vmul.f32	s10, s30, s10
 8008288:	ee38 8a04 	vadd.f32	s16, s16, s8
 800828c:	ee2e 9a25 	vmul.f32	s18, s28, s11
 8008290:	ee2a 4a25 	vmul.f32	s8, s20, s11
 8008294:	ee6e 2aa2 	vmul.f32	s5, s29, s5
 8008298:	eddd 5a02 	vldr	s11, [sp, #8]
 800829c:	edc6 fa00 	vstr	s31, [r6]
 80082a0:	ee2b 0a80 	vmul.f32	s0, s23, s0
 80082a4:	ee74 2ae2 	vsub.f32	s5, s9, s5
 80082a8:	ee30 0a45 	vsub.f32	s0, s0, s10
 80082ac:	ee6a 4a03 	vmul.f32	s9, s20, s6
 80082b0:	ee65 8aa7 	vmul.f32	s17, s11, s15
 80082b4:	ee2d 5a06 	vmul.f32	s10, s26, s12
 80082b8:	ee2e 3a03 	vmul.f32	s6, s28, s6
 80082bc:	ee6d 7a27 	vmul.f32	s15, s26, s15
 80082c0:	ee25 6a86 	vmul.f32	s12, s11, s12
 80082c4:	ee74 4a89 	vadd.f32	s9, s9, s18
 80082c8:	ee34 3a43 	vsub.f32	s6, s8, s6
 80082cc:	ee78 8a85 	vadd.f32	s17, s17, s10
 80082d0:	ee36 6a67 	vsub.f32	s12, s12, s15
 80082d4:	44f4      	add	ip, lr
 80082d6:	45e2      	cmp	sl, ip
 80082d8:	edc3 3a00 	vstr	s7, [r3]
 80082dc:	edc3 6a01 	vstr	s13, [r3, #4]
 80082e0:	444e      	add	r6, r9
 80082e2:	ed07 1a01 	vstr	s2, [r7, #-4]
 80082e6:	edc7 0a00 	vstr	s1, [r7]
 80082ea:	444b      	add	r3, r9
 80082ec:	ed80 2a00 	vstr	s4, [r0]
 80082f0:	edc0 2a01 	vstr	s5, [r0, #4]
 80082f4:	444f      	add	r7, r9
 80082f6:	edc2 1a00 	vstr	s3, [r2]
 80082fa:	ed82 7a01 	vstr	s14, [r2, #4]
 80082fe:	4448      	add	r0, r9
 8008300:	ed85 8a00 	vstr	s16, [r5]
 8008304:	ed85 0a01 	vstr	s0, [r5, #4]
 8008308:	444a      	add	r2, r9
 800830a:	edc1 4a00 	vstr	s9, [r1]
 800830e:	444d      	add	r5, r9
 8008310:	ed81 3a01 	vstr	s6, [r1, #4]
 8008314:	edc4 8a00 	vstr	s17, [r4]
 8008318:	ed84 6a01 	vstr	s12, [r4, #4]
 800831c:	4449      	add	r1, r9
 800831e:	444c      	add	r4, r9
 8008320:	f63f aeea 	bhi.w	80080f8 <arm_radix8_butterfly_f32+0x318>
 8008324:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008326:	3308      	adds	r3, #8
 8008328:	930a      	str	r3, [sp, #40]	@ 0x28
 800832a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800832c:	3308      	adds	r3, #8
 800832e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008330:	9b08      	ldr	r3, [sp, #32]
 8008332:	3308      	adds	r3, #8
 8008334:	9308      	str	r3, [sp, #32]
 8008336:	9b07      	ldr	r3, [sp, #28]
 8008338:	3308      	adds	r3, #8
 800833a:	9307      	str	r3, [sp, #28]
 800833c:	9b06      	ldr	r3, [sp, #24]
 800833e:	3308      	adds	r3, #8
 8008340:	9306      	str	r3, [sp, #24]
 8008342:	9b05      	ldr	r3, [sp, #20]
 8008344:	3308      	adds	r3, #8
 8008346:	9305      	str	r3, [sp, #20]
 8008348:	9b04      	ldr	r3, [sp, #16]
 800834a:	3308      	adds	r3, #8
 800834c:	9304      	str	r3, [sp, #16]
 800834e:	9b03      	ldr	r3, [sp, #12]
 8008350:	3308      	adds	r3, #8
 8008352:	9303      	str	r3, [sp, #12]
 8008354:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008356:	f108 0801 	add.w	r8, r8, #1
 800835a:	4543      	cmp	r3, r8
 800835c:	f47f ae72 	bne.w	8008044 <arm_radix8_butterfly_f32+0x264>
 8008360:	469b      	mov	fp, r3
 8008362:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008364:	00db      	lsls	r3, r3, #3
 8008366:	b29b      	uxth	r3, r3
 8008368:	46d1      	mov	r9, sl
 800836a:	930e      	str	r3, [sp, #56]	@ 0x38
 800836c:	e547      	b.n	8007dfe <arm_radix8_butterfly_f32+0x1e>
 800836e:	b013      	add	sp, #76	@ 0x4c
 8008370:	ecbd 8b10 	vpop	{d8-d15}
 8008374:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008378 <sqrtf>:
 8008378:	b508      	push	{r3, lr}
 800837a:	ed2d 8b02 	vpush	{d8}
 800837e:	eeb0 8a40 	vmov.f32	s16, s0
 8008382:	f000 f941 	bl	8008608 <__ieee754_sqrtf>
 8008386:	eeb4 8a48 	vcmp.f32	s16, s16
 800838a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800838e:	d60c      	bvs.n	80083aa <sqrtf+0x32>
 8008390:	eddf 8a07 	vldr	s17, [pc, #28]	@ 80083b0 <sqrtf+0x38>
 8008394:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8008398:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800839c:	d505      	bpl.n	80083aa <sqrtf+0x32>
 800839e:	f001 fb1b 	bl	80099d8 <__errno>
 80083a2:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 80083a6:	2321      	movs	r3, #33	@ 0x21
 80083a8:	6003      	str	r3, [r0, #0]
 80083aa:	ecbd 8b02 	vpop	{d8}
 80083ae:	bd08      	pop	{r3, pc}
 80083b0:	00000000 	.word	0x00000000

080083b4 <cosf>:
 80083b4:	ee10 3a10 	vmov	r3, s0
 80083b8:	b507      	push	{r0, r1, r2, lr}
 80083ba:	4a1e      	ldr	r2, [pc, #120]	@ (8008434 <cosf+0x80>)
 80083bc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80083c0:	4293      	cmp	r3, r2
 80083c2:	d806      	bhi.n	80083d2 <cosf+0x1e>
 80083c4:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 8008438 <cosf+0x84>
 80083c8:	b003      	add	sp, #12
 80083ca:	f85d eb04 	ldr.w	lr, [sp], #4
 80083ce:	f000 b87b 	b.w	80084c8 <__kernel_cosf>
 80083d2:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80083d6:	d304      	bcc.n	80083e2 <cosf+0x2e>
 80083d8:	ee30 0a40 	vsub.f32	s0, s0, s0
 80083dc:	b003      	add	sp, #12
 80083de:	f85d fb04 	ldr.w	pc, [sp], #4
 80083e2:	4668      	mov	r0, sp
 80083e4:	f000 f914 	bl	8008610 <__ieee754_rem_pio2f>
 80083e8:	f000 0003 	and.w	r0, r0, #3
 80083ec:	2801      	cmp	r0, #1
 80083ee:	d009      	beq.n	8008404 <cosf+0x50>
 80083f0:	2802      	cmp	r0, #2
 80083f2:	d010      	beq.n	8008416 <cosf+0x62>
 80083f4:	b9b0      	cbnz	r0, 8008424 <cosf+0x70>
 80083f6:	eddd 0a01 	vldr	s1, [sp, #4]
 80083fa:	ed9d 0a00 	vldr	s0, [sp]
 80083fe:	f000 f863 	bl	80084c8 <__kernel_cosf>
 8008402:	e7eb      	b.n	80083dc <cosf+0x28>
 8008404:	eddd 0a01 	vldr	s1, [sp, #4]
 8008408:	ed9d 0a00 	vldr	s0, [sp]
 800840c:	f000 f8b4 	bl	8008578 <__kernel_sinf>
 8008410:	eeb1 0a40 	vneg.f32	s0, s0
 8008414:	e7e2      	b.n	80083dc <cosf+0x28>
 8008416:	eddd 0a01 	vldr	s1, [sp, #4]
 800841a:	ed9d 0a00 	vldr	s0, [sp]
 800841e:	f000 f853 	bl	80084c8 <__kernel_cosf>
 8008422:	e7f5      	b.n	8008410 <cosf+0x5c>
 8008424:	eddd 0a01 	vldr	s1, [sp, #4]
 8008428:	ed9d 0a00 	vldr	s0, [sp]
 800842c:	2001      	movs	r0, #1
 800842e:	f000 f8a3 	bl	8008578 <__kernel_sinf>
 8008432:	e7d3      	b.n	80083dc <cosf+0x28>
 8008434:	3f490fd8 	.word	0x3f490fd8
 8008438:	00000000 	.word	0x00000000

0800843c <sinf>:
 800843c:	ee10 3a10 	vmov	r3, s0
 8008440:	b507      	push	{r0, r1, r2, lr}
 8008442:	4a1f      	ldr	r2, [pc, #124]	@ (80084c0 <sinf+0x84>)
 8008444:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008448:	4293      	cmp	r3, r2
 800844a:	d807      	bhi.n	800845c <sinf+0x20>
 800844c:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 80084c4 <sinf+0x88>
 8008450:	2000      	movs	r0, #0
 8008452:	b003      	add	sp, #12
 8008454:	f85d eb04 	ldr.w	lr, [sp], #4
 8008458:	f000 b88e 	b.w	8008578 <__kernel_sinf>
 800845c:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8008460:	d304      	bcc.n	800846c <sinf+0x30>
 8008462:	ee30 0a40 	vsub.f32	s0, s0, s0
 8008466:	b003      	add	sp, #12
 8008468:	f85d fb04 	ldr.w	pc, [sp], #4
 800846c:	4668      	mov	r0, sp
 800846e:	f000 f8cf 	bl	8008610 <__ieee754_rem_pio2f>
 8008472:	f000 0003 	and.w	r0, r0, #3
 8008476:	2801      	cmp	r0, #1
 8008478:	d00a      	beq.n	8008490 <sinf+0x54>
 800847a:	2802      	cmp	r0, #2
 800847c:	d00f      	beq.n	800849e <sinf+0x62>
 800847e:	b9c0      	cbnz	r0, 80084b2 <sinf+0x76>
 8008480:	eddd 0a01 	vldr	s1, [sp, #4]
 8008484:	ed9d 0a00 	vldr	s0, [sp]
 8008488:	2001      	movs	r0, #1
 800848a:	f000 f875 	bl	8008578 <__kernel_sinf>
 800848e:	e7ea      	b.n	8008466 <sinf+0x2a>
 8008490:	eddd 0a01 	vldr	s1, [sp, #4]
 8008494:	ed9d 0a00 	vldr	s0, [sp]
 8008498:	f000 f816 	bl	80084c8 <__kernel_cosf>
 800849c:	e7e3      	b.n	8008466 <sinf+0x2a>
 800849e:	eddd 0a01 	vldr	s1, [sp, #4]
 80084a2:	ed9d 0a00 	vldr	s0, [sp]
 80084a6:	2001      	movs	r0, #1
 80084a8:	f000 f866 	bl	8008578 <__kernel_sinf>
 80084ac:	eeb1 0a40 	vneg.f32	s0, s0
 80084b0:	e7d9      	b.n	8008466 <sinf+0x2a>
 80084b2:	eddd 0a01 	vldr	s1, [sp, #4]
 80084b6:	ed9d 0a00 	vldr	s0, [sp]
 80084ba:	f000 f805 	bl	80084c8 <__kernel_cosf>
 80084be:	e7f5      	b.n	80084ac <sinf+0x70>
 80084c0:	3f490fd8 	.word	0x3f490fd8
 80084c4:	00000000 	.word	0x00000000

080084c8 <__kernel_cosf>:
 80084c8:	ee10 3a10 	vmov	r3, s0
 80084cc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80084d0:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 80084d4:	eef0 6a40 	vmov.f32	s13, s0
 80084d8:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80084dc:	d204      	bcs.n	80084e8 <__kernel_cosf+0x20>
 80084de:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 80084e2:	ee17 2a90 	vmov	r2, s15
 80084e6:	b342      	cbz	r2, 800853a <__kernel_cosf+0x72>
 80084e8:	ee26 7aa6 	vmul.f32	s14, s13, s13
 80084ec:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 8008558 <__kernel_cosf+0x90>
 80084f0:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 800855c <__kernel_cosf+0x94>
 80084f4:	4a1a      	ldr	r2, [pc, #104]	@ (8008560 <__kernel_cosf+0x98>)
 80084f6:	eea7 6a27 	vfma.f32	s12, s14, s15
 80084fa:	4293      	cmp	r3, r2
 80084fc:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8008564 <__kernel_cosf+0x9c>
 8008500:	eee6 7a07 	vfma.f32	s15, s12, s14
 8008504:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 8008568 <__kernel_cosf+0xa0>
 8008508:	eea7 6a87 	vfma.f32	s12, s15, s14
 800850c:	eddf 7a17 	vldr	s15, [pc, #92]	@ 800856c <__kernel_cosf+0xa4>
 8008510:	eee6 7a07 	vfma.f32	s15, s12, s14
 8008514:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 8008570 <__kernel_cosf+0xa8>
 8008518:	eea7 6a87 	vfma.f32	s12, s15, s14
 800851c:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 8008520:	ee26 6a07 	vmul.f32	s12, s12, s14
 8008524:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8008528:	eee7 0a06 	vfma.f32	s1, s14, s12
 800852c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008530:	d804      	bhi.n	800853c <__kernel_cosf+0x74>
 8008532:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8008536:	ee30 0a67 	vsub.f32	s0, s0, s15
 800853a:	4770      	bx	lr
 800853c:	4a0d      	ldr	r2, [pc, #52]	@ (8008574 <__kernel_cosf+0xac>)
 800853e:	4293      	cmp	r3, r2
 8008540:	bf9a      	itte	ls
 8008542:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 8008546:	ee07 3a10 	vmovls	s14, r3
 800854a:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 800854e:	ee30 0a47 	vsub.f32	s0, s0, s14
 8008552:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008556:	e7ec      	b.n	8008532 <__kernel_cosf+0x6a>
 8008558:	ad47d74e 	.word	0xad47d74e
 800855c:	310f74f6 	.word	0x310f74f6
 8008560:	3e999999 	.word	0x3e999999
 8008564:	b493f27c 	.word	0xb493f27c
 8008568:	37d00d01 	.word	0x37d00d01
 800856c:	bab60b61 	.word	0xbab60b61
 8008570:	3d2aaaab 	.word	0x3d2aaaab
 8008574:	3f480000 	.word	0x3f480000

08008578 <__kernel_sinf>:
 8008578:	ee10 3a10 	vmov	r3, s0
 800857c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008580:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8008584:	d204      	bcs.n	8008590 <__kernel_sinf+0x18>
 8008586:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800858a:	ee17 3a90 	vmov	r3, s15
 800858e:	b35b      	cbz	r3, 80085e8 <__kernel_sinf+0x70>
 8008590:	ee20 7a00 	vmul.f32	s14, s0, s0
 8008594:	eddf 7a15 	vldr	s15, [pc, #84]	@ 80085ec <__kernel_sinf+0x74>
 8008598:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 80085f0 <__kernel_sinf+0x78>
 800859c:	eea7 6a27 	vfma.f32	s12, s14, s15
 80085a0:	eddf 7a14 	vldr	s15, [pc, #80]	@ 80085f4 <__kernel_sinf+0x7c>
 80085a4:	eee6 7a07 	vfma.f32	s15, s12, s14
 80085a8:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 80085f8 <__kernel_sinf+0x80>
 80085ac:	eea7 6a87 	vfma.f32	s12, s15, s14
 80085b0:	eddf 7a12 	vldr	s15, [pc, #72]	@ 80085fc <__kernel_sinf+0x84>
 80085b4:	ee60 6a07 	vmul.f32	s13, s0, s14
 80085b8:	eee6 7a07 	vfma.f32	s15, s12, s14
 80085bc:	b930      	cbnz	r0, 80085cc <__kernel_sinf+0x54>
 80085be:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 8008600 <__kernel_sinf+0x88>
 80085c2:	eea7 6a27 	vfma.f32	s12, s14, s15
 80085c6:	eea6 0a26 	vfma.f32	s0, s12, s13
 80085ca:	4770      	bx	lr
 80085cc:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 80085d0:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 80085d4:	eee0 7a86 	vfma.f32	s15, s1, s12
 80085d8:	eed7 0a87 	vfnms.f32	s1, s15, s14
 80085dc:	eddf 7a09 	vldr	s15, [pc, #36]	@ 8008604 <__kernel_sinf+0x8c>
 80085e0:	eee6 0aa7 	vfma.f32	s1, s13, s15
 80085e4:	ee30 0a60 	vsub.f32	s0, s0, s1
 80085e8:	4770      	bx	lr
 80085ea:	bf00      	nop
 80085ec:	2f2ec9d3 	.word	0x2f2ec9d3
 80085f0:	b2d72f34 	.word	0xb2d72f34
 80085f4:	3638ef1b 	.word	0x3638ef1b
 80085f8:	b9500d01 	.word	0xb9500d01
 80085fc:	3c088889 	.word	0x3c088889
 8008600:	be2aaaab 	.word	0xbe2aaaab
 8008604:	3e2aaaab 	.word	0x3e2aaaab

08008608 <__ieee754_sqrtf>:
 8008608:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800860c:	4770      	bx	lr
	...

08008610 <__ieee754_rem_pio2f>:
 8008610:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008612:	ee10 6a10 	vmov	r6, s0
 8008616:	4b88      	ldr	r3, [pc, #544]	@ (8008838 <__ieee754_rem_pio2f+0x228>)
 8008618:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 800861c:	429d      	cmp	r5, r3
 800861e:	b087      	sub	sp, #28
 8008620:	4604      	mov	r4, r0
 8008622:	d805      	bhi.n	8008630 <__ieee754_rem_pio2f+0x20>
 8008624:	2300      	movs	r3, #0
 8008626:	ed80 0a00 	vstr	s0, [r0]
 800862a:	6043      	str	r3, [r0, #4]
 800862c:	2000      	movs	r0, #0
 800862e:	e022      	b.n	8008676 <__ieee754_rem_pio2f+0x66>
 8008630:	4b82      	ldr	r3, [pc, #520]	@ (800883c <__ieee754_rem_pio2f+0x22c>)
 8008632:	429d      	cmp	r5, r3
 8008634:	d83a      	bhi.n	80086ac <__ieee754_rem_pio2f+0x9c>
 8008636:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800863a:	2e00      	cmp	r6, #0
 800863c:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 8008840 <__ieee754_rem_pio2f+0x230>
 8008640:	4a80      	ldr	r2, [pc, #512]	@ (8008844 <__ieee754_rem_pio2f+0x234>)
 8008642:	f023 030f 	bic.w	r3, r3, #15
 8008646:	dd18      	ble.n	800867a <__ieee754_rem_pio2f+0x6a>
 8008648:	4293      	cmp	r3, r2
 800864a:	ee70 7a47 	vsub.f32	s15, s0, s14
 800864e:	bf09      	itett	eq
 8008650:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 8008848 <__ieee754_rem_pio2f+0x238>
 8008654:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 800884c <__ieee754_rem_pio2f+0x23c>
 8008658:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 8008850 <__ieee754_rem_pio2f+0x240>
 800865c:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8008660:	ee37 7ae6 	vsub.f32	s14, s15, s13
 8008664:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008668:	ed80 7a00 	vstr	s14, [r0]
 800866c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008670:	edc0 7a01 	vstr	s15, [r0, #4]
 8008674:	2001      	movs	r0, #1
 8008676:	b007      	add	sp, #28
 8008678:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800867a:	4293      	cmp	r3, r2
 800867c:	ee70 7a07 	vadd.f32	s15, s0, s14
 8008680:	bf09      	itett	eq
 8008682:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 8008848 <__ieee754_rem_pio2f+0x238>
 8008686:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 800884c <__ieee754_rem_pio2f+0x23c>
 800868a:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 8008850 <__ieee754_rem_pio2f+0x240>
 800868e:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8008692:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8008696:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800869a:	ed80 7a00 	vstr	s14, [r0]
 800869e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80086a2:	edc0 7a01 	vstr	s15, [r0, #4]
 80086a6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80086aa:	e7e4      	b.n	8008676 <__ieee754_rem_pio2f+0x66>
 80086ac:	4b69      	ldr	r3, [pc, #420]	@ (8008854 <__ieee754_rem_pio2f+0x244>)
 80086ae:	429d      	cmp	r5, r3
 80086b0:	d873      	bhi.n	800879a <__ieee754_rem_pio2f+0x18a>
 80086b2:	f000 f8dd 	bl	8008870 <fabsf>
 80086b6:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 8008858 <__ieee754_rem_pio2f+0x248>
 80086ba:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80086be:	eee0 7a07 	vfma.f32	s15, s0, s14
 80086c2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80086c6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80086ca:	ee17 0a90 	vmov	r0, s15
 80086ce:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8008840 <__ieee754_rem_pio2f+0x230>
 80086d2:	eea7 0a67 	vfms.f32	s0, s14, s15
 80086d6:	281f      	cmp	r0, #31
 80086d8:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800884c <__ieee754_rem_pio2f+0x23c>
 80086dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80086e0:	eeb1 6a47 	vneg.f32	s12, s14
 80086e4:	ee70 6a67 	vsub.f32	s13, s0, s15
 80086e8:	ee16 1a90 	vmov	r1, s13
 80086ec:	dc09      	bgt.n	8008702 <__ieee754_rem_pio2f+0xf2>
 80086ee:	4a5b      	ldr	r2, [pc, #364]	@ (800885c <__ieee754_rem_pio2f+0x24c>)
 80086f0:	1e47      	subs	r7, r0, #1
 80086f2:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 80086f6:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 80086fa:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80086fe:	4293      	cmp	r3, r2
 8008700:	d107      	bne.n	8008712 <__ieee754_rem_pio2f+0x102>
 8008702:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 8008706:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 800870a:	2a08      	cmp	r2, #8
 800870c:	ea4f 53e5 	mov.w	r3, r5, asr #23
 8008710:	dc14      	bgt.n	800873c <__ieee754_rem_pio2f+0x12c>
 8008712:	6021      	str	r1, [r4, #0]
 8008714:	ed94 7a00 	vldr	s14, [r4]
 8008718:	ee30 0a47 	vsub.f32	s0, s0, s14
 800871c:	2e00      	cmp	r6, #0
 800871e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8008722:	ed84 0a01 	vstr	s0, [r4, #4]
 8008726:	daa6      	bge.n	8008676 <__ieee754_rem_pio2f+0x66>
 8008728:	eeb1 7a47 	vneg.f32	s14, s14
 800872c:	eeb1 0a40 	vneg.f32	s0, s0
 8008730:	ed84 7a00 	vstr	s14, [r4]
 8008734:	ed84 0a01 	vstr	s0, [r4, #4]
 8008738:	4240      	negs	r0, r0
 800873a:	e79c      	b.n	8008676 <__ieee754_rem_pio2f+0x66>
 800873c:	eddf 5a42 	vldr	s11, [pc, #264]	@ 8008848 <__ieee754_rem_pio2f+0x238>
 8008740:	eef0 6a40 	vmov.f32	s13, s0
 8008744:	eee6 6a25 	vfma.f32	s13, s12, s11
 8008748:	ee70 7a66 	vsub.f32	s15, s0, s13
 800874c:	eee6 7a25 	vfma.f32	s15, s12, s11
 8008750:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8008850 <__ieee754_rem_pio2f+0x240>
 8008754:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8008758:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800875c:	ee15 2a90 	vmov	r2, s11
 8008760:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8008764:	1a5b      	subs	r3, r3, r1
 8008766:	2b19      	cmp	r3, #25
 8008768:	dc04      	bgt.n	8008774 <__ieee754_rem_pio2f+0x164>
 800876a:	edc4 5a00 	vstr	s11, [r4]
 800876e:	eeb0 0a66 	vmov.f32	s0, s13
 8008772:	e7cf      	b.n	8008714 <__ieee754_rem_pio2f+0x104>
 8008774:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 8008860 <__ieee754_rem_pio2f+0x250>
 8008778:	eeb0 0a66 	vmov.f32	s0, s13
 800877c:	eea6 0a25 	vfma.f32	s0, s12, s11
 8008780:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8008784:	eddf 6a37 	vldr	s13, [pc, #220]	@ 8008864 <__ieee754_rem_pio2f+0x254>
 8008788:	eee6 7a25 	vfma.f32	s15, s12, s11
 800878c:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8008790:	ee30 7a67 	vsub.f32	s14, s0, s15
 8008794:	ed84 7a00 	vstr	s14, [r4]
 8008798:	e7bc      	b.n	8008714 <__ieee754_rem_pio2f+0x104>
 800879a:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 800879e:	d306      	bcc.n	80087ae <__ieee754_rem_pio2f+0x19e>
 80087a0:	ee70 7a40 	vsub.f32	s15, s0, s0
 80087a4:	edc0 7a01 	vstr	s15, [r0, #4]
 80087a8:	edc0 7a00 	vstr	s15, [r0]
 80087ac:	e73e      	b.n	800862c <__ieee754_rem_pio2f+0x1c>
 80087ae:	15ea      	asrs	r2, r5, #23
 80087b0:	3a86      	subs	r2, #134	@ 0x86
 80087b2:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 80087b6:	ee07 3a90 	vmov	s15, r3
 80087ba:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80087be:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 8008868 <__ieee754_rem_pio2f+0x258>
 80087c2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80087c6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80087ca:	ed8d 7a03 	vstr	s14, [sp, #12]
 80087ce:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80087d2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80087d6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80087da:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80087de:	ed8d 7a04 	vstr	s14, [sp, #16]
 80087e2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80087e6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80087ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80087ee:	edcd 7a05 	vstr	s15, [sp, #20]
 80087f2:	d11e      	bne.n	8008832 <__ieee754_rem_pio2f+0x222>
 80087f4:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80087f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80087fc:	bf0c      	ite	eq
 80087fe:	2301      	moveq	r3, #1
 8008800:	2302      	movne	r3, #2
 8008802:	491a      	ldr	r1, [pc, #104]	@ (800886c <__ieee754_rem_pio2f+0x25c>)
 8008804:	9101      	str	r1, [sp, #4]
 8008806:	2102      	movs	r1, #2
 8008808:	9100      	str	r1, [sp, #0]
 800880a:	a803      	add	r0, sp, #12
 800880c:	4621      	mov	r1, r4
 800880e:	f000 f837 	bl	8008880 <__kernel_rem_pio2f>
 8008812:	2e00      	cmp	r6, #0
 8008814:	f6bf af2f 	bge.w	8008676 <__ieee754_rem_pio2f+0x66>
 8008818:	edd4 7a00 	vldr	s15, [r4]
 800881c:	eef1 7a67 	vneg.f32	s15, s15
 8008820:	edc4 7a00 	vstr	s15, [r4]
 8008824:	edd4 7a01 	vldr	s15, [r4, #4]
 8008828:	eef1 7a67 	vneg.f32	s15, s15
 800882c:	edc4 7a01 	vstr	s15, [r4, #4]
 8008830:	e782      	b.n	8008738 <__ieee754_rem_pio2f+0x128>
 8008832:	2303      	movs	r3, #3
 8008834:	e7e5      	b.n	8008802 <__ieee754_rem_pio2f+0x1f2>
 8008836:	bf00      	nop
 8008838:	3f490fd8 	.word	0x3f490fd8
 800883c:	4016cbe3 	.word	0x4016cbe3
 8008840:	3fc90f80 	.word	0x3fc90f80
 8008844:	3fc90fd0 	.word	0x3fc90fd0
 8008848:	37354400 	.word	0x37354400
 800884c:	37354443 	.word	0x37354443
 8008850:	2e85a308 	.word	0x2e85a308
 8008854:	43490f80 	.word	0x43490f80
 8008858:	3f22f984 	.word	0x3f22f984
 800885c:	08029228 	.word	0x08029228
 8008860:	2e85a300 	.word	0x2e85a300
 8008864:	248d3132 	.word	0x248d3132
 8008868:	43800000 	.word	0x43800000
 800886c:	080292a8 	.word	0x080292a8

08008870 <fabsf>:
 8008870:	ee10 3a10 	vmov	r3, s0
 8008874:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008878:	ee00 3a10 	vmov	s0, r3
 800887c:	4770      	bx	lr
	...

08008880 <__kernel_rem_pio2f>:
 8008880:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008884:	ed2d 8b04 	vpush	{d8-d9}
 8008888:	b0d9      	sub	sp, #356	@ 0x164
 800888a:	4690      	mov	r8, r2
 800888c:	9001      	str	r0, [sp, #4]
 800888e:	4ab9      	ldr	r2, [pc, #740]	@ (8008b74 <__kernel_rem_pio2f+0x2f4>)
 8008890:	9866      	ldr	r0, [sp, #408]	@ 0x198
 8008892:	f118 0f04 	cmn.w	r8, #4
 8008896:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 800889a:	460f      	mov	r7, r1
 800889c:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 80088a0:	db27      	blt.n	80088f2 <__kernel_rem_pio2f+0x72>
 80088a2:	f1b8 0203 	subs.w	r2, r8, #3
 80088a6:	bf48      	it	mi
 80088a8:	f108 0204 	addmi.w	r2, r8, #4
 80088ac:	10d2      	asrs	r2, r2, #3
 80088ae:	1c55      	adds	r5, r2, #1
 80088b0:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 80088b2:	ed9f 7ab4 	vldr	s14, [pc, #720]	@ 8008b84 <__kernel_rem_pio2f+0x304>
 80088b6:	00e8      	lsls	r0, r5, #3
 80088b8:	eba2 060b 	sub.w	r6, r2, fp
 80088bc:	9002      	str	r0, [sp, #8]
 80088be:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 80088c2:	eb0a 0c0b 	add.w	ip, sl, fp
 80088c6:	ac1c      	add	r4, sp, #112	@ 0x70
 80088c8:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 80088cc:	2000      	movs	r0, #0
 80088ce:	4560      	cmp	r0, ip
 80088d0:	dd11      	ble.n	80088f6 <__kernel_rem_pio2f+0x76>
 80088d2:	a91c      	add	r1, sp, #112	@ 0x70
 80088d4:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 80088d8:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 80088dc:	f04f 0c00 	mov.w	ip, #0
 80088e0:	45d4      	cmp	ip, sl
 80088e2:	dc27      	bgt.n	8008934 <__kernel_rem_pio2f+0xb4>
 80088e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80088e8:	eddf 7aa6 	vldr	s15, [pc, #664]	@ 8008b84 <__kernel_rem_pio2f+0x304>
 80088ec:	4606      	mov	r6, r0
 80088ee:	2400      	movs	r4, #0
 80088f0:	e016      	b.n	8008920 <__kernel_rem_pio2f+0xa0>
 80088f2:	2200      	movs	r2, #0
 80088f4:	e7db      	b.n	80088ae <__kernel_rem_pio2f+0x2e>
 80088f6:	42c6      	cmn	r6, r0
 80088f8:	bf5d      	ittte	pl
 80088fa:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 80088fe:	ee07 1a90 	vmovpl	s15, r1
 8008902:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8008906:	eef0 7a47 	vmovmi.f32	s15, s14
 800890a:	ece4 7a01 	vstmia	r4!, {s15}
 800890e:	3001      	adds	r0, #1
 8008910:	e7dd      	b.n	80088ce <__kernel_rem_pio2f+0x4e>
 8008912:	ecfe 6a01 	vldmia	lr!, {s13}
 8008916:	ed96 7a00 	vldr	s14, [r6]
 800891a:	eee6 7a87 	vfma.f32	s15, s13, s14
 800891e:	3401      	adds	r4, #1
 8008920:	455c      	cmp	r4, fp
 8008922:	f1a6 0604 	sub.w	r6, r6, #4
 8008926:	ddf4      	ble.n	8008912 <__kernel_rem_pio2f+0x92>
 8008928:	ece9 7a01 	vstmia	r9!, {s15}
 800892c:	f10c 0c01 	add.w	ip, ip, #1
 8008930:	3004      	adds	r0, #4
 8008932:	e7d5      	b.n	80088e0 <__kernel_rem_pio2f+0x60>
 8008934:	a908      	add	r1, sp, #32
 8008936:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800893a:	9104      	str	r1, [sp, #16]
 800893c:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800893e:	eddf 8a90 	vldr	s17, [pc, #576]	@ 8008b80 <__kernel_rem_pio2f+0x300>
 8008942:	ed9f 9a8e 	vldr	s18, [pc, #568]	@ 8008b7c <__kernel_rem_pio2f+0x2fc>
 8008946:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800894a:	9203      	str	r2, [sp, #12]
 800894c:	4654      	mov	r4, sl
 800894e:	00a2      	lsls	r2, r4, #2
 8008950:	9205      	str	r2, [sp, #20]
 8008952:	aa58      	add	r2, sp, #352	@ 0x160
 8008954:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8008958:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 800895c:	a944      	add	r1, sp, #272	@ 0x110
 800895e:	aa08      	add	r2, sp, #32
 8008960:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 8008964:	4694      	mov	ip, r2
 8008966:	4626      	mov	r6, r4
 8008968:	2e00      	cmp	r6, #0
 800896a:	f1a0 0004 	sub.w	r0, r0, #4
 800896e:	dc4c      	bgt.n	8008a0a <__kernel_rem_pio2f+0x18a>
 8008970:	4628      	mov	r0, r5
 8008972:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008976:	f000 fa39 	bl	8008dec <scalbnf>
 800897a:	eeb0 8a40 	vmov.f32	s16, s0
 800897e:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 8008982:	ee28 0a00 	vmul.f32	s0, s16, s0
 8008986:	f000 f9ed 	bl	8008d64 <floorf>
 800898a:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 800898e:	eea0 8a67 	vfms.f32	s16, s0, s15
 8008992:	2d00      	cmp	r5, #0
 8008994:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008998:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800899c:	ee17 9a90 	vmov	r9, s15
 80089a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80089a4:	ee38 8a67 	vsub.f32	s16, s16, s15
 80089a8:	dd41      	ble.n	8008a2e <__kernel_rem_pio2f+0x1ae>
 80089aa:	f104 3cff 	add.w	ip, r4, #4294967295	@ 0xffffffff
 80089ae:	a908      	add	r1, sp, #32
 80089b0:	f1c5 0e08 	rsb	lr, r5, #8
 80089b4:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 80089b8:	fa46 f00e 	asr.w	r0, r6, lr
 80089bc:	4481      	add	r9, r0
 80089be:	fa00 f00e 	lsl.w	r0, r0, lr
 80089c2:	1a36      	subs	r6, r6, r0
 80089c4:	f1c5 0007 	rsb	r0, r5, #7
 80089c8:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 80089cc:	4106      	asrs	r6, r0
 80089ce:	2e00      	cmp	r6, #0
 80089d0:	dd3c      	ble.n	8008a4c <__kernel_rem_pio2f+0x1cc>
 80089d2:	f04f 0e00 	mov.w	lr, #0
 80089d6:	f109 0901 	add.w	r9, r9, #1
 80089da:	4670      	mov	r0, lr
 80089dc:	4574      	cmp	r4, lr
 80089de:	dc68      	bgt.n	8008ab2 <__kernel_rem_pio2f+0x232>
 80089e0:	2d00      	cmp	r5, #0
 80089e2:	dd03      	ble.n	80089ec <__kernel_rem_pio2f+0x16c>
 80089e4:	2d01      	cmp	r5, #1
 80089e6:	d074      	beq.n	8008ad2 <__kernel_rem_pio2f+0x252>
 80089e8:	2d02      	cmp	r5, #2
 80089ea:	d07d      	beq.n	8008ae8 <__kernel_rem_pio2f+0x268>
 80089ec:	2e02      	cmp	r6, #2
 80089ee:	d12d      	bne.n	8008a4c <__kernel_rem_pio2f+0x1cc>
 80089f0:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80089f4:	ee30 8a48 	vsub.f32	s16, s0, s16
 80089f8:	b340      	cbz	r0, 8008a4c <__kernel_rem_pio2f+0x1cc>
 80089fa:	4628      	mov	r0, r5
 80089fc:	9306      	str	r3, [sp, #24]
 80089fe:	f000 f9f5 	bl	8008dec <scalbnf>
 8008a02:	9b06      	ldr	r3, [sp, #24]
 8008a04:	ee38 8a40 	vsub.f32	s16, s16, s0
 8008a08:	e020      	b.n	8008a4c <__kernel_rem_pio2f+0x1cc>
 8008a0a:	ee60 7a28 	vmul.f32	s15, s0, s17
 8008a0e:	3e01      	subs	r6, #1
 8008a10:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008a14:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008a18:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8008a1c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8008a20:	ecac 0a01 	vstmia	ip!, {s0}
 8008a24:	ed90 0a00 	vldr	s0, [r0]
 8008a28:	ee37 0a80 	vadd.f32	s0, s15, s0
 8008a2c:	e79c      	b.n	8008968 <__kernel_rem_pio2f+0xe8>
 8008a2e:	d105      	bne.n	8008a3c <__kernel_rem_pio2f+0x1bc>
 8008a30:	1e60      	subs	r0, r4, #1
 8008a32:	a908      	add	r1, sp, #32
 8008a34:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 8008a38:	11f6      	asrs	r6, r6, #7
 8008a3a:	e7c8      	b.n	80089ce <__kernel_rem_pio2f+0x14e>
 8008a3c:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8008a40:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8008a44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a48:	da31      	bge.n	8008aae <__kernel_rem_pio2f+0x22e>
 8008a4a:	2600      	movs	r6, #0
 8008a4c:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8008a50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a54:	f040 8098 	bne.w	8008b88 <__kernel_rem_pio2f+0x308>
 8008a58:	1e60      	subs	r0, r4, #1
 8008a5a:	2200      	movs	r2, #0
 8008a5c:	4550      	cmp	r0, sl
 8008a5e:	da4b      	bge.n	8008af8 <__kernel_rem_pio2f+0x278>
 8008a60:	2a00      	cmp	r2, #0
 8008a62:	d065      	beq.n	8008b30 <__kernel_rem_pio2f+0x2b0>
 8008a64:	3c01      	subs	r4, #1
 8008a66:	ab08      	add	r3, sp, #32
 8008a68:	3d08      	subs	r5, #8
 8008a6a:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d0f8      	beq.n	8008a64 <__kernel_rem_pio2f+0x1e4>
 8008a72:	4628      	mov	r0, r5
 8008a74:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8008a78:	f000 f9b8 	bl	8008dec <scalbnf>
 8008a7c:	1c63      	adds	r3, r4, #1
 8008a7e:	aa44      	add	r2, sp, #272	@ 0x110
 8008a80:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8008b80 <__kernel_rem_pio2f+0x300>
 8008a84:	0099      	lsls	r1, r3, #2
 8008a86:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8008a8a:	4623      	mov	r3, r4
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	f280 80a9 	bge.w	8008be4 <__kernel_rem_pio2f+0x364>
 8008a92:	4623      	mov	r3, r4
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	f2c0 80c7 	blt.w	8008c28 <__kernel_rem_pio2f+0x3a8>
 8008a9a:	aa44      	add	r2, sp, #272	@ 0x110
 8008a9c:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8008aa0:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 8008b78 <__kernel_rem_pio2f+0x2f8>
 8008aa4:	eddf 7a37 	vldr	s15, [pc, #220]	@ 8008b84 <__kernel_rem_pio2f+0x304>
 8008aa8:	2000      	movs	r0, #0
 8008aaa:	1ae2      	subs	r2, r4, r3
 8008aac:	e0b1      	b.n	8008c12 <__kernel_rem_pio2f+0x392>
 8008aae:	2602      	movs	r6, #2
 8008ab0:	e78f      	b.n	80089d2 <__kernel_rem_pio2f+0x152>
 8008ab2:	f852 1b04 	ldr.w	r1, [r2], #4
 8008ab6:	b948      	cbnz	r0, 8008acc <__kernel_rem_pio2f+0x24c>
 8008ab8:	b121      	cbz	r1, 8008ac4 <__kernel_rem_pio2f+0x244>
 8008aba:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 8008abe:	f842 1c04 	str.w	r1, [r2, #-4]
 8008ac2:	2101      	movs	r1, #1
 8008ac4:	f10e 0e01 	add.w	lr, lr, #1
 8008ac8:	4608      	mov	r0, r1
 8008aca:	e787      	b.n	80089dc <__kernel_rem_pio2f+0x15c>
 8008acc:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 8008ad0:	e7f5      	b.n	8008abe <__kernel_rem_pio2f+0x23e>
 8008ad2:	f104 3cff 	add.w	ip, r4, #4294967295	@ 0xffffffff
 8008ad6:	aa08      	add	r2, sp, #32
 8008ad8:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8008adc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8008ae0:	a908      	add	r1, sp, #32
 8008ae2:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 8008ae6:	e781      	b.n	80089ec <__kernel_rem_pio2f+0x16c>
 8008ae8:	f104 3cff 	add.w	ip, r4, #4294967295	@ 0xffffffff
 8008aec:	aa08      	add	r2, sp, #32
 8008aee:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8008af2:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8008af6:	e7f3      	b.n	8008ae0 <__kernel_rem_pio2f+0x260>
 8008af8:	a908      	add	r1, sp, #32
 8008afa:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8008afe:	3801      	subs	r0, #1
 8008b00:	430a      	orrs	r2, r1
 8008b02:	e7ab      	b.n	8008a5c <__kernel_rem_pio2f+0x1dc>
 8008b04:	3201      	adds	r2, #1
 8008b06:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 8008b0a:	2e00      	cmp	r6, #0
 8008b0c:	d0fa      	beq.n	8008b04 <__kernel_rem_pio2f+0x284>
 8008b0e:	9905      	ldr	r1, [sp, #20]
 8008b10:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 8008b14:	eb0d 0001 	add.w	r0, sp, r1
 8008b18:	18e6      	adds	r6, r4, r3
 8008b1a:	a91c      	add	r1, sp, #112	@ 0x70
 8008b1c:	f104 0c01 	add.w	ip, r4, #1
 8008b20:	384c      	subs	r0, #76	@ 0x4c
 8008b22:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 8008b26:	4422      	add	r2, r4
 8008b28:	4562      	cmp	r2, ip
 8008b2a:	da04      	bge.n	8008b36 <__kernel_rem_pio2f+0x2b6>
 8008b2c:	4614      	mov	r4, r2
 8008b2e:	e70e      	b.n	800894e <__kernel_rem_pio2f+0xce>
 8008b30:	9804      	ldr	r0, [sp, #16]
 8008b32:	2201      	movs	r2, #1
 8008b34:	e7e7      	b.n	8008b06 <__kernel_rem_pio2f+0x286>
 8008b36:	9903      	ldr	r1, [sp, #12]
 8008b38:	f8dd e004 	ldr.w	lr, [sp, #4]
 8008b3c:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 8008b40:	9105      	str	r1, [sp, #20]
 8008b42:	ee07 1a90 	vmov	s15, r1
 8008b46:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008b4a:	2400      	movs	r4, #0
 8008b4c:	ece6 7a01 	vstmia	r6!, {s15}
 8008b50:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 8008b84 <__kernel_rem_pio2f+0x304>
 8008b54:	46b1      	mov	r9, r6
 8008b56:	455c      	cmp	r4, fp
 8008b58:	dd04      	ble.n	8008b64 <__kernel_rem_pio2f+0x2e4>
 8008b5a:	ece0 7a01 	vstmia	r0!, {s15}
 8008b5e:	f10c 0c01 	add.w	ip, ip, #1
 8008b62:	e7e1      	b.n	8008b28 <__kernel_rem_pio2f+0x2a8>
 8008b64:	ecfe 6a01 	vldmia	lr!, {s13}
 8008b68:	ed39 7a01 	vldmdb	r9!, {s14}
 8008b6c:	3401      	adds	r4, #1
 8008b6e:	eee6 7a87 	vfma.f32	s15, s13, s14
 8008b72:	e7f0      	b.n	8008b56 <__kernel_rem_pio2f+0x2d6>
 8008b74:	080295ec 	.word	0x080295ec
 8008b78:	080295c0 	.word	0x080295c0
 8008b7c:	43800000 	.word	0x43800000
 8008b80:	3b800000 	.word	0x3b800000
 8008b84:	00000000 	.word	0x00000000
 8008b88:	9b02      	ldr	r3, [sp, #8]
 8008b8a:	eeb0 0a48 	vmov.f32	s0, s16
 8008b8e:	eba3 0008 	sub.w	r0, r3, r8
 8008b92:	f000 f92b 	bl	8008dec <scalbnf>
 8008b96:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 8008b7c <__kernel_rem_pio2f+0x2fc>
 8008b9a:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8008b9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ba2:	db19      	blt.n	8008bd8 <__kernel_rem_pio2f+0x358>
 8008ba4:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 8008b80 <__kernel_rem_pio2f+0x300>
 8008ba8:	ee60 7a27 	vmul.f32	s15, s0, s15
 8008bac:	aa08      	add	r2, sp, #32
 8008bae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008bb2:	3508      	adds	r5, #8
 8008bb4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008bb8:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8008bbc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008bc0:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8008bc4:	ee10 3a10 	vmov	r3, s0
 8008bc8:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8008bcc:	ee17 3a90 	vmov	r3, s15
 8008bd0:	3401      	adds	r4, #1
 8008bd2:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8008bd6:	e74c      	b.n	8008a72 <__kernel_rem_pio2f+0x1f2>
 8008bd8:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8008bdc:	aa08      	add	r2, sp, #32
 8008bde:	ee10 3a10 	vmov	r3, s0
 8008be2:	e7f6      	b.n	8008bd2 <__kernel_rem_pio2f+0x352>
 8008be4:	a808      	add	r0, sp, #32
 8008be6:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8008bea:	9001      	str	r0, [sp, #4]
 8008bec:	ee07 0a90 	vmov	s15, r0
 8008bf0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008bf4:	3b01      	subs	r3, #1
 8008bf6:	ee67 7a80 	vmul.f32	s15, s15, s0
 8008bfa:	ee20 0a07 	vmul.f32	s0, s0, s14
 8008bfe:	ed62 7a01 	vstmdb	r2!, {s15}
 8008c02:	e743      	b.n	8008a8c <__kernel_rem_pio2f+0x20c>
 8008c04:	ecfc 6a01 	vldmia	ip!, {s13}
 8008c08:	ecb5 7a01 	vldmia	r5!, {s14}
 8008c0c:	eee6 7a87 	vfma.f32	s15, s13, s14
 8008c10:	3001      	adds	r0, #1
 8008c12:	4550      	cmp	r0, sl
 8008c14:	dc01      	bgt.n	8008c1a <__kernel_rem_pio2f+0x39a>
 8008c16:	4282      	cmp	r2, r0
 8008c18:	daf4      	bge.n	8008c04 <__kernel_rem_pio2f+0x384>
 8008c1a:	a858      	add	r0, sp, #352	@ 0x160
 8008c1c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8008c20:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 8008c24:	3b01      	subs	r3, #1
 8008c26:	e735      	b.n	8008a94 <__kernel_rem_pio2f+0x214>
 8008c28:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8008c2a:	2b02      	cmp	r3, #2
 8008c2c:	dc09      	bgt.n	8008c42 <__kernel_rem_pio2f+0x3c2>
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	dc2b      	bgt.n	8008c8a <__kernel_rem_pio2f+0x40a>
 8008c32:	d044      	beq.n	8008cbe <__kernel_rem_pio2f+0x43e>
 8008c34:	f009 0007 	and.w	r0, r9, #7
 8008c38:	b059      	add	sp, #356	@ 0x164
 8008c3a:	ecbd 8b04 	vpop	{d8-d9}
 8008c3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c42:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8008c44:	2b03      	cmp	r3, #3
 8008c46:	d1f5      	bne.n	8008c34 <__kernel_rem_pio2f+0x3b4>
 8008c48:	aa30      	add	r2, sp, #192	@ 0xc0
 8008c4a:	1f0b      	subs	r3, r1, #4
 8008c4c:	4413      	add	r3, r2
 8008c4e:	461a      	mov	r2, r3
 8008c50:	4620      	mov	r0, r4
 8008c52:	2800      	cmp	r0, #0
 8008c54:	f1a2 0204 	sub.w	r2, r2, #4
 8008c58:	dc52      	bgt.n	8008d00 <__kernel_rem_pio2f+0x480>
 8008c5a:	4622      	mov	r2, r4
 8008c5c:	2a01      	cmp	r2, #1
 8008c5e:	f1a3 0304 	sub.w	r3, r3, #4
 8008c62:	dc5d      	bgt.n	8008d20 <__kernel_rem_pio2f+0x4a0>
 8008c64:	ab30      	add	r3, sp, #192	@ 0xc0
 8008c66:	ed5f 7a39 	vldr	s15, [pc, #-228]	@ 8008b84 <__kernel_rem_pio2f+0x304>
 8008c6a:	440b      	add	r3, r1
 8008c6c:	2c01      	cmp	r4, #1
 8008c6e:	dc67      	bgt.n	8008d40 <__kernel_rem_pio2f+0x4c0>
 8008c70:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 8008c74:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 8008c78:	2e00      	cmp	r6, #0
 8008c7a:	d167      	bne.n	8008d4c <__kernel_rem_pio2f+0x4cc>
 8008c7c:	edc7 6a00 	vstr	s13, [r7]
 8008c80:	ed87 7a01 	vstr	s14, [r7, #4]
 8008c84:	edc7 7a02 	vstr	s15, [r7, #8]
 8008c88:	e7d4      	b.n	8008c34 <__kernel_rem_pio2f+0x3b4>
 8008c8a:	ab30      	add	r3, sp, #192	@ 0xc0
 8008c8c:	ed1f 7a43 	vldr	s14, [pc, #-268]	@ 8008b84 <__kernel_rem_pio2f+0x304>
 8008c90:	440b      	add	r3, r1
 8008c92:	4622      	mov	r2, r4
 8008c94:	2a00      	cmp	r2, #0
 8008c96:	da24      	bge.n	8008ce2 <__kernel_rem_pio2f+0x462>
 8008c98:	b34e      	cbz	r6, 8008cee <__kernel_rem_pio2f+0x46e>
 8008c9a:	eef1 7a47 	vneg.f32	s15, s14
 8008c9e:	edc7 7a00 	vstr	s15, [r7]
 8008ca2:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 8008ca6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008caa:	aa31      	add	r2, sp, #196	@ 0xc4
 8008cac:	2301      	movs	r3, #1
 8008cae:	429c      	cmp	r4, r3
 8008cb0:	da20      	bge.n	8008cf4 <__kernel_rem_pio2f+0x474>
 8008cb2:	b10e      	cbz	r6, 8008cb8 <__kernel_rem_pio2f+0x438>
 8008cb4:	eef1 7a67 	vneg.f32	s15, s15
 8008cb8:	edc7 7a01 	vstr	s15, [r7, #4]
 8008cbc:	e7ba      	b.n	8008c34 <__kernel_rem_pio2f+0x3b4>
 8008cbe:	ab30      	add	r3, sp, #192	@ 0xc0
 8008cc0:	ed5f 7a50 	vldr	s15, [pc, #-320]	@ 8008b84 <__kernel_rem_pio2f+0x304>
 8008cc4:	440b      	add	r3, r1
 8008cc6:	2c00      	cmp	r4, #0
 8008cc8:	da05      	bge.n	8008cd6 <__kernel_rem_pio2f+0x456>
 8008cca:	b10e      	cbz	r6, 8008cd0 <__kernel_rem_pio2f+0x450>
 8008ccc:	eef1 7a67 	vneg.f32	s15, s15
 8008cd0:	edc7 7a00 	vstr	s15, [r7]
 8008cd4:	e7ae      	b.n	8008c34 <__kernel_rem_pio2f+0x3b4>
 8008cd6:	ed33 7a01 	vldmdb	r3!, {s14}
 8008cda:	3c01      	subs	r4, #1
 8008cdc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008ce0:	e7f1      	b.n	8008cc6 <__kernel_rem_pio2f+0x446>
 8008ce2:	ed73 7a01 	vldmdb	r3!, {s15}
 8008ce6:	3a01      	subs	r2, #1
 8008ce8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008cec:	e7d2      	b.n	8008c94 <__kernel_rem_pio2f+0x414>
 8008cee:	eef0 7a47 	vmov.f32	s15, s14
 8008cf2:	e7d4      	b.n	8008c9e <__kernel_rem_pio2f+0x41e>
 8008cf4:	ecb2 7a01 	vldmia	r2!, {s14}
 8008cf8:	3301      	adds	r3, #1
 8008cfa:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008cfe:	e7d6      	b.n	8008cae <__kernel_rem_pio2f+0x42e>
 8008d00:	edd2 7a00 	vldr	s15, [r2]
 8008d04:	edd2 6a01 	vldr	s13, [r2, #4]
 8008d08:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8008d0c:	3801      	subs	r0, #1
 8008d0e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008d12:	ed82 7a00 	vstr	s14, [r2]
 8008d16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d1a:	edc2 7a01 	vstr	s15, [r2, #4]
 8008d1e:	e798      	b.n	8008c52 <__kernel_rem_pio2f+0x3d2>
 8008d20:	edd3 7a00 	vldr	s15, [r3]
 8008d24:	edd3 6a01 	vldr	s13, [r3, #4]
 8008d28:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8008d2c:	3a01      	subs	r2, #1
 8008d2e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008d32:	ed83 7a00 	vstr	s14, [r3]
 8008d36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d3a:	edc3 7a01 	vstr	s15, [r3, #4]
 8008d3e:	e78d      	b.n	8008c5c <__kernel_rem_pio2f+0x3dc>
 8008d40:	ed33 7a01 	vldmdb	r3!, {s14}
 8008d44:	3c01      	subs	r4, #1
 8008d46:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008d4a:	e78f      	b.n	8008c6c <__kernel_rem_pio2f+0x3ec>
 8008d4c:	eef1 6a66 	vneg.f32	s13, s13
 8008d50:	eeb1 7a47 	vneg.f32	s14, s14
 8008d54:	edc7 6a00 	vstr	s13, [r7]
 8008d58:	ed87 7a01 	vstr	s14, [r7, #4]
 8008d5c:	eef1 7a67 	vneg.f32	s15, s15
 8008d60:	e790      	b.n	8008c84 <__kernel_rem_pio2f+0x404>
 8008d62:	bf00      	nop

08008d64 <floorf>:
 8008d64:	ee10 3a10 	vmov	r3, s0
 8008d68:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8008d6c:	3a7f      	subs	r2, #127	@ 0x7f
 8008d6e:	2a16      	cmp	r2, #22
 8008d70:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8008d74:	dc2b      	bgt.n	8008dce <floorf+0x6a>
 8008d76:	2a00      	cmp	r2, #0
 8008d78:	da12      	bge.n	8008da0 <floorf+0x3c>
 8008d7a:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8008de0 <floorf+0x7c>
 8008d7e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8008d82:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8008d86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d8a:	dd06      	ble.n	8008d9a <floorf+0x36>
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	da24      	bge.n	8008dda <floorf+0x76>
 8008d90:	2900      	cmp	r1, #0
 8008d92:	4b14      	ldr	r3, [pc, #80]	@ (8008de4 <floorf+0x80>)
 8008d94:	bf08      	it	eq
 8008d96:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 8008d9a:	ee00 3a10 	vmov	s0, r3
 8008d9e:	4770      	bx	lr
 8008da0:	4911      	ldr	r1, [pc, #68]	@ (8008de8 <floorf+0x84>)
 8008da2:	4111      	asrs	r1, r2
 8008da4:	420b      	tst	r3, r1
 8008da6:	d0fa      	beq.n	8008d9e <floorf+0x3a>
 8008da8:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 8008de0 <floorf+0x7c>
 8008dac:	ee30 0a27 	vadd.f32	s0, s0, s15
 8008db0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8008db4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008db8:	ddef      	ble.n	8008d9a <floorf+0x36>
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	bfbe      	ittt	lt
 8008dbe:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 8008dc2:	fa40 f202 	asrlt.w	r2, r0, r2
 8008dc6:	189b      	addlt	r3, r3, r2
 8008dc8:	ea23 0301 	bic.w	r3, r3, r1
 8008dcc:	e7e5      	b.n	8008d9a <floorf+0x36>
 8008dce:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8008dd2:	d3e4      	bcc.n	8008d9e <floorf+0x3a>
 8008dd4:	ee30 0a00 	vadd.f32	s0, s0, s0
 8008dd8:	4770      	bx	lr
 8008dda:	2300      	movs	r3, #0
 8008ddc:	e7dd      	b.n	8008d9a <floorf+0x36>
 8008dde:	bf00      	nop
 8008de0:	7149f2ca 	.word	0x7149f2ca
 8008de4:	bf800000 	.word	0xbf800000
 8008de8:	007fffff 	.word	0x007fffff

08008dec <scalbnf>:
 8008dec:	ee10 3a10 	vmov	r3, s0
 8008df0:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8008df4:	d02b      	beq.n	8008e4e <scalbnf+0x62>
 8008df6:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8008dfa:	d302      	bcc.n	8008e02 <scalbnf+0x16>
 8008dfc:	ee30 0a00 	vadd.f32	s0, s0, s0
 8008e00:	4770      	bx	lr
 8008e02:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 8008e06:	d123      	bne.n	8008e50 <scalbnf+0x64>
 8008e08:	4b24      	ldr	r3, [pc, #144]	@ (8008e9c <scalbnf+0xb0>)
 8008e0a:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8008ea0 <scalbnf+0xb4>
 8008e0e:	4298      	cmp	r0, r3
 8008e10:	ee20 0a27 	vmul.f32	s0, s0, s15
 8008e14:	db17      	blt.n	8008e46 <scalbnf+0x5a>
 8008e16:	ee10 3a10 	vmov	r3, s0
 8008e1a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8008e1e:	3a19      	subs	r2, #25
 8008e20:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8008e24:	4288      	cmp	r0, r1
 8008e26:	dd15      	ble.n	8008e54 <scalbnf+0x68>
 8008e28:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8008ea4 <scalbnf+0xb8>
 8008e2c:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8008ea8 <scalbnf+0xbc>
 8008e30:	ee10 3a10 	vmov	r3, s0
 8008e34:	eeb0 7a67 	vmov.f32	s14, s15
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	bfb8      	it	lt
 8008e3c:	eef0 7a66 	vmovlt.f32	s15, s13
 8008e40:	ee27 0a87 	vmul.f32	s0, s15, s14
 8008e44:	4770      	bx	lr
 8008e46:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8008eac <scalbnf+0xc0>
 8008e4a:	ee27 0a80 	vmul.f32	s0, s15, s0
 8008e4e:	4770      	bx	lr
 8008e50:	0dd2      	lsrs	r2, r2, #23
 8008e52:	e7e5      	b.n	8008e20 <scalbnf+0x34>
 8008e54:	4410      	add	r0, r2
 8008e56:	28fe      	cmp	r0, #254	@ 0xfe
 8008e58:	dce6      	bgt.n	8008e28 <scalbnf+0x3c>
 8008e5a:	2800      	cmp	r0, #0
 8008e5c:	dd06      	ble.n	8008e6c <scalbnf+0x80>
 8008e5e:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8008e62:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8008e66:	ee00 3a10 	vmov	s0, r3
 8008e6a:	4770      	bx	lr
 8008e6c:	f110 0f16 	cmn.w	r0, #22
 8008e70:	da09      	bge.n	8008e86 <scalbnf+0x9a>
 8008e72:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8008eac <scalbnf+0xc0>
 8008e76:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8008eb0 <scalbnf+0xc4>
 8008e7a:	ee10 3a10 	vmov	r3, s0
 8008e7e:	eeb0 7a67 	vmov.f32	s14, s15
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	e7d9      	b.n	8008e3a <scalbnf+0x4e>
 8008e86:	3019      	adds	r0, #25
 8008e88:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8008e8c:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8008e90:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8008eb4 <scalbnf+0xc8>
 8008e94:	ee07 3a90 	vmov	s15, r3
 8008e98:	e7d7      	b.n	8008e4a <scalbnf+0x5e>
 8008e9a:	bf00      	nop
 8008e9c:	ffff3cb0 	.word	0xffff3cb0
 8008ea0:	4c000000 	.word	0x4c000000
 8008ea4:	7149f2ca 	.word	0x7149f2ca
 8008ea8:	f149f2ca 	.word	0xf149f2ca
 8008eac:	0da24260 	.word	0x0da24260
 8008eb0:	8da24260 	.word	0x8da24260
 8008eb4:	33000000 	.word	0x33000000

08008eb8 <__assert_func>:
 8008eb8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008eba:	4614      	mov	r4, r2
 8008ebc:	461a      	mov	r2, r3
 8008ebe:	4b09      	ldr	r3, [pc, #36]	@ (8008ee4 <__assert_func+0x2c>)
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	4605      	mov	r5, r0
 8008ec4:	68d8      	ldr	r0, [r3, #12]
 8008ec6:	b954      	cbnz	r4, 8008ede <__assert_func+0x26>
 8008ec8:	4b07      	ldr	r3, [pc, #28]	@ (8008ee8 <__assert_func+0x30>)
 8008eca:	461c      	mov	r4, r3
 8008ecc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008ed0:	9100      	str	r1, [sp, #0]
 8008ed2:	462b      	mov	r3, r5
 8008ed4:	4905      	ldr	r1, [pc, #20]	@ (8008eec <__assert_func+0x34>)
 8008ed6:	f000 fd09 	bl	80098ec <fiprintf>
 8008eda:	f000 fdb8 	bl	8009a4e <abort>
 8008ede:	4b04      	ldr	r3, [pc, #16]	@ (8008ef0 <__assert_func+0x38>)
 8008ee0:	e7f4      	b.n	8008ecc <__assert_func+0x14>
 8008ee2:	bf00      	nop
 8008ee4:	2000001c 	.word	0x2000001c
 8008ee8:	08029633 	.word	0x08029633
 8008eec:	08029605 	.word	0x08029605
 8008ef0:	080295f8 	.word	0x080295f8

08008ef4 <__cvt>:
 8008ef4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008ef8:	ec57 6b10 	vmov	r6, r7, d0
 8008efc:	2f00      	cmp	r7, #0
 8008efe:	460c      	mov	r4, r1
 8008f00:	4619      	mov	r1, r3
 8008f02:	463b      	mov	r3, r7
 8008f04:	bfbb      	ittet	lt
 8008f06:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8008f0a:	461f      	movlt	r7, r3
 8008f0c:	2300      	movge	r3, #0
 8008f0e:	232d      	movlt	r3, #45	@ 0x2d
 8008f10:	700b      	strb	r3, [r1, #0]
 8008f12:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008f14:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8008f18:	4691      	mov	r9, r2
 8008f1a:	f023 0820 	bic.w	r8, r3, #32
 8008f1e:	bfbc      	itt	lt
 8008f20:	4632      	movlt	r2, r6
 8008f22:	4616      	movlt	r6, r2
 8008f24:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008f28:	d005      	beq.n	8008f36 <__cvt+0x42>
 8008f2a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8008f2e:	d100      	bne.n	8008f32 <__cvt+0x3e>
 8008f30:	3401      	adds	r4, #1
 8008f32:	2102      	movs	r1, #2
 8008f34:	e000      	b.n	8008f38 <__cvt+0x44>
 8008f36:	2103      	movs	r1, #3
 8008f38:	ab03      	add	r3, sp, #12
 8008f3a:	9301      	str	r3, [sp, #4]
 8008f3c:	ab02      	add	r3, sp, #8
 8008f3e:	9300      	str	r3, [sp, #0]
 8008f40:	ec47 6b10 	vmov	d0, r6, r7
 8008f44:	4653      	mov	r3, sl
 8008f46:	4622      	mov	r2, r4
 8008f48:	f000 fe12 	bl	8009b70 <_dtoa_r>
 8008f4c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8008f50:	4605      	mov	r5, r0
 8008f52:	d119      	bne.n	8008f88 <__cvt+0x94>
 8008f54:	f019 0f01 	tst.w	r9, #1
 8008f58:	d00e      	beq.n	8008f78 <__cvt+0x84>
 8008f5a:	eb00 0904 	add.w	r9, r0, r4
 8008f5e:	2200      	movs	r2, #0
 8008f60:	2300      	movs	r3, #0
 8008f62:	4630      	mov	r0, r6
 8008f64:	4639      	mov	r1, r7
 8008f66:	f7f7 fdb7 	bl	8000ad8 <__aeabi_dcmpeq>
 8008f6a:	b108      	cbz	r0, 8008f70 <__cvt+0x7c>
 8008f6c:	f8cd 900c 	str.w	r9, [sp, #12]
 8008f70:	2230      	movs	r2, #48	@ 0x30
 8008f72:	9b03      	ldr	r3, [sp, #12]
 8008f74:	454b      	cmp	r3, r9
 8008f76:	d31e      	bcc.n	8008fb6 <__cvt+0xc2>
 8008f78:	9b03      	ldr	r3, [sp, #12]
 8008f7a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008f7c:	1b5b      	subs	r3, r3, r5
 8008f7e:	4628      	mov	r0, r5
 8008f80:	6013      	str	r3, [r2, #0]
 8008f82:	b004      	add	sp, #16
 8008f84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f88:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008f8c:	eb00 0904 	add.w	r9, r0, r4
 8008f90:	d1e5      	bne.n	8008f5e <__cvt+0x6a>
 8008f92:	7803      	ldrb	r3, [r0, #0]
 8008f94:	2b30      	cmp	r3, #48	@ 0x30
 8008f96:	d10a      	bne.n	8008fae <__cvt+0xba>
 8008f98:	2200      	movs	r2, #0
 8008f9a:	2300      	movs	r3, #0
 8008f9c:	4630      	mov	r0, r6
 8008f9e:	4639      	mov	r1, r7
 8008fa0:	f7f7 fd9a 	bl	8000ad8 <__aeabi_dcmpeq>
 8008fa4:	b918      	cbnz	r0, 8008fae <__cvt+0xba>
 8008fa6:	f1c4 0401 	rsb	r4, r4, #1
 8008faa:	f8ca 4000 	str.w	r4, [sl]
 8008fae:	f8da 3000 	ldr.w	r3, [sl]
 8008fb2:	4499      	add	r9, r3
 8008fb4:	e7d3      	b.n	8008f5e <__cvt+0x6a>
 8008fb6:	1c59      	adds	r1, r3, #1
 8008fb8:	9103      	str	r1, [sp, #12]
 8008fba:	701a      	strb	r2, [r3, #0]
 8008fbc:	e7d9      	b.n	8008f72 <__cvt+0x7e>

08008fbe <__exponent>:
 8008fbe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008fc0:	2900      	cmp	r1, #0
 8008fc2:	bfba      	itte	lt
 8008fc4:	4249      	neglt	r1, r1
 8008fc6:	232d      	movlt	r3, #45	@ 0x2d
 8008fc8:	232b      	movge	r3, #43	@ 0x2b
 8008fca:	2909      	cmp	r1, #9
 8008fcc:	7002      	strb	r2, [r0, #0]
 8008fce:	7043      	strb	r3, [r0, #1]
 8008fd0:	dd29      	ble.n	8009026 <__exponent+0x68>
 8008fd2:	f10d 0307 	add.w	r3, sp, #7
 8008fd6:	461d      	mov	r5, r3
 8008fd8:	270a      	movs	r7, #10
 8008fda:	461a      	mov	r2, r3
 8008fdc:	fbb1 f6f7 	udiv	r6, r1, r7
 8008fe0:	fb07 1416 	mls	r4, r7, r6, r1
 8008fe4:	3430      	adds	r4, #48	@ 0x30
 8008fe6:	f802 4c01 	strb.w	r4, [r2, #-1]
 8008fea:	460c      	mov	r4, r1
 8008fec:	2c63      	cmp	r4, #99	@ 0x63
 8008fee:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8008ff2:	4631      	mov	r1, r6
 8008ff4:	dcf1      	bgt.n	8008fda <__exponent+0x1c>
 8008ff6:	3130      	adds	r1, #48	@ 0x30
 8008ff8:	1e94      	subs	r4, r2, #2
 8008ffa:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008ffe:	1c41      	adds	r1, r0, #1
 8009000:	4623      	mov	r3, r4
 8009002:	42ab      	cmp	r3, r5
 8009004:	d30a      	bcc.n	800901c <__exponent+0x5e>
 8009006:	f10d 0309 	add.w	r3, sp, #9
 800900a:	1a9b      	subs	r3, r3, r2
 800900c:	42ac      	cmp	r4, r5
 800900e:	bf88      	it	hi
 8009010:	2300      	movhi	r3, #0
 8009012:	3302      	adds	r3, #2
 8009014:	4403      	add	r3, r0
 8009016:	1a18      	subs	r0, r3, r0
 8009018:	b003      	add	sp, #12
 800901a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800901c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8009020:	f801 6f01 	strb.w	r6, [r1, #1]!
 8009024:	e7ed      	b.n	8009002 <__exponent+0x44>
 8009026:	2330      	movs	r3, #48	@ 0x30
 8009028:	3130      	adds	r1, #48	@ 0x30
 800902a:	7083      	strb	r3, [r0, #2]
 800902c:	70c1      	strb	r1, [r0, #3]
 800902e:	1d03      	adds	r3, r0, #4
 8009030:	e7f1      	b.n	8009016 <__exponent+0x58>
	...

08009034 <_printf_float>:
 8009034:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009038:	b08d      	sub	sp, #52	@ 0x34
 800903a:	460c      	mov	r4, r1
 800903c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8009040:	4616      	mov	r6, r2
 8009042:	461f      	mov	r7, r3
 8009044:	4605      	mov	r5, r0
 8009046:	f000 fcc3 	bl	80099d0 <_localeconv_r>
 800904a:	6803      	ldr	r3, [r0, #0]
 800904c:	9304      	str	r3, [sp, #16]
 800904e:	4618      	mov	r0, r3
 8009050:	f7f7 f916 	bl	8000280 <strlen>
 8009054:	2300      	movs	r3, #0
 8009056:	930a      	str	r3, [sp, #40]	@ 0x28
 8009058:	f8d8 3000 	ldr.w	r3, [r8]
 800905c:	9005      	str	r0, [sp, #20]
 800905e:	3307      	adds	r3, #7
 8009060:	f023 0307 	bic.w	r3, r3, #7
 8009064:	f103 0208 	add.w	r2, r3, #8
 8009068:	f894 a018 	ldrb.w	sl, [r4, #24]
 800906c:	f8d4 b000 	ldr.w	fp, [r4]
 8009070:	f8c8 2000 	str.w	r2, [r8]
 8009074:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009078:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800907c:	9307      	str	r3, [sp, #28]
 800907e:	f8cd 8018 	str.w	r8, [sp, #24]
 8009082:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8009086:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800908a:	4b9c      	ldr	r3, [pc, #624]	@ (80092fc <_printf_float+0x2c8>)
 800908c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009090:	f7f7 fd54 	bl	8000b3c <__aeabi_dcmpun>
 8009094:	bb70      	cbnz	r0, 80090f4 <_printf_float+0xc0>
 8009096:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800909a:	4b98      	ldr	r3, [pc, #608]	@ (80092fc <_printf_float+0x2c8>)
 800909c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80090a0:	f7f7 fd2e 	bl	8000b00 <__aeabi_dcmple>
 80090a4:	bb30      	cbnz	r0, 80090f4 <_printf_float+0xc0>
 80090a6:	2200      	movs	r2, #0
 80090a8:	2300      	movs	r3, #0
 80090aa:	4640      	mov	r0, r8
 80090ac:	4649      	mov	r1, r9
 80090ae:	f7f7 fd1d 	bl	8000aec <__aeabi_dcmplt>
 80090b2:	b110      	cbz	r0, 80090ba <_printf_float+0x86>
 80090b4:	232d      	movs	r3, #45	@ 0x2d
 80090b6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80090ba:	4a91      	ldr	r2, [pc, #580]	@ (8009300 <_printf_float+0x2cc>)
 80090bc:	4b91      	ldr	r3, [pc, #580]	@ (8009304 <_printf_float+0x2d0>)
 80090be:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80090c2:	bf94      	ite	ls
 80090c4:	4690      	movls	r8, r2
 80090c6:	4698      	movhi	r8, r3
 80090c8:	2303      	movs	r3, #3
 80090ca:	6123      	str	r3, [r4, #16]
 80090cc:	f02b 0304 	bic.w	r3, fp, #4
 80090d0:	6023      	str	r3, [r4, #0]
 80090d2:	f04f 0900 	mov.w	r9, #0
 80090d6:	9700      	str	r7, [sp, #0]
 80090d8:	4633      	mov	r3, r6
 80090da:	aa0b      	add	r2, sp, #44	@ 0x2c
 80090dc:	4621      	mov	r1, r4
 80090de:	4628      	mov	r0, r5
 80090e0:	f000 f9d2 	bl	8009488 <_printf_common>
 80090e4:	3001      	adds	r0, #1
 80090e6:	f040 808d 	bne.w	8009204 <_printf_float+0x1d0>
 80090ea:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80090ee:	b00d      	add	sp, #52	@ 0x34
 80090f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090f4:	4642      	mov	r2, r8
 80090f6:	464b      	mov	r3, r9
 80090f8:	4640      	mov	r0, r8
 80090fa:	4649      	mov	r1, r9
 80090fc:	f7f7 fd1e 	bl	8000b3c <__aeabi_dcmpun>
 8009100:	b140      	cbz	r0, 8009114 <_printf_float+0xe0>
 8009102:	464b      	mov	r3, r9
 8009104:	2b00      	cmp	r3, #0
 8009106:	bfbc      	itt	lt
 8009108:	232d      	movlt	r3, #45	@ 0x2d
 800910a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800910e:	4a7e      	ldr	r2, [pc, #504]	@ (8009308 <_printf_float+0x2d4>)
 8009110:	4b7e      	ldr	r3, [pc, #504]	@ (800930c <_printf_float+0x2d8>)
 8009112:	e7d4      	b.n	80090be <_printf_float+0x8a>
 8009114:	6863      	ldr	r3, [r4, #4]
 8009116:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800911a:	9206      	str	r2, [sp, #24]
 800911c:	1c5a      	adds	r2, r3, #1
 800911e:	d13b      	bne.n	8009198 <_printf_float+0x164>
 8009120:	2306      	movs	r3, #6
 8009122:	6063      	str	r3, [r4, #4]
 8009124:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8009128:	2300      	movs	r3, #0
 800912a:	6022      	str	r2, [r4, #0]
 800912c:	9303      	str	r3, [sp, #12]
 800912e:	ab0a      	add	r3, sp, #40	@ 0x28
 8009130:	e9cd a301 	strd	sl, r3, [sp, #4]
 8009134:	ab09      	add	r3, sp, #36	@ 0x24
 8009136:	9300      	str	r3, [sp, #0]
 8009138:	6861      	ldr	r1, [r4, #4]
 800913a:	ec49 8b10 	vmov	d0, r8, r9
 800913e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8009142:	4628      	mov	r0, r5
 8009144:	f7ff fed6 	bl	8008ef4 <__cvt>
 8009148:	9b06      	ldr	r3, [sp, #24]
 800914a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800914c:	2b47      	cmp	r3, #71	@ 0x47
 800914e:	4680      	mov	r8, r0
 8009150:	d129      	bne.n	80091a6 <_printf_float+0x172>
 8009152:	1cc8      	adds	r0, r1, #3
 8009154:	db02      	blt.n	800915c <_printf_float+0x128>
 8009156:	6863      	ldr	r3, [r4, #4]
 8009158:	4299      	cmp	r1, r3
 800915a:	dd41      	ble.n	80091e0 <_printf_float+0x1ac>
 800915c:	f1aa 0a02 	sub.w	sl, sl, #2
 8009160:	fa5f fa8a 	uxtb.w	sl, sl
 8009164:	3901      	subs	r1, #1
 8009166:	4652      	mov	r2, sl
 8009168:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800916c:	9109      	str	r1, [sp, #36]	@ 0x24
 800916e:	f7ff ff26 	bl	8008fbe <__exponent>
 8009172:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009174:	1813      	adds	r3, r2, r0
 8009176:	2a01      	cmp	r2, #1
 8009178:	4681      	mov	r9, r0
 800917a:	6123      	str	r3, [r4, #16]
 800917c:	dc02      	bgt.n	8009184 <_printf_float+0x150>
 800917e:	6822      	ldr	r2, [r4, #0]
 8009180:	07d2      	lsls	r2, r2, #31
 8009182:	d501      	bpl.n	8009188 <_printf_float+0x154>
 8009184:	3301      	adds	r3, #1
 8009186:	6123      	str	r3, [r4, #16]
 8009188:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800918c:	2b00      	cmp	r3, #0
 800918e:	d0a2      	beq.n	80090d6 <_printf_float+0xa2>
 8009190:	232d      	movs	r3, #45	@ 0x2d
 8009192:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009196:	e79e      	b.n	80090d6 <_printf_float+0xa2>
 8009198:	9a06      	ldr	r2, [sp, #24]
 800919a:	2a47      	cmp	r2, #71	@ 0x47
 800919c:	d1c2      	bne.n	8009124 <_printf_float+0xf0>
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d1c0      	bne.n	8009124 <_printf_float+0xf0>
 80091a2:	2301      	movs	r3, #1
 80091a4:	e7bd      	b.n	8009122 <_printf_float+0xee>
 80091a6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80091aa:	d9db      	bls.n	8009164 <_printf_float+0x130>
 80091ac:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80091b0:	d118      	bne.n	80091e4 <_printf_float+0x1b0>
 80091b2:	2900      	cmp	r1, #0
 80091b4:	6863      	ldr	r3, [r4, #4]
 80091b6:	dd0b      	ble.n	80091d0 <_printf_float+0x19c>
 80091b8:	6121      	str	r1, [r4, #16]
 80091ba:	b913      	cbnz	r3, 80091c2 <_printf_float+0x18e>
 80091bc:	6822      	ldr	r2, [r4, #0]
 80091be:	07d0      	lsls	r0, r2, #31
 80091c0:	d502      	bpl.n	80091c8 <_printf_float+0x194>
 80091c2:	3301      	adds	r3, #1
 80091c4:	440b      	add	r3, r1
 80091c6:	6123      	str	r3, [r4, #16]
 80091c8:	65a1      	str	r1, [r4, #88]	@ 0x58
 80091ca:	f04f 0900 	mov.w	r9, #0
 80091ce:	e7db      	b.n	8009188 <_printf_float+0x154>
 80091d0:	b913      	cbnz	r3, 80091d8 <_printf_float+0x1a4>
 80091d2:	6822      	ldr	r2, [r4, #0]
 80091d4:	07d2      	lsls	r2, r2, #31
 80091d6:	d501      	bpl.n	80091dc <_printf_float+0x1a8>
 80091d8:	3302      	adds	r3, #2
 80091da:	e7f4      	b.n	80091c6 <_printf_float+0x192>
 80091dc:	2301      	movs	r3, #1
 80091de:	e7f2      	b.n	80091c6 <_printf_float+0x192>
 80091e0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80091e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80091e6:	4299      	cmp	r1, r3
 80091e8:	db05      	blt.n	80091f6 <_printf_float+0x1c2>
 80091ea:	6823      	ldr	r3, [r4, #0]
 80091ec:	6121      	str	r1, [r4, #16]
 80091ee:	07d8      	lsls	r0, r3, #31
 80091f0:	d5ea      	bpl.n	80091c8 <_printf_float+0x194>
 80091f2:	1c4b      	adds	r3, r1, #1
 80091f4:	e7e7      	b.n	80091c6 <_printf_float+0x192>
 80091f6:	2900      	cmp	r1, #0
 80091f8:	bfd4      	ite	le
 80091fa:	f1c1 0202 	rsble	r2, r1, #2
 80091fe:	2201      	movgt	r2, #1
 8009200:	4413      	add	r3, r2
 8009202:	e7e0      	b.n	80091c6 <_printf_float+0x192>
 8009204:	6823      	ldr	r3, [r4, #0]
 8009206:	055a      	lsls	r2, r3, #21
 8009208:	d407      	bmi.n	800921a <_printf_float+0x1e6>
 800920a:	6923      	ldr	r3, [r4, #16]
 800920c:	4642      	mov	r2, r8
 800920e:	4631      	mov	r1, r6
 8009210:	4628      	mov	r0, r5
 8009212:	47b8      	blx	r7
 8009214:	3001      	adds	r0, #1
 8009216:	d12b      	bne.n	8009270 <_printf_float+0x23c>
 8009218:	e767      	b.n	80090ea <_printf_float+0xb6>
 800921a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800921e:	f240 80dd 	bls.w	80093dc <_printf_float+0x3a8>
 8009222:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009226:	2200      	movs	r2, #0
 8009228:	2300      	movs	r3, #0
 800922a:	f7f7 fc55 	bl	8000ad8 <__aeabi_dcmpeq>
 800922e:	2800      	cmp	r0, #0
 8009230:	d033      	beq.n	800929a <_printf_float+0x266>
 8009232:	4a37      	ldr	r2, [pc, #220]	@ (8009310 <_printf_float+0x2dc>)
 8009234:	2301      	movs	r3, #1
 8009236:	4631      	mov	r1, r6
 8009238:	4628      	mov	r0, r5
 800923a:	47b8      	blx	r7
 800923c:	3001      	adds	r0, #1
 800923e:	f43f af54 	beq.w	80090ea <_printf_float+0xb6>
 8009242:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8009246:	4543      	cmp	r3, r8
 8009248:	db02      	blt.n	8009250 <_printf_float+0x21c>
 800924a:	6823      	ldr	r3, [r4, #0]
 800924c:	07d8      	lsls	r0, r3, #31
 800924e:	d50f      	bpl.n	8009270 <_printf_float+0x23c>
 8009250:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009254:	4631      	mov	r1, r6
 8009256:	4628      	mov	r0, r5
 8009258:	47b8      	blx	r7
 800925a:	3001      	adds	r0, #1
 800925c:	f43f af45 	beq.w	80090ea <_printf_float+0xb6>
 8009260:	f04f 0900 	mov.w	r9, #0
 8009264:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8009268:	f104 0a1a 	add.w	sl, r4, #26
 800926c:	45c8      	cmp	r8, r9
 800926e:	dc09      	bgt.n	8009284 <_printf_float+0x250>
 8009270:	6823      	ldr	r3, [r4, #0]
 8009272:	079b      	lsls	r3, r3, #30
 8009274:	f100 8103 	bmi.w	800947e <_printf_float+0x44a>
 8009278:	68e0      	ldr	r0, [r4, #12]
 800927a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800927c:	4298      	cmp	r0, r3
 800927e:	bfb8      	it	lt
 8009280:	4618      	movlt	r0, r3
 8009282:	e734      	b.n	80090ee <_printf_float+0xba>
 8009284:	2301      	movs	r3, #1
 8009286:	4652      	mov	r2, sl
 8009288:	4631      	mov	r1, r6
 800928a:	4628      	mov	r0, r5
 800928c:	47b8      	blx	r7
 800928e:	3001      	adds	r0, #1
 8009290:	f43f af2b 	beq.w	80090ea <_printf_float+0xb6>
 8009294:	f109 0901 	add.w	r9, r9, #1
 8009298:	e7e8      	b.n	800926c <_printf_float+0x238>
 800929a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800929c:	2b00      	cmp	r3, #0
 800929e:	dc39      	bgt.n	8009314 <_printf_float+0x2e0>
 80092a0:	4a1b      	ldr	r2, [pc, #108]	@ (8009310 <_printf_float+0x2dc>)
 80092a2:	2301      	movs	r3, #1
 80092a4:	4631      	mov	r1, r6
 80092a6:	4628      	mov	r0, r5
 80092a8:	47b8      	blx	r7
 80092aa:	3001      	adds	r0, #1
 80092ac:	f43f af1d 	beq.w	80090ea <_printf_float+0xb6>
 80092b0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80092b4:	ea59 0303 	orrs.w	r3, r9, r3
 80092b8:	d102      	bne.n	80092c0 <_printf_float+0x28c>
 80092ba:	6823      	ldr	r3, [r4, #0]
 80092bc:	07d9      	lsls	r1, r3, #31
 80092be:	d5d7      	bpl.n	8009270 <_printf_float+0x23c>
 80092c0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80092c4:	4631      	mov	r1, r6
 80092c6:	4628      	mov	r0, r5
 80092c8:	47b8      	blx	r7
 80092ca:	3001      	adds	r0, #1
 80092cc:	f43f af0d 	beq.w	80090ea <_printf_float+0xb6>
 80092d0:	f04f 0a00 	mov.w	sl, #0
 80092d4:	f104 0b1a 	add.w	fp, r4, #26
 80092d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80092da:	425b      	negs	r3, r3
 80092dc:	4553      	cmp	r3, sl
 80092de:	dc01      	bgt.n	80092e4 <_printf_float+0x2b0>
 80092e0:	464b      	mov	r3, r9
 80092e2:	e793      	b.n	800920c <_printf_float+0x1d8>
 80092e4:	2301      	movs	r3, #1
 80092e6:	465a      	mov	r2, fp
 80092e8:	4631      	mov	r1, r6
 80092ea:	4628      	mov	r0, r5
 80092ec:	47b8      	blx	r7
 80092ee:	3001      	adds	r0, #1
 80092f0:	f43f aefb 	beq.w	80090ea <_printf_float+0xb6>
 80092f4:	f10a 0a01 	add.w	sl, sl, #1
 80092f8:	e7ee      	b.n	80092d8 <_printf_float+0x2a4>
 80092fa:	bf00      	nop
 80092fc:	7fefffff 	.word	0x7fefffff
 8009300:	08029634 	.word	0x08029634
 8009304:	08029638 	.word	0x08029638
 8009308:	0802963c 	.word	0x0802963c
 800930c:	08029640 	.word	0x08029640
 8009310:	08029644 	.word	0x08029644
 8009314:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009316:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800931a:	4553      	cmp	r3, sl
 800931c:	bfa8      	it	ge
 800931e:	4653      	movge	r3, sl
 8009320:	2b00      	cmp	r3, #0
 8009322:	4699      	mov	r9, r3
 8009324:	dc36      	bgt.n	8009394 <_printf_float+0x360>
 8009326:	f04f 0b00 	mov.w	fp, #0
 800932a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800932e:	f104 021a 	add.w	r2, r4, #26
 8009332:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009334:	9306      	str	r3, [sp, #24]
 8009336:	eba3 0309 	sub.w	r3, r3, r9
 800933a:	455b      	cmp	r3, fp
 800933c:	dc31      	bgt.n	80093a2 <_printf_float+0x36e>
 800933e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009340:	459a      	cmp	sl, r3
 8009342:	dc3a      	bgt.n	80093ba <_printf_float+0x386>
 8009344:	6823      	ldr	r3, [r4, #0]
 8009346:	07da      	lsls	r2, r3, #31
 8009348:	d437      	bmi.n	80093ba <_printf_float+0x386>
 800934a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800934c:	ebaa 0903 	sub.w	r9, sl, r3
 8009350:	9b06      	ldr	r3, [sp, #24]
 8009352:	ebaa 0303 	sub.w	r3, sl, r3
 8009356:	4599      	cmp	r9, r3
 8009358:	bfa8      	it	ge
 800935a:	4699      	movge	r9, r3
 800935c:	f1b9 0f00 	cmp.w	r9, #0
 8009360:	dc33      	bgt.n	80093ca <_printf_float+0x396>
 8009362:	f04f 0800 	mov.w	r8, #0
 8009366:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800936a:	f104 0b1a 	add.w	fp, r4, #26
 800936e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009370:	ebaa 0303 	sub.w	r3, sl, r3
 8009374:	eba3 0309 	sub.w	r3, r3, r9
 8009378:	4543      	cmp	r3, r8
 800937a:	f77f af79 	ble.w	8009270 <_printf_float+0x23c>
 800937e:	2301      	movs	r3, #1
 8009380:	465a      	mov	r2, fp
 8009382:	4631      	mov	r1, r6
 8009384:	4628      	mov	r0, r5
 8009386:	47b8      	blx	r7
 8009388:	3001      	adds	r0, #1
 800938a:	f43f aeae 	beq.w	80090ea <_printf_float+0xb6>
 800938e:	f108 0801 	add.w	r8, r8, #1
 8009392:	e7ec      	b.n	800936e <_printf_float+0x33a>
 8009394:	4642      	mov	r2, r8
 8009396:	4631      	mov	r1, r6
 8009398:	4628      	mov	r0, r5
 800939a:	47b8      	blx	r7
 800939c:	3001      	adds	r0, #1
 800939e:	d1c2      	bne.n	8009326 <_printf_float+0x2f2>
 80093a0:	e6a3      	b.n	80090ea <_printf_float+0xb6>
 80093a2:	2301      	movs	r3, #1
 80093a4:	4631      	mov	r1, r6
 80093a6:	4628      	mov	r0, r5
 80093a8:	9206      	str	r2, [sp, #24]
 80093aa:	47b8      	blx	r7
 80093ac:	3001      	adds	r0, #1
 80093ae:	f43f ae9c 	beq.w	80090ea <_printf_float+0xb6>
 80093b2:	9a06      	ldr	r2, [sp, #24]
 80093b4:	f10b 0b01 	add.w	fp, fp, #1
 80093b8:	e7bb      	b.n	8009332 <_printf_float+0x2fe>
 80093ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80093be:	4631      	mov	r1, r6
 80093c0:	4628      	mov	r0, r5
 80093c2:	47b8      	blx	r7
 80093c4:	3001      	adds	r0, #1
 80093c6:	d1c0      	bne.n	800934a <_printf_float+0x316>
 80093c8:	e68f      	b.n	80090ea <_printf_float+0xb6>
 80093ca:	9a06      	ldr	r2, [sp, #24]
 80093cc:	464b      	mov	r3, r9
 80093ce:	4442      	add	r2, r8
 80093d0:	4631      	mov	r1, r6
 80093d2:	4628      	mov	r0, r5
 80093d4:	47b8      	blx	r7
 80093d6:	3001      	adds	r0, #1
 80093d8:	d1c3      	bne.n	8009362 <_printf_float+0x32e>
 80093da:	e686      	b.n	80090ea <_printf_float+0xb6>
 80093dc:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80093e0:	f1ba 0f01 	cmp.w	sl, #1
 80093e4:	dc01      	bgt.n	80093ea <_printf_float+0x3b6>
 80093e6:	07db      	lsls	r3, r3, #31
 80093e8:	d536      	bpl.n	8009458 <_printf_float+0x424>
 80093ea:	2301      	movs	r3, #1
 80093ec:	4642      	mov	r2, r8
 80093ee:	4631      	mov	r1, r6
 80093f0:	4628      	mov	r0, r5
 80093f2:	47b8      	blx	r7
 80093f4:	3001      	adds	r0, #1
 80093f6:	f43f ae78 	beq.w	80090ea <_printf_float+0xb6>
 80093fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80093fe:	4631      	mov	r1, r6
 8009400:	4628      	mov	r0, r5
 8009402:	47b8      	blx	r7
 8009404:	3001      	adds	r0, #1
 8009406:	f43f ae70 	beq.w	80090ea <_printf_float+0xb6>
 800940a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800940e:	2200      	movs	r2, #0
 8009410:	2300      	movs	r3, #0
 8009412:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8009416:	f7f7 fb5f 	bl	8000ad8 <__aeabi_dcmpeq>
 800941a:	b9c0      	cbnz	r0, 800944e <_printf_float+0x41a>
 800941c:	4653      	mov	r3, sl
 800941e:	f108 0201 	add.w	r2, r8, #1
 8009422:	4631      	mov	r1, r6
 8009424:	4628      	mov	r0, r5
 8009426:	47b8      	blx	r7
 8009428:	3001      	adds	r0, #1
 800942a:	d10c      	bne.n	8009446 <_printf_float+0x412>
 800942c:	e65d      	b.n	80090ea <_printf_float+0xb6>
 800942e:	2301      	movs	r3, #1
 8009430:	465a      	mov	r2, fp
 8009432:	4631      	mov	r1, r6
 8009434:	4628      	mov	r0, r5
 8009436:	47b8      	blx	r7
 8009438:	3001      	adds	r0, #1
 800943a:	f43f ae56 	beq.w	80090ea <_printf_float+0xb6>
 800943e:	f108 0801 	add.w	r8, r8, #1
 8009442:	45d0      	cmp	r8, sl
 8009444:	dbf3      	blt.n	800942e <_printf_float+0x3fa>
 8009446:	464b      	mov	r3, r9
 8009448:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800944c:	e6df      	b.n	800920e <_printf_float+0x1da>
 800944e:	f04f 0800 	mov.w	r8, #0
 8009452:	f104 0b1a 	add.w	fp, r4, #26
 8009456:	e7f4      	b.n	8009442 <_printf_float+0x40e>
 8009458:	2301      	movs	r3, #1
 800945a:	4642      	mov	r2, r8
 800945c:	e7e1      	b.n	8009422 <_printf_float+0x3ee>
 800945e:	2301      	movs	r3, #1
 8009460:	464a      	mov	r2, r9
 8009462:	4631      	mov	r1, r6
 8009464:	4628      	mov	r0, r5
 8009466:	47b8      	blx	r7
 8009468:	3001      	adds	r0, #1
 800946a:	f43f ae3e 	beq.w	80090ea <_printf_float+0xb6>
 800946e:	f108 0801 	add.w	r8, r8, #1
 8009472:	68e3      	ldr	r3, [r4, #12]
 8009474:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009476:	1a5b      	subs	r3, r3, r1
 8009478:	4543      	cmp	r3, r8
 800947a:	dcf0      	bgt.n	800945e <_printf_float+0x42a>
 800947c:	e6fc      	b.n	8009278 <_printf_float+0x244>
 800947e:	f04f 0800 	mov.w	r8, #0
 8009482:	f104 0919 	add.w	r9, r4, #25
 8009486:	e7f4      	b.n	8009472 <_printf_float+0x43e>

08009488 <_printf_common>:
 8009488:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800948c:	4616      	mov	r6, r2
 800948e:	4698      	mov	r8, r3
 8009490:	688a      	ldr	r2, [r1, #8]
 8009492:	690b      	ldr	r3, [r1, #16]
 8009494:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009498:	4293      	cmp	r3, r2
 800949a:	bfb8      	it	lt
 800949c:	4613      	movlt	r3, r2
 800949e:	6033      	str	r3, [r6, #0]
 80094a0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80094a4:	4607      	mov	r7, r0
 80094a6:	460c      	mov	r4, r1
 80094a8:	b10a      	cbz	r2, 80094ae <_printf_common+0x26>
 80094aa:	3301      	adds	r3, #1
 80094ac:	6033      	str	r3, [r6, #0]
 80094ae:	6823      	ldr	r3, [r4, #0]
 80094b0:	0699      	lsls	r1, r3, #26
 80094b2:	bf42      	ittt	mi
 80094b4:	6833      	ldrmi	r3, [r6, #0]
 80094b6:	3302      	addmi	r3, #2
 80094b8:	6033      	strmi	r3, [r6, #0]
 80094ba:	6825      	ldr	r5, [r4, #0]
 80094bc:	f015 0506 	ands.w	r5, r5, #6
 80094c0:	d106      	bne.n	80094d0 <_printf_common+0x48>
 80094c2:	f104 0a19 	add.w	sl, r4, #25
 80094c6:	68e3      	ldr	r3, [r4, #12]
 80094c8:	6832      	ldr	r2, [r6, #0]
 80094ca:	1a9b      	subs	r3, r3, r2
 80094cc:	42ab      	cmp	r3, r5
 80094ce:	dc26      	bgt.n	800951e <_printf_common+0x96>
 80094d0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80094d4:	6822      	ldr	r2, [r4, #0]
 80094d6:	3b00      	subs	r3, #0
 80094d8:	bf18      	it	ne
 80094da:	2301      	movne	r3, #1
 80094dc:	0692      	lsls	r2, r2, #26
 80094de:	d42b      	bmi.n	8009538 <_printf_common+0xb0>
 80094e0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80094e4:	4641      	mov	r1, r8
 80094e6:	4638      	mov	r0, r7
 80094e8:	47c8      	blx	r9
 80094ea:	3001      	adds	r0, #1
 80094ec:	d01e      	beq.n	800952c <_printf_common+0xa4>
 80094ee:	6823      	ldr	r3, [r4, #0]
 80094f0:	6922      	ldr	r2, [r4, #16]
 80094f2:	f003 0306 	and.w	r3, r3, #6
 80094f6:	2b04      	cmp	r3, #4
 80094f8:	bf02      	ittt	eq
 80094fa:	68e5      	ldreq	r5, [r4, #12]
 80094fc:	6833      	ldreq	r3, [r6, #0]
 80094fe:	1aed      	subeq	r5, r5, r3
 8009500:	68a3      	ldr	r3, [r4, #8]
 8009502:	bf0c      	ite	eq
 8009504:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009508:	2500      	movne	r5, #0
 800950a:	4293      	cmp	r3, r2
 800950c:	bfc4      	itt	gt
 800950e:	1a9b      	subgt	r3, r3, r2
 8009510:	18ed      	addgt	r5, r5, r3
 8009512:	2600      	movs	r6, #0
 8009514:	341a      	adds	r4, #26
 8009516:	42b5      	cmp	r5, r6
 8009518:	d11a      	bne.n	8009550 <_printf_common+0xc8>
 800951a:	2000      	movs	r0, #0
 800951c:	e008      	b.n	8009530 <_printf_common+0xa8>
 800951e:	2301      	movs	r3, #1
 8009520:	4652      	mov	r2, sl
 8009522:	4641      	mov	r1, r8
 8009524:	4638      	mov	r0, r7
 8009526:	47c8      	blx	r9
 8009528:	3001      	adds	r0, #1
 800952a:	d103      	bne.n	8009534 <_printf_common+0xac>
 800952c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009530:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009534:	3501      	adds	r5, #1
 8009536:	e7c6      	b.n	80094c6 <_printf_common+0x3e>
 8009538:	18e1      	adds	r1, r4, r3
 800953a:	1c5a      	adds	r2, r3, #1
 800953c:	2030      	movs	r0, #48	@ 0x30
 800953e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009542:	4422      	add	r2, r4
 8009544:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009548:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800954c:	3302      	adds	r3, #2
 800954e:	e7c7      	b.n	80094e0 <_printf_common+0x58>
 8009550:	2301      	movs	r3, #1
 8009552:	4622      	mov	r2, r4
 8009554:	4641      	mov	r1, r8
 8009556:	4638      	mov	r0, r7
 8009558:	47c8      	blx	r9
 800955a:	3001      	adds	r0, #1
 800955c:	d0e6      	beq.n	800952c <_printf_common+0xa4>
 800955e:	3601      	adds	r6, #1
 8009560:	e7d9      	b.n	8009516 <_printf_common+0x8e>
	...

08009564 <_printf_i>:
 8009564:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009568:	7e0f      	ldrb	r7, [r1, #24]
 800956a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800956c:	2f78      	cmp	r7, #120	@ 0x78
 800956e:	4691      	mov	r9, r2
 8009570:	4680      	mov	r8, r0
 8009572:	460c      	mov	r4, r1
 8009574:	469a      	mov	sl, r3
 8009576:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800957a:	d807      	bhi.n	800958c <_printf_i+0x28>
 800957c:	2f62      	cmp	r7, #98	@ 0x62
 800957e:	d80a      	bhi.n	8009596 <_printf_i+0x32>
 8009580:	2f00      	cmp	r7, #0
 8009582:	f000 80d2 	beq.w	800972a <_printf_i+0x1c6>
 8009586:	2f58      	cmp	r7, #88	@ 0x58
 8009588:	f000 80b9 	beq.w	80096fe <_printf_i+0x19a>
 800958c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009590:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009594:	e03a      	b.n	800960c <_printf_i+0xa8>
 8009596:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800959a:	2b15      	cmp	r3, #21
 800959c:	d8f6      	bhi.n	800958c <_printf_i+0x28>
 800959e:	a101      	add	r1, pc, #4	@ (adr r1, 80095a4 <_printf_i+0x40>)
 80095a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80095a4:	080095fd 	.word	0x080095fd
 80095a8:	08009611 	.word	0x08009611
 80095ac:	0800958d 	.word	0x0800958d
 80095b0:	0800958d 	.word	0x0800958d
 80095b4:	0800958d 	.word	0x0800958d
 80095b8:	0800958d 	.word	0x0800958d
 80095bc:	08009611 	.word	0x08009611
 80095c0:	0800958d 	.word	0x0800958d
 80095c4:	0800958d 	.word	0x0800958d
 80095c8:	0800958d 	.word	0x0800958d
 80095cc:	0800958d 	.word	0x0800958d
 80095d0:	08009711 	.word	0x08009711
 80095d4:	0800963b 	.word	0x0800963b
 80095d8:	080096cb 	.word	0x080096cb
 80095dc:	0800958d 	.word	0x0800958d
 80095e0:	0800958d 	.word	0x0800958d
 80095e4:	08009733 	.word	0x08009733
 80095e8:	0800958d 	.word	0x0800958d
 80095ec:	0800963b 	.word	0x0800963b
 80095f0:	0800958d 	.word	0x0800958d
 80095f4:	0800958d 	.word	0x0800958d
 80095f8:	080096d3 	.word	0x080096d3
 80095fc:	6833      	ldr	r3, [r6, #0]
 80095fe:	1d1a      	adds	r2, r3, #4
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	6032      	str	r2, [r6, #0]
 8009604:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009608:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800960c:	2301      	movs	r3, #1
 800960e:	e09d      	b.n	800974c <_printf_i+0x1e8>
 8009610:	6833      	ldr	r3, [r6, #0]
 8009612:	6820      	ldr	r0, [r4, #0]
 8009614:	1d19      	adds	r1, r3, #4
 8009616:	6031      	str	r1, [r6, #0]
 8009618:	0606      	lsls	r6, r0, #24
 800961a:	d501      	bpl.n	8009620 <_printf_i+0xbc>
 800961c:	681d      	ldr	r5, [r3, #0]
 800961e:	e003      	b.n	8009628 <_printf_i+0xc4>
 8009620:	0645      	lsls	r5, r0, #25
 8009622:	d5fb      	bpl.n	800961c <_printf_i+0xb8>
 8009624:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009628:	2d00      	cmp	r5, #0
 800962a:	da03      	bge.n	8009634 <_printf_i+0xd0>
 800962c:	232d      	movs	r3, #45	@ 0x2d
 800962e:	426d      	negs	r5, r5
 8009630:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009634:	4859      	ldr	r0, [pc, #356]	@ (800979c <_printf_i+0x238>)
 8009636:	230a      	movs	r3, #10
 8009638:	e011      	b.n	800965e <_printf_i+0xfa>
 800963a:	6821      	ldr	r1, [r4, #0]
 800963c:	6833      	ldr	r3, [r6, #0]
 800963e:	0608      	lsls	r0, r1, #24
 8009640:	f853 5b04 	ldr.w	r5, [r3], #4
 8009644:	d402      	bmi.n	800964c <_printf_i+0xe8>
 8009646:	0649      	lsls	r1, r1, #25
 8009648:	bf48      	it	mi
 800964a:	b2ad      	uxthmi	r5, r5
 800964c:	2f6f      	cmp	r7, #111	@ 0x6f
 800964e:	4853      	ldr	r0, [pc, #332]	@ (800979c <_printf_i+0x238>)
 8009650:	6033      	str	r3, [r6, #0]
 8009652:	bf14      	ite	ne
 8009654:	230a      	movne	r3, #10
 8009656:	2308      	moveq	r3, #8
 8009658:	2100      	movs	r1, #0
 800965a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800965e:	6866      	ldr	r6, [r4, #4]
 8009660:	60a6      	str	r6, [r4, #8]
 8009662:	2e00      	cmp	r6, #0
 8009664:	bfa2      	ittt	ge
 8009666:	6821      	ldrge	r1, [r4, #0]
 8009668:	f021 0104 	bicge.w	r1, r1, #4
 800966c:	6021      	strge	r1, [r4, #0]
 800966e:	b90d      	cbnz	r5, 8009674 <_printf_i+0x110>
 8009670:	2e00      	cmp	r6, #0
 8009672:	d04b      	beq.n	800970c <_printf_i+0x1a8>
 8009674:	4616      	mov	r6, r2
 8009676:	fbb5 f1f3 	udiv	r1, r5, r3
 800967a:	fb03 5711 	mls	r7, r3, r1, r5
 800967e:	5dc7      	ldrb	r7, [r0, r7]
 8009680:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009684:	462f      	mov	r7, r5
 8009686:	42bb      	cmp	r3, r7
 8009688:	460d      	mov	r5, r1
 800968a:	d9f4      	bls.n	8009676 <_printf_i+0x112>
 800968c:	2b08      	cmp	r3, #8
 800968e:	d10b      	bne.n	80096a8 <_printf_i+0x144>
 8009690:	6823      	ldr	r3, [r4, #0]
 8009692:	07df      	lsls	r7, r3, #31
 8009694:	d508      	bpl.n	80096a8 <_printf_i+0x144>
 8009696:	6923      	ldr	r3, [r4, #16]
 8009698:	6861      	ldr	r1, [r4, #4]
 800969a:	4299      	cmp	r1, r3
 800969c:	bfde      	ittt	le
 800969e:	2330      	movle	r3, #48	@ 0x30
 80096a0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80096a4:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80096a8:	1b92      	subs	r2, r2, r6
 80096aa:	6122      	str	r2, [r4, #16]
 80096ac:	f8cd a000 	str.w	sl, [sp]
 80096b0:	464b      	mov	r3, r9
 80096b2:	aa03      	add	r2, sp, #12
 80096b4:	4621      	mov	r1, r4
 80096b6:	4640      	mov	r0, r8
 80096b8:	f7ff fee6 	bl	8009488 <_printf_common>
 80096bc:	3001      	adds	r0, #1
 80096be:	d14a      	bne.n	8009756 <_printf_i+0x1f2>
 80096c0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80096c4:	b004      	add	sp, #16
 80096c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80096ca:	6823      	ldr	r3, [r4, #0]
 80096cc:	f043 0320 	orr.w	r3, r3, #32
 80096d0:	6023      	str	r3, [r4, #0]
 80096d2:	4833      	ldr	r0, [pc, #204]	@ (80097a0 <_printf_i+0x23c>)
 80096d4:	2778      	movs	r7, #120	@ 0x78
 80096d6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80096da:	6823      	ldr	r3, [r4, #0]
 80096dc:	6831      	ldr	r1, [r6, #0]
 80096de:	061f      	lsls	r7, r3, #24
 80096e0:	f851 5b04 	ldr.w	r5, [r1], #4
 80096e4:	d402      	bmi.n	80096ec <_printf_i+0x188>
 80096e6:	065f      	lsls	r7, r3, #25
 80096e8:	bf48      	it	mi
 80096ea:	b2ad      	uxthmi	r5, r5
 80096ec:	6031      	str	r1, [r6, #0]
 80096ee:	07d9      	lsls	r1, r3, #31
 80096f0:	bf44      	itt	mi
 80096f2:	f043 0320 	orrmi.w	r3, r3, #32
 80096f6:	6023      	strmi	r3, [r4, #0]
 80096f8:	b11d      	cbz	r5, 8009702 <_printf_i+0x19e>
 80096fa:	2310      	movs	r3, #16
 80096fc:	e7ac      	b.n	8009658 <_printf_i+0xf4>
 80096fe:	4827      	ldr	r0, [pc, #156]	@ (800979c <_printf_i+0x238>)
 8009700:	e7e9      	b.n	80096d6 <_printf_i+0x172>
 8009702:	6823      	ldr	r3, [r4, #0]
 8009704:	f023 0320 	bic.w	r3, r3, #32
 8009708:	6023      	str	r3, [r4, #0]
 800970a:	e7f6      	b.n	80096fa <_printf_i+0x196>
 800970c:	4616      	mov	r6, r2
 800970e:	e7bd      	b.n	800968c <_printf_i+0x128>
 8009710:	6833      	ldr	r3, [r6, #0]
 8009712:	6825      	ldr	r5, [r4, #0]
 8009714:	6961      	ldr	r1, [r4, #20]
 8009716:	1d18      	adds	r0, r3, #4
 8009718:	6030      	str	r0, [r6, #0]
 800971a:	062e      	lsls	r6, r5, #24
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	d501      	bpl.n	8009724 <_printf_i+0x1c0>
 8009720:	6019      	str	r1, [r3, #0]
 8009722:	e002      	b.n	800972a <_printf_i+0x1c6>
 8009724:	0668      	lsls	r0, r5, #25
 8009726:	d5fb      	bpl.n	8009720 <_printf_i+0x1bc>
 8009728:	8019      	strh	r1, [r3, #0]
 800972a:	2300      	movs	r3, #0
 800972c:	6123      	str	r3, [r4, #16]
 800972e:	4616      	mov	r6, r2
 8009730:	e7bc      	b.n	80096ac <_printf_i+0x148>
 8009732:	6833      	ldr	r3, [r6, #0]
 8009734:	1d1a      	adds	r2, r3, #4
 8009736:	6032      	str	r2, [r6, #0]
 8009738:	681e      	ldr	r6, [r3, #0]
 800973a:	6862      	ldr	r2, [r4, #4]
 800973c:	2100      	movs	r1, #0
 800973e:	4630      	mov	r0, r6
 8009740:	f7f6 fd4e 	bl	80001e0 <memchr>
 8009744:	b108      	cbz	r0, 800974a <_printf_i+0x1e6>
 8009746:	1b80      	subs	r0, r0, r6
 8009748:	6060      	str	r0, [r4, #4]
 800974a:	6863      	ldr	r3, [r4, #4]
 800974c:	6123      	str	r3, [r4, #16]
 800974e:	2300      	movs	r3, #0
 8009750:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009754:	e7aa      	b.n	80096ac <_printf_i+0x148>
 8009756:	6923      	ldr	r3, [r4, #16]
 8009758:	4632      	mov	r2, r6
 800975a:	4649      	mov	r1, r9
 800975c:	4640      	mov	r0, r8
 800975e:	47d0      	blx	sl
 8009760:	3001      	adds	r0, #1
 8009762:	d0ad      	beq.n	80096c0 <_printf_i+0x15c>
 8009764:	6823      	ldr	r3, [r4, #0]
 8009766:	079b      	lsls	r3, r3, #30
 8009768:	d413      	bmi.n	8009792 <_printf_i+0x22e>
 800976a:	68e0      	ldr	r0, [r4, #12]
 800976c:	9b03      	ldr	r3, [sp, #12]
 800976e:	4298      	cmp	r0, r3
 8009770:	bfb8      	it	lt
 8009772:	4618      	movlt	r0, r3
 8009774:	e7a6      	b.n	80096c4 <_printf_i+0x160>
 8009776:	2301      	movs	r3, #1
 8009778:	4632      	mov	r2, r6
 800977a:	4649      	mov	r1, r9
 800977c:	4640      	mov	r0, r8
 800977e:	47d0      	blx	sl
 8009780:	3001      	adds	r0, #1
 8009782:	d09d      	beq.n	80096c0 <_printf_i+0x15c>
 8009784:	3501      	adds	r5, #1
 8009786:	68e3      	ldr	r3, [r4, #12]
 8009788:	9903      	ldr	r1, [sp, #12]
 800978a:	1a5b      	subs	r3, r3, r1
 800978c:	42ab      	cmp	r3, r5
 800978e:	dcf2      	bgt.n	8009776 <_printf_i+0x212>
 8009790:	e7eb      	b.n	800976a <_printf_i+0x206>
 8009792:	2500      	movs	r5, #0
 8009794:	f104 0619 	add.w	r6, r4, #25
 8009798:	e7f5      	b.n	8009786 <_printf_i+0x222>
 800979a:	bf00      	nop
 800979c:	08029646 	.word	0x08029646
 80097a0:	08029657 	.word	0x08029657

080097a4 <std>:
 80097a4:	2300      	movs	r3, #0
 80097a6:	b510      	push	{r4, lr}
 80097a8:	4604      	mov	r4, r0
 80097aa:	e9c0 3300 	strd	r3, r3, [r0]
 80097ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80097b2:	6083      	str	r3, [r0, #8]
 80097b4:	8181      	strh	r1, [r0, #12]
 80097b6:	6643      	str	r3, [r0, #100]	@ 0x64
 80097b8:	81c2      	strh	r2, [r0, #14]
 80097ba:	6183      	str	r3, [r0, #24]
 80097bc:	4619      	mov	r1, r3
 80097be:	2208      	movs	r2, #8
 80097c0:	305c      	adds	r0, #92	@ 0x5c
 80097c2:	f000 f8fd 	bl	80099c0 <memset>
 80097c6:	4b0d      	ldr	r3, [pc, #52]	@ (80097fc <std+0x58>)
 80097c8:	6263      	str	r3, [r4, #36]	@ 0x24
 80097ca:	4b0d      	ldr	r3, [pc, #52]	@ (8009800 <std+0x5c>)
 80097cc:	62a3      	str	r3, [r4, #40]	@ 0x28
 80097ce:	4b0d      	ldr	r3, [pc, #52]	@ (8009804 <std+0x60>)
 80097d0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80097d2:	4b0d      	ldr	r3, [pc, #52]	@ (8009808 <std+0x64>)
 80097d4:	6323      	str	r3, [r4, #48]	@ 0x30
 80097d6:	4b0d      	ldr	r3, [pc, #52]	@ (800980c <std+0x68>)
 80097d8:	6224      	str	r4, [r4, #32]
 80097da:	429c      	cmp	r4, r3
 80097dc:	d006      	beq.n	80097ec <std+0x48>
 80097de:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80097e2:	4294      	cmp	r4, r2
 80097e4:	d002      	beq.n	80097ec <std+0x48>
 80097e6:	33d0      	adds	r3, #208	@ 0xd0
 80097e8:	429c      	cmp	r4, r3
 80097ea:	d105      	bne.n	80097f8 <std+0x54>
 80097ec:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80097f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80097f4:	f000 b91a 	b.w	8009a2c <__retarget_lock_init_recursive>
 80097f8:	bd10      	pop	{r4, pc}
 80097fa:	bf00      	nop
 80097fc:	0800b5f5 	.word	0x0800b5f5
 8009800:	0800b617 	.word	0x0800b617
 8009804:	0800b64f 	.word	0x0800b64f
 8009808:	0800b673 	.word	0x0800b673
 800980c:	200147c8 	.word	0x200147c8

08009810 <stdio_exit_handler>:
 8009810:	4a02      	ldr	r2, [pc, #8]	@ (800981c <stdio_exit_handler+0xc>)
 8009812:	4903      	ldr	r1, [pc, #12]	@ (8009820 <stdio_exit_handler+0x10>)
 8009814:	4803      	ldr	r0, [pc, #12]	@ (8009824 <stdio_exit_handler+0x14>)
 8009816:	f000 b87b 	b.w	8009910 <_fwalk_sglue>
 800981a:	bf00      	nop
 800981c:	20000010 	.word	0x20000010
 8009820:	0800ae89 	.word	0x0800ae89
 8009824:	20000020 	.word	0x20000020

08009828 <cleanup_stdio>:
 8009828:	6841      	ldr	r1, [r0, #4]
 800982a:	4b0c      	ldr	r3, [pc, #48]	@ (800985c <cleanup_stdio+0x34>)
 800982c:	4299      	cmp	r1, r3
 800982e:	b510      	push	{r4, lr}
 8009830:	4604      	mov	r4, r0
 8009832:	d001      	beq.n	8009838 <cleanup_stdio+0x10>
 8009834:	f001 fb28 	bl	800ae88 <_fflush_r>
 8009838:	68a1      	ldr	r1, [r4, #8]
 800983a:	4b09      	ldr	r3, [pc, #36]	@ (8009860 <cleanup_stdio+0x38>)
 800983c:	4299      	cmp	r1, r3
 800983e:	d002      	beq.n	8009846 <cleanup_stdio+0x1e>
 8009840:	4620      	mov	r0, r4
 8009842:	f001 fb21 	bl	800ae88 <_fflush_r>
 8009846:	68e1      	ldr	r1, [r4, #12]
 8009848:	4b06      	ldr	r3, [pc, #24]	@ (8009864 <cleanup_stdio+0x3c>)
 800984a:	4299      	cmp	r1, r3
 800984c:	d004      	beq.n	8009858 <cleanup_stdio+0x30>
 800984e:	4620      	mov	r0, r4
 8009850:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009854:	f001 bb18 	b.w	800ae88 <_fflush_r>
 8009858:	bd10      	pop	{r4, pc}
 800985a:	bf00      	nop
 800985c:	200147c8 	.word	0x200147c8
 8009860:	20014830 	.word	0x20014830
 8009864:	20014898 	.word	0x20014898

08009868 <global_stdio_init.part.0>:
 8009868:	b510      	push	{r4, lr}
 800986a:	4b0b      	ldr	r3, [pc, #44]	@ (8009898 <global_stdio_init.part.0+0x30>)
 800986c:	4c0b      	ldr	r4, [pc, #44]	@ (800989c <global_stdio_init.part.0+0x34>)
 800986e:	4a0c      	ldr	r2, [pc, #48]	@ (80098a0 <global_stdio_init.part.0+0x38>)
 8009870:	601a      	str	r2, [r3, #0]
 8009872:	4620      	mov	r0, r4
 8009874:	2200      	movs	r2, #0
 8009876:	2104      	movs	r1, #4
 8009878:	f7ff ff94 	bl	80097a4 <std>
 800987c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009880:	2201      	movs	r2, #1
 8009882:	2109      	movs	r1, #9
 8009884:	f7ff ff8e 	bl	80097a4 <std>
 8009888:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800988c:	2202      	movs	r2, #2
 800988e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009892:	2112      	movs	r1, #18
 8009894:	f7ff bf86 	b.w	80097a4 <std>
 8009898:	20014900 	.word	0x20014900
 800989c:	200147c8 	.word	0x200147c8
 80098a0:	08009811 	.word	0x08009811

080098a4 <__sfp_lock_acquire>:
 80098a4:	4801      	ldr	r0, [pc, #4]	@ (80098ac <__sfp_lock_acquire+0x8>)
 80098a6:	f000 b8c2 	b.w	8009a2e <__retarget_lock_acquire_recursive>
 80098aa:	bf00      	nop
 80098ac:	20014905 	.word	0x20014905

080098b0 <__sfp_lock_release>:
 80098b0:	4801      	ldr	r0, [pc, #4]	@ (80098b8 <__sfp_lock_release+0x8>)
 80098b2:	f000 b8bd 	b.w	8009a30 <__retarget_lock_release_recursive>
 80098b6:	bf00      	nop
 80098b8:	20014905 	.word	0x20014905

080098bc <__sinit>:
 80098bc:	b510      	push	{r4, lr}
 80098be:	4604      	mov	r4, r0
 80098c0:	f7ff fff0 	bl	80098a4 <__sfp_lock_acquire>
 80098c4:	6a23      	ldr	r3, [r4, #32]
 80098c6:	b11b      	cbz	r3, 80098d0 <__sinit+0x14>
 80098c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80098cc:	f7ff bff0 	b.w	80098b0 <__sfp_lock_release>
 80098d0:	4b04      	ldr	r3, [pc, #16]	@ (80098e4 <__sinit+0x28>)
 80098d2:	6223      	str	r3, [r4, #32]
 80098d4:	4b04      	ldr	r3, [pc, #16]	@ (80098e8 <__sinit+0x2c>)
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d1f5      	bne.n	80098c8 <__sinit+0xc>
 80098dc:	f7ff ffc4 	bl	8009868 <global_stdio_init.part.0>
 80098e0:	e7f2      	b.n	80098c8 <__sinit+0xc>
 80098e2:	bf00      	nop
 80098e4:	08009829 	.word	0x08009829
 80098e8:	20014900 	.word	0x20014900

080098ec <fiprintf>:
 80098ec:	b40e      	push	{r1, r2, r3}
 80098ee:	b503      	push	{r0, r1, lr}
 80098f0:	4601      	mov	r1, r0
 80098f2:	ab03      	add	r3, sp, #12
 80098f4:	4805      	ldr	r0, [pc, #20]	@ (800990c <fiprintf+0x20>)
 80098f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80098fa:	6800      	ldr	r0, [r0, #0]
 80098fc:	9301      	str	r3, [sp, #4]
 80098fe:	f001 f87d 	bl	800a9fc <_vfiprintf_r>
 8009902:	b002      	add	sp, #8
 8009904:	f85d eb04 	ldr.w	lr, [sp], #4
 8009908:	b003      	add	sp, #12
 800990a:	4770      	bx	lr
 800990c:	2000001c 	.word	0x2000001c

08009910 <_fwalk_sglue>:
 8009910:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009914:	4607      	mov	r7, r0
 8009916:	4688      	mov	r8, r1
 8009918:	4614      	mov	r4, r2
 800991a:	2600      	movs	r6, #0
 800991c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009920:	f1b9 0901 	subs.w	r9, r9, #1
 8009924:	d505      	bpl.n	8009932 <_fwalk_sglue+0x22>
 8009926:	6824      	ldr	r4, [r4, #0]
 8009928:	2c00      	cmp	r4, #0
 800992a:	d1f7      	bne.n	800991c <_fwalk_sglue+0xc>
 800992c:	4630      	mov	r0, r6
 800992e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009932:	89ab      	ldrh	r3, [r5, #12]
 8009934:	2b01      	cmp	r3, #1
 8009936:	d907      	bls.n	8009948 <_fwalk_sglue+0x38>
 8009938:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800993c:	3301      	adds	r3, #1
 800993e:	d003      	beq.n	8009948 <_fwalk_sglue+0x38>
 8009940:	4629      	mov	r1, r5
 8009942:	4638      	mov	r0, r7
 8009944:	47c0      	blx	r8
 8009946:	4306      	orrs	r6, r0
 8009948:	3568      	adds	r5, #104	@ 0x68
 800994a:	e7e9      	b.n	8009920 <_fwalk_sglue+0x10>

0800994c <_vsniprintf_r>:
 800994c:	b530      	push	{r4, r5, lr}
 800994e:	4614      	mov	r4, r2
 8009950:	2c00      	cmp	r4, #0
 8009952:	b09b      	sub	sp, #108	@ 0x6c
 8009954:	4605      	mov	r5, r0
 8009956:	461a      	mov	r2, r3
 8009958:	da05      	bge.n	8009966 <_vsniprintf_r+0x1a>
 800995a:	238b      	movs	r3, #139	@ 0x8b
 800995c:	6003      	str	r3, [r0, #0]
 800995e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009962:	b01b      	add	sp, #108	@ 0x6c
 8009964:	bd30      	pop	{r4, r5, pc}
 8009966:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800996a:	f8ad 300c 	strh.w	r3, [sp, #12]
 800996e:	bf14      	ite	ne
 8009970:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8009974:	4623      	moveq	r3, r4
 8009976:	9302      	str	r3, [sp, #8]
 8009978:	9305      	str	r3, [sp, #20]
 800997a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800997e:	9100      	str	r1, [sp, #0]
 8009980:	9104      	str	r1, [sp, #16]
 8009982:	f8ad 300e 	strh.w	r3, [sp, #14]
 8009986:	4669      	mov	r1, sp
 8009988:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800998a:	f000 ff11 	bl	800a7b0 <_svfiprintf_r>
 800998e:	1c43      	adds	r3, r0, #1
 8009990:	bfbc      	itt	lt
 8009992:	238b      	movlt	r3, #139	@ 0x8b
 8009994:	602b      	strlt	r3, [r5, #0]
 8009996:	2c00      	cmp	r4, #0
 8009998:	d0e3      	beq.n	8009962 <_vsniprintf_r+0x16>
 800999a:	9b00      	ldr	r3, [sp, #0]
 800999c:	2200      	movs	r2, #0
 800999e:	701a      	strb	r2, [r3, #0]
 80099a0:	e7df      	b.n	8009962 <_vsniprintf_r+0x16>
	...

080099a4 <vsniprintf>:
 80099a4:	b507      	push	{r0, r1, r2, lr}
 80099a6:	9300      	str	r3, [sp, #0]
 80099a8:	4613      	mov	r3, r2
 80099aa:	460a      	mov	r2, r1
 80099ac:	4601      	mov	r1, r0
 80099ae:	4803      	ldr	r0, [pc, #12]	@ (80099bc <vsniprintf+0x18>)
 80099b0:	6800      	ldr	r0, [r0, #0]
 80099b2:	f7ff ffcb 	bl	800994c <_vsniprintf_r>
 80099b6:	b003      	add	sp, #12
 80099b8:	f85d fb04 	ldr.w	pc, [sp], #4
 80099bc:	2000001c 	.word	0x2000001c

080099c0 <memset>:
 80099c0:	4402      	add	r2, r0
 80099c2:	4603      	mov	r3, r0
 80099c4:	4293      	cmp	r3, r2
 80099c6:	d100      	bne.n	80099ca <memset+0xa>
 80099c8:	4770      	bx	lr
 80099ca:	f803 1b01 	strb.w	r1, [r3], #1
 80099ce:	e7f9      	b.n	80099c4 <memset+0x4>

080099d0 <_localeconv_r>:
 80099d0:	4800      	ldr	r0, [pc, #0]	@ (80099d4 <_localeconv_r+0x4>)
 80099d2:	4770      	bx	lr
 80099d4:	2000015c 	.word	0x2000015c

080099d8 <__errno>:
 80099d8:	4b01      	ldr	r3, [pc, #4]	@ (80099e0 <__errno+0x8>)
 80099da:	6818      	ldr	r0, [r3, #0]
 80099dc:	4770      	bx	lr
 80099de:	bf00      	nop
 80099e0:	2000001c 	.word	0x2000001c

080099e4 <__libc_init_array>:
 80099e4:	b570      	push	{r4, r5, r6, lr}
 80099e6:	4d0d      	ldr	r5, [pc, #52]	@ (8009a1c <__libc_init_array+0x38>)
 80099e8:	4c0d      	ldr	r4, [pc, #52]	@ (8009a20 <__libc_init_array+0x3c>)
 80099ea:	1b64      	subs	r4, r4, r5
 80099ec:	10a4      	asrs	r4, r4, #2
 80099ee:	2600      	movs	r6, #0
 80099f0:	42a6      	cmp	r6, r4
 80099f2:	d109      	bne.n	8009a08 <__libc_init_array+0x24>
 80099f4:	4d0b      	ldr	r5, [pc, #44]	@ (8009a24 <__libc_init_array+0x40>)
 80099f6:	4c0c      	ldr	r4, [pc, #48]	@ (8009a28 <__libc_init_array+0x44>)
 80099f8:	f002 f8c0 	bl	800bb7c <_init>
 80099fc:	1b64      	subs	r4, r4, r5
 80099fe:	10a4      	asrs	r4, r4, #2
 8009a00:	2600      	movs	r6, #0
 8009a02:	42a6      	cmp	r6, r4
 8009a04:	d105      	bne.n	8009a12 <__libc_init_array+0x2e>
 8009a06:	bd70      	pop	{r4, r5, r6, pc}
 8009a08:	f855 3b04 	ldr.w	r3, [r5], #4
 8009a0c:	4798      	blx	r3
 8009a0e:	3601      	adds	r6, #1
 8009a10:	e7ee      	b.n	80099f0 <__libc_init_array+0xc>
 8009a12:	f855 3b04 	ldr.w	r3, [r5], #4
 8009a16:	4798      	blx	r3
 8009a18:	3601      	adds	r6, #1
 8009a1a:	e7f2      	b.n	8009a02 <__libc_init_array+0x1e>
 8009a1c:	08029974 	.word	0x08029974
 8009a20:	08029974 	.word	0x08029974
 8009a24:	08029974 	.word	0x08029974
 8009a28:	08029978 	.word	0x08029978

08009a2c <__retarget_lock_init_recursive>:
 8009a2c:	4770      	bx	lr

08009a2e <__retarget_lock_acquire_recursive>:
 8009a2e:	4770      	bx	lr

08009a30 <__retarget_lock_release_recursive>:
 8009a30:	4770      	bx	lr

08009a32 <memcpy>:
 8009a32:	440a      	add	r2, r1
 8009a34:	4291      	cmp	r1, r2
 8009a36:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8009a3a:	d100      	bne.n	8009a3e <memcpy+0xc>
 8009a3c:	4770      	bx	lr
 8009a3e:	b510      	push	{r4, lr}
 8009a40:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009a44:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009a48:	4291      	cmp	r1, r2
 8009a4a:	d1f9      	bne.n	8009a40 <memcpy+0xe>
 8009a4c:	bd10      	pop	{r4, pc}

08009a4e <abort>:
 8009a4e:	b508      	push	{r3, lr}
 8009a50:	2006      	movs	r0, #6
 8009a52:	f001 ffbd 	bl	800b9d0 <raise>
 8009a56:	2001      	movs	r0, #1
 8009a58:	f7f9 f858 	bl	8002b0c <_exit>

08009a5c <quorem>:
 8009a5c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a60:	6903      	ldr	r3, [r0, #16]
 8009a62:	690c      	ldr	r4, [r1, #16]
 8009a64:	42a3      	cmp	r3, r4
 8009a66:	4607      	mov	r7, r0
 8009a68:	db7e      	blt.n	8009b68 <quorem+0x10c>
 8009a6a:	3c01      	subs	r4, #1
 8009a6c:	f101 0814 	add.w	r8, r1, #20
 8009a70:	00a3      	lsls	r3, r4, #2
 8009a72:	f100 0514 	add.w	r5, r0, #20
 8009a76:	9300      	str	r3, [sp, #0]
 8009a78:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009a7c:	9301      	str	r3, [sp, #4]
 8009a7e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009a82:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009a86:	3301      	adds	r3, #1
 8009a88:	429a      	cmp	r2, r3
 8009a8a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009a8e:	fbb2 f6f3 	udiv	r6, r2, r3
 8009a92:	d32e      	bcc.n	8009af2 <quorem+0x96>
 8009a94:	f04f 0a00 	mov.w	sl, #0
 8009a98:	46c4      	mov	ip, r8
 8009a9a:	46ae      	mov	lr, r5
 8009a9c:	46d3      	mov	fp, sl
 8009a9e:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009aa2:	b298      	uxth	r0, r3
 8009aa4:	fb06 a000 	mla	r0, r6, r0, sl
 8009aa8:	0c02      	lsrs	r2, r0, #16
 8009aaa:	0c1b      	lsrs	r3, r3, #16
 8009aac:	fb06 2303 	mla	r3, r6, r3, r2
 8009ab0:	f8de 2000 	ldr.w	r2, [lr]
 8009ab4:	b280      	uxth	r0, r0
 8009ab6:	b292      	uxth	r2, r2
 8009ab8:	1a12      	subs	r2, r2, r0
 8009aba:	445a      	add	r2, fp
 8009abc:	f8de 0000 	ldr.w	r0, [lr]
 8009ac0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009ac4:	b29b      	uxth	r3, r3
 8009ac6:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8009aca:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8009ace:	b292      	uxth	r2, r2
 8009ad0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009ad4:	45e1      	cmp	r9, ip
 8009ad6:	f84e 2b04 	str.w	r2, [lr], #4
 8009ada:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8009ade:	d2de      	bcs.n	8009a9e <quorem+0x42>
 8009ae0:	9b00      	ldr	r3, [sp, #0]
 8009ae2:	58eb      	ldr	r3, [r5, r3]
 8009ae4:	b92b      	cbnz	r3, 8009af2 <quorem+0x96>
 8009ae6:	9b01      	ldr	r3, [sp, #4]
 8009ae8:	3b04      	subs	r3, #4
 8009aea:	429d      	cmp	r5, r3
 8009aec:	461a      	mov	r2, r3
 8009aee:	d32f      	bcc.n	8009b50 <quorem+0xf4>
 8009af0:	613c      	str	r4, [r7, #16]
 8009af2:	4638      	mov	r0, r7
 8009af4:	f001 fc76 	bl	800b3e4 <__mcmp>
 8009af8:	2800      	cmp	r0, #0
 8009afa:	db25      	blt.n	8009b48 <quorem+0xec>
 8009afc:	4629      	mov	r1, r5
 8009afe:	2000      	movs	r0, #0
 8009b00:	f858 2b04 	ldr.w	r2, [r8], #4
 8009b04:	f8d1 c000 	ldr.w	ip, [r1]
 8009b08:	fa1f fe82 	uxth.w	lr, r2
 8009b0c:	fa1f f38c 	uxth.w	r3, ip
 8009b10:	eba3 030e 	sub.w	r3, r3, lr
 8009b14:	4403      	add	r3, r0
 8009b16:	0c12      	lsrs	r2, r2, #16
 8009b18:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8009b1c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8009b20:	b29b      	uxth	r3, r3
 8009b22:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009b26:	45c1      	cmp	r9, r8
 8009b28:	f841 3b04 	str.w	r3, [r1], #4
 8009b2c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009b30:	d2e6      	bcs.n	8009b00 <quorem+0xa4>
 8009b32:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009b36:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009b3a:	b922      	cbnz	r2, 8009b46 <quorem+0xea>
 8009b3c:	3b04      	subs	r3, #4
 8009b3e:	429d      	cmp	r5, r3
 8009b40:	461a      	mov	r2, r3
 8009b42:	d30b      	bcc.n	8009b5c <quorem+0x100>
 8009b44:	613c      	str	r4, [r7, #16]
 8009b46:	3601      	adds	r6, #1
 8009b48:	4630      	mov	r0, r6
 8009b4a:	b003      	add	sp, #12
 8009b4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b50:	6812      	ldr	r2, [r2, #0]
 8009b52:	3b04      	subs	r3, #4
 8009b54:	2a00      	cmp	r2, #0
 8009b56:	d1cb      	bne.n	8009af0 <quorem+0x94>
 8009b58:	3c01      	subs	r4, #1
 8009b5a:	e7c6      	b.n	8009aea <quorem+0x8e>
 8009b5c:	6812      	ldr	r2, [r2, #0]
 8009b5e:	3b04      	subs	r3, #4
 8009b60:	2a00      	cmp	r2, #0
 8009b62:	d1ef      	bne.n	8009b44 <quorem+0xe8>
 8009b64:	3c01      	subs	r4, #1
 8009b66:	e7ea      	b.n	8009b3e <quorem+0xe2>
 8009b68:	2000      	movs	r0, #0
 8009b6a:	e7ee      	b.n	8009b4a <quorem+0xee>
 8009b6c:	0000      	movs	r0, r0
	...

08009b70 <_dtoa_r>:
 8009b70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b74:	69c7      	ldr	r7, [r0, #28]
 8009b76:	b099      	sub	sp, #100	@ 0x64
 8009b78:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009b7c:	ec55 4b10 	vmov	r4, r5, d0
 8009b80:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8009b82:	9109      	str	r1, [sp, #36]	@ 0x24
 8009b84:	4683      	mov	fp, r0
 8009b86:	920e      	str	r2, [sp, #56]	@ 0x38
 8009b88:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009b8a:	b97f      	cbnz	r7, 8009bac <_dtoa_r+0x3c>
 8009b8c:	2010      	movs	r0, #16
 8009b8e:	f001 f84d 	bl	800ac2c <malloc>
 8009b92:	4602      	mov	r2, r0
 8009b94:	f8cb 001c 	str.w	r0, [fp, #28]
 8009b98:	b920      	cbnz	r0, 8009ba4 <_dtoa_r+0x34>
 8009b9a:	4ba7      	ldr	r3, [pc, #668]	@ (8009e38 <_dtoa_r+0x2c8>)
 8009b9c:	21ef      	movs	r1, #239	@ 0xef
 8009b9e:	48a7      	ldr	r0, [pc, #668]	@ (8009e3c <_dtoa_r+0x2cc>)
 8009ba0:	f7ff f98a 	bl	8008eb8 <__assert_func>
 8009ba4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009ba8:	6007      	str	r7, [r0, #0]
 8009baa:	60c7      	str	r7, [r0, #12]
 8009bac:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009bb0:	6819      	ldr	r1, [r3, #0]
 8009bb2:	b159      	cbz	r1, 8009bcc <_dtoa_r+0x5c>
 8009bb4:	685a      	ldr	r2, [r3, #4]
 8009bb6:	604a      	str	r2, [r1, #4]
 8009bb8:	2301      	movs	r3, #1
 8009bba:	4093      	lsls	r3, r2
 8009bbc:	608b      	str	r3, [r1, #8]
 8009bbe:	4658      	mov	r0, fp
 8009bc0:	f001 f9d6 	bl	800af70 <_Bfree>
 8009bc4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009bc8:	2200      	movs	r2, #0
 8009bca:	601a      	str	r2, [r3, #0]
 8009bcc:	1e2b      	subs	r3, r5, #0
 8009bce:	bfb9      	ittee	lt
 8009bd0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8009bd4:	9303      	strlt	r3, [sp, #12]
 8009bd6:	2300      	movge	r3, #0
 8009bd8:	6033      	strge	r3, [r6, #0]
 8009bda:	9f03      	ldr	r7, [sp, #12]
 8009bdc:	4b98      	ldr	r3, [pc, #608]	@ (8009e40 <_dtoa_r+0x2d0>)
 8009bde:	bfbc      	itt	lt
 8009be0:	2201      	movlt	r2, #1
 8009be2:	6032      	strlt	r2, [r6, #0]
 8009be4:	43bb      	bics	r3, r7
 8009be6:	d112      	bne.n	8009c0e <_dtoa_r+0x9e>
 8009be8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009bea:	f242 730f 	movw	r3, #9999	@ 0x270f
 8009bee:	6013      	str	r3, [r2, #0]
 8009bf0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009bf4:	4323      	orrs	r3, r4
 8009bf6:	f000 854d 	beq.w	800a694 <_dtoa_r+0xb24>
 8009bfa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009bfc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8009e54 <_dtoa_r+0x2e4>
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	f000 854f 	beq.w	800a6a4 <_dtoa_r+0xb34>
 8009c06:	f10a 0303 	add.w	r3, sl, #3
 8009c0a:	f000 bd49 	b.w	800a6a0 <_dtoa_r+0xb30>
 8009c0e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009c12:	2200      	movs	r2, #0
 8009c14:	ec51 0b17 	vmov	r0, r1, d7
 8009c18:	2300      	movs	r3, #0
 8009c1a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8009c1e:	f7f6 ff5b 	bl	8000ad8 <__aeabi_dcmpeq>
 8009c22:	4680      	mov	r8, r0
 8009c24:	b158      	cbz	r0, 8009c3e <_dtoa_r+0xce>
 8009c26:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009c28:	2301      	movs	r3, #1
 8009c2a:	6013      	str	r3, [r2, #0]
 8009c2c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009c2e:	b113      	cbz	r3, 8009c36 <_dtoa_r+0xc6>
 8009c30:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8009c32:	4b84      	ldr	r3, [pc, #528]	@ (8009e44 <_dtoa_r+0x2d4>)
 8009c34:	6013      	str	r3, [r2, #0]
 8009c36:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8009e58 <_dtoa_r+0x2e8>
 8009c3a:	f000 bd33 	b.w	800a6a4 <_dtoa_r+0xb34>
 8009c3e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8009c42:	aa16      	add	r2, sp, #88	@ 0x58
 8009c44:	a917      	add	r1, sp, #92	@ 0x5c
 8009c46:	4658      	mov	r0, fp
 8009c48:	f001 fc7c 	bl	800b544 <__d2b>
 8009c4c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8009c50:	4681      	mov	r9, r0
 8009c52:	2e00      	cmp	r6, #0
 8009c54:	d077      	beq.n	8009d46 <_dtoa_r+0x1d6>
 8009c56:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009c58:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8009c5c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009c60:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009c64:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009c68:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8009c6c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009c70:	4619      	mov	r1, r3
 8009c72:	2200      	movs	r2, #0
 8009c74:	4b74      	ldr	r3, [pc, #464]	@ (8009e48 <_dtoa_r+0x2d8>)
 8009c76:	f7f6 fb0f 	bl	8000298 <__aeabi_dsub>
 8009c7a:	a369      	add	r3, pc, #420	@ (adr r3, 8009e20 <_dtoa_r+0x2b0>)
 8009c7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c80:	f7f6 fcc2 	bl	8000608 <__aeabi_dmul>
 8009c84:	a368      	add	r3, pc, #416	@ (adr r3, 8009e28 <_dtoa_r+0x2b8>)
 8009c86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c8a:	f7f6 fb07 	bl	800029c <__adddf3>
 8009c8e:	4604      	mov	r4, r0
 8009c90:	4630      	mov	r0, r6
 8009c92:	460d      	mov	r5, r1
 8009c94:	f7f6 fc4e 	bl	8000534 <__aeabi_i2d>
 8009c98:	a365      	add	r3, pc, #404	@ (adr r3, 8009e30 <_dtoa_r+0x2c0>)
 8009c9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c9e:	f7f6 fcb3 	bl	8000608 <__aeabi_dmul>
 8009ca2:	4602      	mov	r2, r0
 8009ca4:	460b      	mov	r3, r1
 8009ca6:	4620      	mov	r0, r4
 8009ca8:	4629      	mov	r1, r5
 8009caa:	f7f6 faf7 	bl	800029c <__adddf3>
 8009cae:	4604      	mov	r4, r0
 8009cb0:	460d      	mov	r5, r1
 8009cb2:	f7f6 ff59 	bl	8000b68 <__aeabi_d2iz>
 8009cb6:	2200      	movs	r2, #0
 8009cb8:	4607      	mov	r7, r0
 8009cba:	2300      	movs	r3, #0
 8009cbc:	4620      	mov	r0, r4
 8009cbe:	4629      	mov	r1, r5
 8009cc0:	f7f6 ff14 	bl	8000aec <__aeabi_dcmplt>
 8009cc4:	b140      	cbz	r0, 8009cd8 <_dtoa_r+0x168>
 8009cc6:	4638      	mov	r0, r7
 8009cc8:	f7f6 fc34 	bl	8000534 <__aeabi_i2d>
 8009ccc:	4622      	mov	r2, r4
 8009cce:	462b      	mov	r3, r5
 8009cd0:	f7f6 ff02 	bl	8000ad8 <__aeabi_dcmpeq>
 8009cd4:	b900      	cbnz	r0, 8009cd8 <_dtoa_r+0x168>
 8009cd6:	3f01      	subs	r7, #1
 8009cd8:	2f16      	cmp	r7, #22
 8009cda:	d851      	bhi.n	8009d80 <_dtoa_r+0x210>
 8009cdc:	4b5b      	ldr	r3, [pc, #364]	@ (8009e4c <_dtoa_r+0x2dc>)
 8009cde:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ce6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009cea:	f7f6 feff 	bl	8000aec <__aeabi_dcmplt>
 8009cee:	2800      	cmp	r0, #0
 8009cf0:	d048      	beq.n	8009d84 <_dtoa_r+0x214>
 8009cf2:	3f01      	subs	r7, #1
 8009cf4:	2300      	movs	r3, #0
 8009cf6:	9312      	str	r3, [sp, #72]	@ 0x48
 8009cf8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8009cfa:	1b9b      	subs	r3, r3, r6
 8009cfc:	1e5a      	subs	r2, r3, #1
 8009cfe:	bf44      	itt	mi
 8009d00:	f1c3 0801 	rsbmi	r8, r3, #1
 8009d04:	2300      	movmi	r3, #0
 8009d06:	9208      	str	r2, [sp, #32]
 8009d08:	bf54      	ite	pl
 8009d0a:	f04f 0800 	movpl.w	r8, #0
 8009d0e:	9308      	strmi	r3, [sp, #32]
 8009d10:	2f00      	cmp	r7, #0
 8009d12:	db39      	blt.n	8009d88 <_dtoa_r+0x218>
 8009d14:	9b08      	ldr	r3, [sp, #32]
 8009d16:	970f      	str	r7, [sp, #60]	@ 0x3c
 8009d18:	443b      	add	r3, r7
 8009d1a:	9308      	str	r3, [sp, #32]
 8009d1c:	2300      	movs	r3, #0
 8009d1e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009d20:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d22:	2b09      	cmp	r3, #9
 8009d24:	d864      	bhi.n	8009df0 <_dtoa_r+0x280>
 8009d26:	2b05      	cmp	r3, #5
 8009d28:	bfc4      	itt	gt
 8009d2a:	3b04      	subgt	r3, #4
 8009d2c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8009d2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d30:	f1a3 0302 	sub.w	r3, r3, #2
 8009d34:	bfcc      	ite	gt
 8009d36:	2400      	movgt	r4, #0
 8009d38:	2401      	movle	r4, #1
 8009d3a:	2b03      	cmp	r3, #3
 8009d3c:	d863      	bhi.n	8009e06 <_dtoa_r+0x296>
 8009d3e:	e8df f003 	tbb	[pc, r3]
 8009d42:	372a      	.short	0x372a
 8009d44:	5535      	.short	0x5535
 8009d46:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8009d4a:	441e      	add	r6, r3
 8009d4c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8009d50:	2b20      	cmp	r3, #32
 8009d52:	bfc1      	itttt	gt
 8009d54:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8009d58:	409f      	lslgt	r7, r3
 8009d5a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8009d5e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8009d62:	bfd6      	itet	le
 8009d64:	f1c3 0320 	rsble	r3, r3, #32
 8009d68:	ea47 0003 	orrgt.w	r0, r7, r3
 8009d6c:	fa04 f003 	lslle.w	r0, r4, r3
 8009d70:	f7f6 fbd0 	bl	8000514 <__aeabi_ui2d>
 8009d74:	2201      	movs	r2, #1
 8009d76:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8009d7a:	3e01      	subs	r6, #1
 8009d7c:	9214      	str	r2, [sp, #80]	@ 0x50
 8009d7e:	e777      	b.n	8009c70 <_dtoa_r+0x100>
 8009d80:	2301      	movs	r3, #1
 8009d82:	e7b8      	b.n	8009cf6 <_dtoa_r+0x186>
 8009d84:	9012      	str	r0, [sp, #72]	@ 0x48
 8009d86:	e7b7      	b.n	8009cf8 <_dtoa_r+0x188>
 8009d88:	427b      	negs	r3, r7
 8009d8a:	930a      	str	r3, [sp, #40]	@ 0x28
 8009d8c:	2300      	movs	r3, #0
 8009d8e:	eba8 0807 	sub.w	r8, r8, r7
 8009d92:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009d94:	e7c4      	b.n	8009d20 <_dtoa_r+0x1b0>
 8009d96:	2300      	movs	r3, #0
 8009d98:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009d9a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	dc35      	bgt.n	8009e0c <_dtoa_r+0x29c>
 8009da0:	2301      	movs	r3, #1
 8009da2:	9300      	str	r3, [sp, #0]
 8009da4:	9307      	str	r3, [sp, #28]
 8009da6:	461a      	mov	r2, r3
 8009da8:	920e      	str	r2, [sp, #56]	@ 0x38
 8009daa:	e00b      	b.n	8009dc4 <_dtoa_r+0x254>
 8009dac:	2301      	movs	r3, #1
 8009dae:	e7f3      	b.n	8009d98 <_dtoa_r+0x228>
 8009db0:	2300      	movs	r3, #0
 8009db2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009db4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009db6:	18fb      	adds	r3, r7, r3
 8009db8:	9300      	str	r3, [sp, #0]
 8009dba:	3301      	adds	r3, #1
 8009dbc:	2b01      	cmp	r3, #1
 8009dbe:	9307      	str	r3, [sp, #28]
 8009dc0:	bfb8      	it	lt
 8009dc2:	2301      	movlt	r3, #1
 8009dc4:	f8db 001c 	ldr.w	r0, [fp, #28]
 8009dc8:	2100      	movs	r1, #0
 8009dca:	2204      	movs	r2, #4
 8009dcc:	f102 0514 	add.w	r5, r2, #20
 8009dd0:	429d      	cmp	r5, r3
 8009dd2:	d91f      	bls.n	8009e14 <_dtoa_r+0x2a4>
 8009dd4:	6041      	str	r1, [r0, #4]
 8009dd6:	4658      	mov	r0, fp
 8009dd8:	f001 f88a 	bl	800aef0 <_Balloc>
 8009ddc:	4682      	mov	sl, r0
 8009dde:	2800      	cmp	r0, #0
 8009de0:	d13c      	bne.n	8009e5c <_dtoa_r+0x2ec>
 8009de2:	4b1b      	ldr	r3, [pc, #108]	@ (8009e50 <_dtoa_r+0x2e0>)
 8009de4:	4602      	mov	r2, r0
 8009de6:	f240 11af 	movw	r1, #431	@ 0x1af
 8009dea:	e6d8      	b.n	8009b9e <_dtoa_r+0x2e>
 8009dec:	2301      	movs	r3, #1
 8009dee:	e7e0      	b.n	8009db2 <_dtoa_r+0x242>
 8009df0:	2401      	movs	r4, #1
 8009df2:	2300      	movs	r3, #0
 8009df4:	9309      	str	r3, [sp, #36]	@ 0x24
 8009df6:	940b      	str	r4, [sp, #44]	@ 0x2c
 8009df8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009dfc:	9300      	str	r3, [sp, #0]
 8009dfe:	9307      	str	r3, [sp, #28]
 8009e00:	2200      	movs	r2, #0
 8009e02:	2312      	movs	r3, #18
 8009e04:	e7d0      	b.n	8009da8 <_dtoa_r+0x238>
 8009e06:	2301      	movs	r3, #1
 8009e08:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009e0a:	e7f5      	b.n	8009df8 <_dtoa_r+0x288>
 8009e0c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009e0e:	9300      	str	r3, [sp, #0]
 8009e10:	9307      	str	r3, [sp, #28]
 8009e12:	e7d7      	b.n	8009dc4 <_dtoa_r+0x254>
 8009e14:	3101      	adds	r1, #1
 8009e16:	0052      	lsls	r2, r2, #1
 8009e18:	e7d8      	b.n	8009dcc <_dtoa_r+0x25c>
 8009e1a:	bf00      	nop
 8009e1c:	f3af 8000 	nop.w
 8009e20:	636f4361 	.word	0x636f4361
 8009e24:	3fd287a7 	.word	0x3fd287a7
 8009e28:	8b60c8b3 	.word	0x8b60c8b3
 8009e2c:	3fc68a28 	.word	0x3fc68a28
 8009e30:	509f79fb 	.word	0x509f79fb
 8009e34:	3fd34413 	.word	0x3fd34413
 8009e38:	08029675 	.word	0x08029675
 8009e3c:	0802968c 	.word	0x0802968c
 8009e40:	7ff00000 	.word	0x7ff00000
 8009e44:	08029645 	.word	0x08029645
 8009e48:	3ff80000 	.word	0x3ff80000
 8009e4c:	08029798 	.word	0x08029798
 8009e50:	080296e4 	.word	0x080296e4
 8009e54:	08029671 	.word	0x08029671
 8009e58:	08029644 	.word	0x08029644
 8009e5c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009e60:	6018      	str	r0, [r3, #0]
 8009e62:	9b07      	ldr	r3, [sp, #28]
 8009e64:	2b0e      	cmp	r3, #14
 8009e66:	f200 80a4 	bhi.w	8009fb2 <_dtoa_r+0x442>
 8009e6a:	2c00      	cmp	r4, #0
 8009e6c:	f000 80a1 	beq.w	8009fb2 <_dtoa_r+0x442>
 8009e70:	2f00      	cmp	r7, #0
 8009e72:	dd33      	ble.n	8009edc <_dtoa_r+0x36c>
 8009e74:	4bad      	ldr	r3, [pc, #692]	@ (800a12c <_dtoa_r+0x5bc>)
 8009e76:	f007 020f 	and.w	r2, r7, #15
 8009e7a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009e7e:	ed93 7b00 	vldr	d7, [r3]
 8009e82:	05f8      	lsls	r0, r7, #23
 8009e84:	ed8d 7b04 	vstr	d7, [sp, #16]
 8009e88:	ea4f 1427 	mov.w	r4, r7, asr #4
 8009e8c:	d516      	bpl.n	8009ebc <_dtoa_r+0x34c>
 8009e8e:	4ba8      	ldr	r3, [pc, #672]	@ (800a130 <_dtoa_r+0x5c0>)
 8009e90:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009e94:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009e98:	f7f6 fce0 	bl	800085c <__aeabi_ddiv>
 8009e9c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009ea0:	f004 040f 	and.w	r4, r4, #15
 8009ea4:	2603      	movs	r6, #3
 8009ea6:	4da2      	ldr	r5, [pc, #648]	@ (800a130 <_dtoa_r+0x5c0>)
 8009ea8:	b954      	cbnz	r4, 8009ec0 <_dtoa_r+0x350>
 8009eaa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009eae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009eb2:	f7f6 fcd3 	bl	800085c <__aeabi_ddiv>
 8009eb6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009eba:	e028      	b.n	8009f0e <_dtoa_r+0x39e>
 8009ebc:	2602      	movs	r6, #2
 8009ebe:	e7f2      	b.n	8009ea6 <_dtoa_r+0x336>
 8009ec0:	07e1      	lsls	r1, r4, #31
 8009ec2:	d508      	bpl.n	8009ed6 <_dtoa_r+0x366>
 8009ec4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009ec8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009ecc:	f7f6 fb9c 	bl	8000608 <__aeabi_dmul>
 8009ed0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009ed4:	3601      	adds	r6, #1
 8009ed6:	1064      	asrs	r4, r4, #1
 8009ed8:	3508      	adds	r5, #8
 8009eda:	e7e5      	b.n	8009ea8 <_dtoa_r+0x338>
 8009edc:	f000 80d2 	beq.w	800a084 <_dtoa_r+0x514>
 8009ee0:	427c      	negs	r4, r7
 8009ee2:	4b92      	ldr	r3, [pc, #584]	@ (800a12c <_dtoa_r+0x5bc>)
 8009ee4:	4d92      	ldr	r5, [pc, #584]	@ (800a130 <_dtoa_r+0x5c0>)
 8009ee6:	f004 020f 	and.w	r2, r4, #15
 8009eea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009eee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ef2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009ef6:	f7f6 fb87 	bl	8000608 <__aeabi_dmul>
 8009efa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009efe:	1124      	asrs	r4, r4, #4
 8009f00:	2300      	movs	r3, #0
 8009f02:	2602      	movs	r6, #2
 8009f04:	2c00      	cmp	r4, #0
 8009f06:	f040 80b2 	bne.w	800a06e <_dtoa_r+0x4fe>
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d1d3      	bne.n	8009eb6 <_dtoa_r+0x346>
 8009f0e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009f10:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	f000 80b7 	beq.w	800a088 <_dtoa_r+0x518>
 8009f1a:	4b86      	ldr	r3, [pc, #536]	@ (800a134 <_dtoa_r+0x5c4>)
 8009f1c:	2200      	movs	r2, #0
 8009f1e:	4620      	mov	r0, r4
 8009f20:	4629      	mov	r1, r5
 8009f22:	f7f6 fde3 	bl	8000aec <__aeabi_dcmplt>
 8009f26:	2800      	cmp	r0, #0
 8009f28:	f000 80ae 	beq.w	800a088 <_dtoa_r+0x518>
 8009f2c:	9b07      	ldr	r3, [sp, #28]
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	f000 80aa 	beq.w	800a088 <_dtoa_r+0x518>
 8009f34:	9b00      	ldr	r3, [sp, #0]
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	dd37      	ble.n	8009faa <_dtoa_r+0x43a>
 8009f3a:	1e7b      	subs	r3, r7, #1
 8009f3c:	9304      	str	r3, [sp, #16]
 8009f3e:	4620      	mov	r0, r4
 8009f40:	4b7d      	ldr	r3, [pc, #500]	@ (800a138 <_dtoa_r+0x5c8>)
 8009f42:	2200      	movs	r2, #0
 8009f44:	4629      	mov	r1, r5
 8009f46:	f7f6 fb5f 	bl	8000608 <__aeabi_dmul>
 8009f4a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009f4e:	9c00      	ldr	r4, [sp, #0]
 8009f50:	3601      	adds	r6, #1
 8009f52:	4630      	mov	r0, r6
 8009f54:	f7f6 faee 	bl	8000534 <__aeabi_i2d>
 8009f58:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009f5c:	f7f6 fb54 	bl	8000608 <__aeabi_dmul>
 8009f60:	4b76      	ldr	r3, [pc, #472]	@ (800a13c <_dtoa_r+0x5cc>)
 8009f62:	2200      	movs	r2, #0
 8009f64:	f7f6 f99a 	bl	800029c <__adddf3>
 8009f68:	4605      	mov	r5, r0
 8009f6a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8009f6e:	2c00      	cmp	r4, #0
 8009f70:	f040 808d 	bne.w	800a08e <_dtoa_r+0x51e>
 8009f74:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009f78:	4b71      	ldr	r3, [pc, #452]	@ (800a140 <_dtoa_r+0x5d0>)
 8009f7a:	2200      	movs	r2, #0
 8009f7c:	f7f6 f98c 	bl	8000298 <__aeabi_dsub>
 8009f80:	4602      	mov	r2, r0
 8009f82:	460b      	mov	r3, r1
 8009f84:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009f88:	462a      	mov	r2, r5
 8009f8a:	4633      	mov	r3, r6
 8009f8c:	f7f6 fdcc 	bl	8000b28 <__aeabi_dcmpgt>
 8009f90:	2800      	cmp	r0, #0
 8009f92:	f040 828b 	bne.w	800a4ac <_dtoa_r+0x93c>
 8009f96:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009f9a:	462a      	mov	r2, r5
 8009f9c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8009fa0:	f7f6 fda4 	bl	8000aec <__aeabi_dcmplt>
 8009fa4:	2800      	cmp	r0, #0
 8009fa6:	f040 8128 	bne.w	800a1fa <_dtoa_r+0x68a>
 8009faa:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8009fae:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8009fb2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	f2c0 815a 	blt.w	800a26e <_dtoa_r+0x6fe>
 8009fba:	2f0e      	cmp	r7, #14
 8009fbc:	f300 8157 	bgt.w	800a26e <_dtoa_r+0x6fe>
 8009fc0:	4b5a      	ldr	r3, [pc, #360]	@ (800a12c <_dtoa_r+0x5bc>)
 8009fc2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009fc6:	ed93 7b00 	vldr	d7, [r3]
 8009fca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	ed8d 7b00 	vstr	d7, [sp]
 8009fd2:	da03      	bge.n	8009fdc <_dtoa_r+0x46c>
 8009fd4:	9b07      	ldr	r3, [sp, #28]
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	f340 8101 	ble.w	800a1de <_dtoa_r+0x66e>
 8009fdc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009fe0:	4656      	mov	r6, sl
 8009fe2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009fe6:	4620      	mov	r0, r4
 8009fe8:	4629      	mov	r1, r5
 8009fea:	f7f6 fc37 	bl	800085c <__aeabi_ddiv>
 8009fee:	f7f6 fdbb 	bl	8000b68 <__aeabi_d2iz>
 8009ff2:	4680      	mov	r8, r0
 8009ff4:	f7f6 fa9e 	bl	8000534 <__aeabi_i2d>
 8009ff8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009ffc:	f7f6 fb04 	bl	8000608 <__aeabi_dmul>
 800a000:	4602      	mov	r2, r0
 800a002:	460b      	mov	r3, r1
 800a004:	4620      	mov	r0, r4
 800a006:	4629      	mov	r1, r5
 800a008:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800a00c:	f7f6 f944 	bl	8000298 <__aeabi_dsub>
 800a010:	f806 4b01 	strb.w	r4, [r6], #1
 800a014:	9d07      	ldr	r5, [sp, #28]
 800a016:	eba6 040a 	sub.w	r4, r6, sl
 800a01a:	42a5      	cmp	r5, r4
 800a01c:	4602      	mov	r2, r0
 800a01e:	460b      	mov	r3, r1
 800a020:	f040 8117 	bne.w	800a252 <_dtoa_r+0x6e2>
 800a024:	f7f6 f93a 	bl	800029c <__adddf3>
 800a028:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a02c:	4604      	mov	r4, r0
 800a02e:	460d      	mov	r5, r1
 800a030:	f7f6 fd7a 	bl	8000b28 <__aeabi_dcmpgt>
 800a034:	2800      	cmp	r0, #0
 800a036:	f040 80f9 	bne.w	800a22c <_dtoa_r+0x6bc>
 800a03a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a03e:	4620      	mov	r0, r4
 800a040:	4629      	mov	r1, r5
 800a042:	f7f6 fd49 	bl	8000ad8 <__aeabi_dcmpeq>
 800a046:	b118      	cbz	r0, 800a050 <_dtoa_r+0x4e0>
 800a048:	f018 0f01 	tst.w	r8, #1
 800a04c:	f040 80ee 	bne.w	800a22c <_dtoa_r+0x6bc>
 800a050:	4649      	mov	r1, r9
 800a052:	4658      	mov	r0, fp
 800a054:	f000 ff8c 	bl	800af70 <_Bfree>
 800a058:	2300      	movs	r3, #0
 800a05a:	7033      	strb	r3, [r6, #0]
 800a05c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a05e:	3701      	adds	r7, #1
 800a060:	601f      	str	r7, [r3, #0]
 800a062:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a064:	2b00      	cmp	r3, #0
 800a066:	f000 831d 	beq.w	800a6a4 <_dtoa_r+0xb34>
 800a06a:	601e      	str	r6, [r3, #0]
 800a06c:	e31a      	b.n	800a6a4 <_dtoa_r+0xb34>
 800a06e:	07e2      	lsls	r2, r4, #31
 800a070:	d505      	bpl.n	800a07e <_dtoa_r+0x50e>
 800a072:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a076:	f7f6 fac7 	bl	8000608 <__aeabi_dmul>
 800a07a:	3601      	adds	r6, #1
 800a07c:	2301      	movs	r3, #1
 800a07e:	1064      	asrs	r4, r4, #1
 800a080:	3508      	adds	r5, #8
 800a082:	e73f      	b.n	8009f04 <_dtoa_r+0x394>
 800a084:	2602      	movs	r6, #2
 800a086:	e742      	b.n	8009f0e <_dtoa_r+0x39e>
 800a088:	9c07      	ldr	r4, [sp, #28]
 800a08a:	9704      	str	r7, [sp, #16]
 800a08c:	e761      	b.n	8009f52 <_dtoa_r+0x3e2>
 800a08e:	4b27      	ldr	r3, [pc, #156]	@ (800a12c <_dtoa_r+0x5bc>)
 800a090:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a092:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a096:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a09a:	4454      	add	r4, sl
 800a09c:	2900      	cmp	r1, #0
 800a09e:	d053      	beq.n	800a148 <_dtoa_r+0x5d8>
 800a0a0:	4928      	ldr	r1, [pc, #160]	@ (800a144 <_dtoa_r+0x5d4>)
 800a0a2:	2000      	movs	r0, #0
 800a0a4:	f7f6 fbda 	bl	800085c <__aeabi_ddiv>
 800a0a8:	4633      	mov	r3, r6
 800a0aa:	462a      	mov	r2, r5
 800a0ac:	f7f6 f8f4 	bl	8000298 <__aeabi_dsub>
 800a0b0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a0b4:	4656      	mov	r6, sl
 800a0b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a0ba:	f7f6 fd55 	bl	8000b68 <__aeabi_d2iz>
 800a0be:	4605      	mov	r5, r0
 800a0c0:	f7f6 fa38 	bl	8000534 <__aeabi_i2d>
 800a0c4:	4602      	mov	r2, r0
 800a0c6:	460b      	mov	r3, r1
 800a0c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a0cc:	f7f6 f8e4 	bl	8000298 <__aeabi_dsub>
 800a0d0:	3530      	adds	r5, #48	@ 0x30
 800a0d2:	4602      	mov	r2, r0
 800a0d4:	460b      	mov	r3, r1
 800a0d6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a0da:	f806 5b01 	strb.w	r5, [r6], #1
 800a0de:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a0e2:	f7f6 fd03 	bl	8000aec <__aeabi_dcmplt>
 800a0e6:	2800      	cmp	r0, #0
 800a0e8:	d171      	bne.n	800a1ce <_dtoa_r+0x65e>
 800a0ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a0ee:	4911      	ldr	r1, [pc, #68]	@ (800a134 <_dtoa_r+0x5c4>)
 800a0f0:	2000      	movs	r0, #0
 800a0f2:	f7f6 f8d1 	bl	8000298 <__aeabi_dsub>
 800a0f6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a0fa:	f7f6 fcf7 	bl	8000aec <__aeabi_dcmplt>
 800a0fe:	2800      	cmp	r0, #0
 800a100:	f040 8095 	bne.w	800a22e <_dtoa_r+0x6be>
 800a104:	42a6      	cmp	r6, r4
 800a106:	f43f af50 	beq.w	8009faa <_dtoa_r+0x43a>
 800a10a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a10e:	4b0a      	ldr	r3, [pc, #40]	@ (800a138 <_dtoa_r+0x5c8>)
 800a110:	2200      	movs	r2, #0
 800a112:	f7f6 fa79 	bl	8000608 <__aeabi_dmul>
 800a116:	4b08      	ldr	r3, [pc, #32]	@ (800a138 <_dtoa_r+0x5c8>)
 800a118:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a11c:	2200      	movs	r2, #0
 800a11e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a122:	f7f6 fa71 	bl	8000608 <__aeabi_dmul>
 800a126:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a12a:	e7c4      	b.n	800a0b6 <_dtoa_r+0x546>
 800a12c:	08029798 	.word	0x08029798
 800a130:	08029770 	.word	0x08029770
 800a134:	3ff00000 	.word	0x3ff00000
 800a138:	40240000 	.word	0x40240000
 800a13c:	401c0000 	.word	0x401c0000
 800a140:	40140000 	.word	0x40140000
 800a144:	3fe00000 	.word	0x3fe00000
 800a148:	4631      	mov	r1, r6
 800a14a:	4628      	mov	r0, r5
 800a14c:	f7f6 fa5c 	bl	8000608 <__aeabi_dmul>
 800a150:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a154:	9415      	str	r4, [sp, #84]	@ 0x54
 800a156:	4656      	mov	r6, sl
 800a158:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a15c:	f7f6 fd04 	bl	8000b68 <__aeabi_d2iz>
 800a160:	4605      	mov	r5, r0
 800a162:	f7f6 f9e7 	bl	8000534 <__aeabi_i2d>
 800a166:	4602      	mov	r2, r0
 800a168:	460b      	mov	r3, r1
 800a16a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a16e:	f7f6 f893 	bl	8000298 <__aeabi_dsub>
 800a172:	3530      	adds	r5, #48	@ 0x30
 800a174:	f806 5b01 	strb.w	r5, [r6], #1
 800a178:	4602      	mov	r2, r0
 800a17a:	460b      	mov	r3, r1
 800a17c:	42a6      	cmp	r6, r4
 800a17e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a182:	f04f 0200 	mov.w	r2, #0
 800a186:	d124      	bne.n	800a1d2 <_dtoa_r+0x662>
 800a188:	4bac      	ldr	r3, [pc, #688]	@ (800a43c <_dtoa_r+0x8cc>)
 800a18a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a18e:	f7f6 f885 	bl	800029c <__adddf3>
 800a192:	4602      	mov	r2, r0
 800a194:	460b      	mov	r3, r1
 800a196:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a19a:	f7f6 fcc5 	bl	8000b28 <__aeabi_dcmpgt>
 800a19e:	2800      	cmp	r0, #0
 800a1a0:	d145      	bne.n	800a22e <_dtoa_r+0x6be>
 800a1a2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a1a6:	49a5      	ldr	r1, [pc, #660]	@ (800a43c <_dtoa_r+0x8cc>)
 800a1a8:	2000      	movs	r0, #0
 800a1aa:	f7f6 f875 	bl	8000298 <__aeabi_dsub>
 800a1ae:	4602      	mov	r2, r0
 800a1b0:	460b      	mov	r3, r1
 800a1b2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a1b6:	f7f6 fc99 	bl	8000aec <__aeabi_dcmplt>
 800a1ba:	2800      	cmp	r0, #0
 800a1bc:	f43f aef5 	beq.w	8009faa <_dtoa_r+0x43a>
 800a1c0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800a1c2:	1e73      	subs	r3, r6, #1
 800a1c4:	9315      	str	r3, [sp, #84]	@ 0x54
 800a1c6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a1ca:	2b30      	cmp	r3, #48	@ 0x30
 800a1cc:	d0f8      	beq.n	800a1c0 <_dtoa_r+0x650>
 800a1ce:	9f04      	ldr	r7, [sp, #16]
 800a1d0:	e73e      	b.n	800a050 <_dtoa_r+0x4e0>
 800a1d2:	4b9b      	ldr	r3, [pc, #620]	@ (800a440 <_dtoa_r+0x8d0>)
 800a1d4:	f7f6 fa18 	bl	8000608 <__aeabi_dmul>
 800a1d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a1dc:	e7bc      	b.n	800a158 <_dtoa_r+0x5e8>
 800a1de:	d10c      	bne.n	800a1fa <_dtoa_r+0x68a>
 800a1e0:	4b98      	ldr	r3, [pc, #608]	@ (800a444 <_dtoa_r+0x8d4>)
 800a1e2:	2200      	movs	r2, #0
 800a1e4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a1e8:	f7f6 fa0e 	bl	8000608 <__aeabi_dmul>
 800a1ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a1f0:	f7f6 fc90 	bl	8000b14 <__aeabi_dcmpge>
 800a1f4:	2800      	cmp	r0, #0
 800a1f6:	f000 8157 	beq.w	800a4a8 <_dtoa_r+0x938>
 800a1fa:	2400      	movs	r4, #0
 800a1fc:	4625      	mov	r5, r4
 800a1fe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a200:	43db      	mvns	r3, r3
 800a202:	9304      	str	r3, [sp, #16]
 800a204:	4656      	mov	r6, sl
 800a206:	2700      	movs	r7, #0
 800a208:	4621      	mov	r1, r4
 800a20a:	4658      	mov	r0, fp
 800a20c:	f000 feb0 	bl	800af70 <_Bfree>
 800a210:	2d00      	cmp	r5, #0
 800a212:	d0dc      	beq.n	800a1ce <_dtoa_r+0x65e>
 800a214:	b12f      	cbz	r7, 800a222 <_dtoa_r+0x6b2>
 800a216:	42af      	cmp	r7, r5
 800a218:	d003      	beq.n	800a222 <_dtoa_r+0x6b2>
 800a21a:	4639      	mov	r1, r7
 800a21c:	4658      	mov	r0, fp
 800a21e:	f000 fea7 	bl	800af70 <_Bfree>
 800a222:	4629      	mov	r1, r5
 800a224:	4658      	mov	r0, fp
 800a226:	f000 fea3 	bl	800af70 <_Bfree>
 800a22a:	e7d0      	b.n	800a1ce <_dtoa_r+0x65e>
 800a22c:	9704      	str	r7, [sp, #16]
 800a22e:	4633      	mov	r3, r6
 800a230:	461e      	mov	r6, r3
 800a232:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a236:	2a39      	cmp	r2, #57	@ 0x39
 800a238:	d107      	bne.n	800a24a <_dtoa_r+0x6da>
 800a23a:	459a      	cmp	sl, r3
 800a23c:	d1f8      	bne.n	800a230 <_dtoa_r+0x6c0>
 800a23e:	9a04      	ldr	r2, [sp, #16]
 800a240:	3201      	adds	r2, #1
 800a242:	9204      	str	r2, [sp, #16]
 800a244:	2230      	movs	r2, #48	@ 0x30
 800a246:	f88a 2000 	strb.w	r2, [sl]
 800a24a:	781a      	ldrb	r2, [r3, #0]
 800a24c:	3201      	adds	r2, #1
 800a24e:	701a      	strb	r2, [r3, #0]
 800a250:	e7bd      	b.n	800a1ce <_dtoa_r+0x65e>
 800a252:	4b7b      	ldr	r3, [pc, #492]	@ (800a440 <_dtoa_r+0x8d0>)
 800a254:	2200      	movs	r2, #0
 800a256:	f7f6 f9d7 	bl	8000608 <__aeabi_dmul>
 800a25a:	2200      	movs	r2, #0
 800a25c:	2300      	movs	r3, #0
 800a25e:	4604      	mov	r4, r0
 800a260:	460d      	mov	r5, r1
 800a262:	f7f6 fc39 	bl	8000ad8 <__aeabi_dcmpeq>
 800a266:	2800      	cmp	r0, #0
 800a268:	f43f aebb 	beq.w	8009fe2 <_dtoa_r+0x472>
 800a26c:	e6f0      	b.n	800a050 <_dtoa_r+0x4e0>
 800a26e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a270:	2a00      	cmp	r2, #0
 800a272:	f000 80db 	beq.w	800a42c <_dtoa_r+0x8bc>
 800a276:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a278:	2a01      	cmp	r2, #1
 800a27a:	f300 80bf 	bgt.w	800a3fc <_dtoa_r+0x88c>
 800a27e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800a280:	2a00      	cmp	r2, #0
 800a282:	f000 80b7 	beq.w	800a3f4 <_dtoa_r+0x884>
 800a286:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800a28a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a28c:	4646      	mov	r6, r8
 800a28e:	9a08      	ldr	r2, [sp, #32]
 800a290:	2101      	movs	r1, #1
 800a292:	441a      	add	r2, r3
 800a294:	4658      	mov	r0, fp
 800a296:	4498      	add	r8, r3
 800a298:	9208      	str	r2, [sp, #32]
 800a29a:	f000 ff1d 	bl	800b0d8 <__i2b>
 800a29e:	4605      	mov	r5, r0
 800a2a0:	b15e      	cbz	r6, 800a2ba <_dtoa_r+0x74a>
 800a2a2:	9b08      	ldr	r3, [sp, #32]
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	dd08      	ble.n	800a2ba <_dtoa_r+0x74a>
 800a2a8:	42b3      	cmp	r3, r6
 800a2aa:	9a08      	ldr	r2, [sp, #32]
 800a2ac:	bfa8      	it	ge
 800a2ae:	4633      	movge	r3, r6
 800a2b0:	eba8 0803 	sub.w	r8, r8, r3
 800a2b4:	1af6      	subs	r6, r6, r3
 800a2b6:	1ad3      	subs	r3, r2, r3
 800a2b8:	9308      	str	r3, [sp, #32]
 800a2ba:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a2bc:	b1f3      	cbz	r3, 800a2fc <_dtoa_r+0x78c>
 800a2be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	f000 80b7 	beq.w	800a434 <_dtoa_r+0x8c4>
 800a2c6:	b18c      	cbz	r4, 800a2ec <_dtoa_r+0x77c>
 800a2c8:	4629      	mov	r1, r5
 800a2ca:	4622      	mov	r2, r4
 800a2cc:	4658      	mov	r0, fp
 800a2ce:	f000 ffc3 	bl	800b258 <__pow5mult>
 800a2d2:	464a      	mov	r2, r9
 800a2d4:	4601      	mov	r1, r0
 800a2d6:	4605      	mov	r5, r0
 800a2d8:	4658      	mov	r0, fp
 800a2da:	f000 ff13 	bl	800b104 <__multiply>
 800a2de:	4649      	mov	r1, r9
 800a2e0:	9004      	str	r0, [sp, #16]
 800a2e2:	4658      	mov	r0, fp
 800a2e4:	f000 fe44 	bl	800af70 <_Bfree>
 800a2e8:	9b04      	ldr	r3, [sp, #16]
 800a2ea:	4699      	mov	r9, r3
 800a2ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a2ee:	1b1a      	subs	r2, r3, r4
 800a2f0:	d004      	beq.n	800a2fc <_dtoa_r+0x78c>
 800a2f2:	4649      	mov	r1, r9
 800a2f4:	4658      	mov	r0, fp
 800a2f6:	f000 ffaf 	bl	800b258 <__pow5mult>
 800a2fa:	4681      	mov	r9, r0
 800a2fc:	2101      	movs	r1, #1
 800a2fe:	4658      	mov	r0, fp
 800a300:	f000 feea 	bl	800b0d8 <__i2b>
 800a304:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a306:	4604      	mov	r4, r0
 800a308:	2b00      	cmp	r3, #0
 800a30a:	f000 81cf 	beq.w	800a6ac <_dtoa_r+0xb3c>
 800a30e:	461a      	mov	r2, r3
 800a310:	4601      	mov	r1, r0
 800a312:	4658      	mov	r0, fp
 800a314:	f000 ffa0 	bl	800b258 <__pow5mult>
 800a318:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a31a:	2b01      	cmp	r3, #1
 800a31c:	4604      	mov	r4, r0
 800a31e:	f300 8095 	bgt.w	800a44c <_dtoa_r+0x8dc>
 800a322:	9b02      	ldr	r3, [sp, #8]
 800a324:	2b00      	cmp	r3, #0
 800a326:	f040 8087 	bne.w	800a438 <_dtoa_r+0x8c8>
 800a32a:	9b03      	ldr	r3, [sp, #12]
 800a32c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a330:	2b00      	cmp	r3, #0
 800a332:	f040 8089 	bne.w	800a448 <_dtoa_r+0x8d8>
 800a336:	9b03      	ldr	r3, [sp, #12]
 800a338:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a33c:	0d1b      	lsrs	r3, r3, #20
 800a33e:	051b      	lsls	r3, r3, #20
 800a340:	b12b      	cbz	r3, 800a34e <_dtoa_r+0x7de>
 800a342:	9b08      	ldr	r3, [sp, #32]
 800a344:	3301      	adds	r3, #1
 800a346:	9308      	str	r3, [sp, #32]
 800a348:	f108 0801 	add.w	r8, r8, #1
 800a34c:	2301      	movs	r3, #1
 800a34e:	930a      	str	r3, [sp, #40]	@ 0x28
 800a350:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a352:	2b00      	cmp	r3, #0
 800a354:	f000 81b0 	beq.w	800a6b8 <_dtoa_r+0xb48>
 800a358:	6923      	ldr	r3, [r4, #16]
 800a35a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a35e:	6918      	ldr	r0, [r3, #16]
 800a360:	f000 fe6e 	bl	800b040 <__hi0bits>
 800a364:	f1c0 0020 	rsb	r0, r0, #32
 800a368:	9b08      	ldr	r3, [sp, #32]
 800a36a:	4418      	add	r0, r3
 800a36c:	f010 001f 	ands.w	r0, r0, #31
 800a370:	d077      	beq.n	800a462 <_dtoa_r+0x8f2>
 800a372:	f1c0 0320 	rsb	r3, r0, #32
 800a376:	2b04      	cmp	r3, #4
 800a378:	dd6b      	ble.n	800a452 <_dtoa_r+0x8e2>
 800a37a:	9b08      	ldr	r3, [sp, #32]
 800a37c:	f1c0 001c 	rsb	r0, r0, #28
 800a380:	4403      	add	r3, r0
 800a382:	4480      	add	r8, r0
 800a384:	4406      	add	r6, r0
 800a386:	9308      	str	r3, [sp, #32]
 800a388:	f1b8 0f00 	cmp.w	r8, #0
 800a38c:	dd05      	ble.n	800a39a <_dtoa_r+0x82a>
 800a38e:	4649      	mov	r1, r9
 800a390:	4642      	mov	r2, r8
 800a392:	4658      	mov	r0, fp
 800a394:	f000 ffba 	bl	800b30c <__lshift>
 800a398:	4681      	mov	r9, r0
 800a39a:	9b08      	ldr	r3, [sp, #32]
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	dd05      	ble.n	800a3ac <_dtoa_r+0x83c>
 800a3a0:	4621      	mov	r1, r4
 800a3a2:	461a      	mov	r2, r3
 800a3a4:	4658      	mov	r0, fp
 800a3a6:	f000 ffb1 	bl	800b30c <__lshift>
 800a3aa:	4604      	mov	r4, r0
 800a3ac:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d059      	beq.n	800a466 <_dtoa_r+0x8f6>
 800a3b2:	4621      	mov	r1, r4
 800a3b4:	4648      	mov	r0, r9
 800a3b6:	f001 f815 	bl	800b3e4 <__mcmp>
 800a3ba:	2800      	cmp	r0, #0
 800a3bc:	da53      	bge.n	800a466 <_dtoa_r+0x8f6>
 800a3be:	1e7b      	subs	r3, r7, #1
 800a3c0:	9304      	str	r3, [sp, #16]
 800a3c2:	4649      	mov	r1, r9
 800a3c4:	2300      	movs	r3, #0
 800a3c6:	220a      	movs	r2, #10
 800a3c8:	4658      	mov	r0, fp
 800a3ca:	f000 fdf3 	bl	800afb4 <__multadd>
 800a3ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a3d0:	4681      	mov	r9, r0
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	f000 8172 	beq.w	800a6bc <_dtoa_r+0xb4c>
 800a3d8:	2300      	movs	r3, #0
 800a3da:	4629      	mov	r1, r5
 800a3dc:	220a      	movs	r2, #10
 800a3de:	4658      	mov	r0, fp
 800a3e0:	f000 fde8 	bl	800afb4 <__multadd>
 800a3e4:	9b00      	ldr	r3, [sp, #0]
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	4605      	mov	r5, r0
 800a3ea:	dc67      	bgt.n	800a4bc <_dtoa_r+0x94c>
 800a3ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a3ee:	2b02      	cmp	r3, #2
 800a3f0:	dc41      	bgt.n	800a476 <_dtoa_r+0x906>
 800a3f2:	e063      	b.n	800a4bc <_dtoa_r+0x94c>
 800a3f4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800a3f6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800a3fa:	e746      	b.n	800a28a <_dtoa_r+0x71a>
 800a3fc:	9b07      	ldr	r3, [sp, #28]
 800a3fe:	1e5c      	subs	r4, r3, #1
 800a400:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a402:	42a3      	cmp	r3, r4
 800a404:	bfbf      	itttt	lt
 800a406:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800a408:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800a40a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800a40c:	1ae3      	sublt	r3, r4, r3
 800a40e:	bfb4      	ite	lt
 800a410:	18d2      	addlt	r2, r2, r3
 800a412:	1b1c      	subge	r4, r3, r4
 800a414:	9b07      	ldr	r3, [sp, #28]
 800a416:	bfbc      	itt	lt
 800a418:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800a41a:	2400      	movlt	r4, #0
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	bfb5      	itete	lt
 800a420:	eba8 0603 	sublt.w	r6, r8, r3
 800a424:	9b07      	ldrge	r3, [sp, #28]
 800a426:	2300      	movlt	r3, #0
 800a428:	4646      	movge	r6, r8
 800a42a:	e730      	b.n	800a28e <_dtoa_r+0x71e>
 800a42c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a42e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800a430:	4646      	mov	r6, r8
 800a432:	e735      	b.n	800a2a0 <_dtoa_r+0x730>
 800a434:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a436:	e75c      	b.n	800a2f2 <_dtoa_r+0x782>
 800a438:	2300      	movs	r3, #0
 800a43a:	e788      	b.n	800a34e <_dtoa_r+0x7de>
 800a43c:	3fe00000 	.word	0x3fe00000
 800a440:	40240000 	.word	0x40240000
 800a444:	40140000 	.word	0x40140000
 800a448:	9b02      	ldr	r3, [sp, #8]
 800a44a:	e780      	b.n	800a34e <_dtoa_r+0x7de>
 800a44c:	2300      	movs	r3, #0
 800a44e:	930a      	str	r3, [sp, #40]	@ 0x28
 800a450:	e782      	b.n	800a358 <_dtoa_r+0x7e8>
 800a452:	d099      	beq.n	800a388 <_dtoa_r+0x818>
 800a454:	9a08      	ldr	r2, [sp, #32]
 800a456:	331c      	adds	r3, #28
 800a458:	441a      	add	r2, r3
 800a45a:	4498      	add	r8, r3
 800a45c:	441e      	add	r6, r3
 800a45e:	9208      	str	r2, [sp, #32]
 800a460:	e792      	b.n	800a388 <_dtoa_r+0x818>
 800a462:	4603      	mov	r3, r0
 800a464:	e7f6      	b.n	800a454 <_dtoa_r+0x8e4>
 800a466:	9b07      	ldr	r3, [sp, #28]
 800a468:	9704      	str	r7, [sp, #16]
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	dc20      	bgt.n	800a4b0 <_dtoa_r+0x940>
 800a46e:	9300      	str	r3, [sp, #0]
 800a470:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a472:	2b02      	cmp	r3, #2
 800a474:	dd1e      	ble.n	800a4b4 <_dtoa_r+0x944>
 800a476:	9b00      	ldr	r3, [sp, #0]
 800a478:	2b00      	cmp	r3, #0
 800a47a:	f47f aec0 	bne.w	800a1fe <_dtoa_r+0x68e>
 800a47e:	4621      	mov	r1, r4
 800a480:	2205      	movs	r2, #5
 800a482:	4658      	mov	r0, fp
 800a484:	f000 fd96 	bl	800afb4 <__multadd>
 800a488:	4601      	mov	r1, r0
 800a48a:	4604      	mov	r4, r0
 800a48c:	4648      	mov	r0, r9
 800a48e:	f000 ffa9 	bl	800b3e4 <__mcmp>
 800a492:	2800      	cmp	r0, #0
 800a494:	f77f aeb3 	ble.w	800a1fe <_dtoa_r+0x68e>
 800a498:	4656      	mov	r6, sl
 800a49a:	2331      	movs	r3, #49	@ 0x31
 800a49c:	f806 3b01 	strb.w	r3, [r6], #1
 800a4a0:	9b04      	ldr	r3, [sp, #16]
 800a4a2:	3301      	adds	r3, #1
 800a4a4:	9304      	str	r3, [sp, #16]
 800a4a6:	e6ae      	b.n	800a206 <_dtoa_r+0x696>
 800a4a8:	9c07      	ldr	r4, [sp, #28]
 800a4aa:	9704      	str	r7, [sp, #16]
 800a4ac:	4625      	mov	r5, r4
 800a4ae:	e7f3      	b.n	800a498 <_dtoa_r+0x928>
 800a4b0:	9b07      	ldr	r3, [sp, #28]
 800a4b2:	9300      	str	r3, [sp, #0]
 800a4b4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	f000 8104 	beq.w	800a6c4 <_dtoa_r+0xb54>
 800a4bc:	2e00      	cmp	r6, #0
 800a4be:	dd05      	ble.n	800a4cc <_dtoa_r+0x95c>
 800a4c0:	4629      	mov	r1, r5
 800a4c2:	4632      	mov	r2, r6
 800a4c4:	4658      	mov	r0, fp
 800a4c6:	f000 ff21 	bl	800b30c <__lshift>
 800a4ca:	4605      	mov	r5, r0
 800a4cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d05a      	beq.n	800a588 <_dtoa_r+0xa18>
 800a4d2:	6869      	ldr	r1, [r5, #4]
 800a4d4:	4658      	mov	r0, fp
 800a4d6:	f000 fd0b 	bl	800aef0 <_Balloc>
 800a4da:	4606      	mov	r6, r0
 800a4dc:	b928      	cbnz	r0, 800a4ea <_dtoa_r+0x97a>
 800a4de:	4b84      	ldr	r3, [pc, #528]	@ (800a6f0 <_dtoa_r+0xb80>)
 800a4e0:	4602      	mov	r2, r0
 800a4e2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800a4e6:	f7ff bb5a 	b.w	8009b9e <_dtoa_r+0x2e>
 800a4ea:	692a      	ldr	r2, [r5, #16]
 800a4ec:	3202      	adds	r2, #2
 800a4ee:	0092      	lsls	r2, r2, #2
 800a4f0:	f105 010c 	add.w	r1, r5, #12
 800a4f4:	300c      	adds	r0, #12
 800a4f6:	f7ff fa9c 	bl	8009a32 <memcpy>
 800a4fa:	2201      	movs	r2, #1
 800a4fc:	4631      	mov	r1, r6
 800a4fe:	4658      	mov	r0, fp
 800a500:	f000 ff04 	bl	800b30c <__lshift>
 800a504:	f10a 0301 	add.w	r3, sl, #1
 800a508:	9307      	str	r3, [sp, #28]
 800a50a:	9b00      	ldr	r3, [sp, #0]
 800a50c:	4453      	add	r3, sl
 800a50e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a510:	9b02      	ldr	r3, [sp, #8]
 800a512:	f003 0301 	and.w	r3, r3, #1
 800a516:	462f      	mov	r7, r5
 800a518:	930a      	str	r3, [sp, #40]	@ 0x28
 800a51a:	4605      	mov	r5, r0
 800a51c:	9b07      	ldr	r3, [sp, #28]
 800a51e:	4621      	mov	r1, r4
 800a520:	3b01      	subs	r3, #1
 800a522:	4648      	mov	r0, r9
 800a524:	9300      	str	r3, [sp, #0]
 800a526:	f7ff fa99 	bl	8009a5c <quorem>
 800a52a:	4639      	mov	r1, r7
 800a52c:	9002      	str	r0, [sp, #8]
 800a52e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a532:	4648      	mov	r0, r9
 800a534:	f000 ff56 	bl	800b3e4 <__mcmp>
 800a538:	462a      	mov	r2, r5
 800a53a:	9008      	str	r0, [sp, #32]
 800a53c:	4621      	mov	r1, r4
 800a53e:	4658      	mov	r0, fp
 800a540:	f000 ff6c 	bl	800b41c <__mdiff>
 800a544:	68c2      	ldr	r2, [r0, #12]
 800a546:	4606      	mov	r6, r0
 800a548:	bb02      	cbnz	r2, 800a58c <_dtoa_r+0xa1c>
 800a54a:	4601      	mov	r1, r0
 800a54c:	4648      	mov	r0, r9
 800a54e:	f000 ff49 	bl	800b3e4 <__mcmp>
 800a552:	4602      	mov	r2, r0
 800a554:	4631      	mov	r1, r6
 800a556:	4658      	mov	r0, fp
 800a558:	920e      	str	r2, [sp, #56]	@ 0x38
 800a55a:	f000 fd09 	bl	800af70 <_Bfree>
 800a55e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a560:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a562:	9e07      	ldr	r6, [sp, #28]
 800a564:	ea43 0102 	orr.w	r1, r3, r2
 800a568:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a56a:	4319      	orrs	r1, r3
 800a56c:	d110      	bne.n	800a590 <_dtoa_r+0xa20>
 800a56e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a572:	d029      	beq.n	800a5c8 <_dtoa_r+0xa58>
 800a574:	9b08      	ldr	r3, [sp, #32]
 800a576:	2b00      	cmp	r3, #0
 800a578:	dd02      	ble.n	800a580 <_dtoa_r+0xa10>
 800a57a:	9b02      	ldr	r3, [sp, #8]
 800a57c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800a580:	9b00      	ldr	r3, [sp, #0]
 800a582:	f883 8000 	strb.w	r8, [r3]
 800a586:	e63f      	b.n	800a208 <_dtoa_r+0x698>
 800a588:	4628      	mov	r0, r5
 800a58a:	e7bb      	b.n	800a504 <_dtoa_r+0x994>
 800a58c:	2201      	movs	r2, #1
 800a58e:	e7e1      	b.n	800a554 <_dtoa_r+0x9e4>
 800a590:	9b08      	ldr	r3, [sp, #32]
 800a592:	2b00      	cmp	r3, #0
 800a594:	db04      	blt.n	800a5a0 <_dtoa_r+0xa30>
 800a596:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a598:	430b      	orrs	r3, r1
 800a59a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a59c:	430b      	orrs	r3, r1
 800a59e:	d120      	bne.n	800a5e2 <_dtoa_r+0xa72>
 800a5a0:	2a00      	cmp	r2, #0
 800a5a2:	dded      	ble.n	800a580 <_dtoa_r+0xa10>
 800a5a4:	4649      	mov	r1, r9
 800a5a6:	2201      	movs	r2, #1
 800a5a8:	4658      	mov	r0, fp
 800a5aa:	f000 feaf 	bl	800b30c <__lshift>
 800a5ae:	4621      	mov	r1, r4
 800a5b0:	4681      	mov	r9, r0
 800a5b2:	f000 ff17 	bl	800b3e4 <__mcmp>
 800a5b6:	2800      	cmp	r0, #0
 800a5b8:	dc03      	bgt.n	800a5c2 <_dtoa_r+0xa52>
 800a5ba:	d1e1      	bne.n	800a580 <_dtoa_r+0xa10>
 800a5bc:	f018 0f01 	tst.w	r8, #1
 800a5c0:	d0de      	beq.n	800a580 <_dtoa_r+0xa10>
 800a5c2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a5c6:	d1d8      	bne.n	800a57a <_dtoa_r+0xa0a>
 800a5c8:	9a00      	ldr	r2, [sp, #0]
 800a5ca:	2339      	movs	r3, #57	@ 0x39
 800a5cc:	7013      	strb	r3, [r2, #0]
 800a5ce:	4633      	mov	r3, r6
 800a5d0:	461e      	mov	r6, r3
 800a5d2:	3b01      	subs	r3, #1
 800a5d4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800a5d8:	2a39      	cmp	r2, #57	@ 0x39
 800a5da:	d052      	beq.n	800a682 <_dtoa_r+0xb12>
 800a5dc:	3201      	adds	r2, #1
 800a5de:	701a      	strb	r2, [r3, #0]
 800a5e0:	e612      	b.n	800a208 <_dtoa_r+0x698>
 800a5e2:	2a00      	cmp	r2, #0
 800a5e4:	dd07      	ble.n	800a5f6 <_dtoa_r+0xa86>
 800a5e6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a5ea:	d0ed      	beq.n	800a5c8 <_dtoa_r+0xa58>
 800a5ec:	9a00      	ldr	r2, [sp, #0]
 800a5ee:	f108 0301 	add.w	r3, r8, #1
 800a5f2:	7013      	strb	r3, [r2, #0]
 800a5f4:	e608      	b.n	800a208 <_dtoa_r+0x698>
 800a5f6:	9b07      	ldr	r3, [sp, #28]
 800a5f8:	9a07      	ldr	r2, [sp, #28]
 800a5fa:	f803 8c01 	strb.w	r8, [r3, #-1]
 800a5fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a600:	4293      	cmp	r3, r2
 800a602:	d028      	beq.n	800a656 <_dtoa_r+0xae6>
 800a604:	4649      	mov	r1, r9
 800a606:	2300      	movs	r3, #0
 800a608:	220a      	movs	r2, #10
 800a60a:	4658      	mov	r0, fp
 800a60c:	f000 fcd2 	bl	800afb4 <__multadd>
 800a610:	42af      	cmp	r7, r5
 800a612:	4681      	mov	r9, r0
 800a614:	f04f 0300 	mov.w	r3, #0
 800a618:	f04f 020a 	mov.w	r2, #10
 800a61c:	4639      	mov	r1, r7
 800a61e:	4658      	mov	r0, fp
 800a620:	d107      	bne.n	800a632 <_dtoa_r+0xac2>
 800a622:	f000 fcc7 	bl	800afb4 <__multadd>
 800a626:	4607      	mov	r7, r0
 800a628:	4605      	mov	r5, r0
 800a62a:	9b07      	ldr	r3, [sp, #28]
 800a62c:	3301      	adds	r3, #1
 800a62e:	9307      	str	r3, [sp, #28]
 800a630:	e774      	b.n	800a51c <_dtoa_r+0x9ac>
 800a632:	f000 fcbf 	bl	800afb4 <__multadd>
 800a636:	4629      	mov	r1, r5
 800a638:	4607      	mov	r7, r0
 800a63a:	2300      	movs	r3, #0
 800a63c:	220a      	movs	r2, #10
 800a63e:	4658      	mov	r0, fp
 800a640:	f000 fcb8 	bl	800afb4 <__multadd>
 800a644:	4605      	mov	r5, r0
 800a646:	e7f0      	b.n	800a62a <_dtoa_r+0xaba>
 800a648:	9b00      	ldr	r3, [sp, #0]
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	bfcc      	ite	gt
 800a64e:	461e      	movgt	r6, r3
 800a650:	2601      	movle	r6, #1
 800a652:	4456      	add	r6, sl
 800a654:	2700      	movs	r7, #0
 800a656:	4649      	mov	r1, r9
 800a658:	2201      	movs	r2, #1
 800a65a:	4658      	mov	r0, fp
 800a65c:	f000 fe56 	bl	800b30c <__lshift>
 800a660:	4621      	mov	r1, r4
 800a662:	4681      	mov	r9, r0
 800a664:	f000 febe 	bl	800b3e4 <__mcmp>
 800a668:	2800      	cmp	r0, #0
 800a66a:	dcb0      	bgt.n	800a5ce <_dtoa_r+0xa5e>
 800a66c:	d102      	bne.n	800a674 <_dtoa_r+0xb04>
 800a66e:	f018 0f01 	tst.w	r8, #1
 800a672:	d1ac      	bne.n	800a5ce <_dtoa_r+0xa5e>
 800a674:	4633      	mov	r3, r6
 800a676:	461e      	mov	r6, r3
 800a678:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a67c:	2a30      	cmp	r2, #48	@ 0x30
 800a67e:	d0fa      	beq.n	800a676 <_dtoa_r+0xb06>
 800a680:	e5c2      	b.n	800a208 <_dtoa_r+0x698>
 800a682:	459a      	cmp	sl, r3
 800a684:	d1a4      	bne.n	800a5d0 <_dtoa_r+0xa60>
 800a686:	9b04      	ldr	r3, [sp, #16]
 800a688:	3301      	adds	r3, #1
 800a68a:	9304      	str	r3, [sp, #16]
 800a68c:	2331      	movs	r3, #49	@ 0x31
 800a68e:	f88a 3000 	strb.w	r3, [sl]
 800a692:	e5b9      	b.n	800a208 <_dtoa_r+0x698>
 800a694:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a696:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800a6f4 <_dtoa_r+0xb84>
 800a69a:	b11b      	cbz	r3, 800a6a4 <_dtoa_r+0xb34>
 800a69c:	f10a 0308 	add.w	r3, sl, #8
 800a6a0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800a6a2:	6013      	str	r3, [r2, #0]
 800a6a4:	4650      	mov	r0, sl
 800a6a6:	b019      	add	sp, #100	@ 0x64
 800a6a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a6ae:	2b01      	cmp	r3, #1
 800a6b0:	f77f ae37 	ble.w	800a322 <_dtoa_r+0x7b2>
 800a6b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a6b6:	930a      	str	r3, [sp, #40]	@ 0x28
 800a6b8:	2001      	movs	r0, #1
 800a6ba:	e655      	b.n	800a368 <_dtoa_r+0x7f8>
 800a6bc:	9b00      	ldr	r3, [sp, #0]
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	f77f aed6 	ble.w	800a470 <_dtoa_r+0x900>
 800a6c4:	4656      	mov	r6, sl
 800a6c6:	4621      	mov	r1, r4
 800a6c8:	4648      	mov	r0, r9
 800a6ca:	f7ff f9c7 	bl	8009a5c <quorem>
 800a6ce:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a6d2:	f806 8b01 	strb.w	r8, [r6], #1
 800a6d6:	9b00      	ldr	r3, [sp, #0]
 800a6d8:	eba6 020a 	sub.w	r2, r6, sl
 800a6dc:	4293      	cmp	r3, r2
 800a6de:	ddb3      	ble.n	800a648 <_dtoa_r+0xad8>
 800a6e0:	4649      	mov	r1, r9
 800a6e2:	2300      	movs	r3, #0
 800a6e4:	220a      	movs	r2, #10
 800a6e6:	4658      	mov	r0, fp
 800a6e8:	f000 fc64 	bl	800afb4 <__multadd>
 800a6ec:	4681      	mov	r9, r0
 800a6ee:	e7ea      	b.n	800a6c6 <_dtoa_r+0xb56>
 800a6f0:	080296e4 	.word	0x080296e4
 800a6f4:	08029668 	.word	0x08029668

0800a6f8 <__ssputs_r>:
 800a6f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a6fc:	688e      	ldr	r6, [r1, #8]
 800a6fe:	461f      	mov	r7, r3
 800a700:	42be      	cmp	r6, r7
 800a702:	680b      	ldr	r3, [r1, #0]
 800a704:	4682      	mov	sl, r0
 800a706:	460c      	mov	r4, r1
 800a708:	4690      	mov	r8, r2
 800a70a:	d82d      	bhi.n	800a768 <__ssputs_r+0x70>
 800a70c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a710:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a714:	d026      	beq.n	800a764 <__ssputs_r+0x6c>
 800a716:	6965      	ldr	r5, [r4, #20]
 800a718:	6909      	ldr	r1, [r1, #16]
 800a71a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a71e:	eba3 0901 	sub.w	r9, r3, r1
 800a722:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a726:	1c7b      	adds	r3, r7, #1
 800a728:	444b      	add	r3, r9
 800a72a:	106d      	asrs	r5, r5, #1
 800a72c:	429d      	cmp	r5, r3
 800a72e:	bf38      	it	cc
 800a730:	461d      	movcc	r5, r3
 800a732:	0553      	lsls	r3, r2, #21
 800a734:	d527      	bpl.n	800a786 <__ssputs_r+0x8e>
 800a736:	4629      	mov	r1, r5
 800a738:	f000 faa2 	bl	800ac80 <_malloc_r>
 800a73c:	4606      	mov	r6, r0
 800a73e:	b360      	cbz	r0, 800a79a <__ssputs_r+0xa2>
 800a740:	6921      	ldr	r1, [r4, #16]
 800a742:	464a      	mov	r2, r9
 800a744:	f7ff f975 	bl	8009a32 <memcpy>
 800a748:	89a3      	ldrh	r3, [r4, #12]
 800a74a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a74e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a752:	81a3      	strh	r3, [r4, #12]
 800a754:	6126      	str	r6, [r4, #16]
 800a756:	6165      	str	r5, [r4, #20]
 800a758:	444e      	add	r6, r9
 800a75a:	eba5 0509 	sub.w	r5, r5, r9
 800a75e:	6026      	str	r6, [r4, #0]
 800a760:	60a5      	str	r5, [r4, #8]
 800a762:	463e      	mov	r6, r7
 800a764:	42be      	cmp	r6, r7
 800a766:	d900      	bls.n	800a76a <__ssputs_r+0x72>
 800a768:	463e      	mov	r6, r7
 800a76a:	6820      	ldr	r0, [r4, #0]
 800a76c:	4632      	mov	r2, r6
 800a76e:	4641      	mov	r1, r8
 800a770:	f001 f8a8 	bl	800b8c4 <memmove>
 800a774:	68a3      	ldr	r3, [r4, #8]
 800a776:	1b9b      	subs	r3, r3, r6
 800a778:	60a3      	str	r3, [r4, #8]
 800a77a:	6823      	ldr	r3, [r4, #0]
 800a77c:	4433      	add	r3, r6
 800a77e:	6023      	str	r3, [r4, #0]
 800a780:	2000      	movs	r0, #0
 800a782:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a786:	462a      	mov	r2, r5
 800a788:	f000 ff77 	bl	800b67a <_realloc_r>
 800a78c:	4606      	mov	r6, r0
 800a78e:	2800      	cmp	r0, #0
 800a790:	d1e0      	bne.n	800a754 <__ssputs_r+0x5c>
 800a792:	6921      	ldr	r1, [r4, #16]
 800a794:	4650      	mov	r0, sl
 800a796:	f001 f97f 	bl	800ba98 <_free_r>
 800a79a:	230c      	movs	r3, #12
 800a79c:	f8ca 3000 	str.w	r3, [sl]
 800a7a0:	89a3      	ldrh	r3, [r4, #12]
 800a7a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a7a6:	81a3      	strh	r3, [r4, #12]
 800a7a8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a7ac:	e7e9      	b.n	800a782 <__ssputs_r+0x8a>
	...

0800a7b0 <_svfiprintf_r>:
 800a7b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7b4:	4698      	mov	r8, r3
 800a7b6:	898b      	ldrh	r3, [r1, #12]
 800a7b8:	061b      	lsls	r3, r3, #24
 800a7ba:	b09d      	sub	sp, #116	@ 0x74
 800a7bc:	4607      	mov	r7, r0
 800a7be:	460d      	mov	r5, r1
 800a7c0:	4614      	mov	r4, r2
 800a7c2:	d510      	bpl.n	800a7e6 <_svfiprintf_r+0x36>
 800a7c4:	690b      	ldr	r3, [r1, #16]
 800a7c6:	b973      	cbnz	r3, 800a7e6 <_svfiprintf_r+0x36>
 800a7c8:	2140      	movs	r1, #64	@ 0x40
 800a7ca:	f000 fa59 	bl	800ac80 <_malloc_r>
 800a7ce:	6028      	str	r0, [r5, #0]
 800a7d0:	6128      	str	r0, [r5, #16]
 800a7d2:	b930      	cbnz	r0, 800a7e2 <_svfiprintf_r+0x32>
 800a7d4:	230c      	movs	r3, #12
 800a7d6:	603b      	str	r3, [r7, #0]
 800a7d8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a7dc:	b01d      	add	sp, #116	@ 0x74
 800a7de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7e2:	2340      	movs	r3, #64	@ 0x40
 800a7e4:	616b      	str	r3, [r5, #20]
 800a7e6:	2300      	movs	r3, #0
 800a7e8:	9309      	str	r3, [sp, #36]	@ 0x24
 800a7ea:	2320      	movs	r3, #32
 800a7ec:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a7f0:	f8cd 800c 	str.w	r8, [sp, #12]
 800a7f4:	2330      	movs	r3, #48	@ 0x30
 800a7f6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800a994 <_svfiprintf_r+0x1e4>
 800a7fa:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a7fe:	f04f 0901 	mov.w	r9, #1
 800a802:	4623      	mov	r3, r4
 800a804:	469a      	mov	sl, r3
 800a806:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a80a:	b10a      	cbz	r2, 800a810 <_svfiprintf_r+0x60>
 800a80c:	2a25      	cmp	r2, #37	@ 0x25
 800a80e:	d1f9      	bne.n	800a804 <_svfiprintf_r+0x54>
 800a810:	ebba 0b04 	subs.w	fp, sl, r4
 800a814:	d00b      	beq.n	800a82e <_svfiprintf_r+0x7e>
 800a816:	465b      	mov	r3, fp
 800a818:	4622      	mov	r2, r4
 800a81a:	4629      	mov	r1, r5
 800a81c:	4638      	mov	r0, r7
 800a81e:	f7ff ff6b 	bl	800a6f8 <__ssputs_r>
 800a822:	3001      	adds	r0, #1
 800a824:	f000 80a7 	beq.w	800a976 <_svfiprintf_r+0x1c6>
 800a828:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a82a:	445a      	add	r2, fp
 800a82c:	9209      	str	r2, [sp, #36]	@ 0x24
 800a82e:	f89a 3000 	ldrb.w	r3, [sl]
 800a832:	2b00      	cmp	r3, #0
 800a834:	f000 809f 	beq.w	800a976 <_svfiprintf_r+0x1c6>
 800a838:	2300      	movs	r3, #0
 800a83a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a83e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a842:	f10a 0a01 	add.w	sl, sl, #1
 800a846:	9304      	str	r3, [sp, #16]
 800a848:	9307      	str	r3, [sp, #28]
 800a84a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a84e:	931a      	str	r3, [sp, #104]	@ 0x68
 800a850:	4654      	mov	r4, sl
 800a852:	2205      	movs	r2, #5
 800a854:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a858:	484e      	ldr	r0, [pc, #312]	@ (800a994 <_svfiprintf_r+0x1e4>)
 800a85a:	f7f5 fcc1 	bl	80001e0 <memchr>
 800a85e:	9a04      	ldr	r2, [sp, #16]
 800a860:	b9d8      	cbnz	r0, 800a89a <_svfiprintf_r+0xea>
 800a862:	06d0      	lsls	r0, r2, #27
 800a864:	bf44      	itt	mi
 800a866:	2320      	movmi	r3, #32
 800a868:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a86c:	0711      	lsls	r1, r2, #28
 800a86e:	bf44      	itt	mi
 800a870:	232b      	movmi	r3, #43	@ 0x2b
 800a872:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a876:	f89a 3000 	ldrb.w	r3, [sl]
 800a87a:	2b2a      	cmp	r3, #42	@ 0x2a
 800a87c:	d015      	beq.n	800a8aa <_svfiprintf_r+0xfa>
 800a87e:	9a07      	ldr	r2, [sp, #28]
 800a880:	4654      	mov	r4, sl
 800a882:	2000      	movs	r0, #0
 800a884:	f04f 0c0a 	mov.w	ip, #10
 800a888:	4621      	mov	r1, r4
 800a88a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a88e:	3b30      	subs	r3, #48	@ 0x30
 800a890:	2b09      	cmp	r3, #9
 800a892:	d94b      	bls.n	800a92c <_svfiprintf_r+0x17c>
 800a894:	b1b0      	cbz	r0, 800a8c4 <_svfiprintf_r+0x114>
 800a896:	9207      	str	r2, [sp, #28]
 800a898:	e014      	b.n	800a8c4 <_svfiprintf_r+0x114>
 800a89a:	eba0 0308 	sub.w	r3, r0, r8
 800a89e:	fa09 f303 	lsl.w	r3, r9, r3
 800a8a2:	4313      	orrs	r3, r2
 800a8a4:	9304      	str	r3, [sp, #16]
 800a8a6:	46a2      	mov	sl, r4
 800a8a8:	e7d2      	b.n	800a850 <_svfiprintf_r+0xa0>
 800a8aa:	9b03      	ldr	r3, [sp, #12]
 800a8ac:	1d19      	adds	r1, r3, #4
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	9103      	str	r1, [sp, #12]
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	bfbb      	ittet	lt
 800a8b6:	425b      	neglt	r3, r3
 800a8b8:	f042 0202 	orrlt.w	r2, r2, #2
 800a8bc:	9307      	strge	r3, [sp, #28]
 800a8be:	9307      	strlt	r3, [sp, #28]
 800a8c0:	bfb8      	it	lt
 800a8c2:	9204      	strlt	r2, [sp, #16]
 800a8c4:	7823      	ldrb	r3, [r4, #0]
 800a8c6:	2b2e      	cmp	r3, #46	@ 0x2e
 800a8c8:	d10a      	bne.n	800a8e0 <_svfiprintf_r+0x130>
 800a8ca:	7863      	ldrb	r3, [r4, #1]
 800a8cc:	2b2a      	cmp	r3, #42	@ 0x2a
 800a8ce:	d132      	bne.n	800a936 <_svfiprintf_r+0x186>
 800a8d0:	9b03      	ldr	r3, [sp, #12]
 800a8d2:	1d1a      	adds	r2, r3, #4
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	9203      	str	r2, [sp, #12]
 800a8d8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a8dc:	3402      	adds	r4, #2
 800a8de:	9305      	str	r3, [sp, #20]
 800a8e0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800a9a4 <_svfiprintf_r+0x1f4>
 800a8e4:	7821      	ldrb	r1, [r4, #0]
 800a8e6:	2203      	movs	r2, #3
 800a8e8:	4650      	mov	r0, sl
 800a8ea:	f7f5 fc79 	bl	80001e0 <memchr>
 800a8ee:	b138      	cbz	r0, 800a900 <_svfiprintf_r+0x150>
 800a8f0:	9b04      	ldr	r3, [sp, #16]
 800a8f2:	eba0 000a 	sub.w	r0, r0, sl
 800a8f6:	2240      	movs	r2, #64	@ 0x40
 800a8f8:	4082      	lsls	r2, r0
 800a8fa:	4313      	orrs	r3, r2
 800a8fc:	3401      	adds	r4, #1
 800a8fe:	9304      	str	r3, [sp, #16]
 800a900:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a904:	4824      	ldr	r0, [pc, #144]	@ (800a998 <_svfiprintf_r+0x1e8>)
 800a906:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a90a:	2206      	movs	r2, #6
 800a90c:	f7f5 fc68 	bl	80001e0 <memchr>
 800a910:	2800      	cmp	r0, #0
 800a912:	d036      	beq.n	800a982 <_svfiprintf_r+0x1d2>
 800a914:	4b21      	ldr	r3, [pc, #132]	@ (800a99c <_svfiprintf_r+0x1ec>)
 800a916:	bb1b      	cbnz	r3, 800a960 <_svfiprintf_r+0x1b0>
 800a918:	9b03      	ldr	r3, [sp, #12]
 800a91a:	3307      	adds	r3, #7
 800a91c:	f023 0307 	bic.w	r3, r3, #7
 800a920:	3308      	adds	r3, #8
 800a922:	9303      	str	r3, [sp, #12]
 800a924:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a926:	4433      	add	r3, r6
 800a928:	9309      	str	r3, [sp, #36]	@ 0x24
 800a92a:	e76a      	b.n	800a802 <_svfiprintf_r+0x52>
 800a92c:	fb0c 3202 	mla	r2, ip, r2, r3
 800a930:	460c      	mov	r4, r1
 800a932:	2001      	movs	r0, #1
 800a934:	e7a8      	b.n	800a888 <_svfiprintf_r+0xd8>
 800a936:	2300      	movs	r3, #0
 800a938:	3401      	adds	r4, #1
 800a93a:	9305      	str	r3, [sp, #20]
 800a93c:	4619      	mov	r1, r3
 800a93e:	f04f 0c0a 	mov.w	ip, #10
 800a942:	4620      	mov	r0, r4
 800a944:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a948:	3a30      	subs	r2, #48	@ 0x30
 800a94a:	2a09      	cmp	r2, #9
 800a94c:	d903      	bls.n	800a956 <_svfiprintf_r+0x1a6>
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d0c6      	beq.n	800a8e0 <_svfiprintf_r+0x130>
 800a952:	9105      	str	r1, [sp, #20]
 800a954:	e7c4      	b.n	800a8e0 <_svfiprintf_r+0x130>
 800a956:	fb0c 2101 	mla	r1, ip, r1, r2
 800a95a:	4604      	mov	r4, r0
 800a95c:	2301      	movs	r3, #1
 800a95e:	e7f0      	b.n	800a942 <_svfiprintf_r+0x192>
 800a960:	ab03      	add	r3, sp, #12
 800a962:	9300      	str	r3, [sp, #0]
 800a964:	462a      	mov	r2, r5
 800a966:	4b0e      	ldr	r3, [pc, #56]	@ (800a9a0 <_svfiprintf_r+0x1f0>)
 800a968:	a904      	add	r1, sp, #16
 800a96a:	4638      	mov	r0, r7
 800a96c:	f7fe fb62 	bl	8009034 <_printf_float>
 800a970:	1c42      	adds	r2, r0, #1
 800a972:	4606      	mov	r6, r0
 800a974:	d1d6      	bne.n	800a924 <_svfiprintf_r+0x174>
 800a976:	89ab      	ldrh	r3, [r5, #12]
 800a978:	065b      	lsls	r3, r3, #25
 800a97a:	f53f af2d 	bmi.w	800a7d8 <_svfiprintf_r+0x28>
 800a97e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a980:	e72c      	b.n	800a7dc <_svfiprintf_r+0x2c>
 800a982:	ab03      	add	r3, sp, #12
 800a984:	9300      	str	r3, [sp, #0]
 800a986:	462a      	mov	r2, r5
 800a988:	4b05      	ldr	r3, [pc, #20]	@ (800a9a0 <_svfiprintf_r+0x1f0>)
 800a98a:	a904      	add	r1, sp, #16
 800a98c:	4638      	mov	r0, r7
 800a98e:	f7fe fde9 	bl	8009564 <_printf_i>
 800a992:	e7ed      	b.n	800a970 <_svfiprintf_r+0x1c0>
 800a994:	080296f5 	.word	0x080296f5
 800a998:	080296ff 	.word	0x080296ff
 800a99c:	08009035 	.word	0x08009035
 800a9a0:	0800a6f9 	.word	0x0800a6f9
 800a9a4:	080296fb 	.word	0x080296fb

0800a9a8 <__sfputc_r>:
 800a9a8:	6893      	ldr	r3, [r2, #8]
 800a9aa:	3b01      	subs	r3, #1
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	b410      	push	{r4}
 800a9b0:	6093      	str	r3, [r2, #8]
 800a9b2:	da08      	bge.n	800a9c6 <__sfputc_r+0x1e>
 800a9b4:	6994      	ldr	r4, [r2, #24]
 800a9b6:	42a3      	cmp	r3, r4
 800a9b8:	db01      	blt.n	800a9be <__sfputc_r+0x16>
 800a9ba:	290a      	cmp	r1, #10
 800a9bc:	d103      	bne.n	800a9c6 <__sfputc_r+0x1e>
 800a9be:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a9c2:	f000 be88 	b.w	800b6d6 <__swbuf_r>
 800a9c6:	6813      	ldr	r3, [r2, #0]
 800a9c8:	1c58      	adds	r0, r3, #1
 800a9ca:	6010      	str	r0, [r2, #0]
 800a9cc:	7019      	strb	r1, [r3, #0]
 800a9ce:	4608      	mov	r0, r1
 800a9d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a9d4:	4770      	bx	lr

0800a9d6 <__sfputs_r>:
 800a9d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9d8:	4606      	mov	r6, r0
 800a9da:	460f      	mov	r7, r1
 800a9dc:	4614      	mov	r4, r2
 800a9de:	18d5      	adds	r5, r2, r3
 800a9e0:	42ac      	cmp	r4, r5
 800a9e2:	d101      	bne.n	800a9e8 <__sfputs_r+0x12>
 800a9e4:	2000      	movs	r0, #0
 800a9e6:	e007      	b.n	800a9f8 <__sfputs_r+0x22>
 800a9e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a9ec:	463a      	mov	r2, r7
 800a9ee:	4630      	mov	r0, r6
 800a9f0:	f7ff ffda 	bl	800a9a8 <__sfputc_r>
 800a9f4:	1c43      	adds	r3, r0, #1
 800a9f6:	d1f3      	bne.n	800a9e0 <__sfputs_r+0xa>
 800a9f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a9fc <_vfiprintf_r>:
 800a9fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa00:	460d      	mov	r5, r1
 800aa02:	b09d      	sub	sp, #116	@ 0x74
 800aa04:	4614      	mov	r4, r2
 800aa06:	4698      	mov	r8, r3
 800aa08:	4606      	mov	r6, r0
 800aa0a:	b118      	cbz	r0, 800aa14 <_vfiprintf_r+0x18>
 800aa0c:	6a03      	ldr	r3, [r0, #32]
 800aa0e:	b90b      	cbnz	r3, 800aa14 <_vfiprintf_r+0x18>
 800aa10:	f7fe ff54 	bl	80098bc <__sinit>
 800aa14:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800aa16:	07d9      	lsls	r1, r3, #31
 800aa18:	d405      	bmi.n	800aa26 <_vfiprintf_r+0x2a>
 800aa1a:	89ab      	ldrh	r3, [r5, #12]
 800aa1c:	059a      	lsls	r2, r3, #22
 800aa1e:	d402      	bmi.n	800aa26 <_vfiprintf_r+0x2a>
 800aa20:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800aa22:	f7ff f804 	bl	8009a2e <__retarget_lock_acquire_recursive>
 800aa26:	89ab      	ldrh	r3, [r5, #12]
 800aa28:	071b      	lsls	r3, r3, #28
 800aa2a:	d501      	bpl.n	800aa30 <_vfiprintf_r+0x34>
 800aa2c:	692b      	ldr	r3, [r5, #16]
 800aa2e:	b99b      	cbnz	r3, 800aa58 <_vfiprintf_r+0x5c>
 800aa30:	4629      	mov	r1, r5
 800aa32:	4630      	mov	r0, r6
 800aa34:	f000 fe8e 	bl	800b754 <__swsetup_r>
 800aa38:	b170      	cbz	r0, 800aa58 <_vfiprintf_r+0x5c>
 800aa3a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800aa3c:	07dc      	lsls	r4, r3, #31
 800aa3e:	d504      	bpl.n	800aa4a <_vfiprintf_r+0x4e>
 800aa40:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800aa44:	b01d      	add	sp, #116	@ 0x74
 800aa46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa4a:	89ab      	ldrh	r3, [r5, #12]
 800aa4c:	0598      	lsls	r0, r3, #22
 800aa4e:	d4f7      	bmi.n	800aa40 <_vfiprintf_r+0x44>
 800aa50:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800aa52:	f7fe ffed 	bl	8009a30 <__retarget_lock_release_recursive>
 800aa56:	e7f3      	b.n	800aa40 <_vfiprintf_r+0x44>
 800aa58:	2300      	movs	r3, #0
 800aa5a:	9309      	str	r3, [sp, #36]	@ 0x24
 800aa5c:	2320      	movs	r3, #32
 800aa5e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800aa62:	f8cd 800c 	str.w	r8, [sp, #12]
 800aa66:	2330      	movs	r3, #48	@ 0x30
 800aa68:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800ac18 <_vfiprintf_r+0x21c>
 800aa6c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800aa70:	f04f 0901 	mov.w	r9, #1
 800aa74:	4623      	mov	r3, r4
 800aa76:	469a      	mov	sl, r3
 800aa78:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aa7c:	b10a      	cbz	r2, 800aa82 <_vfiprintf_r+0x86>
 800aa7e:	2a25      	cmp	r2, #37	@ 0x25
 800aa80:	d1f9      	bne.n	800aa76 <_vfiprintf_r+0x7a>
 800aa82:	ebba 0b04 	subs.w	fp, sl, r4
 800aa86:	d00b      	beq.n	800aaa0 <_vfiprintf_r+0xa4>
 800aa88:	465b      	mov	r3, fp
 800aa8a:	4622      	mov	r2, r4
 800aa8c:	4629      	mov	r1, r5
 800aa8e:	4630      	mov	r0, r6
 800aa90:	f7ff ffa1 	bl	800a9d6 <__sfputs_r>
 800aa94:	3001      	adds	r0, #1
 800aa96:	f000 80a7 	beq.w	800abe8 <_vfiprintf_r+0x1ec>
 800aa9a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800aa9c:	445a      	add	r2, fp
 800aa9e:	9209      	str	r2, [sp, #36]	@ 0x24
 800aaa0:	f89a 3000 	ldrb.w	r3, [sl]
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	f000 809f 	beq.w	800abe8 <_vfiprintf_r+0x1ec>
 800aaaa:	2300      	movs	r3, #0
 800aaac:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800aab0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aab4:	f10a 0a01 	add.w	sl, sl, #1
 800aab8:	9304      	str	r3, [sp, #16]
 800aaba:	9307      	str	r3, [sp, #28]
 800aabc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800aac0:	931a      	str	r3, [sp, #104]	@ 0x68
 800aac2:	4654      	mov	r4, sl
 800aac4:	2205      	movs	r2, #5
 800aac6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aaca:	4853      	ldr	r0, [pc, #332]	@ (800ac18 <_vfiprintf_r+0x21c>)
 800aacc:	f7f5 fb88 	bl	80001e0 <memchr>
 800aad0:	9a04      	ldr	r2, [sp, #16]
 800aad2:	b9d8      	cbnz	r0, 800ab0c <_vfiprintf_r+0x110>
 800aad4:	06d1      	lsls	r1, r2, #27
 800aad6:	bf44      	itt	mi
 800aad8:	2320      	movmi	r3, #32
 800aada:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800aade:	0713      	lsls	r3, r2, #28
 800aae0:	bf44      	itt	mi
 800aae2:	232b      	movmi	r3, #43	@ 0x2b
 800aae4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800aae8:	f89a 3000 	ldrb.w	r3, [sl]
 800aaec:	2b2a      	cmp	r3, #42	@ 0x2a
 800aaee:	d015      	beq.n	800ab1c <_vfiprintf_r+0x120>
 800aaf0:	9a07      	ldr	r2, [sp, #28]
 800aaf2:	4654      	mov	r4, sl
 800aaf4:	2000      	movs	r0, #0
 800aaf6:	f04f 0c0a 	mov.w	ip, #10
 800aafa:	4621      	mov	r1, r4
 800aafc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ab00:	3b30      	subs	r3, #48	@ 0x30
 800ab02:	2b09      	cmp	r3, #9
 800ab04:	d94b      	bls.n	800ab9e <_vfiprintf_r+0x1a2>
 800ab06:	b1b0      	cbz	r0, 800ab36 <_vfiprintf_r+0x13a>
 800ab08:	9207      	str	r2, [sp, #28]
 800ab0a:	e014      	b.n	800ab36 <_vfiprintf_r+0x13a>
 800ab0c:	eba0 0308 	sub.w	r3, r0, r8
 800ab10:	fa09 f303 	lsl.w	r3, r9, r3
 800ab14:	4313      	orrs	r3, r2
 800ab16:	9304      	str	r3, [sp, #16]
 800ab18:	46a2      	mov	sl, r4
 800ab1a:	e7d2      	b.n	800aac2 <_vfiprintf_r+0xc6>
 800ab1c:	9b03      	ldr	r3, [sp, #12]
 800ab1e:	1d19      	adds	r1, r3, #4
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	9103      	str	r1, [sp, #12]
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	bfbb      	ittet	lt
 800ab28:	425b      	neglt	r3, r3
 800ab2a:	f042 0202 	orrlt.w	r2, r2, #2
 800ab2e:	9307      	strge	r3, [sp, #28]
 800ab30:	9307      	strlt	r3, [sp, #28]
 800ab32:	bfb8      	it	lt
 800ab34:	9204      	strlt	r2, [sp, #16]
 800ab36:	7823      	ldrb	r3, [r4, #0]
 800ab38:	2b2e      	cmp	r3, #46	@ 0x2e
 800ab3a:	d10a      	bne.n	800ab52 <_vfiprintf_r+0x156>
 800ab3c:	7863      	ldrb	r3, [r4, #1]
 800ab3e:	2b2a      	cmp	r3, #42	@ 0x2a
 800ab40:	d132      	bne.n	800aba8 <_vfiprintf_r+0x1ac>
 800ab42:	9b03      	ldr	r3, [sp, #12]
 800ab44:	1d1a      	adds	r2, r3, #4
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	9203      	str	r2, [sp, #12]
 800ab4a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ab4e:	3402      	adds	r4, #2
 800ab50:	9305      	str	r3, [sp, #20]
 800ab52:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800ac28 <_vfiprintf_r+0x22c>
 800ab56:	7821      	ldrb	r1, [r4, #0]
 800ab58:	2203      	movs	r2, #3
 800ab5a:	4650      	mov	r0, sl
 800ab5c:	f7f5 fb40 	bl	80001e0 <memchr>
 800ab60:	b138      	cbz	r0, 800ab72 <_vfiprintf_r+0x176>
 800ab62:	9b04      	ldr	r3, [sp, #16]
 800ab64:	eba0 000a 	sub.w	r0, r0, sl
 800ab68:	2240      	movs	r2, #64	@ 0x40
 800ab6a:	4082      	lsls	r2, r0
 800ab6c:	4313      	orrs	r3, r2
 800ab6e:	3401      	adds	r4, #1
 800ab70:	9304      	str	r3, [sp, #16]
 800ab72:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab76:	4829      	ldr	r0, [pc, #164]	@ (800ac1c <_vfiprintf_r+0x220>)
 800ab78:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ab7c:	2206      	movs	r2, #6
 800ab7e:	f7f5 fb2f 	bl	80001e0 <memchr>
 800ab82:	2800      	cmp	r0, #0
 800ab84:	d03f      	beq.n	800ac06 <_vfiprintf_r+0x20a>
 800ab86:	4b26      	ldr	r3, [pc, #152]	@ (800ac20 <_vfiprintf_r+0x224>)
 800ab88:	bb1b      	cbnz	r3, 800abd2 <_vfiprintf_r+0x1d6>
 800ab8a:	9b03      	ldr	r3, [sp, #12]
 800ab8c:	3307      	adds	r3, #7
 800ab8e:	f023 0307 	bic.w	r3, r3, #7
 800ab92:	3308      	adds	r3, #8
 800ab94:	9303      	str	r3, [sp, #12]
 800ab96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ab98:	443b      	add	r3, r7
 800ab9a:	9309      	str	r3, [sp, #36]	@ 0x24
 800ab9c:	e76a      	b.n	800aa74 <_vfiprintf_r+0x78>
 800ab9e:	fb0c 3202 	mla	r2, ip, r2, r3
 800aba2:	460c      	mov	r4, r1
 800aba4:	2001      	movs	r0, #1
 800aba6:	e7a8      	b.n	800aafa <_vfiprintf_r+0xfe>
 800aba8:	2300      	movs	r3, #0
 800abaa:	3401      	adds	r4, #1
 800abac:	9305      	str	r3, [sp, #20]
 800abae:	4619      	mov	r1, r3
 800abb0:	f04f 0c0a 	mov.w	ip, #10
 800abb4:	4620      	mov	r0, r4
 800abb6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800abba:	3a30      	subs	r2, #48	@ 0x30
 800abbc:	2a09      	cmp	r2, #9
 800abbe:	d903      	bls.n	800abc8 <_vfiprintf_r+0x1cc>
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d0c6      	beq.n	800ab52 <_vfiprintf_r+0x156>
 800abc4:	9105      	str	r1, [sp, #20]
 800abc6:	e7c4      	b.n	800ab52 <_vfiprintf_r+0x156>
 800abc8:	fb0c 2101 	mla	r1, ip, r1, r2
 800abcc:	4604      	mov	r4, r0
 800abce:	2301      	movs	r3, #1
 800abd0:	e7f0      	b.n	800abb4 <_vfiprintf_r+0x1b8>
 800abd2:	ab03      	add	r3, sp, #12
 800abd4:	9300      	str	r3, [sp, #0]
 800abd6:	462a      	mov	r2, r5
 800abd8:	4b12      	ldr	r3, [pc, #72]	@ (800ac24 <_vfiprintf_r+0x228>)
 800abda:	a904      	add	r1, sp, #16
 800abdc:	4630      	mov	r0, r6
 800abde:	f7fe fa29 	bl	8009034 <_printf_float>
 800abe2:	4607      	mov	r7, r0
 800abe4:	1c78      	adds	r0, r7, #1
 800abe6:	d1d6      	bne.n	800ab96 <_vfiprintf_r+0x19a>
 800abe8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800abea:	07d9      	lsls	r1, r3, #31
 800abec:	d405      	bmi.n	800abfa <_vfiprintf_r+0x1fe>
 800abee:	89ab      	ldrh	r3, [r5, #12]
 800abf0:	059a      	lsls	r2, r3, #22
 800abf2:	d402      	bmi.n	800abfa <_vfiprintf_r+0x1fe>
 800abf4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800abf6:	f7fe ff1b 	bl	8009a30 <__retarget_lock_release_recursive>
 800abfa:	89ab      	ldrh	r3, [r5, #12]
 800abfc:	065b      	lsls	r3, r3, #25
 800abfe:	f53f af1f 	bmi.w	800aa40 <_vfiprintf_r+0x44>
 800ac02:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ac04:	e71e      	b.n	800aa44 <_vfiprintf_r+0x48>
 800ac06:	ab03      	add	r3, sp, #12
 800ac08:	9300      	str	r3, [sp, #0]
 800ac0a:	462a      	mov	r2, r5
 800ac0c:	4b05      	ldr	r3, [pc, #20]	@ (800ac24 <_vfiprintf_r+0x228>)
 800ac0e:	a904      	add	r1, sp, #16
 800ac10:	4630      	mov	r0, r6
 800ac12:	f7fe fca7 	bl	8009564 <_printf_i>
 800ac16:	e7e4      	b.n	800abe2 <_vfiprintf_r+0x1e6>
 800ac18:	080296f5 	.word	0x080296f5
 800ac1c:	080296ff 	.word	0x080296ff
 800ac20:	08009035 	.word	0x08009035
 800ac24:	0800a9d7 	.word	0x0800a9d7
 800ac28:	080296fb 	.word	0x080296fb

0800ac2c <malloc>:
 800ac2c:	4b02      	ldr	r3, [pc, #8]	@ (800ac38 <malloc+0xc>)
 800ac2e:	4601      	mov	r1, r0
 800ac30:	6818      	ldr	r0, [r3, #0]
 800ac32:	f000 b825 	b.w	800ac80 <_malloc_r>
 800ac36:	bf00      	nop
 800ac38:	2000001c 	.word	0x2000001c

0800ac3c <sbrk_aligned>:
 800ac3c:	b570      	push	{r4, r5, r6, lr}
 800ac3e:	4e0f      	ldr	r6, [pc, #60]	@ (800ac7c <sbrk_aligned+0x40>)
 800ac40:	460c      	mov	r4, r1
 800ac42:	6831      	ldr	r1, [r6, #0]
 800ac44:	4605      	mov	r5, r0
 800ac46:	b911      	cbnz	r1, 800ac4e <sbrk_aligned+0x12>
 800ac48:	f000 fef0 	bl	800ba2c <_sbrk_r>
 800ac4c:	6030      	str	r0, [r6, #0]
 800ac4e:	4621      	mov	r1, r4
 800ac50:	4628      	mov	r0, r5
 800ac52:	f000 feeb 	bl	800ba2c <_sbrk_r>
 800ac56:	1c43      	adds	r3, r0, #1
 800ac58:	d103      	bne.n	800ac62 <sbrk_aligned+0x26>
 800ac5a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800ac5e:	4620      	mov	r0, r4
 800ac60:	bd70      	pop	{r4, r5, r6, pc}
 800ac62:	1cc4      	adds	r4, r0, #3
 800ac64:	f024 0403 	bic.w	r4, r4, #3
 800ac68:	42a0      	cmp	r0, r4
 800ac6a:	d0f8      	beq.n	800ac5e <sbrk_aligned+0x22>
 800ac6c:	1a21      	subs	r1, r4, r0
 800ac6e:	4628      	mov	r0, r5
 800ac70:	f000 fedc 	bl	800ba2c <_sbrk_r>
 800ac74:	3001      	adds	r0, #1
 800ac76:	d1f2      	bne.n	800ac5e <sbrk_aligned+0x22>
 800ac78:	e7ef      	b.n	800ac5a <sbrk_aligned+0x1e>
 800ac7a:	bf00      	nop
 800ac7c:	20014908 	.word	0x20014908

0800ac80 <_malloc_r>:
 800ac80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ac84:	1ccd      	adds	r5, r1, #3
 800ac86:	f025 0503 	bic.w	r5, r5, #3
 800ac8a:	3508      	adds	r5, #8
 800ac8c:	2d0c      	cmp	r5, #12
 800ac8e:	bf38      	it	cc
 800ac90:	250c      	movcc	r5, #12
 800ac92:	2d00      	cmp	r5, #0
 800ac94:	4606      	mov	r6, r0
 800ac96:	db01      	blt.n	800ac9c <_malloc_r+0x1c>
 800ac98:	42a9      	cmp	r1, r5
 800ac9a:	d904      	bls.n	800aca6 <_malloc_r+0x26>
 800ac9c:	230c      	movs	r3, #12
 800ac9e:	6033      	str	r3, [r6, #0]
 800aca0:	2000      	movs	r0, #0
 800aca2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aca6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ad7c <_malloc_r+0xfc>
 800acaa:	f000 f915 	bl	800aed8 <__malloc_lock>
 800acae:	f8d8 3000 	ldr.w	r3, [r8]
 800acb2:	461c      	mov	r4, r3
 800acb4:	bb44      	cbnz	r4, 800ad08 <_malloc_r+0x88>
 800acb6:	4629      	mov	r1, r5
 800acb8:	4630      	mov	r0, r6
 800acba:	f7ff ffbf 	bl	800ac3c <sbrk_aligned>
 800acbe:	1c43      	adds	r3, r0, #1
 800acc0:	4604      	mov	r4, r0
 800acc2:	d158      	bne.n	800ad76 <_malloc_r+0xf6>
 800acc4:	f8d8 4000 	ldr.w	r4, [r8]
 800acc8:	4627      	mov	r7, r4
 800acca:	2f00      	cmp	r7, #0
 800accc:	d143      	bne.n	800ad56 <_malloc_r+0xd6>
 800acce:	2c00      	cmp	r4, #0
 800acd0:	d04b      	beq.n	800ad6a <_malloc_r+0xea>
 800acd2:	6823      	ldr	r3, [r4, #0]
 800acd4:	4639      	mov	r1, r7
 800acd6:	4630      	mov	r0, r6
 800acd8:	eb04 0903 	add.w	r9, r4, r3
 800acdc:	f000 fea6 	bl	800ba2c <_sbrk_r>
 800ace0:	4581      	cmp	r9, r0
 800ace2:	d142      	bne.n	800ad6a <_malloc_r+0xea>
 800ace4:	6821      	ldr	r1, [r4, #0]
 800ace6:	1a6d      	subs	r5, r5, r1
 800ace8:	4629      	mov	r1, r5
 800acea:	4630      	mov	r0, r6
 800acec:	f7ff ffa6 	bl	800ac3c <sbrk_aligned>
 800acf0:	3001      	adds	r0, #1
 800acf2:	d03a      	beq.n	800ad6a <_malloc_r+0xea>
 800acf4:	6823      	ldr	r3, [r4, #0]
 800acf6:	442b      	add	r3, r5
 800acf8:	6023      	str	r3, [r4, #0]
 800acfa:	f8d8 3000 	ldr.w	r3, [r8]
 800acfe:	685a      	ldr	r2, [r3, #4]
 800ad00:	bb62      	cbnz	r2, 800ad5c <_malloc_r+0xdc>
 800ad02:	f8c8 7000 	str.w	r7, [r8]
 800ad06:	e00f      	b.n	800ad28 <_malloc_r+0xa8>
 800ad08:	6822      	ldr	r2, [r4, #0]
 800ad0a:	1b52      	subs	r2, r2, r5
 800ad0c:	d420      	bmi.n	800ad50 <_malloc_r+0xd0>
 800ad0e:	2a0b      	cmp	r2, #11
 800ad10:	d917      	bls.n	800ad42 <_malloc_r+0xc2>
 800ad12:	1961      	adds	r1, r4, r5
 800ad14:	42a3      	cmp	r3, r4
 800ad16:	6025      	str	r5, [r4, #0]
 800ad18:	bf18      	it	ne
 800ad1a:	6059      	strne	r1, [r3, #4]
 800ad1c:	6863      	ldr	r3, [r4, #4]
 800ad1e:	bf08      	it	eq
 800ad20:	f8c8 1000 	streq.w	r1, [r8]
 800ad24:	5162      	str	r2, [r4, r5]
 800ad26:	604b      	str	r3, [r1, #4]
 800ad28:	4630      	mov	r0, r6
 800ad2a:	f000 f8db 	bl	800aee4 <__malloc_unlock>
 800ad2e:	f104 000b 	add.w	r0, r4, #11
 800ad32:	1d23      	adds	r3, r4, #4
 800ad34:	f020 0007 	bic.w	r0, r0, #7
 800ad38:	1ac2      	subs	r2, r0, r3
 800ad3a:	bf1c      	itt	ne
 800ad3c:	1a1b      	subne	r3, r3, r0
 800ad3e:	50a3      	strne	r3, [r4, r2]
 800ad40:	e7af      	b.n	800aca2 <_malloc_r+0x22>
 800ad42:	6862      	ldr	r2, [r4, #4]
 800ad44:	42a3      	cmp	r3, r4
 800ad46:	bf0c      	ite	eq
 800ad48:	f8c8 2000 	streq.w	r2, [r8]
 800ad4c:	605a      	strne	r2, [r3, #4]
 800ad4e:	e7eb      	b.n	800ad28 <_malloc_r+0xa8>
 800ad50:	4623      	mov	r3, r4
 800ad52:	6864      	ldr	r4, [r4, #4]
 800ad54:	e7ae      	b.n	800acb4 <_malloc_r+0x34>
 800ad56:	463c      	mov	r4, r7
 800ad58:	687f      	ldr	r7, [r7, #4]
 800ad5a:	e7b6      	b.n	800acca <_malloc_r+0x4a>
 800ad5c:	461a      	mov	r2, r3
 800ad5e:	685b      	ldr	r3, [r3, #4]
 800ad60:	42a3      	cmp	r3, r4
 800ad62:	d1fb      	bne.n	800ad5c <_malloc_r+0xdc>
 800ad64:	2300      	movs	r3, #0
 800ad66:	6053      	str	r3, [r2, #4]
 800ad68:	e7de      	b.n	800ad28 <_malloc_r+0xa8>
 800ad6a:	230c      	movs	r3, #12
 800ad6c:	6033      	str	r3, [r6, #0]
 800ad6e:	4630      	mov	r0, r6
 800ad70:	f000 f8b8 	bl	800aee4 <__malloc_unlock>
 800ad74:	e794      	b.n	800aca0 <_malloc_r+0x20>
 800ad76:	6005      	str	r5, [r0, #0]
 800ad78:	e7d6      	b.n	800ad28 <_malloc_r+0xa8>
 800ad7a:	bf00      	nop
 800ad7c:	2001490c 	.word	0x2001490c

0800ad80 <__sflush_r>:
 800ad80:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ad84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad88:	0716      	lsls	r6, r2, #28
 800ad8a:	4605      	mov	r5, r0
 800ad8c:	460c      	mov	r4, r1
 800ad8e:	d454      	bmi.n	800ae3a <__sflush_r+0xba>
 800ad90:	684b      	ldr	r3, [r1, #4]
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	dc02      	bgt.n	800ad9c <__sflush_r+0x1c>
 800ad96:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	dd48      	ble.n	800ae2e <__sflush_r+0xae>
 800ad9c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ad9e:	2e00      	cmp	r6, #0
 800ada0:	d045      	beq.n	800ae2e <__sflush_r+0xae>
 800ada2:	2300      	movs	r3, #0
 800ada4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ada8:	682f      	ldr	r7, [r5, #0]
 800adaa:	6a21      	ldr	r1, [r4, #32]
 800adac:	602b      	str	r3, [r5, #0]
 800adae:	d030      	beq.n	800ae12 <__sflush_r+0x92>
 800adb0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800adb2:	89a3      	ldrh	r3, [r4, #12]
 800adb4:	0759      	lsls	r1, r3, #29
 800adb6:	d505      	bpl.n	800adc4 <__sflush_r+0x44>
 800adb8:	6863      	ldr	r3, [r4, #4]
 800adba:	1ad2      	subs	r2, r2, r3
 800adbc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800adbe:	b10b      	cbz	r3, 800adc4 <__sflush_r+0x44>
 800adc0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800adc2:	1ad2      	subs	r2, r2, r3
 800adc4:	2300      	movs	r3, #0
 800adc6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800adc8:	6a21      	ldr	r1, [r4, #32]
 800adca:	4628      	mov	r0, r5
 800adcc:	47b0      	blx	r6
 800adce:	1c43      	adds	r3, r0, #1
 800add0:	89a3      	ldrh	r3, [r4, #12]
 800add2:	d106      	bne.n	800ade2 <__sflush_r+0x62>
 800add4:	6829      	ldr	r1, [r5, #0]
 800add6:	291d      	cmp	r1, #29
 800add8:	d82b      	bhi.n	800ae32 <__sflush_r+0xb2>
 800adda:	4a2a      	ldr	r2, [pc, #168]	@ (800ae84 <__sflush_r+0x104>)
 800addc:	410a      	asrs	r2, r1
 800adde:	07d6      	lsls	r6, r2, #31
 800ade0:	d427      	bmi.n	800ae32 <__sflush_r+0xb2>
 800ade2:	2200      	movs	r2, #0
 800ade4:	6062      	str	r2, [r4, #4]
 800ade6:	04d9      	lsls	r1, r3, #19
 800ade8:	6922      	ldr	r2, [r4, #16]
 800adea:	6022      	str	r2, [r4, #0]
 800adec:	d504      	bpl.n	800adf8 <__sflush_r+0x78>
 800adee:	1c42      	adds	r2, r0, #1
 800adf0:	d101      	bne.n	800adf6 <__sflush_r+0x76>
 800adf2:	682b      	ldr	r3, [r5, #0]
 800adf4:	b903      	cbnz	r3, 800adf8 <__sflush_r+0x78>
 800adf6:	6560      	str	r0, [r4, #84]	@ 0x54
 800adf8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800adfa:	602f      	str	r7, [r5, #0]
 800adfc:	b1b9      	cbz	r1, 800ae2e <__sflush_r+0xae>
 800adfe:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ae02:	4299      	cmp	r1, r3
 800ae04:	d002      	beq.n	800ae0c <__sflush_r+0x8c>
 800ae06:	4628      	mov	r0, r5
 800ae08:	f000 fe46 	bl	800ba98 <_free_r>
 800ae0c:	2300      	movs	r3, #0
 800ae0e:	6363      	str	r3, [r4, #52]	@ 0x34
 800ae10:	e00d      	b.n	800ae2e <__sflush_r+0xae>
 800ae12:	2301      	movs	r3, #1
 800ae14:	4628      	mov	r0, r5
 800ae16:	47b0      	blx	r6
 800ae18:	4602      	mov	r2, r0
 800ae1a:	1c50      	adds	r0, r2, #1
 800ae1c:	d1c9      	bne.n	800adb2 <__sflush_r+0x32>
 800ae1e:	682b      	ldr	r3, [r5, #0]
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d0c6      	beq.n	800adb2 <__sflush_r+0x32>
 800ae24:	2b1d      	cmp	r3, #29
 800ae26:	d001      	beq.n	800ae2c <__sflush_r+0xac>
 800ae28:	2b16      	cmp	r3, #22
 800ae2a:	d11e      	bne.n	800ae6a <__sflush_r+0xea>
 800ae2c:	602f      	str	r7, [r5, #0]
 800ae2e:	2000      	movs	r0, #0
 800ae30:	e022      	b.n	800ae78 <__sflush_r+0xf8>
 800ae32:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ae36:	b21b      	sxth	r3, r3
 800ae38:	e01b      	b.n	800ae72 <__sflush_r+0xf2>
 800ae3a:	690f      	ldr	r7, [r1, #16]
 800ae3c:	2f00      	cmp	r7, #0
 800ae3e:	d0f6      	beq.n	800ae2e <__sflush_r+0xae>
 800ae40:	0793      	lsls	r3, r2, #30
 800ae42:	680e      	ldr	r6, [r1, #0]
 800ae44:	bf08      	it	eq
 800ae46:	694b      	ldreq	r3, [r1, #20]
 800ae48:	600f      	str	r7, [r1, #0]
 800ae4a:	bf18      	it	ne
 800ae4c:	2300      	movne	r3, #0
 800ae4e:	eba6 0807 	sub.w	r8, r6, r7
 800ae52:	608b      	str	r3, [r1, #8]
 800ae54:	f1b8 0f00 	cmp.w	r8, #0
 800ae58:	dde9      	ble.n	800ae2e <__sflush_r+0xae>
 800ae5a:	6a21      	ldr	r1, [r4, #32]
 800ae5c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800ae5e:	4643      	mov	r3, r8
 800ae60:	463a      	mov	r2, r7
 800ae62:	4628      	mov	r0, r5
 800ae64:	47b0      	blx	r6
 800ae66:	2800      	cmp	r0, #0
 800ae68:	dc08      	bgt.n	800ae7c <__sflush_r+0xfc>
 800ae6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ae6e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ae72:	81a3      	strh	r3, [r4, #12]
 800ae74:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ae78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae7c:	4407      	add	r7, r0
 800ae7e:	eba8 0800 	sub.w	r8, r8, r0
 800ae82:	e7e7      	b.n	800ae54 <__sflush_r+0xd4>
 800ae84:	dfbffffe 	.word	0xdfbffffe

0800ae88 <_fflush_r>:
 800ae88:	b538      	push	{r3, r4, r5, lr}
 800ae8a:	690b      	ldr	r3, [r1, #16]
 800ae8c:	4605      	mov	r5, r0
 800ae8e:	460c      	mov	r4, r1
 800ae90:	b913      	cbnz	r3, 800ae98 <_fflush_r+0x10>
 800ae92:	2500      	movs	r5, #0
 800ae94:	4628      	mov	r0, r5
 800ae96:	bd38      	pop	{r3, r4, r5, pc}
 800ae98:	b118      	cbz	r0, 800aea2 <_fflush_r+0x1a>
 800ae9a:	6a03      	ldr	r3, [r0, #32]
 800ae9c:	b90b      	cbnz	r3, 800aea2 <_fflush_r+0x1a>
 800ae9e:	f7fe fd0d 	bl	80098bc <__sinit>
 800aea2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d0f3      	beq.n	800ae92 <_fflush_r+0xa>
 800aeaa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800aeac:	07d0      	lsls	r0, r2, #31
 800aeae:	d404      	bmi.n	800aeba <_fflush_r+0x32>
 800aeb0:	0599      	lsls	r1, r3, #22
 800aeb2:	d402      	bmi.n	800aeba <_fflush_r+0x32>
 800aeb4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800aeb6:	f7fe fdba 	bl	8009a2e <__retarget_lock_acquire_recursive>
 800aeba:	4628      	mov	r0, r5
 800aebc:	4621      	mov	r1, r4
 800aebe:	f7ff ff5f 	bl	800ad80 <__sflush_r>
 800aec2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800aec4:	07da      	lsls	r2, r3, #31
 800aec6:	4605      	mov	r5, r0
 800aec8:	d4e4      	bmi.n	800ae94 <_fflush_r+0xc>
 800aeca:	89a3      	ldrh	r3, [r4, #12]
 800aecc:	059b      	lsls	r3, r3, #22
 800aece:	d4e1      	bmi.n	800ae94 <_fflush_r+0xc>
 800aed0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800aed2:	f7fe fdad 	bl	8009a30 <__retarget_lock_release_recursive>
 800aed6:	e7dd      	b.n	800ae94 <_fflush_r+0xc>

0800aed8 <__malloc_lock>:
 800aed8:	4801      	ldr	r0, [pc, #4]	@ (800aee0 <__malloc_lock+0x8>)
 800aeda:	f7fe bda8 	b.w	8009a2e <__retarget_lock_acquire_recursive>
 800aede:	bf00      	nop
 800aee0:	20014904 	.word	0x20014904

0800aee4 <__malloc_unlock>:
 800aee4:	4801      	ldr	r0, [pc, #4]	@ (800aeec <__malloc_unlock+0x8>)
 800aee6:	f7fe bda3 	b.w	8009a30 <__retarget_lock_release_recursive>
 800aeea:	bf00      	nop
 800aeec:	20014904 	.word	0x20014904

0800aef0 <_Balloc>:
 800aef0:	b570      	push	{r4, r5, r6, lr}
 800aef2:	69c6      	ldr	r6, [r0, #28]
 800aef4:	4604      	mov	r4, r0
 800aef6:	460d      	mov	r5, r1
 800aef8:	b976      	cbnz	r6, 800af18 <_Balloc+0x28>
 800aefa:	2010      	movs	r0, #16
 800aefc:	f7ff fe96 	bl	800ac2c <malloc>
 800af00:	4602      	mov	r2, r0
 800af02:	61e0      	str	r0, [r4, #28]
 800af04:	b920      	cbnz	r0, 800af10 <_Balloc+0x20>
 800af06:	4b18      	ldr	r3, [pc, #96]	@ (800af68 <_Balloc+0x78>)
 800af08:	4818      	ldr	r0, [pc, #96]	@ (800af6c <_Balloc+0x7c>)
 800af0a:	216b      	movs	r1, #107	@ 0x6b
 800af0c:	f7fd ffd4 	bl	8008eb8 <__assert_func>
 800af10:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800af14:	6006      	str	r6, [r0, #0]
 800af16:	60c6      	str	r6, [r0, #12]
 800af18:	69e6      	ldr	r6, [r4, #28]
 800af1a:	68f3      	ldr	r3, [r6, #12]
 800af1c:	b183      	cbz	r3, 800af40 <_Balloc+0x50>
 800af1e:	69e3      	ldr	r3, [r4, #28]
 800af20:	68db      	ldr	r3, [r3, #12]
 800af22:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800af26:	b9b8      	cbnz	r0, 800af58 <_Balloc+0x68>
 800af28:	2101      	movs	r1, #1
 800af2a:	fa01 f605 	lsl.w	r6, r1, r5
 800af2e:	1d72      	adds	r2, r6, #5
 800af30:	0092      	lsls	r2, r2, #2
 800af32:	4620      	mov	r0, r4
 800af34:	f000 fd9c 	bl	800ba70 <_calloc_r>
 800af38:	b160      	cbz	r0, 800af54 <_Balloc+0x64>
 800af3a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800af3e:	e00e      	b.n	800af5e <_Balloc+0x6e>
 800af40:	2221      	movs	r2, #33	@ 0x21
 800af42:	2104      	movs	r1, #4
 800af44:	4620      	mov	r0, r4
 800af46:	f000 fd93 	bl	800ba70 <_calloc_r>
 800af4a:	69e3      	ldr	r3, [r4, #28]
 800af4c:	60f0      	str	r0, [r6, #12]
 800af4e:	68db      	ldr	r3, [r3, #12]
 800af50:	2b00      	cmp	r3, #0
 800af52:	d1e4      	bne.n	800af1e <_Balloc+0x2e>
 800af54:	2000      	movs	r0, #0
 800af56:	bd70      	pop	{r4, r5, r6, pc}
 800af58:	6802      	ldr	r2, [r0, #0]
 800af5a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800af5e:	2300      	movs	r3, #0
 800af60:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800af64:	e7f7      	b.n	800af56 <_Balloc+0x66>
 800af66:	bf00      	nop
 800af68:	08029675 	.word	0x08029675
 800af6c:	08029706 	.word	0x08029706

0800af70 <_Bfree>:
 800af70:	b570      	push	{r4, r5, r6, lr}
 800af72:	69c6      	ldr	r6, [r0, #28]
 800af74:	4605      	mov	r5, r0
 800af76:	460c      	mov	r4, r1
 800af78:	b976      	cbnz	r6, 800af98 <_Bfree+0x28>
 800af7a:	2010      	movs	r0, #16
 800af7c:	f7ff fe56 	bl	800ac2c <malloc>
 800af80:	4602      	mov	r2, r0
 800af82:	61e8      	str	r0, [r5, #28]
 800af84:	b920      	cbnz	r0, 800af90 <_Bfree+0x20>
 800af86:	4b09      	ldr	r3, [pc, #36]	@ (800afac <_Bfree+0x3c>)
 800af88:	4809      	ldr	r0, [pc, #36]	@ (800afb0 <_Bfree+0x40>)
 800af8a:	218f      	movs	r1, #143	@ 0x8f
 800af8c:	f7fd ff94 	bl	8008eb8 <__assert_func>
 800af90:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800af94:	6006      	str	r6, [r0, #0]
 800af96:	60c6      	str	r6, [r0, #12]
 800af98:	b13c      	cbz	r4, 800afaa <_Bfree+0x3a>
 800af9a:	69eb      	ldr	r3, [r5, #28]
 800af9c:	6862      	ldr	r2, [r4, #4]
 800af9e:	68db      	ldr	r3, [r3, #12]
 800afa0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800afa4:	6021      	str	r1, [r4, #0]
 800afa6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800afaa:	bd70      	pop	{r4, r5, r6, pc}
 800afac:	08029675 	.word	0x08029675
 800afb0:	08029706 	.word	0x08029706

0800afb4 <__multadd>:
 800afb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800afb8:	690d      	ldr	r5, [r1, #16]
 800afba:	4607      	mov	r7, r0
 800afbc:	460c      	mov	r4, r1
 800afbe:	461e      	mov	r6, r3
 800afc0:	f101 0c14 	add.w	ip, r1, #20
 800afc4:	2000      	movs	r0, #0
 800afc6:	f8dc 3000 	ldr.w	r3, [ip]
 800afca:	b299      	uxth	r1, r3
 800afcc:	fb02 6101 	mla	r1, r2, r1, r6
 800afd0:	0c1e      	lsrs	r6, r3, #16
 800afd2:	0c0b      	lsrs	r3, r1, #16
 800afd4:	fb02 3306 	mla	r3, r2, r6, r3
 800afd8:	b289      	uxth	r1, r1
 800afda:	3001      	adds	r0, #1
 800afdc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800afe0:	4285      	cmp	r5, r0
 800afe2:	f84c 1b04 	str.w	r1, [ip], #4
 800afe6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800afea:	dcec      	bgt.n	800afc6 <__multadd+0x12>
 800afec:	b30e      	cbz	r6, 800b032 <__multadd+0x7e>
 800afee:	68a3      	ldr	r3, [r4, #8]
 800aff0:	42ab      	cmp	r3, r5
 800aff2:	dc19      	bgt.n	800b028 <__multadd+0x74>
 800aff4:	6861      	ldr	r1, [r4, #4]
 800aff6:	4638      	mov	r0, r7
 800aff8:	3101      	adds	r1, #1
 800affa:	f7ff ff79 	bl	800aef0 <_Balloc>
 800affe:	4680      	mov	r8, r0
 800b000:	b928      	cbnz	r0, 800b00e <__multadd+0x5a>
 800b002:	4602      	mov	r2, r0
 800b004:	4b0c      	ldr	r3, [pc, #48]	@ (800b038 <__multadd+0x84>)
 800b006:	480d      	ldr	r0, [pc, #52]	@ (800b03c <__multadd+0x88>)
 800b008:	21ba      	movs	r1, #186	@ 0xba
 800b00a:	f7fd ff55 	bl	8008eb8 <__assert_func>
 800b00e:	6922      	ldr	r2, [r4, #16]
 800b010:	3202      	adds	r2, #2
 800b012:	f104 010c 	add.w	r1, r4, #12
 800b016:	0092      	lsls	r2, r2, #2
 800b018:	300c      	adds	r0, #12
 800b01a:	f7fe fd0a 	bl	8009a32 <memcpy>
 800b01e:	4621      	mov	r1, r4
 800b020:	4638      	mov	r0, r7
 800b022:	f7ff ffa5 	bl	800af70 <_Bfree>
 800b026:	4644      	mov	r4, r8
 800b028:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b02c:	3501      	adds	r5, #1
 800b02e:	615e      	str	r6, [r3, #20]
 800b030:	6125      	str	r5, [r4, #16]
 800b032:	4620      	mov	r0, r4
 800b034:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b038:	080296e4 	.word	0x080296e4
 800b03c:	08029706 	.word	0x08029706

0800b040 <__hi0bits>:
 800b040:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800b044:	4603      	mov	r3, r0
 800b046:	bf36      	itet	cc
 800b048:	0403      	lslcc	r3, r0, #16
 800b04a:	2000      	movcs	r0, #0
 800b04c:	2010      	movcc	r0, #16
 800b04e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b052:	bf3c      	itt	cc
 800b054:	021b      	lslcc	r3, r3, #8
 800b056:	3008      	addcc	r0, #8
 800b058:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b05c:	bf3c      	itt	cc
 800b05e:	011b      	lslcc	r3, r3, #4
 800b060:	3004      	addcc	r0, #4
 800b062:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b066:	bf3c      	itt	cc
 800b068:	009b      	lslcc	r3, r3, #2
 800b06a:	3002      	addcc	r0, #2
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	db05      	blt.n	800b07c <__hi0bits+0x3c>
 800b070:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800b074:	f100 0001 	add.w	r0, r0, #1
 800b078:	bf08      	it	eq
 800b07a:	2020      	moveq	r0, #32
 800b07c:	4770      	bx	lr

0800b07e <__lo0bits>:
 800b07e:	6803      	ldr	r3, [r0, #0]
 800b080:	4602      	mov	r2, r0
 800b082:	f013 0007 	ands.w	r0, r3, #7
 800b086:	d00b      	beq.n	800b0a0 <__lo0bits+0x22>
 800b088:	07d9      	lsls	r1, r3, #31
 800b08a:	d421      	bmi.n	800b0d0 <__lo0bits+0x52>
 800b08c:	0798      	lsls	r0, r3, #30
 800b08e:	bf49      	itett	mi
 800b090:	085b      	lsrmi	r3, r3, #1
 800b092:	089b      	lsrpl	r3, r3, #2
 800b094:	2001      	movmi	r0, #1
 800b096:	6013      	strmi	r3, [r2, #0]
 800b098:	bf5c      	itt	pl
 800b09a:	6013      	strpl	r3, [r2, #0]
 800b09c:	2002      	movpl	r0, #2
 800b09e:	4770      	bx	lr
 800b0a0:	b299      	uxth	r1, r3
 800b0a2:	b909      	cbnz	r1, 800b0a8 <__lo0bits+0x2a>
 800b0a4:	0c1b      	lsrs	r3, r3, #16
 800b0a6:	2010      	movs	r0, #16
 800b0a8:	b2d9      	uxtb	r1, r3
 800b0aa:	b909      	cbnz	r1, 800b0b0 <__lo0bits+0x32>
 800b0ac:	3008      	adds	r0, #8
 800b0ae:	0a1b      	lsrs	r3, r3, #8
 800b0b0:	0719      	lsls	r1, r3, #28
 800b0b2:	bf04      	itt	eq
 800b0b4:	091b      	lsreq	r3, r3, #4
 800b0b6:	3004      	addeq	r0, #4
 800b0b8:	0799      	lsls	r1, r3, #30
 800b0ba:	bf04      	itt	eq
 800b0bc:	089b      	lsreq	r3, r3, #2
 800b0be:	3002      	addeq	r0, #2
 800b0c0:	07d9      	lsls	r1, r3, #31
 800b0c2:	d403      	bmi.n	800b0cc <__lo0bits+0x4e>
 800b0c4:	085b      	lsrs	r3, r3, #1
 800b0c6:	f100 0001 	add.w	r0, r0, #1
 800b0ca:	d003      	beq.n	800b0d4 <__lo0bits+0x56>
 800b0cc:	6013      	str	r3, [r2, #0]
 800b0ce:	4770      	bx	lr
 800b0d0:	2000      	movs	r0, #0
 800b0d2:	4770      	bx	lr
 800b0d4:	2020      	movs	r0, #32
 800b0d6:	4770      	bx	lr

0800b0d8 <__i2b>:
 800b0d8:	b510      	push	{r4, lr}
 800b0da:	460c      	mov	r4, r1
 800b0dc:	2101      	movs	r1, #1
 800b0de:	f7ff ff07 	bl	800aef0 <_Balloc>
 800b0e2:	4602      	mov	r2, r0
 800b0e4:	b928      	cbnz	r0, 800b0f2 <__i2b+0x1a>
 800b0e6:	4b05      	ldr	r3, [pc, #20]	@ (800b0fc <__i2b+0x24>)
 800b0e8:	4805      	ldr	r0, [pc, #20]	@ (800b100 <__i2b+0x28>)
 800b0ea:	f240 1145 	movw	r1, #325	@ 0x145
 800b0ee:	f7fd fee3 	bl	8008eb8 <__assert_func>
 800b0f2:	2301      	movs	r3, #1
 800b0f4:	6144      	str	r4, [r0, #20]
 800b0f6:	6103      	str	r3, [r0, #16]
 800b0f8:	bd10      	pop	{r4, pc}
 800b0fa:	bf00      	nop
 800b0fc:	080296e4 	.word	0x080296e4
 800b100:	08029706 	.word	0x08029706

0800b104 <__multiply>:
 800b104:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b108:	4614      	mov	r4, r2
 800b10a:	690a      	ldr	r2, [r1, #16]
 800b10c:	6923      	ldr	r3, [r4, #16]
 800b10e:	429a      	cmp	r2, r3
 800b110:	bfa8      	it	ge
 800b112:	4623      	movge	r3, r4
 800b114:	460f      	mov	r7, r1
 800b116:	bfa4      	itt	ge
 800b118:	460c      	movge	r4, r1
 800b11a:	461f      	movge	r7, r3
 800b11c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800b120:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800b124:	68a3      	ldr	r3, [r4, #8]
 800b126:	6861      	ldr	r1, [r4, #4]
 800b128:	eb0a 0609 	add.w	r6, sl, r9
 800b12c:	42b3      	cmp	r3, r6
 800b12e:	b085      	sub	sp, #20
 800b130:	bfb8      	it	lt
 800b132:	3101      	addlt	r1, #1
 800b134:	f7ff fedc 	bl	800aef0 <_Balloc>
 800b138:	b930      	cbnz	r0, 800b148 <__multiply+0x44>
 800b13a:	4602      	mov	r2, r0
 800b13c:	4b44      	ldr	r3, [pc, #272]	@ (800b250 <__multiply+0x14c>)
 800b13e:	4845      	ldr	r0, [pc, #276]	@ (800b254 <__multiply+0x150>)
 800b140:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800b144:	f7fd feb8 	bl	8008eb8 <__assert_func>
 800b148:	f100 0514 	add.w	r5, r0, #20
 800b14c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b150:	462b      	mov	r3, r5
 800b152:	2200      	movs	r2, #0
 800b154:	4543      	cmp	r3, r8
 800b156:	d321      	bcc.n	800b19c <__multiply+0x98>
 800b158:	f107 0114 	add.w	r1, r7, #20
 800b15c:	f104 0214 	add.w	r2, r4, #20
 800b160:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800b164:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800b168:	9302      	str	r3, [sp, #8]
 800b16a:	1b13      	subs	r3, r2, r4
 800b16c:	3b15      	subs	r3, #21
 800b16e:	f023 0303 	bic.w	r3, r3, #3
 800b172:	3304      	adds	r3, #4
 800b174:	f104 0715 	add.w	r7, r4, #21
 800b178:	42ba      	cmp	r2, r7
 800b17a:	bf38      	it	cc
 800b17c:	2304      	movcc	r3, #4
 800b17e:	9301      	str	r3, [sp, #4]
 800b180:	9b02      	ldr	r3, [sp, #8]
 800b182:	9103      	str	r1, [sp, #12]
 800b184:	428b      	cmp	r3, r1
 800b186:	d80c      	bhi.n	800b1a2 <__multiply+0x9e>
 800b188:	2e00      	cmp	r6, #0
 800b18a:	dd03      	ble.n	800b194 <__multiply+0x90>
 800b18c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b190:	2b00      	cmp	r3, #0
 800b192:	d05b      	beq.n	800b24c <__multiply+0x148>
 800b194:	6106      	str	r6, [r0, #16]
 800b196:	b005      	add	sp, #20
 800b198:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b19c:	f843 2b04 	str.w	r2, [r3], #4
 800b1a0:	e7d8      	b.n	800b154 <__multiply+0x50>
 800b1a2:	f8b1 a000 	ldrh.w	sl, [r1]
 800b1a6:	f1ba 0f00 	cmp.w	sl, #0
 800b1aa:	d024      	beq.n	800b1f6 <__multiply+0xf2>
 800b1ac:	f104 0e14 	add.w	lr, r4, #20
 800b1b0:	46a9      	mov	r9, r5
 800b1b2:	f04f 0c00 	mov.w	ip, #0
 800b1b6:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b1ba:	f8d9 3000 	ldr.w	r3, [r9]
 800b1be:	fa1f fb87 	uxth.w	fp, r7
 800b1c2:	b29b      	uxth	r3, r3
 800b1c4:	fb0a 330b 	mla	r3, sl, fp, r3
 800b1c8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800b1cc:	f8d9 7000 	ldr.w	r7, [r9]
 800b1d0:	4463      	add	r3, ip
 800b1d2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b1d6:	fb0a c70b 	mla	r7, sl, fp, ip
 800b1da:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800b1de:	b29b      	uxth	r3, r3
 800b1e0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b1e4:	4572      	cmp	r2, lr
 800b1e6:	f849 3b04 	str.w	r3, [r9], #4
 800b1ea:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b1ee:	d8e2      	bhi.n	800b1b6 <__multiply+0xb2>
 800b1f0:	9b01      	ldr	r3, [sp, #4]
 800b1f2:	f845 c003 	str.w	ip, [r5, r3]
 800b1f6:	9b03      	ldr	r3, [sp, #12]
 800b1f8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800b1fc:	3104      	adds	r1, #4
 800b1fe:	f1b9 0f00 	cmp.w	r9, #0
 800b202:	d021      	beq.n	800b248 <__multiply+0x144>
 800b204:	682b      	ldr	r3, [r5, #0]
 800b206:	f104 0c14 	add.w	ip, r4, #20
 800b20a:	46ae      	mov	lr, r5
 800b20c:	f04f 0a00 	mov.w	sl, #0
 800b210:	f8bc b000 	ldrh.w	fp, [ip]
 800b214:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800b218:	fb09 770b 	mla	r7, r9, fp, r7
 800b21c:	4457      	add	r7, sl
 800b21e:	b29b      	uxth	r3, r3
 800b220:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b224:	f84e 3b04 	str.w	r3, [lr], #4
 800b228:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b22c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b230:	f8be 3000 	ldrh.w	r3, [lr]
 800b234:	fb09 330a 	mla	r3, r9, sl, r3
 800b238:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800b23c:	4562      	cmp	r2, ip
 800b23e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b242:	d8e5      	bhi.n	800b210 <__multiply+0x10c>
 800b244:	9f01      	ldr	r7, [sp, #4]
 800b246:	51eb      	str	r3, [r5, r7]
 800b248:	3504      	adds	r5, #4
 800b24a:	e799      	b.n	800b180 <__multiply+0x7c>
 800b24c:	3e01      	subs	r6, #1
 800b24e:	e79b      	b.n	800b188 <__multiply+0x84>
 800b250:	080296e4 	.word	0x080296e4
 800b254:	08029706 	.word	0x08029706

0800b258 <__pow5mult>:
 800b258:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b25c:	4615      	mov	r5, r2
 800b25e:	f012 0203 	ands.w	r2, r2, #3
 800b262:	4607      	mov	r7, r0
 800b264:	460e      	mov	r6, r1
 800b266:	d007      	beq.n	800b278 <__pow5mult+0x20>
 800b268:	4c25      	ldr	r4, [pc, #148]	@ (800b300 <__pow5mult+0xa8>)
 800b26a:	3a01      	subs	r2, #1
 800b26c:	2300      	movs	r3, #0
 800b26e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b272:	f7ff fe9f 	bl	800afb4 <__multadd>
 800b276:	4606      	mov	r6, r0
 800b278:	10ad      	asrs	r5, r5, #2
 800b27a:	d03d      	beq.n	800b2f8 <__pow5mult+0xa0>
 800b27c:	69fc      	ldr	r4, [r7, #28]
 800b27e:	b97c      	cbnz	r4, 800b2a0 <__pow5mult+0x48>
 800b280:	2010      	movs	r0, #16
 800b282:	f7ff fcd3 	bl	800ac2c <malloc>
 800b286:	4602      	mov	r2, r0
 800b288:	61f8      	str	r0, [r7, #28]
 800b28a:	b928      	cbnz	r0, 800b298 <__pow5mult+0x40>
 800b28c:	4b1d      	ldr	r3, [pc, #116]	@ (800b304 <__pow5mult+0xac>)
 800b28e:	481e      	ldr	r0, [pc, #120]	@ (800b308 <__pow5mult+0xb0>)
 800b290:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800b294:	f7fd fe10 	bl	8008eb8 <__assert_func>
 800b298:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b29c:	6004      	str	r4, [r0, #0]
 800b29e:	60c4      	str	r4, [r0, #12]
 800b2a0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800b2a4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b2a8:	b94c      	cbnz	r4, 800b2be <__pow5mult+0x66>
 800b2aa:	f240 2171 	movw	r1, #625	@ 0x271
 800b2ae:	4638      	mov	r0, r7
 800b2b0:	f7ff ff12 	bl	800b0d8 <__i2b>
 800b2b4:	2300      	movs	r3, #0
 800b2b6:	f8c8 0008 	str.w	r0, [r8, #8]
 800b2ba:	4604      	mov	r4, r0
 800b2bc:	6003      	str	r3, [r0, #0]
 800b2be:	f04f 0900 	mov.w	r9, #0
 800b2c2:	07eb      	lsls	r3, r5, #31
 800b2c4:	d50a      	bpl.n	800b2dc <__pow5mult+0x84>
 800b2c6:	4631      	mov	r1, r6
 800b2c8:	4622      	mov	r2, r4
 800b2ca:	4638      	mov	r0, r7
 800b2cc:	f7ff ff1a 	bl	800b104 <__multiply>
 800b2d0:	4631      	mov	r1, r6
 800b2d2:	4680      	mov	r8, r0
 800b2d4:	4638      	mov	r0, r7
 800b2d6:	f7ff fe4b 	bl	800af70 <_Bfree>
 800b2da:	4646      	mov	r6, r8
 800b2dc:	106d      	asrs	r5, r5, #1
 800b2de:	d00b      	beq.n	800b2f8 <__pow5mult+0xa0>
 800b2e0:	6820      	ldr	r0, [r4, #0]
 800b2e2:	b938      	cbnz	r0, 800b2f4 <__pow5mult+0x9c>
 800b2e4:	4622      	mov	r2, r4
 800b2e6:	4621      	mov	r1, r4
 800b2e8:	4638      	mov	r0, r7
 800b2ea:	f7ff ff0b 	bl	800b104 <__multiply>
 800b2ee:	6020      	str	r0, [r4, #0]
 800b2f0:	f8c0 9000 	str.w	r9, [r0]
 800b2f4:	4604      	mov	r4, r0
 800b2f6:	e7e4      	b.n	800b2c2 <__pow5mult+0x6a>
 800b2f8:	4630      	mov	r0, r6
 800b2fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b2fe:	bf00      	nop
 800b300:	08029760 	.word	0x08029760
 800b304:	08029675 	.word	0x08029675
 800b308:	08029706 	.word	0x08029706

0800b30c <__lshift>:
 800b30c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b310:	460c      	mov	r4, r1
 800b312:	6849      	ldr	r1, [r1, #4]
 800b314:	6923      	ldr	r3, [r4, #16]
 800b316:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b31a:	68a3      	ldr	r3, [r4, #8]
 800b31c:	4607      	mov	r7, r0
 800b31e:	4691      	mov	r9, r2
 800b320:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b324:	f108 0601 	add.w	r6, r8, #1
 800b328:	42b3      	cmp	r3, r6
 800b32a:	db0b      	blt.n	800b344 <__lshift+0x38>
 800b32c:	4638      	mov	r0, r7
 800b32e:	f7ff fddf 	bl	800aef0 <_Balloc>
 800b332:	4605      	mov	r5, r0
 800b334:	b948      	cbnz	r0, 800b34a <__lshift+0x3e>
 800b336:	4602      	mov	r2, r0
 800b338:	4b28      	ldr	r3, [pc, #160]	@ (800b3dc <__lshift+0xd0>)
 800b33a:	4829      	ldr	r0, [pc, #164]	@ (800b3e0 <__lshift+0xd4>)
 800b33c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800b340:	f7fd fdba 	bl	8008eb8 <__assert_func>
 800b344:	3101      	adds	r1, #1
 800b346:	005b      	lsls	r3, r3, #1
 800b348:	e7ee      	b.n	800b328 <__lshift+0x1c>
 800b34a:	2300      	movs	r3, #0
 800b34c:	f100 0114 	add.w	r1, r0, #20
 800b350:	f100 0210 	add.w	r2, r0, #16
 800b354:	4618      	mov	r0, r3
 800b356:	4553      	cmp	r3, sl
 800b358:	db33      	blt.n	800b3c2 <__lshift+0xb6>
 800b35a:	6920      	ldr	r0, [r4, #16]
 800b35c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b360:	f104 0314 	add.w	r3, r4, #20
 800b364:	f019 091f 	ands.w	r9, r9, #31
 800b368:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b36c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b370:	d02b      	beq.n	800b3ca <__lshift+0xbe>
 800b372:	f1c9 0e20 	rsb	lr, r9, #32
 800b376:	468a      	mov	sl, r1
 800b378:	2200      	movs	r2, #0
 800b37a:	6818      	ldr	r0, [r3, #0]
 800b37c:	fa00 f009 	lsl.w	r0, r0, r9
 800b380:	4310      	orrs	r0, r2
 800b382:	f84a 0b04 	str.w	r0, [sl], #4
 800b386:	f853 2b04 	ldr.w	r2, [r3], #4
 800b38a:	459c      	cmp	ip, r3
 800b38c:	fa22 f20e 	lsr.w	r2, r2, lr
 800b390:	d8f3      	bhi.n	800b37a <__lshift+0x6e>
 800b392:	ebac 0304 	sub.w	r3, ip, r4
 800b396:	3b15      	subs	r3, #21
 800b398:	f023 0303 	bic.w	r3, r3, #3
 800b39c:	3304      	adds	r3, #4
 800b39e:	f104 0015 	add.w	r0, r4, #21
 800b3a2:	4584      	cmp	ip, r0
 800b3a4:	bf38      	it	cc
 800b3a6:	2304      	movcc	r3, #4
 800b3a8:	50ca      	str	r2, [r1, r3]
 800b3aa:	b10a      	cbz	r2, 800b3b0 <__lshift+0xa4>
 800b3ac:	f108 0602 	add.w	r6, r8, #2
 800b3b0:	3e01      	subs	r6, #1
 800b3b2:	4638      	mov	r0, r7
 800b3b4:	612e      	str	r6, [r5, #16]
 800b3b6:	4621      	mov	r1, r4
 800b3b8:	f7ff fdda 	bl	800af70 <_Bfree>
 800b3bc:	4628      	mov	r0, r5
 800b3be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b3c2:	f842 0f04 	str.w	r0, [r2, #4]!
 800b3c6:	3301      	adds	r3, #1
 800b3c8:	e7c5      	b.n	800b356 <__lshift+0x4a>
 800b3ca:	3904      	subs	r1, #4
 800b3cc:	f853 2b04 	ldr.w	r2, [r3], #4
 800b3d0:	f841 2f04 	str.w	r2, [r1, #4]!
 800b3d4:	459c      	cmp	ip, r3
 800b3d6:	d8f9      	bhi.n	800b3cc <__lshift+0xc0>
 800b3d8:	e7ea      	b.n	800b3b0 <__lshift+0xa4>
 800b3da:	bf00      	nop
 800b3dc:	080296e4 	.word	0x080296e4
 800b3e0:	08029706 	.word	0x08029706

0800b3e4 <__mcmp>:
 800b3e4:	690a      	ldr	r2, [r1, #16]
 800b3e6:	4603      	mov	r3, r0
 800b3e8:	6900      	ldr	r0, [r0, #16]
 800b3ea:	1a80      	subs	r0, r0, r2
 800b3ec:	b530      	push	{r4, r5, lr}
 800b3ee:	d10e      	bne.n	800b40e <__mcmp+0x2a>
 800b3f0:	3314      	adds	r3, #20
 800b3f2:	3114      	adds	r1, #20
 800b3f4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b3f8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b3fc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b400:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b404:	4295      	cmp	r5, r2
 800b406:	d003      	beq.n	800b410 <__mcmp+0x2c>
 800b408:	d205      	bcs.n	800b416 <__mcmp+0x32>
 800b40a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b40e:	bd30      	pop	{r4, r5, pc}
 800b410:	42a3      	cmp	r3, r4
 800b412:	d3f3      	bcc.n	800b3fc <__mcmp+0x18>
 800b414:	e7fb      	b.n	800b40e <__mcmp+0x2a>
 800b416:	2001      	movs	r0, #1
 800b418:	e7f9      	b.n	800b40e <__mcmp+0x2a>
	...

0800b41c <__mdiff>:
 800b41c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b420:	4689      	mov	r9, r1
 800b422:	4606      	mov	r6, r0
 800b424:	4611      	mov	r1, r2
 800b426:	4648      	mov	r0, r9
 800b428:	4614      	mov	r4, r2
 800b42a:	f7ff ffdb 	bl	800b3e4 <__mcmp>
 800b42e:	1e05      	subs	r5, r0, #0
 800b430:	d112      	bne.n	800b458 <__mdiff+0x3c>
 800b432:	4629      	mov	r1, r5
 800b434:	4630      	mov	r0, r6
 800b436:	f7ff fd5b 	bl	800aef0 <_Balloc>
 800b43a:	4602      	mov	r2, r0
 800b43c:	b928      	cbnz	r0, 800b44a <__mdiff+0x2e>
 800b43e:	4b3f      	ldr	r3, [pc, #252]	@ (800b53c <__mdiff+0x120>)
 800b440:	f240 2137 	movw	r1, #567	@ 0x237
 800b444:	483e      	ldr	r0, [pc, #248]	@ (800b540 <__mdiff+0x124>)
 800b446:	f7fd fd37 	bl	8008eb8 <__assert_func>
 800b44a:	2301      	movs	r3, #1
 800b44c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b450:	4610      	mov	r0, r2
 800b452:	b003      	add	sp, #12
 800b454:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b458:	bfbc      	itt	lt
 800b45a:	464b      	movlt	r3, r9
 800b45c:	46a1      	movlt	r9, r4
 800b45e:	4630      	mov	r0, r6
 800b460:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800b464:	bfba      	itte	lt
 800b466:	461c      	movlt	r4, r3
 800b468:	2501      	movlt	r5, #1
 800b46a:	2500      	movge	r5, #0
 800b46c:	f7ff fd40 	bl	800aef0 <_Balloc>
 800b470:	4602      	mov	r2, r0
 800b472:	b918      	cbnz	r0, 800b47c <__mdiff+0x60>
 800b474:	4b31      	ldr	r3, [pc, #196]	@ (800b53c <__mdiff+0x120>)
 800b476:	f240 2145 	movw	r1, #581	@ 0x245
 800b47a:	e7e3      	b.n	800b444 <__mdiff+0x28>
 800b47c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800b480:	6926      	ldr	r6, [r4, #16]
 800b482:	60c5      	str	r5, [r0, #12]
 800b484:	f109 0310 	add.w	r3, r9, #16
 800b488:	f109 0514 	add.w	r5, r9, #20
 800b48c:	f104 0e14 	add.w	lr, r4, #20
 800b490:	f100 0b14 	add.w	fp, r0, #20
 800b494:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800b498:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800b49c:	9301      	str	r3, [sp, #4]
 800b49e:	46d9      	mov	r9, fp
 800b4a0:	f04f 0c00 	mov.w	ip, #0
 800b4a4:	9b01      	ldr	r3, [sp, #4]
 800b4a6:	f85e 0b04 	ldr.w	r0, [lr], #4
 800b4aa:	f853 af04 	ldr.w	sl, [r3, #4]!
 800b4ae:	9301      	str	r3, [sp, #4]
 800b4b0:	fa1f f38a 	uxth.w	r3, sl
 800b4b4:	4619      	mov	r1, r3
 800b4b6:	b283      	uxth	r3, r0
 800b4b8:	1acb      	subs	r3, r1, r3
 800b4ba:	0c00      	lsrs	r0, r0, #16
 800b4bc:	4463      	add	r3, ip
 800b4be:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800b4c2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800b4c6:	b29b      	uxth	r3, r3
 800b4c8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800b4cc:	4576      	cmp	r6, lr
 800b4ce:	f849 3b04 	str.w	r3, [r9], #4
 800b4d2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b4d6:	d8e5      	bhi.n	800b4a4 <__mdiff+0x88>
 800b4d8:	1b33      	subs	r3, r6, r4
 800b4da:	3b15      	subs	r3, #21
 800b4dc:	f023 0303 	bic.w	r3, r3, #3
 800b4e0:	3415      	adds	r4, #21
 800b4e2:	3304      	adds	r3, #4
 800b4e4:	42a6      	cmp	r6, r4
 800b4e6:	bf38      	it	cc
 800b4e8:	2304      	movcc	r3, #4
 800b4ea:	441d      	add	r5, r3
 800b4ec:	445b      	add	r3, fp
 800b4ee:	461e      	mov	r6, r3
 800b4f0:	462c      	mov	r4, r5
 800b4f2:	4544      	cmp	r4, r8
 800b4f4:	d30e      	bcc.n	800b514 <__mdiff+0xf8>
 800b4f6:	f108 0103 	add.w	r1, r8, #3
 800b4fa:	1b49      	subs	r1, r1, r5
 800b4fc:	f021 0103 	bic.w	r1, r1, #3
 800b500:	3d03      	subs	r5, #3
 800b502:	45a8      	cmp	r8, r5
 800b504:	bf38      	it	cc
 800b506:	2100      	movcc	r1, #0
 800b508:	440b      	add	r3, r1
 800b50a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b50e:	b191      	cbz	r1, 800b536 <__mdiff+0x11a>
 800b510:	6117      	str	r7, [r2, #16]
 800b512:	e79d      	b.n	800b450 <__mdiff+0x34>
 800b514:	f854 1b04 	ldr.w	r1, [r4], #4
 800b518:	46e6      	mov	lr, ip
 800b51a:	0c08      	lsrs	r0, r1, #16
 800b51c:	fa1c fc81 	uxtah	ip, ip, r1
 800b520:	4471      	add	r1, lr
 800b522:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800b526:	b289      	uxth	r1, r1
 800b528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800b52c:	f846 1b04 	str.w	r1, [r6], #4
 800b530:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b534:	e7dd      	b.n	800b4f2 <__mdiff+0xd6>
 800b536:	3f01      	subs	r7, #1
 800b538:	e7e7      	b.n	800b50a <__mdiff+0xee>
 800b53a:	bf00      	nop
 800b53c:	080296e4 	.word	0x080296e4
 800b540:	08029706 	.word	0x08029706

0800b544 <__d2b>:
 800b544:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b548:	460f      	mov	r7, r1
 800b54a:	2101      	movs	r1, #1
 800b54c:	ec59 8b10 	vmov	r8, r9, d0
 800b550:	4616      	mov	r6, r2
 800b552:	f7ff fccd 	bl	800aef0 <_Balloc>
 800b556:	4604      	mov	r4, r0
 800b558:	b930      	cbnz	r0, 800b568 <__d2b+0x24>
 800b55a:	4602      	mov	r2, r0
 800b55c:	4b23      	ldr	r3, [pc, #140]	@ (800b5ec <__d2b+0xa8>)
 800b55e:	4824      	ldr	r0, [pc, #144]	@ (800b5f0 <__d2b+0xac>)
 800b560:	f240 310f 	movw	r1, #783	@ 0x30f
 800b564:	f7fd fca8 	bl	8008eb8 <__assert_func>
 800b568:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b56c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b570:	b10d      	cbz	r5, 800b576 <__d2b+0x32>
 800b572:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b576:	9301      	str	r3, [sp, #4]
 800b578:	f1b8 0300 	subs.w	r3, r8, #0
 800b57c:	d023      	beq.n	800b5c6 <__d2b+0x82>
 800b57e:	4668      	mov	r0, sp
 800b580:	9300      	str	r3, [sp, #0]
 800b582:	f7ff fd7c 	bl	800b07e <__lo0bits>
 800b586:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b58a:	b1d0      	cbz	r0, 800b5c2 <__d2b+0x7e>
 800b58c:	f1c0 0320 	rsb	r3, r0, #32
 800b590:	fa02 f303 	lsl.w	r3, r2, r3
 800b594:	430b      	orrs	r3, r1
 800b596:	40c2      	lsrs	r2, r0
 800b598:	6163      	str	r3, [r4, #20]
 800b59a:	9201      	str	r2, [sp, #4]
 800b59c:	9b01      	ldr	r3, [sp, #4]
 800b59e:	61a3      	str	r3, [r4, #24]
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	bf0c      	ite	eq
 800b5a4:	2201      	moveq	r2, #1
 800b5a6:	2202      	movne	r2, #2
 800b5a8:	6122      	str	r2, [r4, #16]
 800b5aa:	b1a5      	cbz	r5, 800b5d6 <__d2b+0x92>
 800b5ac:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800b5b0:	4405      	add	r5, r0
 800b5b2:	603d      	str	r5, [r7, #0]
 800b5b4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800b5b8:	6030      	str	r0, [r6, #0]
 800b5ba:	4620      	mov	r0, r4
 800b5bc:	b003      	add	sp, #12
 800b5be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b5c2:	6161      	str	r1, [r4, #20]
 800b5c4:	e7ea      	b.n	800b59c <__d2b+0x58>
 800b5c6:	a801      	add	r0, sp, #4
 800b5c8:	f7ff fd59 	bl	800b07e <__lo0bits>
 800b5cc:	9b01      	ldr	r3, [sp, #4]
 800b5ce:	6163      	str	r3, [r4, #20]
 800b5d0:	3020      	adds	r0, #32
 800b5d2:	2201      	movs	r2, #1
 800b5d4:	e7e8      	b.n	800b5a8 <__d2b+0x64>
 800b5d6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b5da:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800b5de:	6038      	str	r0, [r7, #0]
 800b5e0:	6918      	ldr	r0, [r3, #16]
 800b5e2:	f7ff fd2d 	bl	800b040 <__hi0bits>
 800b5e6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b5ea:	e7e5      	b.n	800b5b8 <__d2b+0x74>
 800b5ec:	080296e4 	.word	0x080296e4
 800b5f0:	08029706 	.word	0x08029706

0800b5f4 <__sread>:
 800b5f4:	b510      	push	{r4, lr}
 800b5f6:	460c      	mov	r4, r1
 800b5f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b5fc:	f000 f9f0 	bl	800b9e0 <_read_r>
 800b600:	2800      	cmp	r0, #0
 800b602:	bfab      	itete	ge
 800b604:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b606:	89a3      	ldrhlt	r3, [r4, #12]
 800b608:	181b      	addge	r3, r3, r0
 800b60a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b60e:	bfac      	ite	ge
 800b610:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b612:	81a3      	strhlt	r3, [r4, #12]
 800b614:	bd10      	pop	{r4, pc}

0800b616 <__swrite>:
 800b616:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b61a:	461f      	mov	r7, r3
 800b61c:	898b      	ldrh	r3, [r1, #12]
 800b61e:	05db      	lsls	r3, r3, #23
 800b620:	4605      	mov	r5, r0
 800b622:	460c      	mov	r4, r1
 800b624:	4616      	mov	r6, r2
 800b626:	d505      	bpl.n	800b634 <__swrite+0x1e>
 800b628:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b62c:	2302      	movs	r3, #2
 800b62e:	2200      	movs	r2, #0
 800b630:	f000 f994 	bl	800b95c <_lseek_r>
 800b634:	89a3      	ldrh	r3, [r4, #12]
 800b636:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b63a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b63e:	81a3      	strh	r3, [r4, #12]
 800b640:	4632      	mov	r2, r6
 800b642:	463b      	mov	r3, r7
 800b644:	4628      	mov	r0, r5
 800b646:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b64a:	f000 b9ff 	b.w	800ba4c <_write_r>

0800b64e <__sseek>:
 800b64e:	b510      	push	{r4, lr}
 800b650:	460c      	mov	r4, r1
 800b652:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b656:	f000 f981 	bl	800b95c <_lseek_r>
 800b65a:	1c43      	adds	r3, r0, #1
 800b65c:	89a3      	ldrh	r3, [r4, #12]
 800b65e:	bf15      	itete	ne
 800b660:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b662:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b666:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b66a:	81a3      	strheq	r3, [r4, #12]
 800b66c:	bf18      	it	ne
 800b66e:	81a3      	strhne	r3, [r4, #12]
 800b670:	bd10      	pop	{r4, pc}

0800b672 <__sclose>:
 800b672:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b676:	f000 b93f 	b.w	800b8f8 <_close_r>

0800b67a <_realloc_r>:
 800b67a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b67e:	4680      	mov	r8, r0
 800b680:	4615      	mov	r5, r2
 800b682:	460c      	mov	r4, r1
 800b684:	b921      	cbnz	r1, 800b690 <_realloc_r+0x16>
 800b686:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b68a:	4611      	mov	r1, r2
 800b68c:	f7ff baf8 	b.w	800ac80 <_malloc_r>
 800b690:	b92a      	cbnz	r2, 800b69e <_realloc_r+0x24>
 800b692:	f000 fa01 	bl	800ba98 <_free_r>
 800b696:	2400      	movs	r4, #0
 800b698:	4620      	mov	r0, r4
 800b69a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b69e:	f000 fa57 	bl	800bb50 <_malloc_usable_size_r>
 800b6a2:	4285      	cmp	r5, r0
 800b6a4:	4606      	mov	r6, r0
 800b6a6:	d802      	bhi.n	800b6ae <_realloc_r+0x34>
 800b6a8:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800b6ac:	d8f4      	bhi.n	800b698 <_realloc_r+0x1e>
 800b6ae:	4629      	mov	r1, r5
 800b6b0:	4640      	mov	r0, r8
 800b6b2:	f7ff fae5 	bl	800ac80 <_malloc_r>
 800b6b6:	4607      	mov	r7, r0
 800b6b8:	2800      	cmp	r0, #0
 800b6ba:	d0ec      	beq.n	800b696 <_realloc_r+0x1c>
 800b6bc:	42b5      	cmp	r5, r6
 800b6be:	462a      	mov	r2, r5
 800b6c0:	4621      	mov	r1, r4
 800b6c2:	bf28      	it	cs
 800b6c4:	4632      	movcs	r2, r6
 800b6c6:	f7fe f9b4 	bl	8009a32 <memcpy>
 800b6ca:	4621      	mov	r1, r4
 800b6cc:	4640      	mov	r0, r8
 800b6ce:	f000 f9e3 	bl	800ba98 <_free_r>
 800b6d2:	463c      	mov	r4, r7
 800b6d4:	e7e0      	b.n	800b698 <_realloc_r+0x1e>

0800b6d6 <__swbuf_r>:
 800b6d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6d8:	460e      	mov	r6, r1
 800b6da:	4614      	mov	r4, r2
 800b6dc:	4605      	mov	r5, r0
 800b6de:	b118      	cbz	r0, 800b6e8 <__swbuf_r+0x12>
 800b6e0:	6a03      	ldr	r3, [r0, #32]
 800b6e2:	b90b      	cbnz	r3, 800b6e8 <__swbuf_r+0x12>
 800b6e4:	f7fe f8ea 	bl	80098bc <__sinit>
 800b6e8:	69a3      	ldr	r3, [r4, #24]
 800b6ea:	60a3      	str	r3, [r4, #8]
 800b6ec:	89a3      	ldrh	r3, [r4, #12]
 800b6ee:	071a      	lsls	r2, r3, #28
 800b6f0:	d501      	bpl.n	800b6f6 <__swbuf_r+0x20>
 800b6f2:	6923      	ldr	r3, [r4, #16]
 800b6f4:	b943      	cbnz	r3, 800b708 <__swbuf_r+0x32>
 800b6f6:	4621      	mov	r1, r4
 800b6f8:	4628      	mov	r0, r5
 800b6fa:	f000 f82b 	bl	800b754 <__swsetup_r>
 800b6fe:	b118      	cbz	r0, 800b708 <__swbuf_r+0x32>
 800b700:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800b704:	4638      	mov	r0, r7
 800b706:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b708:	6823      	ldr	r3, [r4, #0]
 800b70a:	6922      	ldr	r2, [r4, #16]
 800b70c:	1a98      	subs	r0, r3, r2
 800b70e:	6963      	ldr	r3, [r4, #20]
 800b710:	b2f6      	uxtb	r6, r6
 800b712:	4283      	cmp	r3, r0
 800b714:	4637      	mov	r7, r6
 800b716:	dc05      	bgt.n	800b724 <__swbuf_r+0x4e>
 800b718:	4621      	mov	r1, r4
 800b71a:	4628      	mov	r0, r5
 800b71c:	f7ff fbb4 	bl	800ae88 <_fflush_r>
 800b720:	2800      	cmp	r0, #0
 800b722:	d1ed      	bne.n	800b700 <__swbuf_r+0x2a>
 800b724:	68a3      	ldr	r3, [r4, #8]
 800b726:	3b01      	subs	r3, #1
 800b728:	60a3      	str	r3, [r4, #8]
 800b72a:	6823      	ldr	r3, [r4, #0]
 800b72c:	1c5a      	adds	r2, r3, #1
 800b72e:	6022      	str	r2, [r4, #0]
 800b730:	701e      	strb	r6, [r3, #0]
 800b732:	6962      	ldr	r2, [r4, #20]
 800b734:	1c43      	adds	r3, r0, #1
 800b736:	429a      	cmp	r2, r3
 800b738:	d004      	beq.n	800b744 <__swbuf_r+0x6e>
 800b73a:	89a3      	ldrh	r3, [r4, #12]
 800b73c:	07db      	lsls	r3, r3, #31
 800b73e:	d5e1      	bpl.n	800b704 <__swbuf_r+0x2e>
 800b740:	2e0a      	cmp	r6, #10
 800b742:	d1df      	bne.n	800b704 <__swbuf_r+0x2e>
 800b744:	4621      	mov	r1, r4
 800b746:	4628      	mov	r0, r5
 800b748:	f7ff fb9e 	bl	800ae88 <_fflush_r>
 800b74c:	2800      	cmp	r0, #0
 800b74e:	d0d9      	beq.n	800b704 <__swbuf_r+0x2e>
 800b750:	e7d6      	b.n	800b700 <__swbuf_r+0x2a>
	...

0800b754 <__swsetup_r>:
 800b754:	b538      	push	{r3, r4, r5, lr}
 800b756:	4b29      	ldr	r3, [pc, #164]	@ (800b7fc <__swsetup_r+0xa8>)
 800b758:	4605      	mov	r5, r0
 800b75a:	6818      	ldr	r0, [r3, #0]
 800b75c:	460c      	mov	r4, r1
 800b75e:	b118      	cbz	r0, 800b768 <__swsetup_r+0x14>
 800b760:	6a03      	ldr	r3, [r0, #32]
 800b762:	b90b      	cbnz	r3, 800b768 <__swsetup_r+0x14>
 800b764:	f7fe f8aa 	bl	80098bc <__sinit>
 800b768:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b76c:	0719      	lsls	r1, r3, #28
 800b76e:	d422      	bmi.n	800b7b6 <__swsetup_r+0x62>
 800b770:	06da      	lsls	r2, r3, #27
 800b772:	d407      	bmi.n	800b784 <__swsetup_r+0x30>
 800b774:	2209      	movs	r2, #9
 800b776:	602a      	str	r2, [r5, #0]
 800b778:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b77c:	81a3      	strh	r3, [r4, #12]
 800b77e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b782:	e033      	b.n	800b7ec <__swsetup_r+0x98>
 800b784:	0758      	lsls	r0, r3, #29
 800b786:	d512      	bpl.n	800b7ae <__swsetup_r+0x5a>
 800b788:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b78a:	b141      	cbz	r1, 800b79e <__swsetup_r+0x4a>
 800b78c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b790:	4299      	cmp	r1, r3
 800b792:	d002      	beq.n	800b79a <__swsetup_r+0x46>
 800b794:	4628      	mov	r0, r5
 800b796:	f000 f97f 	bl	800ba98 <_free_r>
 800b79a:	2300      	movs	r3, #0
 800b79c:	6363      	str	r3, [r4, #52]	@ 0x34
 800b79e:	89a3      	ldrh	r3, [r4, #12]
 800b7a0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b7a4:	81a3      	strh	r3, [r4, #12]
 800b7a6:	2300      	movs	r3, #0
 800b7a8:	6063      	str	r3, [r4, #4]
 800b7aa:	6923      	ldr	r3, [r4, #16]
 800b7ac:	6023      	str	r3, [r4, #0]
 800b7ae:	89a3      	ldrh	r3, [r4, #12]
 800b7b0:	f043 0308 	orr.w	r3, r3, #8
 800b7b4:	81a3      	strh	r3, [r4, #12]
 800b7b6:	6923      	ldr	r3, [r4, #16]
 800b7b8:	b94b      	cbnz	r3, 800b7ce <__swsetup_r+0x7a>
 800b7ba:	89a3      	ldrh	r3, [r4, #12]
 800b7bc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b7c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b7c4:	d003      	beq.n	800b7ce <__swsetup_r+0x7a>
 800b7c6:	4621      	mov	r1, r4
 800b7c8:	4628      	mov	r0, r5
 800b7ca:	f000 f83f 	bl	800b84c <__smakebuf_r>
 800b7ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b7d2:	f013 0201 	ands.w	r2, r3, #1
 800b7d6:	d00a      	beq.n	800b7ee <__swsetup_r+0x9a>
 800b7d8:	2200      	movs	r2, #0
 800b7da:	60a2      	str	r2, [r4, #8]
 800b7dc:	6962      	ldr	r2, [r4, #20]
 800b7de:	4252      	negs	r2, r2
 800b7e0:	61a2      	str	r2, [r4, #24]
 800b7e2:	6922      	ldr	r2, [r4, #16]
 800b7e4:	b942      	cbnz	r2, 800b7f8 <__swsetup_r+0xa4>
 800b7e6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b7ea:	d1c5      	bne.n	800b778 <__swsetup_r+0x24>
 800b7ec:	bd38      	pop	{r3, r4, r5, pc}
 800b7ee:	0799      	lsls	r1, r3, #30
 800b7f0:	bf58      	it	pl
 800b7f2:	6962      	ldrpl	r2, [r4, #20]
 800b7f4:	60a2      	str	r2, [r4, #8]
 800b7f6:	e7f4      	b.n	800b7e2 <__swsetup_r+0x8e>
 800b7f8:	2000      	movs	r0, #0
 800b7fa:	e7f7      	b.n	800b7ec <__swsetup_r+0x98>
 800b7fc:	2000001c 	.word	0x2000001c

0800b800 <__swhatbuf_r>:
 800b800:	b570      	push	{r4, r5, r6, lr}
 800b802:	460c      	mov	r4, r1
 800b804:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b808:	2900      	cmp	r1, #0
 800b80a:	b096      	sub	sp, #88	@ 0x58
 800b80c:	4615      	mov	r5, r2
 800b80e:	461e      	mov	r6, r3
 800b810:	da0d      	bge.n	800b82e <__swhatbuf_r+0x2e>
 800b812:	89a3      	ldrh	r3, [r4, #12]
 800b814:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b818:	f04f 0100 	mov.w	r1, #0
 800b81c:	bf14      	ite	ne
 800b81e:	2340      	movne	r3, #64	@ 0x40
 800b820:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b824:	2000      	movs	r0, #0
 800b826:	6031      	str	r1, [r6, #0]
 800b828:	602b      	str	r3, [r5, #0]
 800b82a:	b016      	add	sp, #88	@ 0x58
 800b82c:	bd70      	pop	{r4, r5, r6, pc}
 800b82e:	466a      	mov	r2, sp
 800b830:	f000 f872 	bl	800b918 <_fstat_r>
 800b834:	2800      	cmp	r0, #0
 800b836:	dbec      	blt.n	800b812 <__swhatbuf_r+0x12>
 800b838:	9901      	ldr	r1, [sp, #4]
 800b83a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b83e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b842:	4259      	negs	r1, r3
 800b844:	4159      	adcs	r1, r3
 800b846:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b84a:	e7eb      	b.n	800b824 <__swhatbuf_r+0x24>

0800b84c <__smakebuf_r>:
 800b84c:	898b      	ldrh	r3, [r1, #12]
 800b84e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b850:	079d      	lsls	r5, r3, #30
 800b852:	4606      	mov	r6, r0
 800b854:	460c      	mov	r4, r1
 800b856:	d507      	bpl.n	800b868 <__smakebuf_r+0x1c>
 800b858:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b85c:	6023      	str	r3, [r4, #0]
 800b85e:	6123      	str	r3, [r4, #16]
 800b860:	2301      	movs	r3, #1
 800b862:	6163      	str	r3, [r4, #20]
 800b864:	b003      	add	sp, #12
 800b866:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b868:	ab01      	add	r3, sp, #4
 800b86a:	466a      	mov	r2, sp
 800b86c:	f7ff ffc8 	bl	800b800 <__swhatbuf_r>
 800b870:	9f00      	ldr	r7, [sp, #0]
 800b872:	4605      	mov	r5, r0
 800b874:	4639      	mov	r1, r7
 800b876:	4630      	mov	r0, r6
 800b878:	f7ff fa02 	bl	800ac80 <_malloc_r>
 800b87c:	b948      	cbnz	r0, 800b892 <__smakebuf_r+0x46>
 800b87e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b882:	059a      	lsls	r2, r3, #22
 800b884:	d4ee      	bmi.n	800b864 <__smakebuf_r+0x18>
 800b886:	f023 0303 	bic.w	r3, r3, #3
 800b88a:	f043 0302 	orr.w	r3, r3, #2
 800b88e:	81a3      	strh	r3, [r4, #12]
 800b890:	e7e2      	b.n	800b858 <__smakebuf_r+0xc>
 800b892:	89a3      	ldrh	r3, [r4, #12]
 800b894:	6020      	str	r0, [r4, #0]
 800b896:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b89a:	81a3      	strh	r3, [r4, #12]
 800b89c:	9b01      	ldr	r3, [sp, #4]
 800b89e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b8a2:	b15b      	cbz	r3, 800b8bc <__smakebuf_r+0x70>
 800b8a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b8a8:	4630      	mov	r0, r6
 800b8aa:	f000 f847 	bl	800b93c <_isatty_r>
 800b8ae:	b128      	cbz	r0, 800b8bc <__smakebuf_r+0x70>
 800b8b0:	89a3      	ldrh	r3, [r4, #12]
 800b8b2:	f023 0303 	bic.w	r3, r3, #3
 800b8b6:	f043 0301 	orr.w	r3, r3, #1
 800b8ba:	81a3      	strh	r3, [r4, #12]
 800b8bc:	89a3      	ldrh	r3, [r4, #12]
 800b8be:	431d      	orrs	r5, r3
 800b8c0:	81a5      	strh	r5, [r4, #12]
 800b8c2:	e7cf      	b.n	800b864 <__smakebuf_r+0x18>

0800b8c4 <memmove>:
 800b8c4:	4288      	cmp	r0, r1
 800b8c6:	b510      	push	{r4, lr}
 800b8c8:	eb01 0402 	add.w	r4, r1, r2
 800b8cc:	d902      	bls.n	800b8d4 <memmove+0x10>
 800b8ce:	4284      	cmp	r4, r0
 800b8d0:	4623      	mov	r3, r4
 800b8d2:	d807      	bhi.n	800b8e4 <memmove+0x20>
 800b8d4:	1e43      	subs	r3, r0, #1
 800b8d6:	42a1      	cmp	r1, r4
 800b8d8:	d008      	beq.n	800b8ec <memmove+0x28>
 800b8da:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b8de:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b8e2:	e7f8      	b.n	800b8d6 <memmove+0x12>
 800b8e4:	4402      	add	r2, r0
 800b8e6:	4601      	mov	r1, r0
 800b8e8:	428a      	cmp	r2, r1
 800b8ea:	d100      	bne.n	800b8ee <memmove+0x2a>
 800b8ec:	bd10      	pop	{r4, pc}
 800b8ee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b8f2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b8f6:	e7f7      	b.n	800b8e8 <memmove+0x24>

0800b8f8 <_close_r>:
 800b8f8:	b538      	push	{r3, r4, r5, lr}
 800b8fa:	4d06      	ldr	r5, [pc, #24]	@ (800b914 <_close_r+0x1c>)
 800b8fc:	2300      	movs	r3, #0
 800b8fe:	4604      	mov	r4, r0
 800b900:	4608      	mov	r0, r1
 800b902:	602b      	str	r3, [r5, #0]
 800b904:	f7f7 f92a 	bl	8002b5c <_close>
 800b908:	1c43      	adds	r3, r0, #1
 800b90a:	d102      	bne.n	800b912 <_close_r+0x1a>
 800b90c:	682b      	ldr	r3, [r5, #0]
 800b90e:	b103      	cbz	r3, 800b912 <_close_r+0x1a>
 800b910:	6023      	str	r3, [r4, #0]
 800b912:	bd38      	pop	{r3, r4, r5, pc}
 800b914:	20014910 	.word	0x20014910

0800b918 <_fstat_r>:
 800b918:	b538      	push	{r3, r4, r5, lr}
 800b91a:	4d07      	ldr	r5, [pc, #28]	@ (800b938 <_fstat_r+0x20>)
 800b91c:	2300      	movs	r3, #0
 800b91e:	4604      	mov	r4, r0
 800b920:	4608      	mov	r0, r1
 800b922:	4611      	mov	r1, r2
 800b924:	602b      	str	r3, [r5, #0]
 800b926:	f7f7 f925 	bl	8002b74 <_fstat>
 800b92a:	1c43      	adds	r3, r0, #1
 800b92c:	d102      	bne.n	800b934 <_fstat_r+0x1c>
 800b92e:	682b      	ldr	r3, [r5, #0]
 800b930:	b103      	cbz	r3, 800b934 <_fstat_r+0x1c>
 800b932:	6023      	str	r3, [r4, #0]
 800b934:	bd38      	pop	{r3, r4, r5, pc}
 800b936:	bf00      	nop
 800b938:	20014910 	.word	0x20014910

0800b93c <_isatty_r>:
 800b93c:	b538      	push	{r3, r4, r5, lr}
 800b93e:	4d06      	ldr	r5, [pc, #24]	@ (800b958 <_isatty_r+0x1c>)
 800b940:	2300      	movs	r3, #0
 800b942:	4604      	mov	r4, r0
 800b944:	4608      	mov	r0, r1
 800b946:	602b      	str	r3, [r5, #0]
 800b948:	f7f7 f924 	bl	8002b94 <_isatty>
 800b94c:	1c43      	adds	r3, r0, #1
 800b94e:	d102      	bne.n	800b956 <_isatty_r+0x1a>
 800b950:	682b      	ldr	r3, [r5, #0]
 800b952:	b103      	cbz	r3, 800b956 <_isatty_r+0x1a>
 800b954:	6023      	str	r3, [r4, #0]
 800b956:	bd38      	pop	{r3, r4, r5, pc}
 800b958:	20014910 	.word	0x20014910

0800b95c <_lseek_r>:
 800b95c:	b538      	push	{r3, r4, r5, lr}
 800b95e:	4d07      	ldr	r5, [pc, #28]	@ (800b97c <_lseek_r+0x20>)
 800b960:	4604      	mov	r4, r0
 800b962:	4608      	mov	r0, r1
 800b964:	4611      	mov	r1, r2
 800b966:	2200      	movs	r2, #0
 800b968:	602a      	str	r2, [r5, #0]
 800b96a:	461a      	mov	r2, r3
 800b96c:	f7f7 f91d 	bl	8002baa <_lseek>
 800b970:	1c43      	adds	r3, r0, #1
 800b972:	d102      	bne.n	800b97a <_lseek_r+0x1e>
 800b974:	682b      	ldr	r3, [r5, #0]
 800b976:	b103      	cbz	r3, 800b97a <_lseek_r+0x1e>
 800b978:	6023      	str	r3, [r4, #0]
 800b97a:	bd38      	pop	{r3, r4, r5, pc}
 800b97c:	20014910 	.word	0x20014910

0800b980 <_raise_r>:
 800b980:	291f      	cmp	r1, #31
 800b982:	b538      	push	{r3, r4, r5, lr}
 800b984:	4605      	mov	r5, r0
 800b986:	460c      	mov	r4, r1
 800b988:	d904      	bls.n	800b994 <_raise_r+0x14>
 800b98a:	2316      	movs	r3, #22
 800b98c:	6003      	str	r3, [r0, #0]
 800b98e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b992:	bd38      	pop	{r3, r4, r5, pc}
 800b994:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b996:	b112      	cbz	r2, 800b99e <_raise_r+0x1e>
 800b998:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b99c:	b94b      	cbnz	r3, 800b9b2 <_raise_r+0x32>
 800b99e:	4628      	mov	r0, r5
 800b9a0:	f000 f842 	bl	800ba28 <_getpid_r>
 800b9a4:	4622      	mov	r2, r4
 800b9a6:	4601      	mov	r1, r0
 800b9a8:	4628      	mov	r0, r5
 800b9aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b9ae:	f000 b829 	b.w	800ba04 <_kill_r>
 800b9b2:	2b01      	cmp	r3, #1
 800b9b4:	d00a      	beq.n	800b9cc <_raise_r+0x4c>
 800b9b6:	1c59      	adds	r1, r3, #1
 800b9b8:	d103      	bne.n	800b9c2 <_raise_r+0x42>
 800b9ba:	2316      	movs	r3, #22
 800b9bc:	6003      	str	r3, [r0, #0]
 800b9be:	2001      	movs	r0, #1
 800b9c0:	e7e7      	b.n	800b992 <_raise_r+0x12>
 800b9c2:	2100      	movs	r1, #0
 800b9c4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b9c8:	4620      	mov	r0, r4
 800b9ca:	4798      	blx	r3
 800b9cc:	2000      	movs	r0, #0
 800b9ce:	e7e0      	b.n	800b992 <_raise_r+0x12>

0800b9d0 <raise>:
 800b9d0:	4b02      	ldr	r3, [pc, #8]	@ (800b9dc <raise+0xc>)
 800b9d2:	4601      	mov	r1, r0
 800b9d4:	6818      	ldr	r0, [r3, #0]
 800b9d6:	f7ff bfd3 	b.w	800b980 <_raise_r>
 800b9da:	bf00      	nop
 800b9dc:	2000001c 	.word	0x2000001c

0800b9e0 <_read_r>:
 800b9e0:	b538      	push	{r3, r4, r5, lr}
 800b9e2:	4d07      	ldr	r5, [pc, #28]	@ (800ba00 <_read_r+0x20>)
 800b9e4:	4604      	mov	r4, r0
 800b9e6:	4608      	mov	r0, r1
 800b9e8:	4611      	mov	r1, r2
 800b9ea:	2200      	movs	r2, #0
 800b9ec:	602a      	str	r2, [r5, #0]
 800b9ee:	461a      	mov	r2, r3
 800b9f0:	f7f7 f897 	bl	8002b22 <_read>
 800b9f4:	1c43      	adds	r3, r0, #1
 800b9f6:	d102      	bne.n	800b9fe <_read_r+0x1e>
 800b9f8:	682b      	ldr	r3, [r5, #0]
 800b9fa:	b103      	cbz	r3, 800b9fe <_read_r+0x1e>
 800b9fc:	6023      	str	r3, [r4, #0]
 800b9fe:	bd38      	pop	{r3, r4, r5, pc}
 800ba00:	20014910 	.word	0x20014910

0800ba04 <_kill_r>:
 800ba04:	b538      	push	{r3, r4, r5, lr}
 800ba06:	4d07      	ldr	r5, [pc, #28]	@ (800ba24 <_kill_r+0x20>)
 800ba08:	2300      	movs	r3, #0
 800ba0a:	4604      	mov	r4, r0
 800ba0c:	4608      	mov	r0, r1
 800ba0e:	4611      	mov	r1, r2
 800ba10:	602b      	str	r3, [r5, #0]
 800ba12:	f7f7 f86b 	bl	8002aec <_kill>
 800ba16:	1c43      	adds	r3, r0, #1
 800ba18:	d102      	bne.n	800ba20 <_kill_r+0x1c>
 800ba1a:	682b      	ldr	r3, [r5, #0]
 800ba1c:	b103      	cbz	r3, 800ba20 <_kill_r+0x1c>
 800ba1e:	6023      	str	r3, [r4, #0]
 800ba20:	bd38      	pop	{r3, r4, r5, pc}
 800ba22:	bf00      	nop
 800ba24:	20014910 	.word	0x20014910

0800ba28 <_getpid_r>:
 800ba28:	f7f7 b858 	b.w	8002adc <_getpid>

0800ba2c <_sbrk_r>:
 800ba2c:	b538      	push	{r3, r4, r5, lr}
 800ba2e:	4d06      	ldr	r5, [pc, #24]	@ (800ba48 <_sbrk_r+0x1c>)
 800ba30:	2300      	movs	r3, #0
 800ba32:	4604      	mov	r4, r0
 800ba34:	4608      	mov	r0, r1
 800ba36:	602b      	str	r3, [r5, #0]
 800ba38:	f7f7 f8c4 	bl	8002bc4 <_sbrk>
 800ba3c:	1c43      	adds	r3, r0, #1
 800ba3e:	d102      	bne.n	800ba46 <_sbrk_r+0x1a>
 800ba40:	682b      	ldr	r3, [r5, #0]
 800ba42:	b103      	cbz	r3, 800ba46 <_sbrk_r+0x1a>
 800ba44:	6023      	str	r3, [r4, #0]
 800ba46:	bd38      	pop	{r3, r4, r5, pc}
 800ba48:	20014910 	.word	0x20014910

0800ba4c <_write_r>:
 800ba4c:	b538      	push	{r3, r4, r5, lr}
 800ba4e:	4d07      	ldr	r5, [pc, #28]	@ (800ba6c <_write_r+0x20>)
 800ba50:	4604      	mov	r4, r0
 800ba52:	4608      	mov	r0, r1
 800ba54:	4611      	mov	r1, r2
 800ba56:	2200      	movs	r2, #0
 800ba58:	602a      	str	r2, [r5, #0]
 800ba5a:	461a      	mov	r2, r3
 800ba5c:	f7f6 fafe 	bl	800205c <_write>
 800ba60:	1c43      	adds	r3, r0, #1
 800ba62:	d102      	bne.n	800ba6a <_write_r+0x1e>
 800ba64:	682b      	ldr	r3, [r5, #0]
 800ba66:	b103      	cbz	r3, 800ba6a <_write_r+0x1e>
 800ba68:	6023      	str	r3, [r4, #0]
 800ba6a:	bd38      	pop	{r3, r4, r5, pc}
 800ba6c:	20014910 	.word	0x20014910

0800ba70 <_calloc_r>:
 800ba70:	b570      	push	{r4, r5, r6, lr}
 800ba72:	fba1 5402 	umull	r5, r4, r1, r2
 800ba76:	b93c      	cbnz	r4, 800ba88 <_calloc_r+0x18>
 800ba78:	4629      	mov	r1, r5
 800ba7a:	f7ff f901 	bl	800ac80 <_malloc_r>
 800ba7e:	4606      	mov	r6, r0
 800ba80:	b928      	cbnz	r0, 800ba8e <_calloc_r+0x1e>
 800ba82:	2600      	movs	r6, #0
 800ba84:	4630      	mov	r0, r6
 800ba86:	bd70      	pop	{r4, r5, r6, pc}
 800ba88:	220c      	movs	r2, #12
 800ba8a:	6002      	str	r2, [r0, #0]
 800ba8c:	e7f9      	b.n	800ba82 <_calloc_r+0x12>
 800ba8e:	462a      	mov	r2, r5
 800ba90:	4621      	mov	r1, r4
 800ba92:	f7fd ff95 	bl	80099c0 <memset>
 800ba96:	e7f5      	b.n	800ba84 <_calloc_r+0x14>

0800ba98 <_free_r>:
 800ba98:	b538      	push	{r3, r4, r5, lr}
 800ba9a:	4605      	mov	r5, r0
 800ba9c:	2900      	cmp	r1, #0
 800ba9e:	d041      	beq.n	800bb24 <_free_r+0x8c>
 800baa0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800baa4:	1f0c      	subs	r4, r1, #4
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	bfb8      	it	lt
 800baaa:	18e4      	addlt	r4, r4, r3
 800baac:	f7ff fa14 	bl	800aed8 <__malloc_lock>
 800bab0:	4a1d      	ldr	r2, [pc, #116]	@ (800bb28 <_free_r+0x90>)
 800bab2:	6813      	ldr	r3, [r2, #0]
 800bab4:	b933      	cbnz	r3, 800bac4 <_free_r+0x2c>
 800bab6:	6063      	str	r3, [r4, #4]
 800bab8:	6014      	str	r4, [r2, #0]
 800baba:	4628      	mov	r0, r5
 800babc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bac0:	f7ff ba10 	b.w	800aee4 <__malloc_unlock>
 800bac4:	42a3      	cmp	r3, r4
 800bac6:	d908      	bls.n	800bada <_free_r+0x42>
 800bac8:	6820      	ldr	r0, [r4, #0]
 800baca:	1821      	adds	r1, r4, r0
 800bacc:	428b      	cmp	r3, r1
 800bace:	bf01      	itttt	eq
 800bad0:	6819      	ldreq	r1, [r3, #0]
 800bad2:	685b      	ldreq	r3, [r3, #4]
 800bad4:	1809      	addeq	r1, r1, r0
 800bad6:	6021      	streq	r1, [r4, #0]
 800bad8:	e7ed      	b.n	800bab6 <_free_r+0x1e>
 800bada:	461a      	mov	r2, r3
 800badc:	685b      	ldr	r3, [r3, #4]
 800bade:	b10b      	cbz	r3, 800bae4 <_free_r+0x4c>
 800bae0:	42a3      	cmp	r3, r4
 800bae2:	d9fa      	bls.n	800bada <_free_r+0x42>
 800bae4:	6811      	ldr	r1, [r2, #0]
 800bae6:	1850      	adds	r0, r2, r1
 800bae8:	42a0      	cmp	r0, r4
 800baea:	d10b      	bne.n	800bb04 <_free_r+0x6c>
 800baec:	6820      	ldr	r0, [r4, #0]
 800baee:	4401      	add	r1, r0
 800baf0:	1850      	adds	r0, r2, r1
 800baf2:	4283      	cmp	r3, r0
 800baf4:	6011      	str	r1, [r2, #0]
 800baf6:	d1e0      	bne.n	800baba <_free_r+0x22>
 800baf8:	6818      	ldr	r0, [r3, #0]
 800bafa:	685b      	ldr	r3, [r3, #4]
 800bafc:	6053      	str	r3, [r2, #4]
 800bafe:	4408      	add	r0, r1
 800bb00:	6010      	str	r0, [r2, #0]
 800bb02:	e7da      	b.n	800baba <_free_r+0x22>
 800bb04:	d902      	bls.n	800bb0c <_free_r+0x74>
 800bb06:	230c      	movs	r3, #12
 800bb08:	602b      	str	r3, [r5, #0]
 800bb0a:	e7d6      	b.n	800baba <_free_r+0x22>
 800bb0c:	6820      	ldr	r0, [r4, #0]
 800bb0e:	1821      	adds	r1, r4, r0
 800bb10:	428b      	cmp	r3, r1
 800bb12:	bf04      	itt	eq
 800bb14:	6819      	ldreq	r1, [r3, #0]
 800bb16:	685b      	ldreq	r3, [r3, #4]
 800bb18:	6063      	str	r3, [r4, #4]
 800bb1a:	bf04      	itt	eq
 800bb1c:	1809      	addeq	r1, r1, r0
 800bb1e:	6021      	streq	r1, [r4, #0]
 800bb20:	6054      	str	r4, [r2, #4]
 800bb22:	e7ca      	b.n	800baba <_free_r+0x22>
 800bb24:	bd38      	pop	{r3, r4, r5, pc}
 800bb26:	bf00      	nop
 800bb28:	2001490c 	.word	0x2001490c

0800bb2c <__ascii_mbtowc>:
 800bb2c:	b082      	sub	sp, #8
 800bb2e:	b901      	cbnz	r1, 800bb32 <__ascii_mbtowc+0x6>
 800bb30:	a901      	add	r1, sp, #4
 800bb32:	b142      	cbz	r2, 800bb46 <__ascii_mbtowc+0x1a>
 800bb34:	b14b      	cbz	r3, 800bb4a <__ascii_mbtowc+0x1e>
 800bb36:	7813      	ldrb	r3, [r2, #0]
 800bb38:	600b      	str	r3, [r1, #0]
 800bb3a:	7812      	ldrb	r2, [r2, #0]
 800bb3c:	1e10      	subs	r0, r2, #0
 800bb3e:	bf18      	it	ne
 800bb40:	2001      	movne	r0, #1
 800bb42:	b002      	add	sp, #8
 800bb44:	4770      	bx	lr
 800bb46:	4610      	mov	r0, r2
 800bb48:	e7fb      	b.n	800bb42 <__ascii_mbtowc+0x16>
 800bb4a:	f06f 0001 	mvn.w	r0, #1
 800bb4e:	e7f8      	b.n	800bb42 <__ascii_mbtowc+0x16>

0800bb50 <_malloc_usable_size_r>:
 800bb50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bb54:	1f18      	subs	r0, r3, #4
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	bfbc      	itt	lt
 800bb5a:	580b      	ldrlt	r3, [r1, r0]
 800bb5c:	18c0      	addlt	r0, r0, r3
 800bb5e:	4770      	bx	lr

0800bb60 <__ascii_wctomb>:
 800bb60:	4603      	mov	r3, r0
 800bb62:	4608      	mov	r0, r1
 800bb64:	b141      	cbz	r1, 800bb78 <__ascii_wctomb+0x18>
 800bb66:	2aff      	cmp	r2, #255	@ 0xff
 800bb68:	d904      	bls.n	800bb74 <__ascii_wctomb+0x14>
 800bb6a:	228a      	movs	r2, #138	@ 0x8a
 800bb6c:	601a      	str	r2, [r3, #0]
 800bb6e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bb72:	4770      	bx	lr
 800bb74:	700a      	strb	r2, [r1, #0]
 800bb76:	2001      	movs	r0, #1
 800bb78:	4770      	bx	lr
	...

0800bb7c <_init>:
 800bb7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb7e:	bf00      	nop
 800bb80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bb82:	bc08      	pop	{r3}
 800bb84:	469e      	mov	lr, r3
 800bb86:	4770      	bx	lr

0800bb88 <_fini>:
 800bb88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb8a:	bf00      	nop
 800bb8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bb8e:	bc08      	pop	{r3}
 800bb90:	469e      	mov	lr, r3
 800bb92:	4770      	bx	lr
