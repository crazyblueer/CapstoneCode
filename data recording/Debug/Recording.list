
Recording.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009034  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000029c  080091d4  080091d4  0000a1d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009470  08009470  0000b0a4  2**0
                  CONTENTS
  4 .ARM          00000008  08009470  08009470  0000a470  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009478  08009478  0000b0a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009478  08009478  0000a478  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800947c  0800947c  0000a47c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000a4  20000000  08009480  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004a70  200000a4  08009524  0000b0a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004b14  08009524  0000bb14  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b0a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010b47  00000000  00000000  0000b0d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d64  00000000  00000000  0001bc1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ee0  00000000  00000000  0001e980  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b6c  00000000  00000000  0001f860  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001824f  00000000  00000000  000203cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014ead  00000000  00000000  0003861b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b9f7  00000000  00000000  0004d4c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d8ebf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004200  00000000  00000000  000d8f04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  000dd104  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000a4 	.word	0x200000a4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080091bc 	.word	0x080091bc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000a8 	.word	0x200000a8
 80001dc:	080091bc 	.word	0x080091bc

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <myprintf>:
void myprintf(const char *fmt, ...);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void myprintf(const char *fmt, ...){
 8000580:	b40f      	push	{r0, r1, r2, r3}
 8000582:	b580      	push	{r7, lr}
 8000584:	b082      	sub	sp, #8
 8000586:	af00      	add	r7, sp, #0
	static char buffer[256];
	va_list args;
	va_start(args, fmt);
 8000588:	f107 0314 	add.w	r3, r7, #20
 800058c:	603b      	str	r3, [r7, #0]
	vsnprintf(buffer, sizeof(buffer), fmt, args);
 800058e:	683b      	ldr	r3, [r7, #0]
 8000590:	693a      	ldr	r2, [r7, #16]
 8000592:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000596:	480b      	ldr	r0, [pc, #44]	@ (80005c4 <myprintf+0x44>)
 8000598:	f008 f982 	bl	80088a0 <vsniprintf>
	va_end(args);

	int len = strlen(buffer);
 800059c:	4809      	ldr	r0, [pc, #36]	@ (80005c4 <myprintf+0x44>)
 800059e:	f7ff fe1f 	bl	80001e0 <strlen>
 80005a2:	4603      	mov	r3, r0
 80005a4:	607b      	str	r3, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)buffer,len,-1);
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	b29a      	uxth	r2, r3
 80005aa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80005ae:	4905      	ldr	r1, [pc, #20]	@ (80005c4 <myprintf+0x44>)
 80005b0:	4805      	ldr	r0, [pc, #20]	@ (80005c8 <myprintf+0x48>)
 80005b2:	f004 fb8d 	bl	8004cd0 <HAL_UART_Transmit>
}
 80005b6:	bf00      	nop
 80005b8:	3708      	adds	r7, #8
 80005ba:	46bd      	mov	sp, r7
 80005bc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80005c0:	b004      	add	sp, #16
 80005c2:	4770      	bx	lr
 80005c4:	20004878 	.word	0x20004878
 80005c8:	200003b8 	.word	0x200003b8

080005cc <start_recording>:

void start_recording(uint32_t frequency){
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b088      	sub	sp, #32
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
	 char file_name[15];
	static uint8_t file_counter = 10;
//	int file_number_digits = file_counter;
	uint32_t byte_rate = frequency*2*4;
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	00db      	lsls	r3, r3, #3
 80005d8:	61fb      	str	r3, [r7, #28]
	wav_file_header[24] = (uint8_t)frequency;
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	b2da      	uxtb	r2, r3
 80005de:	4b2a      	ldr	r3, [pc, #168]	@ (8000688 <start_recording+0xbc>)
 80005e0:	761a      	strb	r2, [r3, #24]
		wav_file_header[25] = (uint8_t)(frequency >> 8);
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	0a1b      	lsrs	r3, r3, #8
 80005e6:	b2da      	uxtb	r2, r3
 80005e8:	4b27      	ldr	r3, [pc, #156]	@ (8000688 <start_recording+0xbc>)
 80005ea:	765a      	strb	r2, [r3, #25]
		wav_file_header[26] = (uint8_t)(frequency >> 16);
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	0c1b      	lsrs	r3, r3, #16
 80005f0:	b2da      	uxtb	r2, r3
 80005f2:	4b25      	ldr	r3, [pc, #148]	@ (8000688 <start_recording+0xbc>)
 80005f4:	769a      	strb	r2, [r3, #26]
		wav_file_header[27] = (uint8_t)(frequency >> 24);
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	0e1b      	lsrs	r3, r3, #24
 80005fa:	b2da      	uxtb	r2, r3
 80005fc:	4b22      	ldr	r3, [pc, #136]	@ (8000688 <start_recording+0xbc>)
 80005fe:	76da      	strb	r2, [r3, #27]
		wav_file_header[28] = (uint8_t)byte_rate;
 8000600:	69fb      	ldr	r3, [r7, #28]
 8000602:	b2da      	uxtb	r2, r3
 8000604:	4b20      	ldr	r3, [pc, #128]	@ (8000688 <start_recording+0xbc>)
 8000606:	771a      	strb	r2, [r3, #28]
		wav_file_header[29] = (uint8_t)(byte_rate >> 8);
 8000608:	69fb      	ldr	r3, [r7, #28]
 800060a:	0a1b      	lsrs	r3, r3, #8
 800060c:	b2da      	uxtb	r2, r3
 800060e:	4b1e      	ldr	r3, [pc, #120]	@ (8000688 <start_recording+0xbc>)
 8000610:	775a      	strb	r2, [r3, #29]
		wav_file_header[30] = (uint8_t)(byte_rate >> 16);
 8000612:	69fb      	ldr	r3, [r7, #28]
 8000614:	0c1b      	lsrs	r3, r3, #16
 8000616:	b2da      	uxtb	r2, r3
 8000618:	4b1b      	ldr	r3, [pc, #108]	@ (8000688 <start_recording+0xbc>)
 800061a:	779a      	strb	r2, [r3, #30]
		wav_file_header[31] = (uint8_t)(byte_rate >> 24);
 800061c:	69fb      	ldr	r3, [r7, #28]
 800061e:	0e1b      	lsrs	r3, r3, #24
 8000620:	b2da      	uxtb	r2, r3
 8000622:	4b19      	ldr	r3, [pc, #100]	@ (8000688 <start_recording+0xbc>)
 8000624:	77da      	strb	r2, [r3, #31]
//			file_name[4] = file_number_digits%10 + 48;
//			file_number_digits /= 10;
//			file_name[3] = file_number_digits%10 + 48;
//			file_number_digits /= 10;
//			file_name[2] = file_number_digits%10 + 48;
			snprintf(file_name, sizeof(file_name), "tree_%03d.wav", file_counter++);
 8000626:	4b19      	ldr	r3, [pc, #100]	@ (800068c <start_recording+0xc0>)
 8000628:	781b      	ldrb	r3, [r3, #0]
 800062a:	1c5a      	adds	r2, r3, #1
 800062c:	b2d1      	uxtb	r1, r2
 800062e:	4a17      	ldr	r2, [pc, #92]	@ (800068c <start_recording+0xc0>)
 8000630:	7011      	strb	r1, [r2, #0]
 8000632:	f107 000c 	add.w	r0, r7, #12
 8000636:	4a16      	ldr	r2, [pc, #88]	@ (8000690 <start_recording+0xc4>)
 8000638:	210f      	movs	r1, #15
 800063a:	f008 f8d1 	bl	80087e0 <sniprintf>


			// creating a file
			fres = f_open(&fil ,file_name, FA_WRITE|FA_CREATE_ALWAYS);
 800063e:	f107 030c 	add.w	r3, r7, #12
 8000642:	220a      	movs	r2, #10
 8000644:	4619      	mov	r1, r3
 8000646:	4813      	ldr	r0, [pc, #76]	@ (8000694 <start_recording+0xc8>)
 8000648:	f007 f9d8 	bl	80079fc <f_open>
 800064c:	4603      	mov	r3, r0
 800064e:	461a      	mov	r2, r3
 8000650:	4b11      	ldr	r3, [pc, #68]	@ (8000698 <start_recording+0xcc>)
 8000652:	701a      	strb	r2, [r3, #0]
			if(fres != FR_OK)
 8000654:	4b10      	ldr	r3, [pc, #64]	@ (8000698 <start_recording+0xcc>)
 8000656:	781b      	ldrb	r3, [r3, #0]
 8000658:	2b00      	cmp	r3, #0
 800065a:	d009      	beq.n	8000670 <start_recording+0xa4>
			{
				myprintf("Error creating file (%s): %d\n", file_name, fres);
 800065c:	4b0e      	ldr	r3, [pc, #56]	@ (8000698 <start_recording+0xcc>)
 800065e:	781b      	ldrb	r3, [r3, #0]
 8000660:	461a      	mov	r2, r3
 8000662:	f107 030c 	add.w	r3, r7, #12
 8000666:	4619      	mov	r1, r3
 8000668:	480c      	ldr	r0, [pc, #48]	@ (800069c <start_recording+0xd0>)
 800066a:	f7ff ff89 	bl	8000580 <myprintf>
 800066e:	e008      	b.n	8000682 <start_recording+0xb6>
				return;
			}
			else
			{
				myprintf("Successfully opened file: %s\n", file_name);
 8000670:	f107 030c 	add.w	r3, r7, #12
 8000674:	4619      	mov	r1, r3
 8000676:	480a      	ldr	r0, [pc, #40]	@ (80006a0 <start_recording+0xd4>)
 8000678:	f7ff ff82 	bl	8000580 <myprintf>
			}
			wav_file_size = 0;
 800067c:	4b09      	ldr	r3, [pc, #36]	@ (80006a4 <start_recording+0xd8>)
 800067e:	2200      	movs	r2, #0
 8000680:	601a      	str	r2, [r3, #0]


}
 8000682:	3720      	adds	r7, #32
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}
 8000688:	20000000 	.word	0x20000000
 800068c:	2000002c 	.word	0x2000002c
 8000690:	080091d4 	.word	0x080091d4
 8000694:	20000630 	.word	0x20000630
 8000698:	20000860 	.word	0x20000860
 800069c:	080091e4 	.word	0x080091e4
 80006a0:	08009204 	.word	0x08009204
 80006a4:	20004868 	.word	0x20004868

080006a8 <write2wave_file>:
//}




void write2wave_file(uint8_t *mic1, uint8_t *mic2, uint8_t *mic3, uint8_t *mic4, uint16_t stereo_sample_count_bytes) {
 80006a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80006ac:	b095      	sub	sp, #84	@ 0x54
 80006ae:	af00      	add	r7, sp, #0
 80006b0:	60f8      	str	r0, [r7, #12]
 80006b2:	60b9      	str	r1, [r7, #8]
 80006b4:	607a      	str	r2, [r7, #4]
 80006b6:	603b      	str	r3, [r7, #0]
 80006b8:	466b      	mov	r3, sp
 80006ba:	461e      	mov	r6, r3
    uint32_t temp_number;
    myprintf("Writing...\n");
 80006bc:	487a      	ldr	r0, [pc, #488]	@ (80008a8 <write2wave_file+0x200>)
 80006be:	f7ff ff5f 	bl	8000580 <myprintf>

    if (first_time == 0) {
 80006c2:	4b7a      	ldr	r3, [pc, #488]	@ (80008ac <write2wave_file+0x204>)
 80006c4:	781b      	ldrb	r3, [r3, #0]
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d11b      	bne.n	8000702 <write2wave_file+0x5a>
        fres = f_write(&fil, (void *)wav_file_header, sizeof(wav_file_header), (UINT *)&temp_number);
 80006ca:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80006ce:	222c      	movs	r2, #44	@ 0x2c
 80006d0:	4977      	ldr	r1, [pc, #476]	@ (80008b0 <write2wave_file+0x208>)
 80006d2:	4878      	ldr	r0, [pc, #480]	@ (80008b4 <write2wave_file+0x20c>)
 80006d4:	f007 fb4c 	bl	8007d70 <f_write>
 80006d8:	4603      	mov	r3, r0
 80006da:	461a      	mov	r2, r3
 80006dc:	4b76      	ldr	r3, [pc, #472]	@ (80008b8 <write2wave_file+0x210>)
 80006de:	701a      	strb	r2, [r3, #0]
        if (fres != FR_OK) {
 80006e0:	4b75      	ldr	r3, [pc, #468]	@ (80008b8 <write2wave_file+0x210>)
 80006e2:	781b      	ldrb	r3, [r3, #0]
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d009      	beq.n	80006fc <write2wave_file+0x54>
            myprintf("Header write error: %d\n", fres);
 80006e8:	4b73      	ldr	r3, [pc, #460]	@ (80008b8 <write2wave_file+0x210>)
 80006ea:	781b      	ldrb	r3, [r3, #0]
 80006ec:	4619      	mov	r1, r3
 80006ee:	4873      	ldr	r0, [pc, #460]	@ (80008bc <write2wave_file+0x214>)
 80006f0:	f7ff ff46 	bl	8000580 <myprintf>
            f_close(&fil);
 80006f4:	486f      	ldr	r0, [pc, #444]	@ (80008b4 <write2wave_file+0x20c>)
 80006f6:	f007 fd2e 	bl	8008156 <f_close>
            return;
 80006fa:	e0d0      	b.n	800089e <write2wave_file+0x1f6>
        }
        first_time = 1;
 80006fc:	4b6b      	ldr	r3, [pc, #428]	@ (80008ac <write2wave_file+0x204>)
 80006fe:	2201      	movs	r2, #1
 8000700:	701a      	strb	r2, [r3, #0]
    }

    float gain = 3.0f;  // Adjust this value as needed
 8000702:	4b6f      	ldr	r3, [pc, #444]	@ (80008c0 <write2wave_file+0x218>)
 8000704:	63fb      	str	r3, [r7, #60]	@ 0x3c

    const int num_stereo_frames = stereo_sample_count_bytes / 4;  // each stereo frame = 4 bytes (L+R)
 8000706:	f8b7 3070 	ldrh.w	r3, [r7, #112]	@ 0x70
 800070a:	089b      	lsrs	r3, r3, #2
 800070c:	b29b      	uxth	r3, r3
 800070e:	63bb      	str	r3, [r7, #56]	@ 0x38
    uint8_t interleaved[4 * num_stereo_frames * 2];  // 3 mics * 2 bytes per (amplified) LEFT sample
 8000710:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000712:	00db      	lsls	r3, r3, #3
 8000714:	3b01      	subs	r3, #1
 8000716:	637b      	str	r3, [r7, #52]	@ 0x34
 8000718:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800071a:	00db      	lsls	r3, r3, #3
 800071c:	461a      	mov	r2, r3
 800071e:	2300      	movs	r3, #0
 8000720:	4690      	mov	r8, r2
 8000722:	4699      	mov	r9, r3
 8000724:	f04f 0200 	mov.w	r2, #0
 8000728:	f04f 0300 	mov.w	r3, #0
 800072c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000730:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000734:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000738:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800073a:	00db      	lsls	r3, r3, #3
 800073c:	461a      	mov	r2, r3
 800073e:	2300      	movs	r3, #0
 8000740:	4614      	mov	r4, r2
 8000742:	461d      	mov	r5, r3
 8000744:	f04f 0200 	mov.w	r2, #0
 8000748:	f04f 0300 	mov.w	r3, #0
 800074c:	00eb      	lsls	r3, r5, #3
 800074e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000752:	00e2      	lsls	r2, r4, #3
 8000754:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000756:	00db      	lsls	r3, r3, #3
 8000758:	3307      	adds	r3, #7
 800075a:	08db      	lsrs	r3, r3, #3
 800075c:	00db      	lsls	r3, r3, #3
 800075e:	ebad 0d03 	sub.w	sp, sp, r3
 8000762:	466b      	mov	r3, sp
 8000764:	3300      	adds	r3, #0
 8000766:	633b      	str	r3, [r7, #48]	@ 0x30

    for (int i = 0, j = 0; i < stereo_sample_count_bytes; i += 4) {
 8000768:	2300      	movs	r3, #0
 800076a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800076c:	2300      	movs	r3, #0
 800076e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8000770:	e056      	b.n	8000820 <write2wave_file+0x178>
        uint8_t *mics[] = {mic1, mic2, mic3, mic4};
 8000772:	68fb      	ldr	r3, [r7, #12]
 8000774:	617b      	str	r3, [r7, #20]
 8000776:	68bb      	ldr	r3, [r7, #8]
 8000778:	61bb      	str	r3, [r7, #24]
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	61fb      	str	r3, [r7, #28]
 800077e:	683b      	ldr	r3, [r7, #0]
 8000780:	623b      	str	r3, [r7, #32]
        for (int m = 0; m < 4; m++) {
 8000782:	2300      	movs	r3, #0
 8000784:	647b      	str	r3, [r7, #68]	@ 0x44
 8000786:	e045      	b.n	8000814 <write2wave_file+0x16c>
            // Reconstruct 16-bit sample (little endian)
            int16_t sample = (int16_t)(mics[m][i] | (mics[m][i + 1] << 8));
 8000788:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800078a:	009b      	lsls	r3, r3, #2
 800078c:	3350      	adds	r3, #80	@ 0x50
 800078e:	443b      	add	r3, r7
 8000790:	f853 2c3c 	ldr.w	r2, [r3, #-60]
 8000794:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000796:	4413      	add	r3, r2
 8000798:	781b      	ldrb	r3, [r3, #0]
 800079a:	b21a      	sxth	r2, r3
 800079c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800079e:	009b      	lsls	r3, r3, #2
 80007a0:	3350      	adds	r3, #80	@ 0x50
 80007a2:	443b      	add	r3, r7
 80007a4:	f853 1c3c 	ldr.w	r1, [r3, #-60]
 80007a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80007aa:	3301      	adds	r3, #1
 80007ac:	440b      	add	r3, r1
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	021b      	lsls	r3, r3, #8
 80007b2:	b21b      	sxth	r3, r3
 80007b4:	4313      	orrs	r3, r2
 80007b6:	85fb      	strh	r3, [r7, #46]	@ 0x2e

            // Amplify
            int32_t amplified = (int32_t)(sample * gain);
 80007b8:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 80007bc:	ee07 3a90 	vmov	s15, r3
 80007c0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80007c4:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80007c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80007cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80007d0:	ee17 3a90 	vmov	r3, s15
 80007d4:	643b      	str	r3, [r7, #64]	@ 0x40

            // Saturate to int16_t
            if (amplified > 32767) amplified = 32767;
 80007d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80007d8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80007dc:	db02      	blt.n	80007e4 <write2wave_file+0x13c>
 80007de:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 80007e2:	643b      	str	r3, [r7, #64]	@ 0x40
            if (amplified < -32768) amplified = -32768;
 80007e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80007e6:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 80007ea:	da01      	bge.n	80007f0 <write2wave_file+0x148>
 80007ec:	4b35      	ldr	r3, [pc, #212]	@ (80008c4 <write2wave_file+0x21c>)
 80007ee:	643b      	str	r3, [r7, #64]	@ 0x40

            // Store back as little endian
            interleaved[j++] = amplified & 0xFF;
 80007f0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80007f2:	1c5a      	adds	r2, r3, #1
 80007f4:	64ba      	str	r2, [r7, #72]	@ 0x48
 80007f6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80007f8:	b2d1      	uxtb	r1, r2
 80007fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80007fc:	54d1      	strb	r1, [r2, r3]
            interleaved[j++] = (amplified >> 8) & 0xFF;
 80007fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000800:	1219      	asrs	r1, r3, #8
 8000802:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000804:	1c5a      	adds	r2, r3, #1
 8000806:	64ba      	str	r2, [r7, #72]	@ 0x48
 8000808:	b2c9      	uxtb	r1, r1
 800080a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800080c:	54d1      	strb	r1, [r2, r3]
        for (int m = 0; m < 4; m++) {
 800080e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000810:	3301      	adds	r3, #1
 8000812:	647b      	str	r3, [r7, #68]	@ 0x44
 8000814:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000816:	2b03      	cmp	r3, #3
 8000818:	ddb6      	ble.n	8000788 <write2wave_file+0xe0>
    for (int i = 0, j = 0; i < stereo_sample_count_bytes; i += 4) {
 800081a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800081c:	3304      	adds	r3, #4
 800081e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8000820:	f8b7 3070 	ldrh.w	r3, [r7, #112]	@ 0x70
 8000824:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8000826:	429a      	cmp	r2, r3
 8000828:	dba3      	blt.n	8000772 <write2wave_file+0xca>
    uint8_t interleaved[4 * num_stereo_frames * 2];  // 3 mics * 2 bytes per (amplified) LEFT sample
 800082a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800082c:	00db      	lsls	r3, r3, #3
        }
    }

    // Write interleaved data
    UINT bytes_written;
    fres = f_write(&fil, interleaved, sizeof(interleaved), &bytes_written);
 800082e:	461a      	mov	r2, r3
 8000830:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000834:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8000836:	481f      	ldr	r0, [pc, #124]	@ (80008b4 <write2wave_file+0x20c>)
 8000838:	f007 fa9a 	bl	8007d70 <f_write>
 800083c:	4603      	mov	r3, r0
 800083e:	461a      	mov	r2, r3
 8000840:	4b1d      	ldr	r3, [pc, #116]	@ (80008b8 <write2wave_file+0x210>)
 8000842:	701a      	strb	r2, [r3, #0]

    if (fres != FR_OK) {
 8000844:	4b1c      	ldr	r3, [pc, #112]	@ (80008b8 <write2wave_file+0x210>)
 8000846:	781b      	ldrb	r3, [r3, #0]
 8000848:	2b00      	cmp	r3, #0
 800084a:	d009      	beq.n	8000860 <write2wave_file+0x1b8>
        myprintf("Write error: %d\n", fres);
 800084c:	4b1a      	ldr	r3, [pc, #104]	@ (80008b8 <write2wave_file+0x210>)
 800084e:	781b      	ldrb	r3, [r3, #0]
 8000850:	4619      	mov	r1, r3
 8000852:	481d      	ldr	r0, [pc, #116]	@ (80008c8 <write2wave_file+0x220>)
 8000854:	f7ff fe94 	bl	8000580 <myprintf>
        f_close(&fil);
 8000858:	4816      	ldr	r0, [pc, #88]	@ (80008b4 <write2wave_file+0x20c>)
 800085a:	f007 fc7c 	bl	8008156 <f_close>
        return;
 800085e:	e01e      	b.n	800089e <write2wave_file+0x1f6>
    }

    wav_file_size += bytes_written;
 8000860:	4b1a      	ldr	r3, [pc, #104]	@ (80008cc <write2wave_file+0x224>)
 8000862:	681a      	ldr	r2, [r3, #0]
 8000864:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000866:	4413      	add	r3, r2
 8000868:	4a18      	ldr	r2, [pc, #96]	@ (80008cc <write2wave_file+0x224>)
 800086a:	6013      	str	r3, [r2, #0]

    static int write_count = 0;
    if (++write_count % 10 == 0) {
 800086c:	4b18      	ldr	r3, [pc, #96]	@ (80008d0 <write2wave_file+0x228>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	3301      	adds	r3, #1
 8000872:	4a17      	ldr	r2, [pc, #92]	@ (80008d0 <write2wave_file+0x228>)
 8000874:	6013      	str	r3, [r2, #0]
 8000876:	4b16      	ldr	r3, [pc, #88]	@ (80008d0 <write2wave_file+0x228>)
 8000878:	6819      	ldr	r1, [r3, #0]
 800087a:	4b16      	ldr	r3, [pc, #88]	@ (80008d4 <write2wave_file+0x22c>)
 800087c:	fb83 2301 	smull	r2, r3, r3, r1
 8000880:	109a      	asrs	r2, r3, #2
 8000882:	17cb      	asrs	r3, r1, #31
 8000884:	1ad2      	subs	r2, r2, r3
 8000886:	4613      	mov	r3, r2
 8000888:	009b      	lsls	r3, r3, #2
 800088a:	4413      	add	r3, r2
 800088c:	005b      	lsls	r3, r3, #1
 800088e:	1aca      	subs	r2, r1, r3
 8000890:	2a00      	cmp	r2, #0
 8000892:	d102      	bne.n	800089a <write2wave_file+0x1f2>
        f_sync(&fil);
 8000894:	4807      	ldr	r0, [pc, #28]	@ (80008b4 <write2wave_file+0x20c>)
 8000896:	f007 fbe0 	bl	800805a <f_sync>
 800089a:	46b5      	mov	sp, r6
 800089c:	e000      	b.n	80008a0 <write2wave_file+0x1f8>
            return;
 800089e:	46b5      	mov	sp, r6
    }
}
 80008a0:	3754      	adds	r7, #84	@ 0x54
 80008a2:	46bd      	mov	sp, r7
 80008a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80008a8:	08009224 	.word	0x08009224
 80008ac:	2000486c 	.word	0x2000486c
 80008b0:	20000000 	.word	0x20000000
 80008b4:	20000630 	.word	0x20000630
 80008b8:	20000860 	.word	0x20000860
 80008bc:	08009230 	.word	0x08009230
 80008c0:	40400000 	.word	0x40400000
 80008c4:	ffff8000 	.word	0xffff8000
 80008c8:	08009248 	.word	0x08009248
 80008cc:	20004868 	.word	0x20004868
 80008d0:	20004978 	.word	0x20004978
 80008d4:	66666667 	.word	0x66666667

080008d8 <stop_recording>:



void stop_recording(){
 80008d8:	b580      	push	{r7, lr}
 80008da:	b082      	sub	sp, #8
 80008dc:	af00      	add	r7, sp, #0

	uint16_t temp_number;
		// updating data size sector
		wav_file_size -= 8;
 80008de:	4b2f      	ldr	r3, [pc, #188]	@ (800099c <stop_recording+0xc4>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	3b08      	subs	r3, #8
 80008e4:	4a2d      	ldr	r2, [pc, #180]	@ (800099c <stop_recording+0xc4>)
 80008e6:	6013      	str	r3, [r2, #0]
		wav_file_header[4] = (uint8_t)wav_file_size;
 80008e8:	4b2c      	ldr	r3, [pc, #176]	@ (800099c <stop_recording+0xc4>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	b2da      	uxtb	r2, r3
 80008ee:	4b2c      	ldr	r3, [pc, #176]	@ (80009a0 <stop_recording+0xc8>)
 80008f0:	711a      	strb	r2, [r3, #4]
		wav_file_header[5] = (uint8_t)(wav_file_size >> 8);
 80008f2:	4b2a      	ldr	r3, [pc, #168]	@ (800099c <stop_recording+0xc4>)
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	0a1b      	lsrs	r3, r3, #8
 80008f8:	b2da      	uxtb	r2, r3
 80008fa:	4b29      	ldr	r3, [pc, #164]	@ (80009a0 <stop_recording+0xc8>)
 80008fc:	715a      	strb	r2, [r3, #5]
		wav_file_header[6] = (uint8_t)(wav_file_size >> 16);
 80008fe:	4b27      	ldr	r3, [pc, #156]	@ (800099c <stop_recording+0xc4>)
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	0c1b      	lsrs	r3, r3, #16
 8000904:	b2da      	uxtb	r2, r3
 8000906:	4b26      	ldr	r3, [pc, #152]	@ (80009a0 <stop_recording+0xc8>)
 8000908:	719a      	strb	r2, [r3, #6]
		wav_file_header[7] = (uint8_t)(wav_file_size >> 24);
 800090a:	4b24      	ldr	r3, [pc, #144]	@ (800099c <stop_recording+0xc4>)
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	0e1b      	lsrs	r3, r3, #24
 8000910:	b2da      	uxtb	r2, r3
 8000912:	4b23      	ldr	r3, [pc, #140]	@ (80009a0 <stop_recording+0xc8>)
 8000914:	71da      	strb	r2, [r3, #7]
		wav_file_size -= 36;
 8000916:	4b21      	ldr	r3, [pc, #132]	@ (800099c <stop_recording+0xc4>)
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	3b24      	subs	r3, #36	@ 0x24
 800091c:	4a1f      	ldr	r2, [pc, #124]	@ (800099c <stop_recording+0xc4>)
 800091e:	6013      	str	r3, [r2, #0]
		wav_file_header[40] = (uint8_t)wav_file_size;
 8000920:	4b1e      	ldr	r3, [pc, #120]	@ (800099c <stop_recording+0xc4>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	b2da      	uxtb	r2, r3
 8000926:	4b1e      	ldr	r3, [pc, #120]	@ (80009a0 <stop_recording+0xc8>)
 8000928:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		wav_file_header[41] = (uint8_t)(wav_file_size >> 8);
 800092c:	4b1b      	ldr	r3, [pc, #108]	@ (800099c <stop_recording+0xc4>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	0a1b      	lsrs	r3, r3, #8
 8000932:	b2da      	uxtb	r2, r3
 8000934:	4b1a      	ldr	r3, [pc, #104]	@ (80009a0 <stop_recording+0xc8>)
 8000936:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
		wav_file_header[42] = (uint8_t)(wav_file_size >> 16);
 800093a:	4b18      	ldr	r3, [pc, #96]	@ (800099c <stop_recording+0xc4>)
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	0c1b      	lsrs	r3, r3, #16
 8000940:	b2da      	uxtb	r2, r3
 8000942:	4b17      	ldr	r3, [pc, #92]	@ (80009a0 <stop_recording+0xc8>)
 8000944:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
		wav_file_header[43] = (uint8_t)(wav_file_size >> 24);
 8000948:	4b14      	ldr	r3, [pc, #80]	@ (800099c <stop_recording+0xc4>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	0e1b      	lsrs	r3, r3, #24
 800094e:	b2da      	uxtb	r2, r3
 8000950:	4b13      	ldr	r3, [pc, #76]	@ (80009a0 <stop_recording+0xc8>)
 8000952:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

		// moving to the beginning of the file to update the file format
		f_lseek(&fil, 0);
 8000956:	2100      	movs	r1, #0
 8000958:	4812      	ldr	r0, [pc, #72]	@ (80009a4 <stop_recording+0xcc>)
 800095a:	f007 fc26 	bl	80081aa <f_lseek>
		f_write(&fil,(void *)wav_file_header, sizeof(wav_file_header),(UINT*)&temp_number);
 800095e:	1dbb      	adds	r3, r7, #6
 8000960:	222c      	movs	r2, #44	@ 0x2c
 8000962:	490f      	ldr	r1, [pc, #60]	@ (80009a0 <stop_recording+0xc8>)
 8000964:	480f      	ldr	r0, [pc, #60]	@ (80009a4 <stop_recording+0xcc>)
 8000966:	f007 fa03 	bl	8007d70 <f_write>
		if(fres != 0)
 800096a:	4b0f      	ldr	r3, [pc, #60]	@ (80009a8 <stop_recording+0xd0>)
 800096c:	781b      	ldrb	r3, [r3, #0]
 800096e:	2b00      	cmp	r3, #0
 8000970:	d007      	beq.n	8000982 <stop_recording+0xaa>
		{
			myprintf("error in updating the first sector: %d \n", fres);
 8000972:	4b0d      	ldr	r3, [pc, #52]	@ (80009a8 <stop_recording+0xd0>)
 8000974:	781b      	ldrb	r3, [r3, #0]
 8000976:	4619      	mov	r1, r3
 8000978:	480c      	ldr	r0, [pc, #48]	@ (80009ac <stop_recording+0xd4>)
 800097a:	f7ff fe01 	bl	8000580 <myprintf>
			while(1);
 800097e:	bf00      	nop
 8000980:	e7fd      	b.n	800097e <stop_recording+0xa6>
		}
		f_close(&fil);
 8000982:	4808      	ldr	r0, [pc, #32]	@ (80009a4 <stop_recording+0xcc>)
 8000984:	f007 fbe7 	bl	8008156 <f_close>
		first_time = 0;
 8000988:	4b09      	ldr	r3, [pc, #36]	@ (80009b0 <stop_recording+0xd8>)
 800098a:	2200      	movs	r2, #0
 800098c:	701a      	strb	r2, [r3, #0]
		myprintf("closed the file \n");
 800098e:	4809      	ldr	r0, [pc, #36]	@ (80009b4 <stop_recording+0xdc>)
 8000990:	f7ff fdf6 	bl	8000580 <myprintf>

}
 8000994:	bf00      	nop
 8000996:	3708      	adds	r7, #8
 8000998:	46bd      	mov	sp, r7
 800099a:	bd80      	pop	{r7, pc}
 800099c:	20004868 	.word	0x20004868
 80009a0:	20000000 	.word	0x20000000
 80009a4:	20000630 	.word	0x20000630
 80009a8:	20000860 	.word	0x20000860
 80009ac:	0800925c 	.word	0x0800925c
 80009b0:	2000486c 	.word	0x2000486c
 80009b4:	08009288 	.word	0x08009288

080009b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009b8:	b590      	push	{r4, r7, lr}
 80009ba:	b087      	sub	sp, #28
 80009bc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009be:	f001 f807 	bl	80019d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009c2:	f000 f90b 	bl	8000bdc <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80009c6:	f000 f973 	bl	8000cb0 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009ca:	f000 faef 	bl	8000fac <MX_GPIO_Init>
  MX_DMA_Init();
 80009ce:	f000 faa7 	bl	8000f20 <MX_DMA_Init>
  MX_I2S3_Init();
 80009d2:	f000 f9e9 	bl	8000da8 <MX_I2S3_Init>
  MX_USART2_UART_Init();
 80009d6:	f000 fa79 	bl	8000ecc <MX_USART2_UART_Init>
  MX_FATFS_Init();
 80009da:	f004 fd35 	bl	8005448 <MX_FATFS_Init>
  MX_I2S1_Init();
 80009de:	f000 f987 	bl	8000cf0 <MX_I2S1_Init>
  MX_I2S4_Init();
 80009e2:	f000 fa0f 	bl	8000e04 <MX_I2S4_Init>
  MX_SPI5_Init();
 80009e6:	f000 fa3b 	bl	8000e60 <MX_SPI5_Init>
  MX_I2S2_Init();
 80009ea:	f000 f9af 	bl	8000d4c <MX_I2S2_Init>
  /* USER CODE BEGIN 2 */
  myprintf("\r\n~ SD card demo ~\r\n\r\n");
 80009ee:	4862      	ldr	r0, [pc, #392]	@ (8000b78 <main+0x1c0>)
 80009f0:	f7ff fdc6 	bl	8000580 <myprintf>
  HAL_Delay(1000);
 80009f4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80009f8:	f001 f85c 	bl	8001ab4 <HAL_Delay>



  fres = f_mount(&FatFs, "",1);
 80009fc:	2201      	movs	r2, #1
 80009fe:	495f      	ldr	r1, [pc, #380]	@ (8000b7c <main+0x1c4>)
 8000a00:	485f      	ldr	r0, [pc, #380]	@ (8000b80 <main+0x1c8>)
 8000a02:	f006 ffb5 	bl	8007970 <f_mount>
 8000a06:	4603      	mov	r3, r0
 8000a08:	461a      	mov	r2, r3
 8000a0a:	4b5e      	ldr	r3, [pc, #376]	@ (8000b84 <main+0x1cc>)
 8000a0c:	701a      	strb	r2, [r3, #0]
  if (fres != FR_OK){
 8000a0e:	4b5d      	ldr	r3, [pc, #372]	@ (8000b84 <main+0x1cc>)
 8000a10:	781b      	ldrb	r3, [r3, #0]
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d007      	beq.n	8000a26 <main+0x6e>
	  myprintf("f_mount error (%i)\r\n", fres);
 8000a16:	4b5b      	ldr	r3, [pc, #364]	@ (8000b84 <main+0x1cc>)
 8000a18:	781b      	ldrb	r3, [r3, #0]
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	485a      	ldr	r0, [pc, #360]	@ (8000b88 <main+0x1d0>)
 8000a1e:	f7ff fdaf 	bl	8000580 <myprintf>
	  while(1);
 8000a22:	bf00      	nop
 8000a24:	e7fd      	b.n	8000a22 <main+0x6a>
  }

  DWORD free_clusters, free_sectors, total_sectors;
  FATFS* getFreeFs;
  fres = f_getfree("", &free_clusters, &getFreeFs);
 8000a26:	463a      	mov	r2, r7
 8000a28:	1d3b      	adds	r3, r7, #4
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	4853      	ldr	r0, [pc, #332]	@ (8000b7c <main+0x1c4>)
 8000a2e:	f007 fdc5 	bl	80085bc <f_getfree>
 8000a32:	4603      	mov	r3, r0
 8000a34:	461a      	mov	r2, r3
 8000a36:	4b53      	ldr	r3, [pc, #332]	@ (8000b84 <main+0x1cc>)
 8000a38:	701a      	strb	r2, [r3, #0]
  if (fres != FR_OK){
 8000a3a:	4b52      	ldr	r3, [pc, #328]	@ (8000b84 <main+0x1cc>)
 8000a3c:	781b      	ldrb	r3, [r3, #0]
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d007      	beq.n	8000a52 <main+0x9a>
	  myprintf("f_getfree error (%i)\r\n",fres);
 8000a42:	4b50      	ldr	r3, [pc, #320]	@ (8000b84 <main+0x1cc>)
 8000a44:	781b      	ldrb	r3, [r3, #0]
 8000a46:	4619      	mov	r1, r3
 8000a48:	4850      	ldr	r0, [pc, #320]	@ (8000b8c <main+0x1d4>)
 8000a4a:	f7ff fd99 	bl	8000580 <myprintf>
	  while(1);
 8000a4e:	bf00      	nop
 8000a50:	e7fd      	b.n	8000a4e <main+0x96>
  }

  total_sectors =(getFreeFs->n_fatent-2) * getFreeFs->csize;
 8000a52:	683b      	ldr	r3, [r7, #0]
 8000a54:	695b      	ldr	r3, [r3, #20]
 8000a56:	3b02      	subs	r3, #2
 8000a58:	683a      	ldr	r2, [r7, #0]
 8000a5a:	8952      	ldrh	r2, [r2, #10]
 8000a5c:	fb02 f303 	mul.w	r3, r2, r3
 8000a60:	60fb      	str	r3, [r7, #12]
  free_sectors = free_clusters * getFreeFs->csize;
 8000a62:	683b      	ldr	r3, [r7, #0]
 8000a64:	895b      	ldrh	r3, [r3, #10]
 8000a66:	461a      	mov	r2, r3
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	fb02 f303 	mul.w	r3, r2, r3
 8000a6e:	60bb      	str	r3, [r7, #8]
  myprintf("SD card stats:\r\n%10lu KiB total drive space.\r\n%10lu KiB available.\r\n", total_sectors/2, free_sectors/2);
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	0859      	lsrs	r1, r3, #1
 8000a74:	68bb      	ldr	r3, [r7, #8]
 8000a76:	085b      	lsrs	r3, r3, #1
 8000a78:	461a      	mov	r2, r3
 8000a7a:	4845      	ldr	r0, [pc, #276]	@ (8000b90 <main+0x1d8>)
 8000a7c:	f7ff fd80 	bl	8000580 <myprintf>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	 if(button_flag){
 8000a80:	4b44      	ldr	r3, [pc, #272]	@ (8000b94 <main+0x1dc>)
 8000a82:	781b      	ldrb	r3, [r3, #0]
 8000a84:	b2db      	uxtb	r3, r3
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d042      	beq.n	8000b10 <main+0x158>
		 if(start_stop_recording){
 8000a8a:	4b43      	ldr	r3, [pc, #268]	@ (8000b98 <main+0x1e0>)
 8000a8c:	781b      	ldrb	r3, [r3, #0]
 8000a8e:	b2db      	uxtb	r3, r3
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d014      	beq.n	8000abe <main+0x106>
			 HAL_I2S_DMAStop(&hi2s1);
 8000a94:	4841      	ldr	r0, [pc, #260]	@ (8000b9c <main+0x1e4>)
 8000a96:	f002 f8d1 	bl	8002c3c <HAL_I2S_DMAStop>
			 HAL_I2S_DMAStop(&hi2s2);
 8000a9a:	4841      	ldr	r0, [pc, #260]	@ (8000ba0 <main+0x1e8>)
 8000a9c:	f002 f8ce 	bl	8002c3c <HAL_I2S_DMAStop>
			 HAL_I2S_DMAStop(&hi2s3);
 8000aa0:	4840      	ldr	r0, [pc, #256]	@ (8000ba4 <main+0x1ec>)
 8000aa2:	f002 f8cb 	bl	8002c3c <HAL_I2S_DMAStop>
			 HAL_I2S_DMAStop(&hi2s4);
 8000aa6:	4840      	ldr	r0, [pc, #256]	@ (8000ba8 <main+0x1f0>)
 8000aa8:	f002 f8c8 	bl	8002c3c <HAL_I2S_DMAStop>
			 start_stop_recording = 0;
 8000aac:	4b3a      	ldr	r3, [pc, #232]	@ (8000b98 <main+0x1e0>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	701a      	strb	r2, [r3, #0]
			 stop_recording();
 8000ab2:	f7ff ff11 	bl	80008d8 <stop_recording>
			 myprintf("stop recording \n");
 8000ab6:	483d      	ldr	r0, [pc, #244]	@ (8000bac <main+0x1f4>)
 8000ab8:	f7ff fd62 	bl	8000580 <myprintf>
 8000abc:	e025      	b.n	8000b0a <main+0x152>
		 }
		 else{
			 start_stop_recording = 1;
 8000abe:	4b36      	ldr	r3, [pc, #216]	@ (8000b98 <main+0x1e0>)
 8000ac0:	2201      	movs	r2, #1
 8000ac2:	701a      	strb	r2, [r3, #0]
			 start_recording(I2S_AUDIOFREQ_32K);
 8000ac4:	f44f 40fa 	mov.w	r0, #32000	@ 0x7d00
 8000ac8:	f7ff fd80 	bl	80005cc <start_recording>
			 myprintf("start recording \n");
 8000acc:	4838      	ldr	r0, [pc, #224]	@ (8000bb0 <main+0x1f8>)
 8000ace:	f7ff fd57 	bl	8000580 <myprintf>
			 HAL_Delay(500);
 8000ad2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000ad6:	f000 ffed 	bl	8001ab4 <HAL_Delay>
			  HAL_I2S_Receive_DMA(&hi2s1, (uint16_t *)data_i2s, sizeof(data_i2s)/2);
 8000ada:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000ade:	4935      	ldr	r1, [pc, #212]	@ (8000bb4 <main+0x1fc>)
 8000ae0:	482e      	ldr	r0, [pc, #184]	@ (8000b9c <main+0x1e4>)
 8000ae2:	f001 fff3 	bl	8002acc <HAL_I2S_Receive_DMA>
			  HAL_I2S_Receive_DMA(&hi2s2, (uint16_t *)data_i2s_mic2, sizeof(data_i2s_mic2)/2);
 8000ae6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000aea:	4933      	ldr	r1, [pc, #204]	@ (8000bb8 <main+0x200>)
 8000aec:	482c      	ldr	r0, [pc, #176]	@ (8000ba0 <main+0x1e8>)
 8000aee:	f001 ffed 	bl	8002acc <HAL_I2S_Receive_DMA>
			  HAL_I2S_Receive_DMA(&hi2s3, (uint16_t *)data_i2s_mic3, sizeof(data_i2s_mic3)/2);
 8000af2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000af6:	4931      	ldr	r1, [pc, #196]	@ (8000bbc <main+0x204>)
 8000af8:	482a      	ldr	r0, [pc, #168]	@ (8000ba4 <main+0x1ec>)
 8000afa:	f001 ffe7 	bl	8002acc <HAL_I2S_Receive_DMA>
			  HAL_I2S_Receive_DMA(&hi2s4, (uint16_t *)data_i2s_mic4, sizeof(data_i2s_mic4)/2);
 8000afe:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000b02:	492f      	ldr	r1, [pc, #188]	@ (8000bc0 <main+0x208>)
 8000b04:	4828      	ldr	r0, [pc, #160]	@ (8000ba8 <main+0x1f0>)
 8000b06:	f001 ffe1 	bl	8002acc <HAL_I2S_Receive_DMA>

		 }
		 button_flag= 0;
 8000b0a:	4b22      	ldr	r3, [pc, #136]	@ (8000b94 <main+0x1dc>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	701a      	strb	r2, [r3, #0]

	 }
	 if (start_stop_recording == 1 && (half_i2s == 1 || full_i2s == 1)) {
 8000b10:	4b21      	ldr	r3, [pc, #132]	@ (8000b98 <main+0x1e0>)
 8000b12:	781b      	ldrb	r3, [r3, #0]
 8000b14:	b2db      	uxtb	r3, r3
 8000b16:	2b01      	cmp	r3, #1
 8000b18:	d1b2      	bne.n	8000a80 <main+0xc8>
 8000b1a:	4b2a      	ldr	r3, [pc, #168]	@ (8000bc4 <main+0x20c>)
 8000b1c:	781b      	ldrb	r3, [r3, #0]
 8000b1e:	b2db      	uxtb	r3, r3
 8000b20:	2b01      	cmp	r3, #1
 8000b22:	d004      	beq.n	8000b2e <main+0x176>
 8000b24:	4b28      	ldr	r3, [pc, #160]	@ (8000bc8 <main+0x210>)
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	b2db      	uxtb	r3, r3
 8000b2a:	2b01      	cmp	r3, #1
 8000b2c:	d1a8      	bne.n	8000a80 <main+0xc8>
//	         frame_counter++;
//	         half_i2s = full_i2s = 0;
//	         continue;
//	     }

	     if (half_i2s == 1) {
 8000b2e:	4b25      	ldr	r3, [pc, #148]	@ (8000bc4 <main+0x20c>)
 8000b30:	781b      	ldrb	r3, [r3, #0]
 8000b32:	b2db      	uxtb	r3, r3
 8000b34:	2b01      	cmp	r3, #1
 8000b36:	d10c      	bne.n	8000b52 <main+0x19a>
	         write2wave_file(
 8000b38:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000b3c:	9300      	str	r3, [sp, #0]
 8000b3e:	4b20      	ldr	r3, [pc, #128]	@ (8000bc0 <main+0x208>)
 8000b40:	4a1e      	ldr	r2, [pc, #120]	@ (8000bbc <main+0x204>)
 8000b42:	491d      	ldr	r1, [pc, #116]	@ (8000bb8 <main+0x200>)
 8000b44:	481b      	ldr	r0, [pc, #108]	@ (8000bb4 <main+0x1fc>)
 8000b46:	f7ff fdaf 	bl	80006a8 <write2wave_file>
	             (uint8_t*)data_i2s_mic2,
	             (uint8_t*)data_i2s_mic3,
	             (uint8_t*)data_i2s_mic4,
	             WAV_WRITE_SAMPLE_COUNT
	         );
	         half_i2s = 0;
 8000b4a:	4b1e      	ldr	r3, [pc, #120]	@ (8000bc4 <main+0x20c>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	701a      	strb	r2, [r3, #0]
 8000b50:	e796      	b.n	8000a80 <main+0xc8>
	     } else if (full_i2s == 1) {
 8000b52:	4b1d      	ldr	r3, [pc, #116]	@ (8000bc8 <main+0x210>)
 8000b54:	781b      	ldrb	r3, [r3, #0]
 8000b56:	b2db      	uxtb	r3, r3
 8000b58:	2b01      	cmp	r3, #1
 8000b5a:	d191      	bne.n	8000a80 <main+0xc8>
	         write2wave_file(
 8000b5c:	481b      	ldr	r0, [pc, #108]	@ (8000bcc <main+0x214>)
 8000b5e:	491c      	ldr	r1, [pc, #112]	@ (8000bd0 <main+0x218>)
 8000b60:	4a1c      	ldr	r2, [pc, #112]	@ (8000bd4 <main+0x21c>)
 8000b62:	4c1d      	ldr	r4, [pc, #116]	@ (8000bd8 <main+0x220>)
 8000b64:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000b68:	9300      	str	r3, [sp, #0]
 8000b6a:	4623      	mov	r3, r4
 8000b6c:	f7ff fd9c 	bl	80006a8 <write2wave_file>
	             ((uint8_t*)data_i2s_mic2) + WAV_WRITE_SAMPLE_COUNT,
	             ((uint8_t*)data_i2s_mic3) + WAV_WRITE_SAMPLE_COUNT,
	             ((uint8_t*)data_i2s_mic4) + WAV_WRITE_SAMPLE_COUNT,
	             WAV_WRITE_SAMPLE_COUNT
	         );
	         full_i2s = 0;
 8000b70:	4b15      	ldr	r3, [pc, #84]	@ (8000bc8 <main+0x210>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	701a      	strb	r2, [r3, #0]
	 if(button_flag){
 8000b76:	e783      	b.n	8000a80 <main+0xc8>
 8000b78:	0800929c 	.word	0x0800929c
 8000b7c:	080092b4 	.word	0x080092b4
 8000b80:	20000400 	.word	0x20000400
 8000b84:	20000860 	.word	0x20000860
 8000b88:	080092b8 	.word	0x080092b8
 8000b8c:	080092d0 	.word	0x080092d0
 8000b90:	080092e8 	.word	0x080092e8
 8000b94:	20004864 	.word	0x20004864
 8000b98:	20004865 	.word	0x20004865
 8000b9c:	200000c0 	.word	0x200000c0
 8000ba0:	20000108 	.word	0x20000108
 8000ba4:	20000150 	.word	0x20000150
 8000ba8:	20000198 	.word	0x20000198
 8000bac:	08009330 	.word	0x08009330
 8000bb0:	08009344 	.word	0x08009344
 8000bb4:	20000864 	.word	0x20000864
 8000bb8:	20001864 	.word	0x20001864
 8000bbc:	20002864 	.word	0x20002864
 8000bc0:	20003864 	.word	0x20003864
 8000bc4:	2000486d 	.word	0x2000486d
 8000bc8:	2000486e 	.word	0x2000486e
 8000bcc:	20001064 	.word	0x20001064
 8000bd0:	20002064 	.word	0x20002064
 8000bd4:	20003064 	.word	0x20003064
 8000bd8:	20004064 	.word	0x20004064

08000bdc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b094      	sub	sp, #80	@ 0x50
 8000be0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000be2:	f107 0320 	add.w	r3, r7, #32
 8000be6:	2230      	movs	r2, #48	@ 0x30
 8000be8:	2100      	movs	r1, #0
 8000bea:	4618      	mov	r0, r3
 8000bec:	f007 fe66 	bl	80088bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bf0:	f107 030c 	add.w	r3, r7, #12
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	601a      	str	r2, [r3, #0]
 8000bf8:	605a      	str	r2, [r3, #4]
 8000bfa:	609a      	str	r2, [r3, #8]
 8000bfc:	60da      	str	r2, [r3, #12]
 8000bfe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c00:	2300      	movs	r3, #0
 8000c02:	60bb      	str	r3, [r7, #8]
 8000c04:	4b28      	ldr	r3, [pc, #160]	@ (8000ca8 <SystemClock_Config+0xcc>)
 8000c06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c08:	4a27      	ldr	r2, [pc, #156]	@ (8000ca8 <SystemClock_Config+0xcc>)
 8000c0a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c0e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c10:	4b25      	ldr	r3, [pc, #148]	@ (8000ca8 <SystemClock_Config+0xcc>)
 8000c12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c14:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c18:	60bb      	str	r3, [r7, #8]
 8000c1a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	607b      	str	r3, [r7, #4]
 8000c20:	4b22      	ldr	r3, [pc, #136]	@ (8000cac <SystemClock_Config+0xd0>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	4a21      	ldr	r2, [pc, #132]	@ (8000cac <SystemClock_Config+0xd0>)
 8000c26:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000c2a:	6013      	str	r3, [r2, #0]
 8000c2c:	4b1f      	ldr	r3, [pc, #124]	@ (8000cac <SystemClock_Config+0xd0>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000c34:	607b      	str	r3, [r7, #4]
 8000c36:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c38:	2302      	movs	r3, #2
 8000c3a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c3c:	2301      	movs	r3, #1
 8000c3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c40:	2310      	movs	r3, #16
 8000c42:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c44:	2302      	movs	r3, #2
 8000c46:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 14;
 8000c4c:	230e      	movs	r3, #14
 8000c4e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000c50:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000c54:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000c56:	2304      	movs	r3, #4
 8000c58:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000c5a:	2304      	movs	r3, #4
 8000c5c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c5e:	f107 0320 	add.w	r3, r7, #32
 8000c62:	4618      	mov	r0, r3
 8000c64:	f002 fda8 	bl	80037b8 <HAL_RCC_OscConfig>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d001      	beq.n	8000c72 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000c6e:	f000 fadd 	bl	800122c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c72:	230f      	movs	r3, #15
 8000c74:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c76:	2302      	movs	r3, #2
 8000c78:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c7e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c82:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c84:	2300      	movs	r3, #0
 8000c86:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000c88:	f107 030c 	add.w	r3, r7, #12
 8000c8c:	2103      	movs	r1, #3
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f003 f80a 	bl	8003ca8 <HAL_RCC_ClockConfig>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d001      	beq.n	8000c9e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000c9a:	f000 fac7 	bl	800122c <Error_Handler>
  }
}
 8000c9e:	bf00      	nop
 8000ca0:	3750      	adds	r7, #80	@ 0x50
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	40023800 	.word	0x40023800
 8000cac:	40007000 	.word	0x40007000

08000cb0 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b086      	sub	sp, #24
 8000cb4:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000cb6:	463b      	mov	r3, r7
 8000cb8:	2200      	movs	r2, #0
 8000cba:	601a      	str	r2, [r3, #0]
 8000cbc:	605a      	str	r2, [r3, #4]
 8000cbe:	609a      	str	r2, [r3, #8]
 8000cc0:	60da      	str	r2, [r3, #12]
 8000cc2:	611a      	str	r2, [r3, #16]
 8000cc4:	615a      	str	r2, [r3, #20]

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000cca:	23c0      	movs	r3, #192	@ 0xc0
 8000ccc:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 16;
 8000cce:	2310      	movs	r3, #16
 8000cd0:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000cd2:	2302      	movs	r3, #2
 8000cd4:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cd6:	463b      	mov	r3, r7
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f003 fa05 	bl	80040e8 <HAL_RCCEx_PeriphCLKConfig>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d001      	beq.n	8000ce8 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 8000ce4:	f000 faa2 	bl	800122c <Error_Handler>
  }
}
 8000ce8:	bf00      	nop
 8000cea:	3718      	adds	r7, #24
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}

08000cf0 <MX_I2S1_Init>:
  * @brief I2S1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S1_Init(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	af00      	add	r7, sp, #0
  /* USER CODE END I2S1_Init 0 */

  /* USER CODE BEGIN I2S1_Init 1 */

  /* USER CODE END I2S1_Init 1 */
  hi2s1.Instance = SPI1;
 8000cf4:	4b13      	ldr	r3, [pc, #76]	@ (8000d44 <MX_I2S1_Init+0x54>)
 8000cf6:	4a14      	ldr	r2, [pc, #80]	@ (8000d48 <MX_I2S1_Init+0x58>)
 8000cf8:	601a      	str	r2, [r3, #0]
  hi2s1.Init.Mode = I2S_MODE_MASTER_RX;
 8000cfa:	4b12      	ldr	r3, [pc, #72]	@ (8000d44 <MX_I2S1_Init+0x54>)
 8000cfc:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000d00:	605a      	str	r2, [r3, #4]
  hi2s1.Init.Standard = I2S_STANDARD_PHILIPS;
 8000d02:	4b10      	ldr	r3, [pc, #64]	@ (8000d44 <MX_I2S1_Init+0x54>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	609a      	str	r2, [r3, #8]
  hi2s1.Init.DataFormat = I2S_DATAFORMAT_16B_EXTENDED;
 8000d08:	4b0e      	ldr	r3, [pc, #56]	@ (8000d44 <MX_I2S1_Init+0x54>)
 8000d0a:	2201      	movs	r2, #1
 8000d0c:	60da      	str	r2, [r3, #12]
  hi2s1.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8000d0e:	4b0d      	ldr	r3, [pc, #52]	@ (8000d44 <MX_I2S1_Init+0x54>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	611a      	str	r2, [r3, #16]
  hi2s1.Init.AudioFreq = I2S_AUDIOFREQ_32K;
 8000d14:	4b0b      	ldr	r3, [pc, #44]	@ (8000d44 <MX_I2S1_Init+0x54>)
 8000d16:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8000d1a:	615a      	str	r2, [r3, #20]
  hi2s1.Init.CPOL = I2S_CPOL_LOW;
 8000d1c:	4b09      	ldr	r3, [pc, #36]	@ (8000d44 <MX_I2S1_Init+0x54>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	619a      	str	r2, [r3, #24]
  hi2s1.Init.ClockSource = I2S_CLOCK_PLL;
 8000d22:	4b08      	ldr	r3, [pc, #32]	@ (8000d44 <MX_I2S1_Init+0x54>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	61da      	str	r2, [r3, #28]
  hi2s1.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000d28:	4b06      	ldr	r3, [pc, #24]	@ (8000d44 <MX_I2S1_Init+0x54>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s1) != HAL_OK)
 8000d2e:	4805      	ldr	r0, [pc, #20]	@ (8000d44 <MX_I2S1_Init+0x54>)
 8000d30:	f001 fd8c 	bl	800284c <HAL_I2S_Init>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d001      	beq.n	8000d3e <MX_I2S1_Init+0x4e>
  {
    Error_Handler();
 8000d3a:	f000 fa77 	bl	800122c <Error_Handler>
  }
  /* USER CODE BEGIN I2S1_Init 2 */

  /* USER CODE END I2S1_Init 2 */

}
 8000d3e:	bf00      	nop
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	200000c0 	.word	0x200000c0
 8000d48:	40013000 	.word	0x40013000

08000d4c <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000d50:	4b13      	ldr	r3, [pc, #76]	@ (8000da0 <MX_I2S2_Init+0x54>)
 8000d52:	4a14      	ldr	r2, [pc, #80]	@ (8000da4 <MX_I2S2_Init+0x58>)
 8000d54:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 8000d56:	4b12      	ldr	r3, [pc, #72]	@ (8000da0 <MX_I2S2_Init+0x54>)
 8000d58:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000d5c:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8000d5e:	4b10      	ldr	r3, [pc, #64]	@ (8000da0 <MX_I2S2_Init+0x54>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B_EXTENDED;
 8000d64:	4b0e      	ldr	r3, [pc, #56]	@ (8000da0 <MX_I2S2_Init+0x54>)
 8000d66:	2201      	movs	r2, #1
 8000d68:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8000d6a:	4b0d      	ldr	r3, [pc, #52]	@ (8000da0 <MX_I2S2_Init+0x54>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_32K;
 8000d70:	4b0b      	ldr	r3, [pc, #44]	@ (8000da0 <MX_I2S2_Init+0x54>)
 8000d72:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8000d76:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000d78:	4b09      	ldr	r3, [pc, #36]	@ (8000da0 <MX_I2S2_Init+0x54>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8000d7e:	4b08      	ldr	r3, [pc, #32]	@ (8000da0 <MX_I2S2_Init+0x54>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000d84:	4b06      	ldr	r3, [pc, #24]	@ (8000da0 <MX_I2S2_Init+0x54>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000d8a:	4805      	ldr	r0, [pc, #20]	@ (8000da0 <MX_I2S2_Init+0x54>)
 8000d8c:	f001 fd5e 	bl	800284c <HAL_I2S_Init>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d001      	beq.n	8000d9a <MX_I2S2_Init+0x4e>
  {
    Error_Handler();
 8000d96:	f000 fa49 	bl	800122c <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8000d9a:	bf00      	nop
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	20000108 	.word	0x20000108
 8000da4:	40003800 	.word	0x40003800

08000da8 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000dac:	4b13      	ldr	r3, [pc, #76]	@ (8000dfc <MX_I2S3_Init+0x54>)
 8000dae:	4a14      	ldr	r2, [pc, #80]	@ (8000e00 <MX_I2S3_Init+0x58>)
 8000db0:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_RX;
 8000db2:	4b12      	ldr	r3, [pc, #72]	@ (8000dfc <MX_I2S3_Init+0x54>)
 8000db4:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000db8:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000dba:	4b10      	ldr	r3, [pc, #64]	@ (8000dfc <MX_I2S3_Init+0x54>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B_EXTENDED;
 8000dc0:	4b0e      	ldr	r3, [pc, #56]	@ (8000dfc <MX_I2S3_Init+0x54>)
 8000dc2:	2201      	movs	r2, #1
 8000dc4:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8000dc6:	4b0d      	ldr	r3, [pc, #52]	@ (8000dfc <MX_I2S3_Init+0x54>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_32K;
 8000dcc:	4b0b      	ldr	r3, [pc, #44]	@ (8000dfc <MX_I2S3_Init+0x54>)
 8000dce:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8000dd2:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000dd4:	4b09      	ldr	r3, [pc, #36]	@ (8000dfc <MX_I2S3_Init+0x54>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000dda:	4b08      	ldr	r3, [pc, #32]	@ (8000dfc <MX_I2S3_Init+0x54>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000de0:	4b06      	ldr	r3, [pc, #24]	@ (8000dfc <MX_I2S3_Init+0x54>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000de6:	4805      	ldr	r0, [pc, #20]	@ (8000dfc <MX_I2S3_Init+0x54>)
 8000de8:	f001 fd30 	bl	800284c <HAL_I2S_Init>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d001      	beq.n	8000df6 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000df2:	f000 fa1b 	bl	800122c <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000df6:	bf00      	nop
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	20000150 	.word	0x20000150
 8000e00:	40003c00 	.word	0x40003c00

08000e04 <MX_I2S4_Init>:
  * @brief I2S4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S4_Init(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE END I2S4_Init 0 */

  /* USER CODE BEGIN I2S4_Init 1 */

  /* USER CODE END I2S4_Init 1 */
  hi2s4.Instance = SPI4;
 8000e08:	4b13      	ldr	r3, [pc, #76]	@ (8000e58 <MX_I2S4_Init+0x54>)
 8000e0a:	4a14      	ldr	r2, [pc, #80]	@ (8000e5c <MX_I2S4_Init+0x58>)
 8000e0c:	601a      	str	r2, [r3, #0]
  hi2s4.Init.Mode = I2S_MODE_MASTER_RX;
 8000e0e:	4b12      	ldr	r3, [pc, #72]	@ (8000e58 <MX_I2S4_Init+0x54>)
 8000e10:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000e14:	605a      	str	r2, [r3, #4]
  hi2s4.Init.Standard = I2S_STANDARD_PHILIPS;
 8000e16:	4b10      	ldr	r3, [pc, #64]	@ (8000e58 <MX_I2S4_Init+0x54>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	609a      	str	r2, [r3, #8]
  hi2s4.Init.DataFormat = I2S_DATAFORMAT_16B_EXTENDED;
 8000e1c:	4b0e      	ldr	r3, [pc, #56]	@ (8000e58 <MX_I2S4_Init+0x54>)
 8000e1e:	2201      	movs	r2, #1
 8000e20:	60da      	str	r2, [r3, #12]
  hi2s4.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8000e22:	4b0d      	ldr	r3, [pc, #52]	@ (8000e58 <MX_I2S4_Init+0x54>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	611a      	str	r2, [r3, #16]
  hi2s4.Init.AudioFreq = I2S_AUDIOFREQ_32K;
 8000e28:	4b0b      	ldr	r3, [pc, #44]	@ (8000e58 <MX_I2S4_Init+0x54>)
 8000e2a:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8000e2e:	615a      	str	r2, [r3, #20]
  hi2s4.Init.CPOL = I2S_CPOL_LOW;
 8000e30:	4b09      	ldr	r3, [pc, #36]	@ (8000e58 <MX_I2S4_Init+0x54>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	619a      	str	r2, [r3, #24]
  hi2s4.Init.ClockSource = I2S_CLOCK_PLL;
 8000e36:	4b08      	ldr	r3, [pc, #32]	@ (8000e58 <MX_I2S4_Init+0x54>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	61da      	str	r2, [r3, #28]
  hi2s4.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000e3c:	4b06      	ldr	r3, [pc, #24]	@ (8000e58 <MX_I2S4_Init+0x54>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s4) != HAL_OK)
 8000e42:	4805      	ldr	r0, [pc, #20]	@ (8000e58 <MX_I2S4_Init+0x54>)
 8000e44:	f001 fd02 	bl	800284c <HAL_I2S_Init>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d001      	beq.n	8000e52 <MX_I2S4_Init+0x4e>
  {
    Error_Handler();
 8000e4e:	f000 f9ed 	bl	800122c <Error_Handler>
  }
  /* USER CODE BEGIN I2S4_Init 2 */

  /* USER CODE END I2S4_Init 2 */

}
 8000e52:	bf00      	nop
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	20000198 	.word	0x20000198
 8000e5c:	40013400 	.word	0x40013400

08000e60 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8000e64:	4b17      	ldr	r3, [pc, #92]	@ (8000ec4 <MX_SPI5_Init+0x64>)
 8000e66:	4a18      	ldr	r2, [pc, #96]	@ (8000ec8 <MX_SPI5_Init+0x68>)
 8000e68:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8000e6a:	4b16      	ldr	r3, [pc, #88]	@ (8000ec4 <MX_SPI5_Init+0x64>)
 8000e6c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000e70:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8000e72:	4b14      	ldr	r3, [pc, #80]	@ (8000ec4 <MX_SPI5_Init+0x64>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e78:	4b12      	ldr	r3, [pc, #72]	@ (8000ec4 <MX_SPI5_Init+0x64>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e7e:	4b11      	ldr	r3, [pc, #68]	@ (8000ec4 <MX_SPI5_Init+0x64>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e84:	4b0f      	ldr	r3, [pc, #60]	@ (8000ec4 <MX_SPI5_Init+0x64>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8000e8a:	4b0e      	ldr	r3, [pc, #56]	@ (8000ec4 <MX_SPI5_Init+0x64>)
 8000e8c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000e90:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000e92:	4b0c      	ldr	r3, [pc, #48]	@ (8000ec4 <MX_SPI5_Init+0x64>)
 8000e94:	2230      	movs	r2, #48	@ 0x30
 8000e96:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e98:	4b0a      	ldr	r3, [pc, #40]	@ (8000ec4 <MX_SPI5_Init+0x64>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e9e:	4b09      	ldr	r3, [pc, #36]	@ (8000ec4 <MX_SPI5_Init+0x64>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ea4:	4b07      	ldr	r3, [pc, #28]	@ (8000ec4 <MX_SPI5_Init+0x64>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 10;
 8000eaa:	4b06      	ldr	r3, [pc, #24]	@ (8000ec4 <MX_SPI5_Init+0x64>)
 8000eac:	220a      	movs	r2, #10
 8000eae:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8000eb0:	4804      	ldr	r0, [pc, #16]	@ (8000ec4 <MX_SPI5_Init+0x64>)
 8000eb2:	f003 fa6b 	bl	800438c <HAL_SPI_Init>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d001      	beq.n	8000ec0 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8000ebc:	f000 f9b6 	bl	800122c <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8000ec0:	bf00      	nop
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	20000360 	.word	0x20000360
 8000ec8:	40015000 	.word	0x40015000

08000ecc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ed0:	4b11      	ldr	r3, [pc, #68]	@ (8000f18 <MX_USART2_UART_Init+0x4c>)
 8000ed2:	4a12      	ldr	r2, [pc, #72]	@ (8000f1c <MX_USART2_UART_Init+0x50>)
 8000ed4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000ed6:	4b10      	ldr	r3, [pc, #64]	@ (8000f18 <MX_USART2_UART_Init+0x4c>)
 8000ed8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000edc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ede:	4b0e      	ldr	r3, [pc, #56]	@ (8000f18 <MX_USART2_UART_Init+0x4c>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ee4:	4b0c      	ldr	r3, [pc, #48]	@ (8000f18 <MX_USART2_UART_Init+0x4c>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000eea:	4b0b      	ldr	r3, [pc, #44]	@ (8000f18 <MX_USART2_UART_Init+0x4c>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ef0:	4b09      	ldr	r3, [pc, #36]	@ (8000f18 <MX_USART2_UART_Init+0x4c>)
 8000ef2:	220c      	movs	r2, #12
 8000ef4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ef6:	4b08      	ldr	r3, [pc, #32]	@ (8000f18 <MX_USART2_UART_Init+0x4c>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000efc:	4b06      	ldr	r3, [pc, #24]	@ (8000f18 <MX_USART2_UART_Init+0x4c>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f02:	4805      	ldr	r0, [pc, #20]	@ (8000f18 <MX_USART2_UART_Init+0x4c>)
 8000f04:	f003 fe94 	bl	8004c30 <HAL_UART_Init>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d001      	beq.n	8000f12 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000f0e:	f000 f98d 	bl	800122c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f12:	bf00      	nop
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	200003b8 	.word	0x200003b8
 8000f1c:	40004400 	.word	0x40004400

08000f20 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f26:	2300      	movs	r3, #0
 8000f28:	607b      	str	r3, [r7, #4]
 8000f2a:	4b1f      	ldr	r3, [pc, #124]	@ (8000fa8 <MX_DMA_Init+0x88>)
 8000f2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f2e:	4a1e      	ldr	r2, [pc, #120]	@ (8000fa8 <MX_DMA_Init+0x88>)
 8000f30:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000f34:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f36:	4b1c      	ldr	r3, [pc, #112]	@ (8000fa8 <MX_DMA_Init+0x88>)
 8000f38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f3a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f3e:	607b      	str	r3, [r7, #4]
 8000f40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000f42:	2300      	movs	r3, #0
 8000f44:	603b      	str	r3, [r7, #0]
 8000f46:	4b18      	ldr	r3, [pc, #96]	@ (8000fa8 <MX_DMA_Init+0x88>)
 8000f48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f4a:	4a17      	ldr	r2, [pc, #92]	@ (8000fa8 <MX_DMA_Init+0x88>)
 8000f4c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000f50:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f52:	4b15      	ldr	r3, [pc, #84]	@ (8000fa8 <MX_DMA_Init+0x88>)
 8000f54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f56:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000f5a:	603b      	str	r3, [r7, #0]
 8000f5c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000f5e:	2200      	movs	r2, #0
 8000f60:	2100      	movs	r1, #0
 8000f62:	200b      	movs	r0, #11
 8000f64:	f000 fea5 	bl	8001cb2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000f68:	200b      	movs	r0, #11
 8000f6a:	f000 febe 	bl	8001cea <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000f6e:	2200      	movs	r2, #0
 8000f70:	2100      	movs	r1, #0
 8000f72:	200e      	movs	r0, #14
 8000f74:	f000 fe9d 	bl	8001cb2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000f78:	200e      	movs	r0, #14
 8000f7a:	f000 feb6 	bl	8001cea <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000f7e:	2200      	movs	r2, #0
 8000f80:	2100      	movs	r1, #0
 8000f82:	2038      	movs	r0, #56	@ 0x38
 8000f84:	f000 fe95 	bl	8001cb2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000f88:	2038      	movs	r0, #56	@ 0x38
 8000f8a:	f000 feae 	bl	8001cea <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8000f8e:	2200      	movs	r2, #0
 8000f90:	2100      	movs	r1, #0
 8000f92:	203b      	movs	r0, #59	@ 0x3b
 8000f94:	f000 fe8d 	bl	8001cb2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000f98:	203b      	movs	r0, #59	@ 0x3b
 8000f9a:	f000 fea6 	bl	8001cea <HAL_NVIC_EnableIRQ>

}
 8000f9e:	bf00      	nop
 8000fa0:	3708      	adds	r7, #8
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	40023800 	.word	0x40023800

08000fac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b088      	sub	sp, #32
 8000fb0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb2:	f107 030c 	add.w	r3, r7, #12
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	601a      	str	r2, [r3, #0]
 8000fba:	605a      	str	r2, [r3, #4]
 8000fbc:	609a      	str	r2, [r3, #8]
 8000fbe:	60da      	str	r2, [r3, #12]
 8000fc0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	60bb      	str	r3, [r7, #8]
 8000fc6:	4b2a      	ldr	r3, [pc, #168]	@ (8001070 <MX_GPIO_Init+0xc4>)
 8000fc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fca:	4a29      	ldr	r2, [pc, #164]	@ (8001070 <MX_GPIO_Init+0xc4>)
 8000fcc:	f043 0304 	orr.w	r3, r3, #4
 8000fd0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fd2:	4b27      	ldr	r3, [pc, #156]	@ (8001070 <MX_GPIO_Init+0xc4>)
 8000fd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fd6:	f003 0304 	and.w	r3, r3, #4
 8000fda:	60bb      	str	r3, [r7, #8]
 8000fdc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fde:	2300      	movs	r3, #0
 8000fe0:	607b      	str	r3, [r7, #4]
 8000fe2:	4b23      	ldr	r3, [pc, #140]	@ (8001070 <MX_GPIO_Init+0xc4>)
 8000fe4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fe6:	4a22      	ldr	r2, [pc, #136]	@ (8001070 <MX_GPIO_Init+0xc4>)
 8000fe8:	f043 0301 	orr.w	r3, r3, #1
 8000fec:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fee:	4b20      	ldr	r3, [pc, #128]	@ (8001070 <MX_GPIO_Init+0xc4>)
 8000ff0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ff2:	f003 0301 	and.w	r3, r3, #1
 8000ff6:	607b      	str	r3, [r7, #4]
 8000ff8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	603b      	str	r3, [r7, #0]
 8000ffe:	4b1c      	ldr	r3, [pc, #112]	@ (8001070 <MX_GPIO_Init+0xc4>)
 8001000:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001002:	4a1b      	ldr	r2, [pc, #108]	@ (8001070 <MX_GPIO_Init+0xc4>)
 8001004:	f043 0302 	orr.w	r3, r3, #2
 8001008:	6313      	str	r3, [r2, #48]	@ 0x30
 800100a:	4b19      	ldr	r3, [pc, #100]	@ (8001070 <MX_GPIO_Init+0xc4>)
 800100c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800100e:	f003 0302 	and.w	r3, r3, #2
 8001012:	603b      	str	r3, [r7, #0]
 8001014:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8001016:	2200      	movs	r2, #0
 8001018:	2102      	movs	r1, #2
 800101a:	4816      	ldr	r0, [pc, #88]	@ (8001074 <MX_GPIO_Init+0xc8>)
 800101c:	f001 fbe4 	bl	80027e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : button_Pin */
  GPIO_InitStruct.Pin = button_Pin;
 8001020:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001024:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001026:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800102a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102c:	2300      	movs	r3, #0
 800102e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(button_GPIO_Port, &GPIO_InitStruct);
 8001030:	f107 030c 	add.w	r3, r7, #12
 8001034:	4619      	mov	r1, r3
 8001036:	4810      	ldr	r0, [pc, #64]	@ (8001078 <MX_GPIO_Init+0xcc>)
 8001038:	f001 fa52 	bl	80024e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 800103c:	2302      	movs	r3, #2
 800103e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001040:	2301      	movs	r3, #1
 8001042:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001044:	2300      	movs	r3, #0
 8001046:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001048:	2300      	movs	r3, #0
 800104a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 800104c:	f107 030c 	add.w	r3, r7, #12
 8001050:	4619      	mov	r1, r3
 8001052:	4808      	ldr	r0, [pc, #32]	@ (8001074 <MX_GPIO_Init+0xc8>)
 8001054:	f001 fa44 	bl	80024e0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001058:	2200      	movs	r2, #0
 800105a:	2100      	movs	r1, #0
 800105c:	2028      	movs	r0, #40	@ 0x28
 800105e:	f000 fe28 	bl	8001cb2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001062:	2028      	movs	r0, #40	@ 0x28
 8001064:	f000 fe41 	bl	8001cea <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001068:	bf00      	nop
 800106a:	3720      	adds	r7, #32
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}
 8001070:	40023800 	.word	0x40023800
 8001074:	40020400 	.word	0x40020400
 8001078:	40020800 	.word	0x40020800

0800107c <HAL_I2S_RxCpltCallback>:
		ITM_SendChar(*ptr++);
	}
	return len;
}

void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s) {
 800107c:	b480      	push	{r7}
 800107e:	b083      	sub	sp, #12
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
    if (hi2s->Instance == SPI1) {
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4a24      	ldr	r2, [pc, #144]	@ (800111c <HAL_I2S_RxCpltCallback+0xa0>)
 800108a:	4293      	cmp	r3, r2
 800108c:	d103      	bne.n	8001096 <HAL_I2S_RxCpltCallback+0x1a>
        mic1_full_ready = 1;
 800108e:	4b24      	ldr	r3, [pc, #144]	@ (8001120 <HAL_I2S_RxCpltCallback+0xa4>)
 8001090:	2201      	movs	r2, #1
 8001092:	701a      	strb	r2, [r3, #0]
 8001094:	e019      	b.n	80010ca <HAL_I2S_RxCpltCallback+0x4e>
    } else if (hi2s->Instance == SPI2) {
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	4a22      	ldr	r2, [pc, #136]	@ (8001124 <HAL_I2S_RxCpltCallback+0xa8>)
 800109c:	4293      	cmp	r3, r2
 800109e:	d103      	bne.n	80010a8 <HAL_I2S_RxCpltCallback+0x2c>
        mic2_full_ready = 1;
 80010a0:	4b21      	ldr	r3, [pc, #132]	@ (8001128 <HAL_I2S_RxCpltCallback+0xac>)
 80010a2:	2201      	movs	r2, #1
 80010a4:	701a      	strb	r2, [r3, #0]
 80010a6:	e010      	b.n	80010ca <HAL_I2S_RxCpltCallback+0x4e>
    } else if (hi2s->Instance == SPI3) {
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4a1f      	ldr	r2, [pc, #124]	@ (800112c <HAL_I2S_RxCpltCallback+0xb0>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d103      	bne.n	80010ba <HAL_I2S_RxCpltCallback+0x3e>
        mic3_full_ready = 1;
 80010b2:	4b1f      	ldr	r3, [pc, #124]	@ (8001130 <HAL_I2S_RxCpltCallback+0xb4>)
 80010b4:	2201      	movs	r2, #1
 80010b6:	701a      	strb	r2, [r3, #0]
 80010b8:	e007      	b.n	80010ca <HAL_I2S_RxCpltCallback+0x4e>
    }
    else if (hi2s->Instance == SPI4) {
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	4a1d      	ldr	r2, [pc, #116]	@ (8001134 <HAL_I2S_RxCpltCallback+0xb8>)
 80010c0:	4293      	cmp	r3, r2
 80010c2:	d102      	bne.n	80010ca <HAL_I2S_RxCpltCallback+0x4e>
           mic4_full_ready = 1;
 80010c4:	4b1c      	ldr	r3, [pc, #112]	@ (8001138 <HAL_I2S_RxCpltCallback+0xbc>)
 80010c6:	2201      	movs	r2, #1
 80010c8:	701a      	strb	r2, [r3, #0]
       }

    if (mic1_full_ready && mic2_full_ready && mic3_full_ready && mic4_full_ready) {
 80010ca:	4b15      	ldr	r3, [pc, #84]	@ (8001120 <HAL_I2S_RxCpltCallback+0xa4>)
 80010cc:	781b      	ldrb	r3, [r3, #0]
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d01d      	beq.n	8001110 <HAL_I2S_RxCpltCallback+0x94>
 80010d4:	4b14      	ldr	r3, [pc, #80]	@ (8001128 <HAL_I2S_RxCpltCallback+0xac>)
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	b2db      	uxtb	r3, r3
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d018      	beq.n	8001110 <HAL_I2S_RxCpltCallback+0x94>
 80010de:	4b14      	ldr	r3, [pc, #80]	@ (8001130 <HAL_I2S_RxCpltCallback+0xb4>)
 80010e0:	781b      	ldrb	r3, [r3, #0]
 80010e2:	b2db      	uxtb	r3, r3
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d013      	beq.n	8001110 <HAL_I2S_RxCpltCallback+0x94>
 80010e8:	4b13      	ldr	r3, [pc, #76]	@ (8001138 <HAL_I2S_RxCpltCallback+0xbc>)
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	b2db      	uxtb	r3, r3
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d00e      	beq.n	8001110 <HAL_I2S_RxCpltCallback+0x94>
        full_i2s = 1;
 80010f2:	4b12      	ldr	r3, [pc, #72]	@ (800113c <HAL_I2S_RxCpltCallback+0xc0>)
 80010f4:	2201      	movs	r2, #1
 80010f6:	701a      	strb	r2, [r3, #0]
        mic1_full_ready = mic2_full_ready = mic3_full_ready  = mic4_full_ready= 0;
 80010f8:	2200      	movs	r2, #0
 80010fa:	4b0f      	ldr	r3, [pc, #60]	@ (8001138 <HAL_I2S_RxCpltCallback+0xbc>)
 80010fc:	4611      	mov	r1, r2
 80010fe:	7019      	strb	r1, [r3, #0]
 8001100:	4b0b      	ldr	r3, [pc, #44]	@ (8001130 <HAL_I2S_RxCpltCallback+0xb4>)
 8001102:	4611      	mov	r1, r2
 8001104:	7019      	strb	r1, [r3, #0]
 8001106:	4b08      	ldr	r3, [pc, #32]	@ (8001128 <HAL_I2S_RxCpltCallback+0xac>)
 8001108:	4611      	mov	r1, r2
 800110a:	7019      	strb	r1, [r3, #0]
 800110c:	4b04      	ldr	r3, [pc, #16]	@ (8001120 <HAL_I2S_RxCpltCallback+0xa4>)
 800110e:	701a      	strb	r2, [r3, #0]
    }
}
 8001110:	bf00      	nop
 8001112:	370c      	adds	r7, #12
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr
 800111c:	40013000 	.word	0x40013000
 8001120:	20004870 	.word	0x20004870
 8001124:	40003800 	.word	0x40003800
 8001128:	20004872 	.word	0x20004872
 800112c:	40003c00 	.word	0x40003c00
 8001130:	20004874 	.word	0x20004874
 8001134:	40013400 	.word	0x40013400
 8001138:	20004876 	.word	0x20004876
 800113c:	2000486e 	.word	0x2000486e

08001140 <HAL_I2S_RxHalfCpltCallback>:

void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s) {
 8001140:	b480      	push	{r7}
 8001142:	b083      	sub	sp, #12
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
    if (hi2s->Instance == SPI1) {
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4a24      	ldr	r2, [pc, #144]	@ (80011e0 <HAL_I2S_RxHalfCpltCallback+0xa0>)
 800114e:	4293      	cmp	r3, r2
 8001150:	d103      	bne.n	800115a <HAL_I2S_RxHalfCpltCallback+0x1a>
        mic1_half_ready = 1;
 8001152:	4b24      	ldr	r3, [pc, #144]	@ (80011e4 <HAL_I2S_RxHalfCpltCallback+0xa4>)
 8001154:	2201      	movs	r2, #1
 8001156:	701a      	strb	r2, [r3, #0]
 8001158:	e019      	b.n	800118e <HAL_I2S_RxHalfCpltCallback+0x4e>
    } else if (hi2s->Instance == SPI2) {
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	4a22      	ldr	r2, [pc, #136]	@ (80011e8 <HAL_I2S_RxHalfCpltCallback+0xa8>)
 8001160:	4293      	cmp	r3, r2
 8001162:	d103      	bne.n	800116c <HAL_I2S_RxHalfCpltCallback+0x2c>
        mic2_half_ready = 1;
 8001164:	4b21      	ldr	r3, [pc, #132]	@ (80011ec <HAL_I2S_RxHalfCpltCallback+0xac>)
 8001166:	2201      	movs	r2, #1
 8001168:	701a      	strb	r2, [r3, #0]
 800116a:	e010      	b.n	800118e <HAL_I2S_RxHalfCpltCallback+0x4e>
    } else if (hi2s->Instance == SPI3) {
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4a1f      	ldr	r2, [pc, #124]	@ (80011f0 <HAL_I2S_RxHalfCpltCallback+0xb0>)
 8001172:	4293      	cmp	r3, r2
 8001174:	d103      	bne.n	800117e <HAL_I2S_RxHalfCpltCallback+0x3e>
        mic3_half_ready = 1;
 8001176:	4b1f      	ldr	r3, [pc, #124]	@ (80011f4 <HAL_I2S_RxHalfCpltCallback+0xb4>)
 8001178:	2201      	movs	r2, #1
 800117a:	701a      	strb	r2, [r3, #0]
 800117c:	e007      	b.n	800118e <HAL_I2S_RxHalfCpltCallback+0x4e>
    }
    else if (hi2s->Instance == SPI4) {
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	4a1d      	ldr	r2, [pc, #116]	@ (80011f8 <HAL_I2S_RxHalfCpltCallback+0xb8>)
 8001184:	4293      	cmp	r3, r2
 8001186:	d102      	bne.n	800118e <HAL_I2S_RxHalfCpltCallback+0x4e>
               mic4_half_ready = 1;
 8001188:	4b1c      	ldr	r3, [pc, #112]	@ (80011fc <HAL_I2S_RxHalfCpltCallback+0xbc>)
 800118a:	2201      	movs	r2, #1
 800118c:	701a      	strb	r2, [r3, #0]
           }

    if (mic1_half_ready && mic2_half_ready && mic3_half_ready && mic4_half_ready) {
 800118e:	4b15      	ldr	r3, [pc, #84]	@ (80011e4 <HAL_I2S_RxHalfCpltCallback+0xa4>)
 8001190:	781b      	ldrb	r3, [r3, #0]
 8001192:	b2db      	uxtb	r3, r3
 8001194:	2b00      	cmp	r3, #0
 8001196:	d01d      	beq.n	80011d4 <HAL_I2S_RxHalfCpltCallback+0x94>
 8001198:	4b14      	ldr	r3, [pc, #80]	@ (80011ec <HAL_I2S_RxHalfCpltCallback+0xac>)
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	b2db      	uxtb	r3, r3
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d018      	beq.n	80011d4 <HAL_I2S_RxHalfCpltCallback+0x94>
 80011a2:	4b14      	ldr	r3, [pc, #80]	@ (80011f4 <HAL_I2S_RxHalfCpltCallback+0xb4>)
 80011a4:	781b      	ldrb	r3, [r3, #0]
 80011a6:	b2db      	uxtb	r3, r3
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d013      	beq.n	80011d4 <HAL_I2S_RxHalfCpltCallback+0x94>
 80011ac:	4b13      	ldr	r3, [pc, #76]	@ (80011fc <HAL_I2S_RxHalfCpltCallback+0xbc>)
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	b2db      	uxtb	r3, r3
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d00e      	beq.n	80011d4 <HAL_I2S_RxHalfCpltCallback+0x94>
        half_i2s = 1;
 80011b6:	4b12      	ldr	r3, [pc, #72]	@ (8001200 <HAL_I2S_RxHalfCpltCallback+0xc0>)
 80011b8:	2201      	movs	r2, #1
 80011ba:	701a      	strb	r2, [r3, #0]
        mic1_half_ready = mic2_half_ready = mic3_half_ready=mic4_half_ready = 0;
 80011bc:	2200      	movs	r2, #0
 80011be:	4b0f      	ldr	r3, [pc, #60]	@ (80011fc <HAL_I2S_RxHalfCpltCallback+0xbc>)
 80011c0:	4611      	mov	r1, r2
 80011c2:	7019      	strb	r1, [r3, #0]
 80011c4:	4b0b      	ldr	r3, [pc, #44]	@ (80011f4 <HAL_I2S_RxHalfCpltCallback+0xb4>)
 80011c6:	4611      	mov	r1, r2
 80011c8:	7019      	strb	r1, [r3, #0]
 80011ca:	4b08      	ldr	r3, [pc, #32]	@ (80011ec <HAL_I2S_RxHalfCpltCallback+0xac>)
 80011cc:	4611      	mov	r1, r2
 80011ce:	7019      	strb	r1, [r3, #0]
 80011d0:	4b04      	ldr	r3, [pc, #16]	@ (80011e4 <HAL_I2S_RxHalfCpltCallback+0xa4>)
 80011d2:	701a      	strb	r2, [r3, #0]
    }
}
 80011d4:	bf00      	nop
 80011d6:	370c      	adds	r7, #12
 80011d8:	46bd      	mov	sp, r7
 80011da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011de:	4770      	bx	lr
 80011e0:	40013000 	.word	0x40013000
 80011e4:	2000486f 	.word	0x2000486f
 80011e8:	40003800 	.word	0x40003800
 80011ec:	20004871 	.word	0x20004871
 80011f0:	40003c00 	.word	0x40003c00
 80011f4:	20004873 	.word	0x20004873
 80011f8:	40013400 	.word	0x40013400
 80011fc:	20004875 	.word	0x20004875
 8001200:	2000486d 	.word	0x2000486d

08001204 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001204:	b480      	push	{r7}
 8001206:	b083      	sub	sp, #12
 8001208:	af00      	add	r7, sp, #0
 800120a:	4603      	mov	r3, r0
 800120c:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == button_Pin){
 800120e:	88fb      	ldrh	r3, [r7, #6]
 8001210:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001214:	d102      	bne.n	800121c <HAL_GPIO_EXTI_Callback+0x18>
		button_flag = 1;
 8001216:	4b04      	ldr	r3, [pc, #16]	@ (8001228 <HAL_GPIO_EXTI_Callback+0x24>)
 8001218:	2201      	movs	r2, #1
 800121a:	701a      	strb	r2, [r3, #0]
	}
}
 800121c:	bf00      	nop
 800121e:	370c      	adds	r7, #12
 8001220:	46bd      	mov	sp, r7
 8001222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001226:	4770      	bx	lr
 8001228:	20004864 	.word	0x20004864

0800122c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001230:	b672      	cpsid	i
}
 8001232:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001234:	bf00      	nop
 8001236:	e7fd      	b.n	8001234 <Error_Handler+0x8>

08001238 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800123e:	2300      	movs	r3, #0
 8001240:	607b      	str	r3, [r7, #4]
 8001242:	4b10      	ldr	r3, [pc, #64]	@ (8001284 <HAL_MspInit+0x4c>)
 8001244:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001246:	4a0f      	ldr	r2, [pc, #60]	@ (8001284 <HAL_MspInit+0x4c>)
 8001248:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800124c:	6453      	str	r3, [r2, #68]	@ 0x44
 800124e:	4b0d      	ldr	r3, [pc, #52]	@ (8001284 <HAL_MspInit+0x4c>)
 8001250:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001252:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001256:	607b      	str	r3, [r7, #4]
 8001258:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800125a:	2300      	movs	r3, #0
 800125c:	603b      	str	r3, [r7, #0]
 800125e:	4b09      	ldr	r3, [pc, #36]	@ (8001284 <HAL_MspInit+0x4c>)
 8001260:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001262:	4a08      	ldr	r2, [pc, #32]	@ (8001284 <HAL_MspInit+0x4c>)
 8001264:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001268:	6413      	str	r3, [r2, #64]	@ 0x40
 800126a:	4b06      	ldr	r3, [pc, #24]	@ (8001284 <HAL_MspInit+0x4c>)
 800126c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800126e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001272:	603b      	str	r3, [r7, #0]
 8001274:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001276:	2007      	movs	r0, #7
 8001278:	f000 fd10 	bl	8001c9c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800127c:	bf00      	nop
 800127e:	3708      	adds	r7, #8
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}
 8001284:	40023800 	.word	0x40023800

08001288 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b092      	sub	sp, #72	@ 0x48
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001290:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001294:	2200      	movs	r2, #0
 8001296:	601a      	str	r2, [r3, #0]
 8001298:	605a      	str	r2, [r3, #4]
 800129a:	609a      	str	r2, [r3, #8]
 800129c:	60da      	str	r2, [r3, #12]
 800129e:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI1)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4a71      	ldr	r2, [pc, #452]	@ (800146c <HAL_I2S_MspInit+0x1e4>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d15d      	bne.n	8001366 <HAL_I2S_MspInit+0xde>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80012aa:	2300      	movs	r3, #0
 80012ac:	633b      	str	r3, [r7, #48]	@ 0x30
 80012ae:	4b70      	ldr	r3, [pc, #448]	@ (8001470 <HAL_I2S_MspInit+0x1e8>)
 80012b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012b2:	4a6f      	ldr	r2, [pc, #444]	@ (8001470 <HAL_I2S_MspInit+0x1e8>)
 80012b4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80012b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80012ba:	4b6d      	ldr	r3, [pc, #436]	@ (8001470 <HAL_I2S_MspInit+0x1e8>)
 80012bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012be:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80012c2:	633b      	str	r3, [r7, #48]	@ 0x30
 80012c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012c6:	2300      	movs	r3, #0
 80012c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80012ca:	4b69      	ldr	r3, [pc, #420]	@ (8001470 <HAL_I2S_MspInit+0x1e8>)
 80012cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ce:	4a68      	ldr	r2, [pc, #416]	@ (8001470 <HAL_I2S_MspInit+0x1e8>)
 80012d0:	f043 0301 	orr.w	r3, r3, #1
 80012d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80012d6:	4b66      	ldr	r3, [pc, #408]	@ (8001470 <HAL_I2S_MspInit+0x1e8>)
 80012d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012da:	f003 0301 	and.w	r3, r3, #1
 80012de:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80012e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    /**I2S1 GPIO Configuration
    PA4     ------> I2S1_WS
    PA5     ------> I2S1_CK
    PA7     ------> I2S1_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 80012e2:	23b0      	movs	r3, #176	@ 0xb0
 80012e4:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012e6:	2302      	movs	r3, #2
 80012e8:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ea:	2300      	movs	r3, #0
 80012ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ee:	2300      	movs	r3, #0
 80012f0:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80012f2:	2305      	movs	r3, #5
 80012f4:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012f6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80012fa:	4619      	mov	r1, r3
 80012fc:	485d      	ldr	r0, [pc, #372]	@ (8001474 <HAL_I2S_MspInit+0x1ec>)
 80012fe:	f001 f8ef 	bl	80024e0 <HAL_GPIO_Init>

    /* I2S1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 8001302:	4b5d      	ldr	r3, [pc, #372]	@ (8001478 <HAL_I2S_MspInit+0x1f0>)
 8001304:	4a5d      	ldr	r2, [pc, #372]	@ (800147c <HAL_I2S_MspInit+0x1f4>)
 8001306:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8001308:	4b5b      	ldr	r3, [pc, #364]	@ (8001478 <HAL_I2S_MspInit+0x1f0>)
 800130a:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 800130e:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001310:	4b59      	ldr	r3, [pc, #356]	@ (8001478 <HAL_I2S_MspInit+0x1f0>)
 8001312:	2200      	movs	r2, #0
 8001314:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001316:	4b58      	ldr	r3, [pc, #352]	@ (8001478 <HAL_I2S_MspInit+0x1f0>)
 8001318:	2200      	movs	r2, #0
 800131a:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800131c:	4b56      	ldr	r3, [pc, #344]	@ (8001478 <HAL_I2S_MspInit+0x1f0>)
 800131e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001322:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001324:	4b54      	ldr	r3, [pc, #336]	@ (8001478 <HAL_I2S_MspInit+0x1f0>)
 8001326:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800132a:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800132c:	4b52      	ldr	r3, [pc, #328]	@ (8001478 <HAL_I2S_MspInit+0x1f0>)
 800132e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001332:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
 8001334:	4b50      	ldr	r3, [pc, #320]	@ (8001478 <HAL_I2S_MspInit+0x1f0>)
 8001336:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800133a:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800133c:	4b4e      	ldr	r3, [pc, #312]	@ (8001478 <HAL_I2S_MspInit+0x1f0>)
 800133e:	2200      	movs	r2, #0
 8001340:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001342:	4b4d      	ldr	r3, [pc, #308]	@ (8001478 <HAL_I2S_MspInit+0x1f0>)
 8001344:	2200      	movs	r2, #0
 8001346:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8001348:	484b      	ldr	r0, [pc, #300]	@ (8001478 <HAL_I2S_MspInit+0x1f0>)
 800134a:	f000 fce9 	bl	8001d20 <HAL_DMA_Init>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d001      	beq.n	8001358 <HAL_I2S_MspInit+0xd0>
    {
      Error_Handler();
 8001354:	f7ff ff6a 	bl	800122c <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmarx,hdma_spi1_rx);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	4a47      	ldr	r2, [pc, #284]	@ (8001478 <HAL_I2S_MspInit+0x1f0>)
 800135c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800135e:	4a46      	ldr	r2, [pc, #280]	@ (8001478 <HAL_I2S_MspInit+0x1f0>)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 8001364:	e199      	b.n	800169a <HAL_I2S_MspInit+0x412>
  else if(hi2s->Instance==SPI2)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4a45      	ldr	r2, [pc, #276]	@ (8001480 <HAL_I2S_MspInit+0x1f8>)
 800136c:	4293      	cmp	r3, r2
 800136e:	f040 8091 	bne.w	8001494 <HAL_I2S_MspInit+0x20c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001372:	2300      	movs	r3, #0
 8001374:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001376:	4b3e      	ldr	r3, [pc, #248]	@ (8001470 <HAL_I2S_MspInit+0x1e8>)
 8001378:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800137a:	4a3d      	ldr	r2, [pc, #244]	@ (8001470 <HAL_I2S_MspInit+0x1e8>)
 800137c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001380:	6413      	str	r3, [r2, #64]	@ 0x40
 8001382:	4b3b      	ldr	r3, [pc, #236]	@ (8001470 <HAL_I2S_MspInit+0x1e8>)
 8001384:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001386:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800138a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800138c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800138e:	2300      	movs	r3, #0
 8001390:	627b      	str	r3, [r7, #36]	@ 0x24
 8001392:	4b37      	ldr	r3, [pc, #220]	@ (8001470 <HAL_I2S_MspInit+0x1e8>)
 8001394:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001396:	4a36      	ldr	r2, [pc, #216]	@ (8001470 <HAL_I2S_MspInit+0x1e8>)
 8001398:	f043 0304 	orr.w	r3, r3, #4
 800139c:	6313      	str	r3, [r2, #48]	@ 0x30
 800139e:	4b34      	ldr	r3, [pc, #208]	@ (8001470 <HAL_I2S_MspInit+0x1e8>)
 80013a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013a2:	f003 0304 	and.w	r3, r3, #4
 80013a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80013a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013aa:	2300      	movs	r3, #0
 80013ac:	623b      	str	r3, [r7, #32]
 80013ae:	4b30      	ldr	r3, [pc, #192]	@ (8001470 <HAL_I2S_MspInit+0x1e8>)
 80013b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013b2:	4a2f      	ldr	r2, [pc, #188]	@ (8001470 <HAL_I2S_MspInit+0x1e8>)
 80013b4:	f043 0302 	orr.w	r3, r3, #2
 80013b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80013ba:	4b2d      	ldr	r3, [pc, #180]	@ (8001470 <HAL_I2S_MspInit+0x1e8>)
 80013bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013be:	f003 0302 	and.w	r3, r3, #2
 80013c2:	623b      	str	r3, [r7, #32]
 80013c4:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80013c6:	2308      	movs	r3, #8
 80013c8:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ca:	2302      	movs	r3, #2
 80013cc:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ce:	2300      	movs	r3, #0
 80013d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013d2:	2300      	movs	r3, #0
 80013d4:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80013d6:	2305      	movs	r3, #5
 80013d8:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013da:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80013de:	4619      	mov	r1, r3
 80013e0:	4828      	ldr	r0, [pc, #160]	@ (8001484 <HAL_I2S_MspInit+0x1fc>)
 80013e2:	f001 f87d 	bl	80024e0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 80013e6:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80013ea:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ec:	2302      	movs	r3, #2
 80013ee:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f0:	2300      	movs	r3, #0
 80013f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013f4:	2300      	movs	r3, #0
 80013f6:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80013f8:	2305      	movs	r3, #5
 80013fa:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013fc:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001400:	4619      	mov	r1, r3
 8001402:	4821      	ldr	r0, [pc, #132]	@ (8001488 <HAL_I2S_MspInit+0x200>)
 8001404:	f001 f86c 	bl	80024e0 <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8001408:	4b20      	ldr	r3, [pc, #128]	@ (800148c <HAL_I2S_MspInit+0x204>)
 800140a:	4a21      	ldr	r2, [pc, #132]	@ (8001490 <HAL_I2S_MspInit+0x208>)
 800140c:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 800140e:	4b1f      	ldr	r3, [pc, #124]	@ (800148c <HAL_I2S_MspInit+0x204>)
 8001410:	2200      	movs	r2, #0
 8001412:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001414:	4b1d      	ldr	r3, [pc, #116]	@ (800148c <HAL_I2S_MspInit+0x204>)
 8001416:	2200      	movs	r2, #0
 8001418:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800141a:	4b1c      	ldr	r3, [pc, #112]	@ (800148c <HAL_I2S_MspInit+0x204>)
 800141c:	2200      	movs	r2, #0
 800141e:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001420:	4b1a      	ldr	r3, [pc, #104]	@ (800148c <HAL_I2S_MspInit+0x204>)
 8001422:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001426:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001428:	4b18      	ldr	r3, [pc, #96]	@ (800148c <HAL_I2S_MspInit+0x204>)
 800142a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800142e:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001430:	4b16      	ldr	r3, [pc, #88]	@ (800148c <HAL_I2S_MspInit+0x204>)
 8001432:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001436:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 8001438:	4b14      	ldr	r3, [pc, #80]	@ (800148c <HAL_I2S_MspInit+0x204>)
 800143a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800143e:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001440:	4b12      	ldr	r3, [pc, #72]	@ (800148c <HAL_I2S_MspInit+0x204>)
 8001442:	2200      	movs	r2, #0
 8001444:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001446:	4b11      	ldr	r3, [pc, #68]	@ (800148c <HAL_I2S_MspInit+0x204>)
 8001448:	2200      	movs	r2, #0
 800144a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 800144c:	480f      	ldr	r0, [pc, #60]	@ (800148c <HAL_I2S_MspInit+0x204>)
 800144e:	f000 fc67 	bl	8001d20 <HAL_DMA_Init>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	d001      	beq.n	800145c <HAL_I2S_MspInit+0x1d4>
      Error_Handler();
 8001458:	f7ff fee8 	bl	800122c <Error_Handler>
    __HAL_LINKDMA(hi2s,hdmarx,hdma_spi2_rx);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	4a0b      	ldr	r2, [pc, #44]	@ (800148c <HAL_I2S_MspInit+0x204>)
 8001460:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001462:	4a0a      	ldr	r2, [pc, #40]	@ (800148c <HAL_I2S_MspInit+0x204>)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8001468:	e117      	b.n	800169a <HAL_I2S_MspInit+0x412>
 800146a:	bf00      	nop
 800146c:	40013000 	.word	0x40013000
 8001470:	40023800 	.word	0x40023800
 8001474:	40020000 	.word	0x40020000
 8001478:	200001e0 	.word	0x200001e0
 800147c:	40026410 	.word	0x40026410
 8001480:	40003800 	.word	0x40003800
 8001484:	40020800 	.word	0x40020800
 8001488:	40020400 	.word	0x40020400
 800148c:	20000240 	.word	0x20000240
 8001490:	40026058 	.word	0x40026058
  else if(hi2s->Instance==SPI3)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4a82      	ldr	r2, [pc, #520]	@ (80016a4 <HAL_I2S_MspInit+0x41c>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d17c      	bne.n	8001598 <HAL_I2S_MspInit+0x310>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800149e:	2300      	movs	r3, #0
 80014a0:	61fb      	str	r3, [r7, #28]
 80014a2:	4b81      	ldr	r3, [pc, #516]	@ (80016a8 <HAL_I2S_MspInit+0x420>)
 80014a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014a6:	4a80      	ldr	r2, [pc, #512]	@ (80016a8 <HAL_I2S_MspInit+0x420>)
 80014a8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80014ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80014ae:	4b7e      	ldr	r3, [pc, #504]	@ (80016a8 <HAL_I2S_MspInit+0x420>)
 80014b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014b2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80014b6:	61fb      	str	r3, [r7, #28]
 80014b8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ba:	2300      	movs	r3, #0
 80014bc:	61bb      	str	r3, [r7, #24]
 80014be:	4b7a      	ldr	r3, [pc, #488]	@ (80016a8 <HAL_I2S_MspInit+0x420>)
 80014c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014c2:	4a79      	ldr	r2, [pc, #484]	@ (80016a8 <HAL_I2S_MspInit+0x420>)
 80014c4:	f043 0301 	orr.w	r3, r3, #1
 80014c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80014ca:	4b77      	ldr	r3, [pc, #476]	@ (80016a8 <HAL_I2S_MspInit+0x420>)
 80014cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ce:	f003 0301 	and.w	r3, r3, #1
 80014d2:	61bb      	str	r3, [r7, #24]
 80014d4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014d6:	2300      	movs	r3, #0
 80014d8:	617b      	str	r3, [r7, #20]
 80014da:	4b73      	ldr	r3, [pc, #460]	@ (80016a8 <HAL_I2S_MspInit+0x420>)
 80014dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014de:	4a72      	ldr	r2, [pc, #456]	@ (80016a8 <HAL_I2S_MspInit+0x420>)
 80014e0:	f043 0304 	orr.w	r3, r3, #4
 80014e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80014e6:	4b70      	ldr	r3, [pc, #448]	@ (80016a8 <HAL_I2S_MspInit+0x420>)
 80014e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ea:	f003 0304 	and.w	r3, r3, #4
 80014ee:	617b      	str	r3, [r7, #20]
 80014f0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80014f2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80014f6:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f8:	2302      	movs	r3, #2
 80014fa:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fc:	2300      	movs	r3, #0
 80014fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001500:	2300      	movs	r3, #0
 8001502:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001504:	2306      	movs	r3, #6
 8001506:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001508:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800150c:	4619      	mov	r1, r3
 800150e:	4867      	ldr	r0, [pc, #412]	@ (80016ac <HAL_I2S_MspInit+0x424>)
 8001510:	f000 ffe6 	bl	80024e0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8001514:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001518:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800151a:	2302      	movs	r3, #2
 800151c:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151e:	2300      	movs	r3, #0
 8001520:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001522:	2300      	movs	r3, #0
 8001524:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001526:	2306      	movs	r3, #6
 8001528:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800152a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800152e:	4619      	mov	r1, r3
 8001530:	485f      	ldr	r0, [pc, #380]	@ (80016b0 <HAL_I2S_MspInit+0x428>)
 8001532:	f000 ffd5 	bl	80024e0 <HAL_GPIO_Init>
    hdma_spi3_rx.Instance = DMA1_Stream0;
 8001536:	4b5f      	ldr	r3, [pc, #380]	@ (80016b4 <HAL_I2S_MspInit+0x42c>)
 8001538:	4a5f      	ldr	r2, [pc, #380]	@ (80016b8 <HAL_I2S_MspInit+0x430>)
 800153a:	601a      	str	r2, [r3, #0]
    hdma_spi3_rx.Init.Channel = DMA_CHANNEL_0;
 800153c:	4b5d      	ldr	r3, [pc, #372]	@ (80016b4 <HAL_I2S_MspInit+0x42c>)
 800153e:	2200      	movs	r2, #0
 8001540:	605a      	str	r2, [r3, #4]
    hdma_spi3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001542:	4b5c      	ldr	r3, [pc, #368]	@ (80016b4 <HAL_I2S_MspInit+0x42c>)
 8001544:	2200      	movs	r2, #0
 8001546:	609a      	str	r2, [r3, #8]
    hdma_spi3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001548:	4b5a      	ldr	r3, [pc, #360]	@ (80016b4 <HAL_I2S_MspInit+0x42c>)
 800154a:	2200      	movs	r2, #0
 800154c:	60da      	str	r2, [r3, #12]
    hdma_spi3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800154e:	4b59      	ldr	r3, [pc, #356]	@ (80016b4 <HAL_I2S_MspInit+0x42c>)
 8001550:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001554:	611a      	str	r2, [r3, #16]
    hdma_spi3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001556:	4b57      	ldr	r3, [pc, #348]	@ (80016b4 <HAL_I2S_MspInit+0x42c>)
 8001558:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800155c:	615a      	str	r2, [r3, #20]
    hdma_spi3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800155e:	4b55      	ldr	r3, [pc, #340]	@ (80016b4 <HAL_I2S_MspInit+0x42c>)
 8001560:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001564:	619a      	str	r2, [r3, #24]
    hdma_spi3_rx.Init.Mode = DMA_CIRCULAR;
 8001566:	4b53      	ldr	r3, [pc, #332]	@ (80016b4 <HAL_I2S_MspInit+0x42c>)
 8001568:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800156c:	61da      	str	r2, [r3, #28]
    hdma_spi3_rx.Init.Priority = DMA_PRIORITY_LOW;
 800156e:	4b51      	ldr	r3, [pc, #324]	@ (80016b4 <HAL_I2S_MspInit+0x42c>)
 8001570:	2200      	movs	r2, #0
 8001572:	621a      	str	r2, [r3, #32]
    hdma_spi3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001574:	4b4f      	ldr	r3, [pc, #316]	@ (80016b4 <HAL_I2S_MspInit+0x42c>)
 8001576:	2200      	movs	r2, #0
 8001578:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi3_rx) != HAL_OK)
 800157a:	484e      	ldr	r0, [pc, #312]	@ (80016b4 <HAL_I2S_MspInit+0x42c>)
 800157c:	f000 fbd0 	bl	8001d20 <HAL_DMA_Init>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d001      	beq.n	800158a <HAL_I2S_MspInit+0x302>
      Error_Handler();
 8001586:	f7ff fe51 	bl	800122c <Error_Handler>
    __HAL_LINKDMA(hi2s,hdmarx,hdma_spi3_rx);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	4a49      	ldr	r2, [pc, #292]	@ (80016b4 <HAL_I2S_MspInit+0x42c>)
 800158e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001590:	4a48      	ldr	r2, [pc, #288]	@ (80016b4 <HAL_I2S_MspInit+0x42c>)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8001596:	e080      	b.n	800169a <HAL_I2S_MspInit+0x412>
  else if(hi2s->Instance==SPI4)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a47      	ldr	r2, [pc, #284]	@ (80016bc <HAL_I2S_MspInit+0x434>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d17b      	bne.n	800169a <HAL_I2S_MspInit+0x412>
    __HAL_RCC_SPI4_CLK_ENABLE();
 80015a2:	2300      	movs	r3, #0
 80015a4:	613b      	str	r3, [r7, #16]
 80015a6:	4b40      	ldr	r3, [pc, #256]	@ (80016a8 <HAL_I2S_MspInit+0x420>)
 80015a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015aa:	4a3f      	ldr	r2, [pc, #252]	@ (80016a8 <HAL_I2S_MspInit+0x420>)
 80015ac:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80015b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80015b2:	4b3d      	ldr	r3, [pc, #244]	@ (80016a8 <HAL_I2S_MspInit+0x420>)
 80015b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015b6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80015ba:	613b      	str	r3, [r7, #16]
 80015bc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015be:	2300      	movs	r3, #0
 80015c0:	60fb      	str	r3, [r7, #12]
 80015c2:	4b39      	ldr	r3, [pc, #228]	@ (80016a8 <HAL_I2S_MspInit+0x420>)
 80015c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015c6:	4a38      	ldr	r2, [pc, #224]	@ (80016a8 <HAL_I2S_MspInit+0x420>)
 80015c8:	f043 0301 	orr.w	r3, r3, #1
 80015cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80015ce:	4b36      	ldr	r3, [pc, #216]	@ (80016a8 <HAL_I2S_MspInit+0x420>)
 80015d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015d2:	f003 0301 	and.w	r3, r3, #1
 80015d6:	60fb      	str	r3, [r7, #12]
 80015d8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015da:	2300      	movs	r3, #0
 80015dc:	60bb      	str	r3, [r7, #8]
 80015de:	4b32      	ldr	r3, [pc, #200]	@ (80016a8 <HAL_I2S_MspInit+0x420>)
 80015e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015e2:	4a31      	ldr	r2, [pc, #196]	@ (80016a8 <HAL_I2S_MspInit+0x420>)
 80015e4:	f043 0302 	orr.w	r3, r3, #2
 80015e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80015ea:	4b2f      	ldr	r3, [pc, #188]	@ (80016a8 <HAL_I2S_MspInit+0x420>)
 80015ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ee:	f003 0302 	and.w	r3, r3, #2
 80015f2:	60bb      	str	r3, [r7, #8]
 80015f4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80015f6:	2302      	movs	r3, #2
 80015f8:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015fa:	2302      	movs	r3, #2
 80015fc:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fe:	2300      	movs	r3, #0
 8001600:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001602:	2300      	movs	r3, #0
 8001604:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8001606:	2305      	movs	r3, #5
 8001608:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800160a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800160e:	4619      	mov	r1, r3
 8001610:	4826      	ldr	r0, [pc, #152]	@ (80016ac <HAL_I2S_MspInit+0x424>)
 8001612:	f000 ff65 	bl	80024e0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001616:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 800161a:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800161c:	2302      	movs	r3, #2
 800161e:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001620:	2300      	movs	r3, #0
 8001622:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001624:	2300      	movs	r3, #0
 8001626:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI4;
 8001628:	2306      	movs	r3, #6
 800162a:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800162c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001630:	4619      	mov	r1, r3
 8001632:	4823      	ldr	r0, [pc, #140]	@ (80016c0 <HAL_I2S_MspInit+0x438>)
 8001634:	f000 ff54 	bl	80024e0 <HAL_GPIO_Init>
    hdma_spi4_rx.Instance = DMA2_Stream3;
 8001638:	4b22      	ldr	r3, [pc, #136]	@ (80016c4 <HAL_I2S_MspInit+0x43c>)
 800163a:	4a23      	ldr	r2, [pc, #140]	@ (80016c8 <HAL_I2S_MspInit+0x440>)
 800163c:	601a      	str	r2, [r3, #0]
    hdma_spi4_rx.Init.Channel = DMA_CHANNEL_5;
 800163e:	4b21      	ldr	r3, [pc, #132]	@ (80016c4 <HAL_I2S_MspInit+0x43c>)
 8001640:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8001644:	605a      	str	r2, [r3, #4]
    hdma_spi4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001646:	4b1f      	ldr	r3, [pc, #124]	@ (80016c4 <HAL_I2S_MspInit+0x43c>)
 8001648:	2200      	movs	r2, #0
 800164a:	609a      	str	r2, [r3, #8]
    hdma_spi4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800164c:	4b1d      	ldr	r3, [pc, #116]	@ (80016c4 <HAL_I2S_MspInit+0x43c>)
 800164e:	2200      	movs	r2, #0
 8001650:	60da      	str	r2, [r3, #12]
    hdma_spi4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001652:	4b1c      	ldr	r3, [pc, #112]	@ (80016c4 <HAL_I2S_MspInit+0x43c>)
 8001654:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001658:	611a      	str	r2, [r3, #16]
    hdma_spi4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800165a:	4b1a      	ldr	r3, [pc, #104]	@ (80016c4 <HAL_I2S_MspInit+0x43c>)
 800165c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001660:	615a      	str	r2, [r3, #20]
    hdma_spi4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001662:	4b18      	ldr	r3, [pc, #96]	@ (80016c4 <HAL_I2S_MspInit+0x43c>)
 8001664:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001668:	619a      	str	r2, [r3, #24]
    hdma_spi4_rx.Init.Mode = DMA_CIRCULAR;
 800166a:	4b16      	ldr	r3, [pc, #88]	@ (80016c4 <HAL_I2S_MspInit+0x43c>)
 800166c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001670:	61da      	str	r2, [r3, #28]
    hdma_spi4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001672:	4b14      	ldr	r3, [pc, #80]	@ (80016c4 <HAL_I2S_MspInit+0x43c>)
 8001674:	2200      	movs	r2, #0
 8001676:	621a      	str	r2, [r3, #32]
    hdma_spi4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001678:	4b12      	ldr	r3, [pc, #72]	@ (80016c4 <HAL_I2S_MspInit+0x43c>)
 800167a:	2200      	movs	r2, #0
 800167c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi4_rx) != HAL_OK)
 800167e:	4811      	ldr	r0, [pc, #68]	@ (80016c4 <HAL_I2S_MspInit+0x43c>)
 8001680:	f000 fb4e 	bl	8001d20 <HAL_DMA_Init>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	d001      	beq.n	800168e <HAL_I2S_MspInit+0x406>
      Error_Handler();
 800168a:	f7ff fdcf 	bl	800122c <Error_Handler>
    __HAL_LINKDMA(hi2s,hdmarx,hdma_spi4_rx);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	4a0c      	ldr	r2, [pc, #48]	@ (80016c4 <HAL_I2S_MspInit+0x43c>)
 8001692:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001694:	4a0b      	ldr	r2, [pc, #44]	@ (80016c4 <HAL_I2S_MspInit+0x43c>)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6393      	str	r3, [r2, #56]	@ 0x38
}
 800169a:	bf00      	nop
 800169c:	3748      	adds	r7, #72	@ 0x48
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	40003c00 	.word	0x40003c00
 80016a8:	40023800 	.word	0x40023800
 80016ac:	40020000 	.word	0x40020000
 80016b0:	40020800 	.word	0x40020800
 80016b4:	200002a0 	.word	0x200002a0
 80016b8:	40026010 	.word	0x40026010
 80016bc:	40013400 	.word	0x40013400
 80016c0:	40020400 	.word	0x40020400
 80016c4:	20000300 	.word	0x20000300
 80016c8:	40026458 	.word	0x40026458

080016cc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b08a      	sub	sp, #40	@ 0x28
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016d4:	f107 0314 	add.w	r3, r7, #20
 80016d8:	2200      	movs	r2, #0
 80016da:	601a      	str	r2, [r3, #0]
 80016dc:	605a      	str	r2, [r3, #4]
 80016de:	609a      	str	r2, [r3, #8]
 80016e0:	60da      	str	r2, [r3, #12]
 80016e2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a28      	ldr	r2, [pc, #160]	@ (800178c <HAL_SPI_MspInit+0xc0>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d14a      	bne.n	8001784 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 80016ee:	2300      	movs	r3, #0
 80016f0:	613b      	str	r3, [r7, #16]
 80016f2:	4b27      	ldr	r3, [pc, #156]	@ (8001790 <HAL_SPI_MspInit+0xc4>)
 80016f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016f6:	4a26      	ldr	r2, [pc, #152]	@ (8001790 <HAL_SPI_MspInit+0xc4>)
 80016f8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80016fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80016fe:	4b24      	ldr	r3, [pc, #144]	@ (8001790 <HAL_SPI_MspInit+0xc4>)
 8001700:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001702:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001706:	613b      	str	r3, [r7, #16]
 8001708:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800170a:	2300      	movs	r3, #0
 800170c:	60fb      	str	r3, [r7, #12]
 800170e:	4b20      	ldr	r3, [pc, #128]	@ (8001790 <HAL_SPI_MspInit+0xc4>)
 8001710:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001712:	4a1f      	ldr	r2, [pc, #124]	@ (8001790 <HAL_SPI_MspInit+0xc4>)
 8001714:	f043 0302 	orr.w	r3, r3, #2
 8001718:	6313      	str	r3, [r2, #48]	@ 0x30
 800171a:	4b1d      	ldr	r3, [pc, #116]	@ (8001790 <HAL_SPI_MspInit+0xc4>)
 800171c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800171e:	f003 0302 	and.w	r3, r3, #2
 8001722:	60fb      	str	r3, [r7, #12]
 8001724:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001726:	2300      	movs	r3, #0
 8001728:	60bb      	str	r3, [r7, #8]
 800172a:	4b19      	ldr	r3, [pc, #100]	@ (8001790 <HAL_SPI_MspInit+0xc4>)
 800172c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800172e:	4a18      	ldr	r2, [pc, #96]	@ (8001790 <HAL_SPI_MspInit+0xc4>)
 8001730:	f043 0301 	orr.w	r3, r3, #1
 8001734:	6313      	str	r3, [r2, #48]	@ 0x30
 8001736:	4b16      	ldr	r3, [pc, #88]	@ (8001790 <HAL_SPI_MspInit+0xc4>)
 8001738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800173a:	f003 0301 	and.w	r3, r3, #1
 800173e:	60bb      	str	r3, [r7, #8]
 8001740:	68bb      	ldr	r3, [r7, #8]
    /**SPI5 GPIO Configuration
    PB0     ------> SPI5_SCK
    PA10     ------> SPI5_MOSI
    PA12     ------> SPI5_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001742:	2301      	movs	r3, #1
 8001744:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001746:	2302      	movs	r3, #2
 8001748:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174a:	2300      	movs	r3, #0
 800174c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800174e:	2303      	movs	r3, #3
 8001750:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI5;
 8001752:	2306      	movs	r3, #6
 8001754:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001756:	f107 0314 	add.w	r3, r7, #20
 800175a:	4619      	mov	r1, r3
 800175c:	480d      	ldr	r0, [pc, #52]	@ (8001794 <HAL_SPI_MspInit+0xc8>)
 800175e:	f000 febf 	bl	80024e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8001762:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001766:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001768:	2302      	movs	r3, #2
 800176a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176c:	2300      	movs	r3, #0
 800176e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001770:	2303      	movs	r3, #3
 8001772:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI5;
 8001774:	2306      	movs	r3, #6
 8001776:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001778:	f107 0314 	add.w	r3, r7, #20
 800177c:	4619      	mov	r1, r3
 800177e:	4806      	ldr	r0, [pc, #24]	@ (8001798 <HAL_SPI_MspInit+0xcc>)
 8001780:	f000 feae 	bl	80024e0 <HAL_GPIO_Init>

  /* USER CODE END SPI5_MspInit 1 */

  }

}
 8001784:	bf00      	nop
 8001786:	3728      	adds	r7, #40	@ 0x28
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}
 800178c:	40015000 	.word	0x40015000
 8001790:	40023800 	.word	0x40023800
 8001794:	40020400 	.word	0x40020400
 8001798:	40020000 	.word	0x40020000

0800179c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b08a      	sub	sp, #40	@ 0x28
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017a4:	f107 0314 	add.w	r3, r7, #20
 80017a8:	2200      	movs	r2, #0
 80017aa:	601a      	str	r2, [r3, #0]
 80017ac:	605a      	str	r2, [r3, #4]
 80017ae:	609a      	str	r2, [r3, #8]
 80017b0:	60da      	str	r2, [r3, #12]
 80017b2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a19      	ldr	r2, [pc, #100]	@ (8001820 <HAL_UART_MspInit+0x84>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d12b      	bne.n	8001816 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80017be:	2300      	movs	r3, #0
 80017c0:	613b      	str	r3, [r7, #16]
 80017c2:	4b18      	ldr	r3, [pc, #96]	@ (8001824 <HAL_UART_MspInit+0x88>)
 80017c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017c6:	4a17      	ldr	r2, [pc, #92]	@ (8001824 <HAL_UART_MspInit+0x88>)
 80017c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80017cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80017ce:	4b15      	ldr	r3, [pc, #84]	@ (8001824 <HAL_UART_MspInit+0x88>)
 80017d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017d6:	613b      	str	r3, [r7, #16]
 80017d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017da:	2300      	movs	r3, #0
 80017dc:	60fb      	str	r3, [r7, #12]
 80017de:	4b11      	ldr	r3, [pc, #68]	@ (8001824 <HAL_UART_MspInit+0x88>)
 80017e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017e2:	4a10      	ldr	r2, [pc, #64]	@ (8001824 <HAL_UART_MspInit+0x88>)
 80017e4:	f043 0301 	orr.w	r3, r3, #1
 80017e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80017ea:	4b0e      	ldr	r3, [pc, #56]	@ (8001824 <HAL_UART_MspInit+0x88>)
 80017ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ee:	f003 0301 	and.w	r3, r3, #1
 80017f2:	60fb      	str	r3, [r7, #12]
 80017f4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80017f6:	230c      	movs	r3, #12
 80017f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017fa:	2302      	movs	r3, #2
 80017fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fe:	2300      	movs	r3, #0
 8001800:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001802:	2303      	movs	r3, #3
 8001804:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001806:	2307      	movs	r3, #7
 8001808:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800180a:	f107 0314 	add.w	r3, r7, #20
 800180e:	4619      	mov	r1, r3
 8001810:	4805      	ldr	r0, [pc, #20]	@ (8001828 <HAL_UART_MspInit+0x8c>)
 8001812:	f000 fe65 	bl	80024e0 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001816:	bf00      	nop
 8001818:	3728      	adds	r7, #40	@ 0x28
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	40004400 	.word	0x40004400
 8001824:	40023800 	.word	0x40023800
 8001828:	40020000 	.word	0x40020000

0800182c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001830:	bf00      	nop
 8001832:	e7fd      	b.n	8001830 <NMI_Handler+0x4>

08001834 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001838:	bf00      	nop
 800183a:	e7fd      	b.n	8001838 <HardFault_Handler+0x4>

0800183c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800183c:	b480      	push	{r7}
 800183e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001840:	bf00      	nop
 8001842:	e7fd      	b.n	8001840 <MemManage_Handler+0x4>

08001844 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001848:	bf00      	nop
 800184a:	e7fd      	b.n	8001848 <BusFault_Handler+0x4>

0800184c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001850:	bf00      	nop
 8001852:	e7fd      	b.n	8001850 <UsageFault_Handler+0x4>

08001854 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001854:	b480      	push	{r7}
 8001856:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001858:	bf00      	nop
 800185a:	46bd      	mov	sp, r7
 800185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001860:	4770      	bx	lr

08001862 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001862:	b480      	push	{r7}
 8001864:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001866:	bf00      	nop
 8001868:	46bd      	mov	sp, r7
 800186a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186e:	4770      	bx	lr

08001870 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001870:	b480      	push	{r7}
 8001872:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001874:	bf00      	nop
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr

0800187e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800187e:	b580      	push	{r7, lr}
 8001880:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001882:	f000 f8f7 	bl	8001a74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001886:	bf00      	nop
 8001888:	bd80      	pop	{r7, pc}
	...

0800188c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_rx);
 8001890:	4802      	ldr	r0, [pc, #8]	@ (800189c <DMA1_Stream0_IRQHandler+0x10>)
 8001892:	f000 fbbb 	bl	800200c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001896:	bf00      	nop
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	200002a0 	.word	0x200002a0

080018a0 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 80018a4:	4802      	ldr	r0, [pc, #8]	@ (80018b0 <DMA1_Stream3_IRQHandler+0x10>)
 80018a6:	f000 fbb1 	bl	800200c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80018aa:	bf00      	nop
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	20000240 	.word	0x20000240

080018b4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(button_Pin);
 80018b8:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80018bc:	f000 ffae 	bl	800281c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80018c0:	bf00      	nop
 80018c2:	bd80      	pop	{r7, pc}

080018c4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80018c8:	4802      	ldr	r0, [pc, #8]	@ (80018d4 <DMA2_Stream0_IRQHandler+0x10>)
 80018ca:	f000 fb9f 	bl	800200c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80018ce:	bf00      	nop
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	200001e0 	.word	0x200001e0

080018d8 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_rx);
 80018dc:	4802      	ldr	r0, [pc, #8]	@ (80018e8 <DMA2_Stream3_IRQHandler+0x10>)
 80018de:	f000 fb95 	bl	800200c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80018e2:	bf00      	nop
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	20000300 	.word	0x20000300

080018ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b086      	sub	sp, #24
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018f4:	4a14      	ldr	r2, [pc, #80]	@ (8001948 <_sbrk+0x5c>)
 80018f6:	4b15      	ldr	r3, [pc, #84]	@ (800194c <_sbrk+0x60>)
 80018f8:	1ad3      	subs	r3, r2, r3
 80018fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001900:	4b13      	ldr	r3, [pc, #76]	@ (8001950 <_sbrk+0x64>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d102      	bne.n	800190e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001908:	4b11      	ldr	r3, [pc, #68]	@ (8001950 <_sbrk+0x64>)
 800190a:	4a12      	ldr	r2, [pc, #72]	@ (8001954 <_sbrk+0x68>)
 800190c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800190e:	4b10      	ldr	r3, [pc, #64]	@ (8001950 <_sbrk+0x64>)
 8001910:	681a      	ldr	r2, [r3, #0]
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	4413      	add	r3, r2
 8001916:	693a      	ldr	r2, [r7, #16]
 8001918:	429a      	cmp	r2, r3
 800191a:	d207      	bcs.n	800192c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800191c:	f006 ffd6 	bl	80088cc <__errno>
 8001920:	4603      	mov	r3, r0
 8001922:	220c      	movs	r2, #12
 8001924:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001926:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800192a:	e009      	b.n	8001940 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800192c:	4b08      	ldr	r3, [pc, #32]	@ (8001950 <_sbrk+0x64>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001932:	4b07      	ldr	r3, [pc, #28]	@ (8001950 <_sbrk+0x64>)
 8001934:	681a      	ldr	r2, [r3, #0]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	4413      	add	r3, r2
 800193a:	4a05      	ldr	r2, [pc, #20]	@ (8001950 <_sbrk+0x64>)
 800193c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800193e:	68fb      	ldr	r3, [r7, #12]
}
 8001940:	4618      	mov	r0, r3
 8001942:	3718      	adds	r7, #24
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}
 8001948:	20020000 	.word	0x20020000
 800194c:	00000400 	.word	0x00000400
 8001950:	2000497c 	.word	0x2000497c
 8001954:	20004b18 	.word	0x20004b18

08001958 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800195c:	4b06      	ldr	r3, [pc, #24]	@ (8001978 <SystemInit+0x20>)
 800195e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001962:	4a05      	ldr	r2, [pc, #20]	@ (8001978 <SystemInit+0x20>)
 8001964:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001968:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800196c:	bf00      	nop
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr
 8001976:	bf00      	nop
 8001978:	e000ed00 	.word	0xe000ed00

0800197c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800197c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80019b4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001980:	f7ff ffea 	bl	8001958 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001984:	480c      	ldr	r0, [pc, #48]	@ (80019b8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001986:	490d      	ldr	r1, [pc, #52]	@ (80019bc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001988:	4a0d      	ldr	r2, [pc, #52]	@ (80019c0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800198a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800198c:	e002      	b.n	8001994 <LoopCopyDataInit>

0800198e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800198e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001990:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001992:	3304      	adds	r3, #4

08001994 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001994:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001996:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001998:	d3f9      	bcc.n	800198e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800199a:	4a0a      	ldr	r2, [pc, #40]	@ (80019c4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800199c:	4c0a      	ldr	r4, [pc, #40]	@ (80019c8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800199e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019a0:	e001      	b.n	80019a6 <LoopFillZerobss>

080019a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019a4:	3204      	adds	r2, #4

080019a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019a8:	d3fb      	bcc.n	80019a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80019aa:	f006 ff95 	bl	80088d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019ae:	f7ff f803 	bl	80009b8 <main>
  bx  lr    
 80019b2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80019b4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80019b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019bc:	200000a4 	.word	0x200000a4
  ldr r2, =_sidata
 80019c0:	08009480 	.word	0x08009480
  ldr r2, =_sbss
 80019c4:	200000a4 	.word	0x200000a4
  ldr r4, =_ebss
 80019c8:	20004b14 	.word	0x20004b14

080019cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019cc:	e7fe      	b.n	80019cc <ADC_IRQHandler>
	...

080019d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80019d4:	4b0e      	ldr	r3, [pc, #56]	@ (8001a10 <HAL_Init+0x40>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a0d      	ldr	r2, [pc, #52]	@ (8001a10 <HAL_Init+0x40>)
 80019da:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80019de:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80019e0:	4b0b      	ldr	r3, [pc, #44]	@ (8001a10 <HAL_Init+0x40>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4a0a      	ldr	r2, [pc, #40]	@ (8001a10 <HAL_Init+0x40>)
 80019e6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80019ea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019ec:	4b08      	ldr	r3, [pc, #32]	@ (8001a10 <HAL_Init+0x40>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a07      	ldr	r2, [pc, #28]	@ (8001a10 <HAL_Init+0x40>)
 80019f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019f8:	2003      	movs	r0, #3
 80019fa:	f000 f94f 	bl	8001c9c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019fe:	2000      	movs	r0, #0
 8001a00:	f000 f808 	bl	8001a14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a04:	f7ff fc18 	bl	8001238 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a08:	2300      	movs	r3, #0
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	40023c00 	.word	0x40023c00

08001a14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b082      	sub	sp, #8
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a1c:	4b12      	ldr	r3, [pc, #72]	@ (8001a68 <HAL_InitTick+0x54>)
 8001a1e:	681a      	ldr	r2, [r3, #0]
 8001a20:	4b12      	ldr	r3, [pc, #72]	@ (8001a6c <HAL_InitTick+0x58>)
 8001a22:	781b      	ldrb	r3, [r3, #0]
 8001a24:	4619      	mov	r1, r3
 8001a26:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a32:	4618      	mov	r0, r3
 8001a34:	f000 f967 	bl	8001d06 <HAL_SYSTICK_Config>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d001      	beq.n	8001a42 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	e00e      	b.n	8001a60 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	2b0f      	cmp	r3, #15
 8001a46:	d80a      	bhi.n	8001a5e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a48:	2200      	movs	r2, #0
 8001a4a:	6879      	ldr	r1, [r7, #4]
 8001a4c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001a50:	f000 f92f 	bl	8001cb2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a54:	4a06      	ldr	r2, [pc, #24]	@ (8001a70 <HAL_InitTick+0x5c>)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	e000      	b.n	8001a60 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a5e:	2301      	movs	r3, #1
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	3708      	adds	r7, #8
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	20000030 	.word	0x20000030
 8001a6c:	20000038 	.word	0x20000038
 8001a70:	20000034 	.word	0x20000034

08001a74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a74:	b480      	push	{r7}
 8001a76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a78:	4b06      	ldr	r3, [pc, #24]	@ (8001a94 <HAL_IncTick+0x20>)
 8001a7a:	781b      	ldrb	r3, [r3, #0]
 8001a7c:	461a      	mov	r2, r3
 8001a7e:	4b06      	ldr	r3, [pc, #24]	@ (8001a98 <HAL_IncTick+0x24>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4413      	add	r3, r2
 8001a84:	4a04      	ldr	r2, [pc, #16]	@ (8001a98 <HAL_IncTick+0x24>)
 8001a86:	6013      	str	r3, [r2, #0]
}
 8001a88:	bf00      	nop
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr
 8001a92:	bf00      	nop
 8001a94:	20000038 	.word	0x20000038
 8001a98:	20004980 	.word	0x20004980

08001a9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	af00      	add	r7, sp, #0
  return uwTick;
 8001aa0:	4b03      	ldr	r3, [pc, #12]	@ (8001ab0 <HAL_GetTick+0x14>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr
 8001aae:	bf00      	nop
 8001ab0:	20004980 	.word	0x20004980

08001ab4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b084      	sub	sp, #16
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001abc:	f7ff ffee 	bl	8001a9c <HAL_GetTick>
 8001ac0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001acc:	d005      	beq.n	8001ada <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ace:	4b0a      	ldr	r3, [pc, #40]	@ (8001af8 <HAL_Delay+0x44>)
 8001ad0:	781b      	ldrb	r3, [r3, #0]
 8001ad2:	461a      	mov	r2, r3
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	4413      	add	r3, r2
 8001ad8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001ada:	bf00      	nop
 8001adc:	f7ff ffde 	bl	8001a9c <HAL_GetTick>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	68bb      	ldr	r3, [r7, #8]
 8001ae4:	1ad3      	subs	r3, r2, r3
 8001ae6:	68fa      	ldr	r2, [r7, #12]
 8001ae8:	429a      	cmp	r2, r3
 8001aea:	d8f7      	bhi.n	8001adc <HAL_Delay+0x28>
  {
  }
}
 8001aec:	bf00      	nop
 8001aee:	bf00      	nop
 8001af0:	3710      	adds	r7, #16
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	20000038 	.word	0x20000038

08001afc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b085      	sub	sp, #20
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	f003 0307 	and.w	r3, r3, #7
 8001b0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b0c:	4b0c      	ldr	r3, [pc, #48]	@ (8001b40 <__NVIC_SetPriorityGrouping+0x44>)
 8001b0e:	68db      	ldr	r3, [r3, #12]
 8001b10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b12:	68ba      	ldr	r2, [r7, #8]
 8001b14:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b18:	4013      	ands	r3, r2
 8001b1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b20:	68bb      	ldr	r3, [r7, #8]
 8001b22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b24:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001b28:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b2e:	4a04      	ldr	r2, [pc, #16]	@ (8001b40 <__NVIC_SetPriorityGrouping+0x44>)
 8001b30:	68bb      	ldr	r3, [r7, #8]
 8001b32:	60d3      	str	r3, [r2, #12]
}
 8001b34:	bf00      	nop
 8001b36:	3714      	adds	r7, #20
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3e:	4770      	bx	lr
 8001b40:	e000ed00 	.word	0xe000ed00

08001b44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b44:	b480      	push	{r7}
 8001b46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b48:	4b04      	ldr	r3, [pc, #16]	@ (8001b5c <__NVIC_GetPriorityGrouping+0x18>)
 8001b4a:	68db      	ldr	r3, [r3, #12]
 8001b4c:	0a1b      	lsrs	r3, r3, #8
 8001b4e:	f003 0307 	and.w	r3, r3, #7
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	46bd      	mov	sp, r7
 8001b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5a:	4770      	bx	lr
 8001b5c:	e000ed00 	.word	0xe000ed00

08001b60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b083      	sub	sp, #12
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	4603      	mov	r3, r0
 8001b68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	db0b      	blt.n	8001b8a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b72:	79fb      	ldrb	r3, [r7, #7]
 8001b74:	f003 021f 	and.w	r2, r3, #31
 8001b78:	4907      	ldr	r1, [pc, #28]	@ (8001b98 <__NVIC_EnableIRQ+0x38>)
 8001b7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b7e:	095b      	lsrs	r3, r3, #5
 8001b80:	2001      	movs	r0, #1
 8001b82:	fa00 f202 	lsl.w	r2, r0, r2
 8001b86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001b8a:	bf00      	nop
 8001b8c:	370c      	adds	r7, #12
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr
 8001b96:	bf00      	nop
 8001b98:	e000e100 	.word	0xe000e100

08001b9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b083      	sub	sp, #12
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	6039      	str	r1, [r7, #0]
 8001ba6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ba8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	db0a      	blt.n	8001bc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	b2da      	uxtb	r2, r3
 8001bb4:	490c      	ldr	r1, [pc, #48]	@ (8001be8 <__NVIC_SetPriority+0x4c>)
 8001bb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bba:	0112      	lsls	r2, r2, #4
 8001bbc:	b2d2      	uxtb	r2, r2
 8001bbe:	440b      	add	r3, r1
 8001bc0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bc4:	e00a      	b.n	8001bdc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	b2da      	uxtb	r2, r3
 8001bca:	4908      	ldr	r1, [pc, #32]	@ (8001bec <__NVIC_SetPriority+0x50>)
 8001bcc:	79fb      	ldrb	r3, [r7, #7]
 8001bce:	f003 030f 	and.w	r3, r3, #15
 8001bd2:	3b04      	subs	r3, #4
 8001bd4:	0112      	lsls	r2, r2, #4
 8001bd6:	b2d2      	uxtb	r2, r2
 8001bd8:	440b      	add	r3, r1
 8001bda:	761a      	strb	r2, [r3, #24]
}
 8001bdc:	bf00      	nop
 8001bde:	370c      	adds	r7, #12
 8001be0:	46bd      	mov	sp, r7
 8001be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be6:	4770      	bx	lr
 8001be8:	e000e100 	.word	0xe000e100
 8001bec:	e000ed00 	.word	0xe000ed00

08001bf0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b089      	sub	sp, #36	@ 0x24
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	60f8      	str	r0, [r7, #12]
 8001bf8:	60b9      	str	r1, [r7, #8]
 8001bfa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	f003 0307 	and.w	r3, r3, #7
 8001c02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c04:	69fb      	ldr	r3, [r7, #28]
 8001c06:	f1c3 0307 	rsb	r3, r3, #7
 8001c0a:	2b04      	cmp	r3, #4
 8001c0c:	bf28      	it	cs
 8001c0e:	2304      	movcs	r3, #4
 8001c10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c12:	69fb      	ldr	r3, [r7, #28]
 8001c14:	3304      	adds	r3, #4
 8001c16:	2b06      	cmp	r3, #6
 8001c18:	d902      	bls.n	8001c20 <NVIC_EncodePriority+0x30>
 8001c1a:	69fb      	ldr	r3, [r7, #28]
 8001c1c:	3b03      	subs	r3, #3
 8001c1e:	e000      	b.n	8001c22 <NVIC_EncodePriority+0x32>
 8001c20:	2300      	movs	r3, #0
 8001c22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c24:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001c28:	69bb      	ldr	r3, [r7, #24]
 8001c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2e:	43da      	mvns	r2, r3
 8001c30:	68bb      	ldr	r3, [r7, #8]
 8001c32:	401a      	ands	r2, r3
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c38:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	fa01 f303 	lsl.w	r3, r1, r3
 8001c42:	43d9      	mvns	r1, r3
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c48:	4313      	orrs	r3, r2
         );
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	3724      	adds	r7, #36	@ 0x24
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c54:	4770      	bx	lr
	...

08001c58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b082      	sub	sp, #8
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	3b01      	subs	r3, #1
 8001c64:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001c68:	d301      	bcc.n	8001c6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e00f      	b.n	8001c8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c6e:	4a0a      	ldr	r2, [pc, #40]	@ (8001c98 <SysTick_Config+0x40>)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	3b01      	subs	r3, #1
 8001c74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c76:	210f      	movs	r1, #15
 8001c78:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001c7c:	f7ff ff8e 	bl	8001b9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c80:	4b05      	ldr	r3, [pc, #20]	@ (8001c98 <SysTick_Config+0x40>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c86:	4b04      	ldr	r3, [pc, #16]	@ (8001c98 <SysTick_Config+0x40>)
 8001c88:	2207      	movs	r2, #7
 8001c8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c8c:	2300      	movs	r3, #0
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	3708      	adds	r7, #8
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	e000e010 	.word	0xe000e010

08001c9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b082      	sub	sp, #8
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ca4:	6878      	ldr	r0, [r7, #4]
 8001ca6:	f7ff ff29 	bl	8001afc <__NVIC_SetPriorityGrouping>
}
 8001caa:	bf00      	nop
 8001cac:	3708      	adds	r7, #8
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}

08001cb2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cb2:	b580      	push	{r7, lr}
 8001cb4:	b086      	sub	sp, #24
 8001cb6:	af00      	add	r7, sp, #0
 8001cb8:	4603      	mov	r3, r0
 8001cba:	60b9      	str	r1, [r7, #8]
 8001cbc:	607a      	str	r2, [r7, #4]
 8001cbe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001cc4:	f7ff ff3e 	bl	8001b44 <__NVIC_GetPriorityGrouping>
 8001cc8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cca:	687a      	ldr	r2, [r7, #4]
 8001ccc:	68b9      	ldr	r1, [r7, #8]
 8001cce:	6978      	ldr	r0, [r7, #20]
 8001cd0:	f7ff ff8e 	bl	8001bf0 <NVIC_EncodePriority>
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cda:	4611      	mov	r1, r2
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f7ff ff5d 	bl	8001b9c <__NVIC_SetPriority>
}
 8001ce2:	bf00      	nop
 8001ce4:	3718      	adds	r7, #24
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}

08001cea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cea:	b580      	push	{r7, lr}
 8001cec:	b082      	sub	sp, #8
 8001cee:	af00      	add	r7, sp, #0
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f7ff ff31 	bl	8001b60 <__NVIC_EnableIRQ>
}
 8001cfe:	bf00      	nop
 8001d00:	3708      	adds	r7, #8
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}

08001d06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d06:	b580      	push	{r7, lr}
 8001d08:	b082      	sub	sp, #8
 8001d0a:	af00      	add	r7, sp, #0
 8001d0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d0e:	6878      	ldr	r0, [r7, #4]
 8001d10:	f7ff ffa2 	bl	8001c58 <SysTick_Config>
 8001d14:	4603      	mov	r3, r0
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	3708      	adds	r7, #8
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
	...

08001d20 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b086      	sub	sp, #24
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001d2c:	f7ff feb6 	bl	8001a9c <HAL_GetTick>
 8001d30:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d101      	bne.n	8001d3c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	e099      	b.n	8001e70 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2202      	movs	r2, #2
 8001d40:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2200      	movs	r2, #0
 8001d48:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	681a      	ldr	r2, [r3, #0]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f022 0201 	bic.w	r2, r2, #1
 8001d5a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d5c:	e00f      	b.n	8001d7e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001d5e:	f7ff fe9d 	bl	8001a9c <HAL_GetTick>
 8001d62:	4602      	mov	r2, r0
 8001d64:	693b      	ldr	r3, [r7, #16]
 8001d66:	1ad3      	subs	r3, r2, r3
 8001d68:	2b05      	cmp	r3, #5
 8001d6a:	d908      	bls.n	8001d7e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2220      	movs	r2, #32
 8001d70:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2203      	movs	r2, #3
 8001d76:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001d7a:	2303      	movs	r3, #3
 8001d7c:	e078      	b.n	8001e70 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f003 0301 	and.w	r3, r3, #1
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d1e8      	bne.n	8001d5e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001d94:	697a      	ldr	r2, [r7, #20]
 8001d96:	4b38      	ldr	r3, [pc, #224]	@ (8001e78 <HAL_DMA_Init+0x158>)
 8001d98:	4013      	ands	r3, r2
 8001d9a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	685a      	ldr	r2, [r3, #4]
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	689b      	ldr	r3, [r3, #8]
 8001da4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001daa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	691b      	ldr	r3, [r3, #16]
 8001db0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001db6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	699b      	ldr	r3, [r3, #24]
 8001dbc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001dc2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6a1b      	ldr	r3, [r3, #32]
 8001dc8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001dca:	697a      	ldr	r2, [r7, #20]
 8001dcc:	4313      	orrs	r3, r2
 8001dce:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dd4:	2b04      	cmp	r3, #4
 8001dd6:	d107      	bne.n	8001de8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001de0:	4313      	orrs	r3, r2
 8001de2:	697a      	ldr	r2, [r7, #20]
 8001de4:	4313      	orrs	r3, r2
 8001de6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	697a      	ldr	r2, [r7, #20]
 8001dee:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	695b      	ldr	r3, [r3, #20]
 8001df6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001df8:	697b      	ldr	r3, [r7, #20]
 8001dfa:	f023 0307 	bic.w	r3, r3, #7
 8001dfe:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e04:	697a      	ldr	r2, [r7, #20]
 8001e06:	4313      	orrs	r3, r2
 8001e08:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e0e:	2b04      	cmp	r3, #4
 8001e10:	d117      	bne.n	8001e42 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e16:	697a      	ldr	r2, [r7, #20]
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d00e      	beq.n	8001e42 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001e24:	6878      	ldr	r0, [r7, #4]
 8001e26:	f000 fadf 	bl	80023e8 <DMA_CheckFifoParam>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d008      	beq.n	8001e42 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2240      	movs	r2, #64	@ 0x40
 8001e34:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2201      	movs	r2, #1
 8001e3a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e016      	b.n	8001e70 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	697a      	ldr	r2, [r7, #20]
 8001e48:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001e4a:	6878      	ldr	r0, [r7, #4]
 8001e4c:	f000 fa96 	bl	800237c <DMA_CalcBaseAndBitshift>
 8001e50:	4603      	mov	r3, r0
 8001e52:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e58:	223f      	movs	r2, #63	@ 0x3f
 8001e5a:	409a      	lsls	r2, r3
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2200      	movs	r2, #0
 8001e64:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2201      	movs	r2, #1
 8001e6a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001e6e:	2300      	movs	r3, #0
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	3718      	adds	r7, #24
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}
 8001e78:	f010803f 	.word	0xf010803f

08001e7c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b086      	sub	sp, #24
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	60f8      	str	r0, [r7, #12]
 8001e84:	60b9      	str	r1, [r7, #8]
 8001e86:	607a      	str	r2, [r7, #4]
 8001e88:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e92:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001e9a:	2b01      	cmp	r3, #1
 8001e9c:	d101      	bne.n	8001ea2 <HAL_DMA_Start_IT+0x26>
 8001e9e:	2302      	movs	r3, #2
 8001ea0:	e040      	b.n	8001f24 <HAL_DMA_Start_IT+0xa8>
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001eb0:	b2db      	uxtb	r3, r3
 8001eb2:	2b01      	cmp	r3, #1
 8001eb4:	d12f      	bne.n	8001f16 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	2202      	movs	r2, #2
 8001eba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	687a      	ldr	r2, [r7, #4]
 8001ec8:	68b9      	ldr	r1, [r7, #8]
 8001eca:	68f8      	ldr	r0, [r7, #12]
 8001ecc:	f000 fa28 	bl	8002320 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ed4:	223f      	movs	r2, #63	@ 0x3f
 8001ed6:	409a      	lsls	r2, r3
 8001ed8:	693b      	ldr	r3, [r7, #16]
 8001eda:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	681a      	ldr	r2, [r3, #0]
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f042 0216 	orr.w	r2, r2, #22
 8001eea:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d007      	beq.n	8001f04 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	681a      	ldr	r2, [r3, #0]
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f042 0208 	orr.w	r2, r2, #8
 8001f02:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	681a      	ldr	r2, [r3, #0]
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f042 0201 	orr.w	r2, r2, #1
 8001f12:	601a      	str	r2, [r3, #0]
 8001f14:	e005      	b.n	8001f22 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	2200      	movs	r2, #0
 8001f1a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001f1e:	2302      	movs	r3, #2
 8001f20:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001f22:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	3718      	adds	r7, #24
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}

08001f2c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b084      	sub	sp, #16
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f38:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001f3a:	f7ff fdaf 	bl	8001a9c <HAL_GetTick>
 8001f3e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001f46:	b2db      	uxtb	r3, r3
 8001f48:	2b02      	cmp	r3, #2
 8001f4a:	d008      	beq.n	8001f5e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2280      	movs	r2, #128	@ 0x80
 8001f50:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2200      	movs	r2, #0
 8001f56:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e052      	b.n	8002004 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	681a      	ldr	r2, [r3, #0]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f022 0216 	bic.w	r2, r2, #22
 8001f6c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	695a      	ldr	r2, [r3, #20]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001f7c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d103      	bne.n	8001f8e <HAL_DMA_Abort+0x62>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d007      	beq.n	8001f9e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	681a      	ldr	r2, [r3, #0]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f022 0208 	bic.w	r2, r2, #8
 8001f9c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	681a      	ldr	r2, [r3, #0]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f022 0201 	bic.w	r2, r2, #1
 8001fac:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001fae:	e013      	b.n	8001fd8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001fb0:	f7ff fd74 	bl	8001a9c <HAL_GetTick>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	68bb      	ldr	r3, [r7, #8]
 8001fb8:	1ad3      	subs	r3, r2, r3
 8001fba:	2b05      	cmp	r3, #5
 8001fbc:	d90c      	bls.n	8001fd8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2220      	movs	r2, #32
 8001fc2:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2203      	movs	r2, #3
 8001fc8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2200      	movs	r2, #0
 8001fd0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001fd4:	2303      	movs	r3, #3
 8001fd6:	e015      	b.n	8002004 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f003 0301 	and.w	r3, r3, #1
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d1e4      	bne.n	8001fb0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fea:	223f      	movs	r2, #63	@ 0x3f
 8001fec:	409a      	lsls	r2, r3
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002002:	2300      	movs	r3, #0
}
 8002004:	4618      	mov	r0, r3
 8002006:	3710      	adds	r7, #16
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}

0800200c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b086      	sub	sp, #24
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002014:	2300      	movs	r3, #0
 8002016:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002018:	4b8e      	ldr	r3, [pc, #568]	@ (8002254 <HAL_DMA_IRQHandler+0x248>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a8e      	ldr	r2, [pc, #568]	@ (8002258 <HAL_DMA_IRQHandler+0x24c>)
 800201e:	fba2 2303 	umull	r2, r3, r2, r3
 8002022:	0a9b      	lsrs	r3, r3, #10
 8002024:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800202a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002036:	2208      	movs	r2, #8
 8002038:	409a      	lsls	r2, r3
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	4013      	ands	r3, r2
 800203e:	2b00      	cmp	r3, #0
 8002040:	d01a      	beq.n	8002078 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f003 0304 	and.w	r3, r3, #4
 800204c:	2b00      	cmp	r3, #0
 800204e:	d013      	beq.n	8002078 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	681a      	ldr	r2, [r3, #0]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f022 0204 	bic.w	r2, r2, #4
 800205e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002064:	2208      	movs	r2, #8
 8002066:	409a      	lsls	r2, r3
 8002068:	693b      	ldr	r3, [r7, #16]
 800206a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002070:	f043 0201 	orr.w	r2, r3, #1
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800207c:	2201      	movs	r2, #1
 800207e:	409a      	lsls	r2, r3
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	4013      	ands	r3, r2
 8002084:	2b00      	cmp	r3, #0
 8002086:	d012      	beq.n	80020ae <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	695b      	ldr	r3, [r3, #20]
 800208e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002092:	2b00      	cmp	r3, #0
 8002094:	d00b      	beq.n	80020ae <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800209a:	2201      	movs	r2, #1
 800209c:	409a      	lsls	r2, r3
 800209e:	693b      	ldr	r3, [r7, #16]
 80020a0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020a6:	f043 0202 	orr.w	r2, r3, #2
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020b2:	2204      	movs	r2, #4
 80020b4:	409a      	lsls	r2, r3
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	4013      	ands	r3, r2
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d012      	beq.n	80020e4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f003 0302 	and.w	r3, r3, #2
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d00b      	beq.n	80020e4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020d0:	2204      	movs	r2, #4
 80020d2:	409a      	lsls	r2, r3
 80020d4:	693b      	ldr	r3, [r7, #16]
 80020d6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020dc:	f043 0204 	orr.w	r2, r3, #4
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020e8:	2210      	movs	r2, #16
 80020ea:	409a      	lsls	r2, r3
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	4013      	ands	r3, r2
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d043      	beq.n	800217c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f003 0308 	and.w	r3, r3, #8
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d03c      	beq.n	800217c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002106:	2210      	movs	r2, #16
 8002108:	409a      	lsls	r2, r3
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002118:	2b00      	cmp	r3, #0
 800211a:	d018      	beq.n	800214e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002126:	2b00      	cmp	r3, #0
 8002128:	d108      	bne.n	800213c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800212e:	2b00      	cmp	r3, #0
 8002130:	d024      	beq.n	800217c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002136:	6878      	ldr	r0, [r7, #4]
 8002138:	4798      	blx	r3
 800213a:	e01f      	b.n	800217c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002140:	2b00      	cmp	r3, #0
 8002142:	d01b      	beq.n	800217c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002148:	6878      	ldr	r0, [r7, #4]
 800214a:	4798      	blx	r3
 800214c:	e016      	b.n	800217c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002158:	2b00      	cmp	r3, #0
 800215a:	d107      	bne.n	800216c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	681a      	ldr	r2, [r3, #0]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f022 0208 	bic.w	r2, r2, #8
 800216a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002170:	2b00      	cmp	r3, #0
 8002172:	d003      	beq.n	800217c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002178:	6878      	ldr	r0, [r7, #4]
 800217a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002180:	2220      	movs	r2, #32
 8002182:	409a      	lsls	r2, r3
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	4013      	ands	r3, r2
 8002188:	2b00      	cmp	r3, #0
 800218a:	f000 808f 	beq.w	80022ac <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f003 0310 	and.w	r3, r3, #16
 8002198:	2b00      	cmp	r3, #0
 800219a:	f000 8087 	beq.w	80022ac <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021a2:	2220      	movs	r2, #32
 80021a4:	409a      	lsls	r2, r3
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80021b0:	b2db      	uxtb	r3, r3
 80021b2:	2b05      	cmp	r3, #5
 80021b4:	d136      	bne.n	8002224 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	681a      	ldr	r2, [r3, #0]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f022 0216 	bic.w	r2, r2, #22
 80021c4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	695a      	ldr	r2, [r3, #20]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80021d4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d103      	bne.n	80021e6 <HAL_DMA_IRQHandler+0x1da>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d007      	beq.n	80021f6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	681a      	ldr	r2, [r3, #0]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f022 0208 	bic.w	r2, r2, #8
 80021f4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021fa:	223f      	movs	r2, #63	@ 0x3f
 80021fc:	409a      	lsls	r2, r3
 80021fe:	693b      	ldr	r3, [r7, #16]
 8002200:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2201      	movs	r2, #1
 8002206:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2200      	movs	r2, #0
 800220e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002216:	2b00      	cmp	r3, #0
 8002218:	d07e      	beq.n	8002318 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800221e:	6878      	ldr	r0, [r7, #4]
 8002220:	4798      	blx	r3
        }
        return;
 8002222:	e079      	b.n	8002318 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800222e:	2b00      	cmp	r3, #0
 8002230:	d01d      	beq.n	800226e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800223c:	2b00      	cmp	r3, #0
 800223e:	d10d      	bne.n	800225c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002244:	2b00      	cmp	r3, #0
 8002246:	d031      	beq.n	80022ac <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800224c:	6878      	ldr	r0, [r7, #4]
 800224e:	4798      	blx	r3
 8002250:	e02c      	b.n	80022ac <HAL_DMA_IRQHandler+0x2a0>
 8002252:	bf00      	nop
 8002254:	20000030 	.word	0x20000030
 8002258:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002260:	2b00      	cmp	r3, #0
 8002262:	d023      	beq.n	80022ac <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002268:	6878      	ldr	r0, [r7, #4]
 800226a:	4798      	blx	r3
 800226c:	e01e      	b.n	80022ac <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002278:	2b00      	cmp	r3, #0
 800227a:	d10f      	bne.n	800229c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	681a      	ldr	r2, [r3, #0]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f022 0210 	bic.w	r2, r2, #16
 800228a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2201      	movs	r2, #1
 8002290:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2200      	movs	r2, #0
 8002298:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d003      	beq.n	80022ac <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022a8:	6878      	ldr	r0, [r7, #4]
 80022aa:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d032      	beq.n	800231a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022b8:	f003 0301 	and.w	r3, r3, #1
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d022      	beq.n	8002306 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2205      	movs	r2, #5
 80022c4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	681a      	ldr	r2, [r3, #0]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f022 0201 	bic.w	r2, r2, #1
 80022d6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80022d8:	68bb      	ldr	r3, [r7, #8]
 80022da:	3301      	adds	r3, #1
 80022dc:	60bb      	str	r3, [r7, #8]
 80022de:	697a      	ldr	r2, [r7, #20]
 80022e0:	429a      	cmp	r2, r3
 80022e2:	d307      	bcc.n	80022f4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f003 0301 	and.w	r3, r3, #1
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d1f2      	bne.n	80022d8 <HAL_DMA_IRQHandler+0x2cc>
 80022f2:	e000      	b.n	80022f6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80022f4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2201      	movs	r2, #1
 80022fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2200      	movs	r2, #0
 8002302:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800230a:	2b00      	cmp	r3, #0
 800230c:	d005      	beq.n	800231a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002312:	6878      	ldr	r0, [r7, #4]
 8002314:	4798      	blx	r3
 8002316:	e000      	b.n	800231a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002318:	bf00      	nop
    }
  }
}
 800231a:	3718      	adds	r7, #24
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}

08002320 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002320:	b480      	push	{r7}
 8002322:	b085      	sub	sp, #20
 8002324:	af00      	add	r7, sp, #0
 8002326:	60f8      	str	r0, [r7, #12]
 8002328:	60b9      	str	r1, [r7, #8]
 800232a:	607a      	str	r2, [r7, #4]
 800232c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	681a      	ldr	r2, [r3, #0]
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800233c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	683a      	ldr	r2, [r7, #0]
 8002344:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	689b      	ldr	r3, [r3, #8]
 800234a:	2b40      	cmp	r3, #64	@ 0x40
 800234c:	d108      	bne.n	8002360 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	687a      	ldr	r2, [r7, #4]
 8002354:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	68ba      	ldr	r2, [r7, #8]
 800235c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800235e:	e007      	b.n	8002370 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	68ba      	ldr	r2, [r7, #8]
 8002366:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	687a      	ldr	r2, [r7, #4]
 800236e:	60da      	str	r2, [r3, #12]
}
 8002370:	bf00      	nop
 8002372:	3714      	adds	r7, #20
 8002374:	46bd      	mov	sp, r7
 8002376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237a:	4770      	bx	lr

0800237c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800237c:	b480      	push	{r7}
 800237e:	b085      	sub	sp, #20
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	b2db      	uxtb	r3, r3
 800238a:	3b10      	subs	r3, #16
 800238c:	4a14      	ldr	r2, [pc, #80]	@ (80023e0 <DMA_CalcBaseAndBitshift+0x64>)
 800238e:	fba2 2303 	umull	r2, r3, r2, r3
 8002392:	091b      	lsrs	r3, r3, #4
 8002394:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002396:	4a13      	ldr	r2, [pc, #76]	@ (80023e4 <DMA_CalcBaseAndBitshift+0x68>)
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	4413      	add	r3, r2
 800239c:	781b      	ldrb	r3, [r3, #0]
 800239e:	461a      	mov	r2, r3
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	2b03      	cmp	r3, #3
 80023a8:	d909      	bls.n	80023be <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80023b2:	f023 0303 	bic.w	r3, r3, #3
 80023b6:	1d1a      	adds	r2, r3, #4
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	659a      	str	r2, [r3, #88]	@ 0x58
 80023bc:	e007      	b.n	80023ce <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80023c6:	f023 0303 	bic.w	r3, r3, #3
 80023ca:	687a      	ldr	r2, [r7, #4]
 80023cc:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	3714      	adds	r7, #20
 80023d6:	46bd      	mov	sp, r7
 80023d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023dc:	4770      	bx	lr
 80023de:	bf00      	nop
 80023e0:	aaaaaaab 	.word	0xaaaaaaab
 80023e4:	080093b4 	.word	0x080093b4

080023e8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b085      	sub	sp, #20
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80023f0:	2300      	movs	r3, #0
 80023f2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023f8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	699b      	ldr	r3, [r3, #24]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d11f      	bne.n	8002442 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002402:	68bb      	ldr	r3, [r7, #8]
 8002404:	2b03      	cmp	r3, #3
 8002406:	d856      	bhi.n	80024b6 <DMA_CheckFifoParam+0xce>
 8002408:	a201      	add	r2, pc, #4	@ (adr r2, 8002410 <DMA_CheckFifoParam+0x28>)
 800240a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800240e:	bf00      	nop
 8002410:	08002421 	.word	0x08002421
 8002414:	08002433 	.word	0x08002433
 8002418:	08002421 	.word	0x08002421
 800241c:	080024b7 	.word	0x080024b7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002424:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002428:	2b00      	cmp	r3, #0
 800242a:	d046      	beq.n	80024ba <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800242c:	2301      	movs	r3, #1
 800242e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002430:	e043      	b.n	80024ba <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002436:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800243a:	d140      	bne.n	80024be <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800243c:	2301      	movs	r3, #1
 800243e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002440:	e03d      	b.n	80024be <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	699b      	ldr	r3, [r3, #24]
 8002446:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800244a:	d121      	bne.n	8002490 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	2b03      	cmp	r3, #3
 8002450:	d837      	bhi.n	80024c2 <DMA_CheckFifoParam+0xda>
 8002452:	a201      	add	r2, pc, #4	@ (adr r2, 8002458 <DMA_CheckFifoParam+0x70>)
 8002454:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002458:	08002469 	.word	0x08002469
 800245c:	0800246f 	.word	0x0800246f
 8002460:	08002469 	.word	0x08002469
 8002464:	08002481 	.word	0x08002481
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002468:	2301      	movs	r3, #1
 800246a:	73fb      	strb	r3, [r7, #15]
      break;
 800246c:	e030      	b.n	80024d0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002472:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002476:	2b00      	cmp	r3, #0
 8002478:	d025      	beq.n	80024c6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800247a:	2301      	movs	r3, #1
 800247c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800247e:	e022      	b.n	80024c6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002484:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002488:	d11f      	bne.n	80024ca <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800248e:	e01c      	b.n	80024ca <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002490:	68bb      	ldr	r3, [r7, #8]
 8002492:	2b02      	cmp	r3, #2
 8002494:	d903      	bls.n	800249e <DMA_CheckFifoParam+0xb6>
 8002496:	68bb      	ldr	r3, [r7, #8]
 8002498:	2b03      	cmp	r3, #3
 800249a:	d003      	beq.n	80024a4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800249c:	e018      	b.n	80024d0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800249e:	2301      	movs	r3, #1
 80024a0:	73fb      	strb	r3, [r7, #15]
      break;
 80024a2:	e015      	b.n	80024d0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024a8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d00e      	beq.n	80024ce <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80024b0:	2301      	movs	r3, #1
 80024b2:	73fb      	strb	r3, [r7, #15]
      break;
 80024b4:	e00b      	b.n	80024ce <DMA_CheckFifoParam+0xe6>
      break;
 80024b6:	bf00      	nop
 80024b8:	e00a      	b.n	80024d0 <DMA_CheckFifoParam+0xe8>
      break;
 80024ba:	bf00      	nop
 80024bc:	e008      	b.n	80024d0 <DMA_CheckFifoParam+0xe8>
      break;
 80024be:	bf00      	nop
 80024c0:	e006      	b.n	80024d0 <DMA_CheckFifoParam+0xe8>
      break;
 80024c2:	bf00      	nop
 80024c4:	e004      	b.n	80024d0 <DMA_CheckFifoParam+0xe8>
      break;
 80024c6:	bf00      	nop
 80024c8:	e002      	b.n	80024d0 <DMA_CheckFifoParam+0xe8>
      break;   
 80024ca:	bf00      	nop
 80024cc:	e000      	b.n	80024d0 <DMA_CheckFifoParam+0xe8>
      break;
 80024ce:	bf00      	nop
    }
  } 
  
  return status; 
 80024d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	3714      	adds	r7, #20
 80024d6:	46bd      	mov	sp, r7
 80024d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024dc:	4770      	bx	lr
 80024de:	bf00      	nop

080024e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b089      	sub	sp, #36	@ 0x24
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
 80024e8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80024ea:	2300      	movs	r3, #0
 80024ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80024ee:	2300      	movs	r3, #0
 80024f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80024f2:	2300      	movs	r3, #0
 80024f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024f6:	2300      	movs	r3, #0
 80024f8:	61fb      	str	r3, [r7, #28]
 80024fa:	e159      	b.n	80027b0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80024fc:	2201      	movs	r2, #1
 80024fe:	69fb      	ldr	r3, [r7, #28]
 8002500:	fa02 f303 	lsl.w	r3, r2, r3
 8002504:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	697a      	ldr	r2, [r7, #20]
 800250c:	4013      	ands	r3, r2
 800250e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002510:	693a      	ldr	r2, [r7, #16]
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	429a      	cmp	r2, r3
 8002516:	f040 8148 	bne.w	80027aa <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	f003 0303 	and.w	r3, r3, #3
 8002522:	2b01      	cmp	r3, #1
 8002524:	d005      	beq.n	8002532 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800252e:	2b02      	cmp	r3, #2
 8002530:	d130      	bne.n	8002594 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	689b      	ldr	r3, [r3, #8]
 8002536:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002538:	69fb      	ldr	r3, [r7, #28]
 800253a:	005b      	lsls	r3, r3, #1
 800253c:	2203      	movs	r2, #3
 800253e:	fa02 f303 	lsl.w	r3, r2, r3
 8002542:	43db      	mvns	r3, r3
 8002544:	69ba      	ldr	r2, [r7, #24]
 8002546:	4013      	ands	r3, r2
 8002548:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	68da      	ldr	r2, [r3, #12]
 800254e:	69fb      	ldr	r3, [r7, #28]
 8002550:	005b      	lsls	r3, r3, #1
 8002552:	fa02 f303 	lsl.w	r3, r2, r3
 8002556:	69ba      	ldr	r2, [r7, #24]
 8002558:	4313      	orrs	r3, r2
 800255a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	69ba      	ldr	r2, [r7, #24]
 8002560:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002568:	2201      	movs	r2, #1
 800256a:	69fb      	ldr	r3, [r7, #28]
 800256c:	fa02 f303 	lsl.w	r3, r2, r3
 8002570:	43db      	mvns	r3, r3
 8002572:	69ba      	ldr	r2, [r7, #24]
 8002574:	4013      	ands	r3, r2
 8002576:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	091b      	lsrs	r3, r3, #4
 800257e:	f003 0201 	and.w	r2, r3, #1
 8002582:	69fb      	ldr	r3, [r7, #28]
 8002584:	fa02 f303 	lsl.w	r3, r2, r3
 8002588:	69ba      	ldr	r2, [r7, #24]
 800258a:	4313      	orrs	r3, r2
 800258c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	69ba      	ldr	r2, [r7, #24]
 8002592:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	f003 0303 	and.w	r3, r3, #3
 800259c:	2b03      	cmp	r3, #3
 800259e:	d017      	beq.n	80025d0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	68db      	ldr	r3, [r3, #12]
 80025a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80025a6:	69fb      	ldr	r3, [r7, #28]
 80025a8:	005b      	lsls	r3, r3, #1
 80025aa:	2203      	movs	r2, #3
 80025ac:	fa02 f303 	lsl.w	r3, r2, r3
 80025b0:	43db      	mvns	r3, r3
 80025b2:	69ba      	ldr	r2, [r7, #24]
 80025b4:	4013      	ands	r3, r2
 80025b6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	689a      	ldr	r2, [r3, #8]
 80025bc:	69fb      	ldr	r3, [r7, #28]
 80025be:	005b      	lsls	r3, r3, #1
 80025c0:	fa02 f303 	lsl.w	r3, r2, r3
 80025c4:	69ba      	ldr	r2, [r7, #24]
 80025c6:	4313      	orrs	r3, r2
 80025c8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	69ba      	ldr	r2, [r7, #24]
 80025ce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	f003 0303 	and.w	r3, r3, #3
 80025d8:	2b02      	cmp	r3, #2
 80025da:	d123      	bne.n	8002624 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80025dc:	69fb      	ldr	r3, [r7, #28]
 80025de:	08da      	lsrs	r2, r3, #3
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	3208      	adds	r2, #8
 80025e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80025ea:	69fb      	ldr	r3, [r7, #28]
 80025ec:	f003 0307 	and.w	r3, r3, #7
 80025f0:	009b      	lsls	r3, r3, #2
 80025f2:	220f      	movs	r2, #15
 80025f4:	fa02 f303 	lsl.w	r3, r2, r3
 80025f8:	43db      	mvns	r3, r3
 80025fa:	69ba      	ldr	r2, [r7, #24]
 80025fc:	4013      	ands	r3, r2
 80025fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	691a      	ldr	r2, [r3, #16]
 8002604:	69fb      	ldr	r3, [r7, #28]
 8002606:	f003 0307 	and.w	r3, r3, #7
 800260a:	009b      	lsls	r3, r3, #2
 800260c:	fa02 f303 	lsl.w	r3, r2, r3
 8002610:	69ba      	ldr	r2, [r7, #24]
 8002612:	4313      	orrs	r3, r2
 8002614:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002616:	69fb      	ldr	r3, [r7, #28]
 8002618:	08da      	lsrs	r2, r3, #3
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	3208      	adds	r2, #8
 800261e:	69b9      	ldr	r1, [r7, #24]
 8002620:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800262a:	69fb      	ldr	r3, [r7, #28]
 800262c:	005b      	lsls	r3, r3, #1
 800262e:	2203      	movs	r2, #3
 8002630:	fa02 f303 	lsl.w	r3, r2, r3
 8002634:	43db      	mvns	r3, r3
 8002636:	69ba      	ldr	r2, [r7, #24]
 8002638:	4013      	ands	r3, r2
 800263a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	f003 0203 	and.w	r2, r3, #3
 8002644:	69fb      	ldr	r3, [r7, #28]
 8002646:	005b      	lsls	r3, r3, #1
 8002648:	fa02 f303 	lsl.w	r3, r2, r3
 800264c:	69ba      	ldr	r2, [r7, #24]
 800264e:	4313      	orrs	r3, r2
 8002650:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	69ba      	ldr	r2, [r7, #24]
 8002656:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002660:	2b00      	cmp	r3, #0
 8002662:	f000 80a2 	beq.w	80027aa <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002666:	2300      	movs	r3, #0
 8002668:	60fb      	str	r3, [r7, #12]
 800266a:	4b57      	ldr	r3, [pc, #348]	@ (80027c8 <HAL_GPIO_Init+0x2e8>)
 800266c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800266e:	4a56      	ldr	r2, [pc, #344]	@ (80027c8 <HAL_GPIO_Init+0x2e8>)
 8002670:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002674:	6453      	str	r3, [r2, #68]	@ 0x44
 8002676:	4b54      	ldr	r3, [pc, #336]	@ (80027c8 <HAL_GPIO_Init+0x2e8>)
 8002678:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800267a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800267e:	60fb      	str	r3, [r7, #12]
 8002680:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002682:	4a52      	ldr	r2, [pc, #328]	@ (80027cc <HAL_GPIO_Init+0x2ec>)
 8002684:	69fb      	ldr	r3, [r7, #28]
 8002686:	089b      	lsrs	r3, r3, #2
 8002688:	3302      	adds	r3, #2
 800268a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800268e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002690:	69fb      	ldr	r3, [r7, #28]
 8002692:	f003 0303 	and.w	r3, r3, #3
 8002696:	009b      	lsls	r3, r3, #2
 8002698:	220f      	movs	r2, #15
 800269a:	fa02 f303 	lsl.w	r3, r2, r3
 800269e:	43db      	mvns	r3, r3
 80026a0:	69ba      	ldr	r2, [r7, #24]
 80026a2:	4013      	ands	r3, r2
 80026a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	4a49      	ldr	r2, [pc, #292]	@ (80027d0 <HAL_GPIO_Init+0x2f0>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d019      	beq.n	80026e2 <HAL_GPIO_Init+0x202>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	4a48      	ldr	r2, [pc, #288]	@ (80027d4 <HAL_GPIO_Init+0x2f4>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d013      	beq.n	80026de <HAL_GPIO_Init+0x1fe>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	4a47      	ldr	r2, [pc, #284]	@ (80027d8 <HAL_GPIO_Init+0x2f8>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d00d      	beq.n	80026da <HAL_GPIO_Init+0x1fa>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	4a46      	ldr	r2, [pc, #280]	@ (80027dc <HAL_GPIO_Init+0x2fc>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d007      	beq.n	80026d6 <HAL_GPIO_Init+0x1f6>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	4a45      	ldr	r2, [pc, #276]	@ (80027e0 <HAL_GPIO_Init+0x300>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d101      	bne.n	80026d2 <HAL_GPIO_Init+0x1f2>
 80026ce:	2304      	movs	r3, #4
 80026d0:	e008      	b.n	80026e4 <HAL_GPIO_Init+0x204>
 80026d2:	2307      	movs	r3, #7
 80026d4:	e006      	b.n	80026e4 <HAL_GPIO_Init+0x204>
 80026d6:	2303      	movs	r3, #3
 80026d8:	e004      	b.n	80026e4 <HAL_GPIO_Init+0x204>
 80026da:	2302      	movs	r3, #2
 80026dc:	e002      	b.n	80026e4 <HAL_GPIO_Init+0x204>
 80026de:	2301      	movs	r3, #1
 80026e0:	e000      	b.n	80026e4 <HAL_GPIO_Init+0x204>
 80026e2:	2300      	movs	r3, #0
 80026e4:	69fa      	ldr	r2, [r7, #28]
 80026e6:	f002 0203 	and.w	r2, r2, #3
 80026ea:	0092      	lsls	r2, r2, #2
 80026ec:	4093      	lsls	r3, r2
 80026ee:	69ba      	ldr	r2, [r7, #24]
 80026f0:	4313      	orrs	r3, r2
 80026f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80026f4:	4935      	ldr	r1, [pc, #212]	@ (80027cc <HAL_GPIO_Init+0x2ec>)
 80026f6:	69fb      	ldr	r3, [r7, #28]
 80026f8:	089b      	lsrs	r3, r3, #2
 80026fa:	3302      	adds	r3, #2
 80026fc:	69ba      	ldr	r2, [r7, #24]
 80026fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002702:	4b38      	ldr	r3, [pc, #224]	@ (80027e4 <HAL_GPIO_Init+0x304>)
 8002704:	689b      	ldr	r3, [r3, #8]
 8002706:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002708:	693b      	ldr	r3, [r7, #16]
 800270a:	43db      	mvns	r3, r3
 800270c:	69ba      	ldr	r2, [r7, #24]
 800270e:	4013      	ands	r3, r2
 8002710:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800271a:	2b00      	cmp	r3, #0
 800271c:	d003      	beq.n	8002726 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800271e:	69ba      	ldr	r2, [r7, #24]
 8002720:	693b      	ldr	r3, [r7, #16]
 8002722:	4313      	orrs	r3, r2
 8002724:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002726:	4a2f      	ldr	r2, [pc, #188]	@ (80027e4 <HAL_GPIO_Init+0x304>)
 8002728:	69bb      	ldr	r3, [r7, #24]
 800272a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800272c:	4b2d      	ldr	r3, [pc, #180]	@ (80027e4 <HAL_GPIO_Init+0x304>)
 800272e:	68db      	ldr	r3, [r3, #12]
 8002730:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002732:	693b      	ldr	r3, [r7, #16]
 8002734:	43db      	mvns	r3, r3
 8002736:	69ba      	ldr	r2, [r7, #24]
 8002738:	4013      	ands	r3, r2
 800273a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002744:	2b00      	cmp	r3, #0
 8002746:	d003      	beq.n	8002750 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002748:	69ba      	ldr	r2, [r7, #24]
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	4313      	orrs	r3, r2
 800274e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002750:	4a24      	ldr	r2, [pc, #144]	@ (80027e4 <HAL_GPIO_Init+0x304>)
 8002752:	69bb      	ldr	r3, [r7, #24]
 8002754:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002756:	4b23      	ldr	r3, [pc, #140]	@ (80027e4 <HAL_GPIO_Init+0x304>)
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	43db      	mvns	r3, r3
 8002760:	69ba      	ldr	r2, [r7, #24]
 8002762:	4013      	ands	r3, r2
 8002764:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800276e:	2b00      	cmp	r3, #0
 8002770:	d003      	beq.n	800277a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002772:	69ba      	ldr	r2, [r7, #24]
 8002774:	693b      	ldr	r3, [r7, #16]
 8002776:	4313      	orrs	r3, r2
 8002778:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800277a:	4a1a      	ldr	r2, [pc, #104]	@ (80027e4 <HAL_GPIO_Init+0x304>)
 800277c:	69bb      	ldr	r3, [r7, #24]
 800277e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002780:	4b18      	ldr	r3, [pc, #96]	@ (80027e4 <HAL_GPIO_Init+0x304>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002786:	693b      	ldr	r3, [r7, #16]
 8002788:	43db      	mvns	r3, r3
 800278a:	69ba      	ldr	r2, [r7, #24]
 800278c:	4013      	ands	r3, r2
 800278e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002798:	2b00      	cmp	r3, #0
 800279a:	d003      	beq.n	80027a4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800279c:	69ba      	ldr	r2, [r7, #24]
 800279e:	693b      	ldr	r3, [r7, #16]
 80027a0:	4313      	orrs	r3, r2
 80027a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80027a4:	4a0f      	ldr	r2, [pc, #60]	@ (80027e4 <HAL_GPIO_Init+0x304>)
 80027a6:	69bb      	ldr	r3, [r7, #24]
 80027a8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027aa:	69fb      	ldr	r3, [r7, #28]
 80027ac:	3301      	adds	r3, #1
 80027ae:	61fb      	str	r3, [r7, #28]
 80027b0:	69fb      	ldr	r3, [r7, #28]
 80027b2:	2b0f      	cmp	r3, #15
 80027b4:	f67f aea2 	bls.w	80024fc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80027b8:	bf00      	nop
 80027ba:	bf00      	nop
 80027bc:	3724      	adds	r7, #36	@ 0x24
 80027be:	46bd      	mov	sp, r7
 80027c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c4:	4770      	bx	lr
 80027c6:	bf00      	nop
 80027c8:	40023800 	.word	0x40023800
 80027cc:	40013800 	.word	0x40013800
 80027d0:	40020000 	.word	0x40020000
 80027d4:	40020400 	.word	0x40020400
 80027d8:	40020800 	.word	0x40020800
 80027dc:	40020c00 	.word	0x40020c00
 80027e0:	40021000 	.word	0x40021000
 80027e4:	40013c00 	.word	0x40013c00

080027e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b083      	sub	sp, #12
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
 80027f0:	460b      	mov	r3, r1
 80027f2:	807b      	strh	r3, [r7, #2]
 80027f4:	4613      	mov	r3, r2
 80027f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80027f8:	787b      	ldrb	r3, [r7, #1]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d003      	beq.n	8002806 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80027fe:	887a      	ldrh	r2, [r7, #2]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002804:	e003      	b.n	800280e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002806:	887b      	ldrh	r3, [r7, #2]
 8002808:	041a      	lsls	r2, r3, #16
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	619a      	str	r2, [r3, #24]
}
 800280e:	bf00      	nop
 8002810:	370c      	adds	r7, #12
 8002812:	46bd      	mov	sp, r7
 8002814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002818:	4770      	bx	lr
	...

0800281c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b082      	sub	sp, #8
 8002820:	af00      	add	r7, sp, #0
 8002822:	4603      	mov	r3, r0
 8002824:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002826:	4b08      	ldr	r3, [pc, #32]	@ (8002848 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002828:	695a      	ldr	r2, [r3, #20]
 800282a:	88fb      	ldrh	r3, [r7, #6]
 800282c:	4013      	ands	r3, r2
 800282e:	2b00      	cmp	r3, #0
 8002830:	d006      	beq.n	8002840 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002832:	4a05      	ldr	r2, [pc, #20]	@ (8002848 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002834:	88fb      	ldrh	r3, [r7, #6]
 8002836:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002838:	88fb      	ldrh	r3, [r7, #6]
 800283a:	4618      	mov	r0, r3
 800283c:	f7fe fce2 	bl	8001204 <HAL_GPIO_EXTI_Callback>
  }
}
 8002840:	bf00      	nop
 8002842:	3708      	adds	r7, #8
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}
 8002848:	40013c00 	.word	0x40013c00

0800284c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b088      	sub	sp, #32
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d101      	bne.n	800285e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800285a:	2301      	movs	r3, #1
 800285c:	e128      	b.n	8002ab0 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002864:	b2db      	uxtb	r3, r3
 8002866:	2b00      	cmp	r3, #0
 8002868:	d109      	bne.n	800287e <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2200      	movs	r2, #0
 800286e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	4a90      	ldr	r2, [pc, #576]	@ (8002ab8 <HAL_I2S_Init+0x26c>)
 8002876:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8002878:	6878      	ldr	r0, [r7, #4]
 800287a:	f7fe fd05 	bl	8001288 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2202      	movs	r2, #2
 8002882:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	69db      	ldr	r3, [r3, #28]
 800288c:	687a      	ldr	r2, [r7, #4]
 800288e:	6812      	ldr	r2, [r2, #0]
 8002890:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8002894:	f023 030f 	bic.w	r3, r3, #15
 8002898:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	2202      	movs	r2, #2
 80028a0:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	695b      	ldr	r3, [r3, #20]
 80028a6:	2b02      	cmp	r3, #2
 80028a8:	d060      	beq.n	800296c <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	68db      	ldr	r3, [r3, #12]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d102      	bne.n	80028b8 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80028b2:	2310      	movs	r3, #16
 80028b4:	617b      	str	r3, [r7, #20]
 80028b6:	e001      	b.n	80028bc <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80028b8:	2320      	movs	r3, #32
 80028ba:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	689b      	ldr	r3, [r3, #8]
 80028c0:	2b20      	cmp	r3, #32
 80028c2:	d802      	bhi.n	80028ca <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	005b      	lsls	r3, r3, #1
 80028c8:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80028ca:	2001      	movs	r0, #1
 80028cc:	f001 fcfc 	bl	80042c8 <HAL_RCCEx_GetPeriphCLKFreq>
 80028d0:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	691b      	ldr	r3, [r3, #16]
 80028d6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80028da:	d125      	bne.n	8002928 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	68db      	ldr	r3, [r3, #12]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d010      	beq.n	8002906 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	009b      	lsls	r3, r3, #2
 80028e8:	68fa      	ldr	r2, [r7, #12]
 80028ea:	fbb2 f2f3 	udiv	r2, r2, r3
 80028ee:	4613      	mov	r3, r2
 80028f0:	009b      	lsls	r3, r3, #2
 80028f2:	4413      	add	r3, r2
 80028f4:	005b      	lsls	r3, r3, #1
 80028f6:	461a      	mov	r2, r3
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	695b      	ldr	r3, [r3, #20]
 80028fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002900:	3305      	adds	r3, #5
 8002902:	613b      	str	r3, [r7, #16]
 8002904:	e01f      	b.n	8002946 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	00db      	lsls	r3, r3, #3
 800290a:	68fa      	ldr	r2, [r7, #12]
 800290c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002910:	4613      	mov	r3, r2
 8002912:	009b      	lsls	r3, r3, #2
 8002914:	4413      	add	r3, r2
 8002916:	005b      	lsls	r3, r3, #1
 8002918:	461a      	mov	r2, r3
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	695b      	ldr	r3, [r3, #20]
 800291e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002922:	3305      	adds	r3, #5
 8002924:	613b      	str	r3, [r7, #16]
 8002926:	e00e      	b.n	8002946 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002928:	68fa      	ldr	r2, [r7, #12]
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002930:	4613      	mov	r3, r2
 8002932:	009b      	lsls	r3, r3, #2
 8002934:	4413      	add	r3, r2
 8002936:	005b      	lsls	r3, r3, #1
 8002938:	461a      	mov	r2, r3
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	695b      	ldr	r3, [r3, #20]
 800293e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002942:	3305      	adds	r3, #5
 8002944:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	4a5c      	ldr	r2, [pc, #368]	@ (8002abc <HAL_I2S_Init+0x270>)
 800294a:	fba2 2303 	umull	r2, r3, r2, r3
 800294e:	08db      	lsrs	r3, r3, #3
 8002950:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8002952:	693b      	ldr	r3, [r7, #16]
 8002954:	f003 0301 	and.w	r3, r3, #1
 8002958:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800295a:	693a      	ldr	r2, [r7, #16]
 800295c:	69bb      	ldr	r3, [r7, #24]
 800295e:	1ad3      	subs	r3, r2, r3
 8002960:	085b      	lsrs	r3, r3, #1
 8002962:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8002964:	69bb      	ldr	r3, [r7, #24]
 8002966:	021b      	lsls	r3, r3, #8
 8002968:	61bb      	str	r3, [r7, #24]
 800296a:	e003      	b.n	8002974 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 800296c:	2302      	movs	r3, #2
 800296e:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8002970:	2300      	movs	r3, #0
 8002972:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8002974:	69fb      	ldr	r3, [r7, #28]
 8002976:	2b01      	cmp	r3, #1
 8002978:	d902      	bls.n	8002980 <HAL_I2S_Init+0x134>
 800297a:	69fb      	ldr	r3, [r7, #28]
 800297c:	2bff      	cmp	r3, #255	@ 0xff
 800297e:	d907      	bls.n	8002990 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002984:	f043 0210 	orr.w	r2, r3, #16
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 800298c:	2301      	movs	r3, #1
 800298e:	e08f      	b.n	8002ab0 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	691a      	ldr	r2, [r3, #16]
 8002994:	69bb      	ldr	r3, [r7, #24]
 8002996:	ea42 0103 	orr.w	r1, r2, r3
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	69fa      	ldr	r2, [r7, #28]
 80029a0:	430a      	orrs	r2, r1
 80029a2:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	69db      	ldr	r3, [r3, #28]
 80029aa:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80029ae:	f023 030f 	bic.w	r3, r3, #15
 80029b2:	687a      	ldr	r2, [r7, #4]
 80029b4:	6851      	ldr	r1, [r2, #4]
 80029b6:	687a      	ldr	r2, [r7, #4]
 80029b8:	6892      	ldr	r2, [r2, #8]
 80029ba:	4311      	orrs	r1, r2
 80029bc:	687a      	ldr	r2, [r7, #4]
 80029be:	68d2      	ldr	r2, [r2, #12]
 80029c0:	4311      	orrs	r1, r2
 80029c2:	687a      	ldr	r2, [r7, #4]
 80029c4:	6992      	ldr	r2, [r2, #24]
 80029c6:	430a      	orrs	r2, r1
 80029c8:	431a      	orrs	r2, r3
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80029d2:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6a1b      	ldr	r3, [r3, #32]
 80029d8:	2b01      	cmp	r3, #1
 80029da:	d161      	bne.n	8002aa0 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	4a38      	ldr	r2, [pc, #224]	@ (8002ac0 <HAL_I2S_Init+0x274>)
 80029e0:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a37      	ldr	r2, [pc, #220]	@ (8002ac4 <HAL_I2S_Init+0x278>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d101      	bne.n	80029f0 <HAL_I2S_Init+0x1a4>
 80029ec:	4b36      	ldr	r3, [pc, #216]	@ (8002ac8 <HAL_I2S_Init+0x27c>)
 80029ee:	e001      	b.n	80029f4 <HAL_I2S_Init+0x1a8>
 80029f0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80029f4:	69db      	ldr	r3, [r3, #28]
 80029f6:	687a      	ldr	r2, [r7, #4]
 80029f8:	6812      	ldr	r2, [r2, #0]
 80029fa:	4932      	ldr	r1, [pc, #200]	@ (8002ac4 <HAL_I2S_Init+0x278>)
 80029fc:	428a      	cmp	r2, r1
 80029fe:	d101      	bne.n	8002a04 <HAL_I2S_Init+0x1b8>
 8002a00:	4a31      	ldr	r2, [pc, #196]	@ (8002ac8 <HAL_I2S_Init+0x27c>)
 8002a02:	e001      	b.n	8002a08 <HAL_I2S_Init+0x1bc>
 8002a04:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8002a08:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8002a0c:	f023 030f 	bic.w	r3, r3, #15
 8002a10:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a2b      	ldr	r2, [pc, #172]	@ (8002ac4 <HAL_I2S_Init+0x278>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d101      	bne.n	8002a20 <HAL_I2S_Init+0x1d4>
 8002a1c:	4b2a      	ldr	r3, [pc, #168]	@ (8002ac8 <HAL_I2S_Init+0x27c>)
 8002a1e:	e001      	b.n	8002a24 <HAL_I2S_Init+0x1d8>
 8002a20:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002a24:	2202      	movs	r2, #2
 8002a26:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a25      	ldr	r2, [pc, #148]	@ (8002ac4 <HAL_I2S_Init+0x278>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d101      	bne.n	8002a36 <HAL_I2S_Init+0x1ea>
 8002a32:	4b25      	ldr	r3, [pc, #148]	@ (8002ac8 <HAL_I2S_Init+0x27c>)
 8002a34:	e001      	b.n	8002a3a <HAL_I2S_Init+0x1ee>
 8002a36:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002a3a:	69db      	ldr	r3, [r3, #28]
 8002a3c:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002a46:	d003      	beq.n	8002a50 <HAL_I2S_Init+0x204>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d103      	bne.n	8002a58 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8002a50:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002a54:	613b      	str	r3, [r7, #16]
 8002a56:	e001      	b.n	8002a5c <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8002a5c:	693b      	ldr	r3, [r7, #16]
 8002a5e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8002a66:	4313      	orrs	r3, r2
 8002a68:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	68db      	ldr	r3, [r3, #12]
 8002a6e:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8002a70:	4313      	orrs	r3, r2
 8002a72:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	699b      	ldr	r3, [r3, #24]
 8002a78:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	b29a      	uxth	r2, r3
 8002a7e:	897b      	ldrh	r3, [r7, #10]
 8002a80:	4313      	orrs	r3, r2
 8002a82:	b29b      	uxth	r3, r3
 8002a84:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002a88:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a0d      	ldr	r2, [pc, #52]	@ (8002ac4 <HAL_I2S_Init+0x278>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d101      	bne.n	8002a98 <HAL_I2S_Init+0x24c>
 8002a94:	4b0c      	ldr	r3, [pc, #48]	@ (8002ac8 <HAL_I2S_Init+0x27c>)
 8002a96:	e001      	b.n	8002a9c <HAL_I2S_Init+0x250>
 8002a98:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002a9c:	897a      	ldrh	r2, [r7, #10]
 8002a9e:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8002aae:	2300      	movs	r3, #0
}
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	3720      	adds	r7, #32
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bd80      	pop	{r7, pc}
 8002ab8:	0800317d 	.word	0x0800317d
 8002abc:	cccccccd 	.word	0xcccccccd
 8002ac0:	08003305 	.word	0x08003305
 8002ac4:	40003800 	.word	0x40003800
 8002ac8:	40003400 	.word	0x40003400

08002acc <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b086      	sub	sp, #24
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	60f8      	str	r0, [r7, #12]
 8002ad4:	60b9      	str	r1, [r7, #8]
 8002ad6:	4613      	mov	r3, r2
 8002ad8:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d002      	beq.n	8002ae6 <HAL_I2S_Receive_DMA+0x1a>
 8002ae0:	88fb      	ldrh	r3, [r7, #6]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d101      	bne.n	8002aea <HAL_I2S_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e09d      	b.n	8002c26 <HAL_I2S_Receive_DMA+0x15a>
  }

  if (hi2s->State != HAL_I2S_STATE_READY)
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	2b01      	cmp	r3, #1
 8002af4:	d001      	beq.n	8002afa <HAL_I2S_Receive_DMA+0x2e>
  {
    return HAL_BUSY;
 8002af6:	2302      	movs	r3, #2
 8002af8:	e095      	b.n	8002c26 <HAL_I2S_Receive_DMA+0x15a>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002b00:	b2db      	uxtb	r3, r3
 8002b02:	2b01      	cmp	r3, #1
 8002b04:	d101      	bne.n	8002b0a <HAL_I2S_Receive_DMA+0x3e>
 8002b06:	2302      	movs	r3, #2
 8002b08:	e08d      	b.n	8002c26 <HAL_I2S_Receive_DMA+0x15a>
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	2201      	movs	r2, #1
 8002b0e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	2204      	movs	r2, #4
 8002b16:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->pRxBuffPtr = pData;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	68ba      	ldr	r2, [r7, #8]
 8002b24:	62da      	str	r2, [r3, #44]	@ 0x2c

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	69db      	ldr	r3, [r3, #28]
 8002b2c:	f003 0307 	and.w	r3, r3, #7
 8002b30:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	2b03      	cmp	r3, #3
 8002b36:	d002      	beq.n	8002b3e <HAL_I2S_Receive_DMA+0x72>
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	2b05      	cmp	r3, #5
 8002b3c:	d10a      	bne.n	8002b54 <HAL_I2S_Receive_DMA+0x88>
  {
    hi2s->RxXferSize = (Size << 1U);
 8002b3e:	88fb      	ldrh	r3, [r7, #6]
 8002b40:	005b      	lsls	r3, r3, #1
 8002b42:	b29a      	uxth	r2, r3
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	861a      	strh	r2, [r3, #48]	@ 0x30
    hi2s->RxXferCount = (Size << 1U);
 8002b48:	88fb      	ldrh	r3, [r7, #6]
 8002b4a:	005b      	lsls	r3, r3, #1
 8002b4c:	b29a      	uxth	r2, r3
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	865a      	strh	r2, [r3, #50]	@ 0x32
 8002b52:	e005      	b.n	8002b60 <HAL_I2S_Receive_DMA+0x94>
  }
  else
  {
    hi2s->RxXferSize = Size;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	88fa      	ldrh	r2, [r7, #6]
 8002b58:	861a      	strh	r2, [r3, #48]	@ 0x30
    hi2s->RxXferCount = Size;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	88fa      	ldrh	r2, [r7, #6]
 8002b5e:	865a      	strh	r2, [r3, #50]	@ 0x32
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b64:	4a32      	ldr	r2, [pc, #200]	@ (8002c30 <HAL_I2S_Receive_DMA+0x164>)
 8002b66:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b6c:	4a31      	ldr	r2, [pc, #196]	@ (8002c34 <HAL_I2S_Receive_DMA+0x168>)
 8002b6e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b74:	4a30      	ldr	r2, [pc, #192]	@ (8002c38 <HAL_I2S_Receive_DMA+0x16c>)
 8002b76:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	69db      	ldr	r3, [r3, #28]
 8002b7e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002b82:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002b86:	d10a      	bne.n	8002b9e <HAL_I2S_Receive_DMA+0xd2>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002b88:	2300      	movs	r3, #0
 8002b8a:	613b      	str	r3, [r7, #16]
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	68db      	ldr	r3, [r3, #12]
 8002b92:	613b      	str	r3, [r7, #16]
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	689b      	ldr	r3, [r3, #8]
 8002b9a:	613b      	str	r3, [r7, #16]
 8002b9c:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	330c      	adds	r3, #12
 8002ba8:	4619      	mov	r1, r3
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bae:	461a      	mov	r2, r3
                                 hi2s->RxXferSize))
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8002bb4:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8002bb6:	f7ff f961 	bl	8001e7c <HAL_DMA_Start_IT>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d00f      	beq.n	8002be0 <HAL_I2S_Receive_DMA+0x114>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bc4:	f043 0208 	orr.w	r2, r3, #8
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	2201      	movs	r2, #1
 8002bd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    __HAL_UNLOCK(hi2s);
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    return HAL_ERROR;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	e022      	b.n	8002c26 <HAL_I2S_Receive_DMA+0x15a>
  }

  __HAL_UNLOCK(hi2s);
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	2200      	movs	r2, #0
 8002be4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	f003 0301 	and.w	r3, r3, #1
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d107      	bne.n	8002c06 <HAL_I2S_Receive_DMA+0x13a>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	685a      	ldr	r2, [r3, #4]
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f042 0201 	orr.w	r2, r2, #1
 8002c04:	605a      	str	r2, [r3, #4]
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	69db      	ldr	r3, [r3, #28]
 8002c0c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d107      	bne.n	8002c24 <HAL_I2S_Receive_DMA+0x158>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	69da      	ldr	r2, [r3, #28]
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002c22:	61da      	str	r2, [r3, #28]
  }

  return HAL_OK;
 8002c24:	2300      	movs	r3, #0
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	3718      	adds	r7, #24
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}
 8002c2e:	bf00      	nop
 8002c30:	0800305b 	.word	0x0800305b
 8002c34:	08003019 	.word	0x08003019
 8002c38:	08003077 	.word	0x08003077

08002c3c <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b088      	sub	sp, #32
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint32_t tickstart;
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002c44:	2300      	movs	r3, #0
 8002c46:	77fb      	strb	r3, [r7, #31]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002c50:	d004      	beq.n	8002c5c <HAL_I2S_DMAStop+0x20>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	f040 80d1 	bne.w	8002dfe <HAL_I2S_DMAStop+0x1c2>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d00f      	beq.n	8002c84 <HAL_I2S_DMAStop+0x48>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f7ff f95f 	bl	8001f2c <HAL_DMA_Abort>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d007      	beq.n	8002c84 <HAL_I2S_DMAStop+0x48>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c78:	f043 0208 	orr.w	r2, r3, #8
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	645a      	str	r2, [r3, #68]	@ 0x44
        errorcode = HAL_ERROR;
 8002c80:	2301      	movs	r3, #1
 8002c82:	77fb      	strb	r3, [r7, #31]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8002c84:	2364      	movs	r3, #100	@ 0x64
 8002c86:	2201      	movs	r2, #1
 8002c88:	2102      	movs	r1, #2
 8002c8a:	6878      	ldr	r0, [r7, #4]
 8002c8c:	f000 fb00 	bl	8003290 <I2S_WaitFlagStateUntilTimeout>
 8002c90:	4603      	mov	r3, r0
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d00b      	beq.n	8002cae <HAL_I2S_DMAStop+0x72>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c9a:	f043 0201 	orr.w	r2, r3, #1
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2201      	movs	r2, #1
 8002ca6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      errorcode   = HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	77fb      	strb	r3, [r7, #31]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8002cae:	2364      	movs	r3, #100	@ 0x64
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	2180      	movs	r1, #128	@ 0x80
 8002cb4:	6878      	ldr	r0, [r7, #4]
 8002cb6:	f000 faeb 	bl	8003290 <I2S_WaitFlagStateUntilTimeout>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d00b      	beq.n	8002cd8 <HAL_I2S_DMAStop+0x9c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cc4:	f043 0201 	orr.w	r2, r3, #1
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2201      	movs	r2, #1
 8002cd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      errorcode   = HAL_ERROR;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	77fb      	strb	r3, [r7, #31]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	69da      	ldr	r2, [r3, #28]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002ce6:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002ce8:	2300      	movs	r3, #0
 8002cea:	617b      	str	r3, [r7, #20]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	689b      	ldr	r3, [r3, #8]
 8002cf2:	617b      	str	r3, [r7, #20]
 8002cf4:	697b      	ldr	r3, [r7, #20]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	685a      	ldr	r2, [r3, #4]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f022 0202 	bic.w	r2, r2, #2
 8002d04:	605a      	str	r2, [r3, #4]

#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d0c:	b2db      	uxtb	r3, r3
 8002d0e:	2b05      	cmp	r3, #5
 8002d10:	f040 8165 	bne.w	8002fde <HAL_I2S_DMAStop+0x3a2>
    {
      /* Abort the I2S DMA rx Stream/Channel */
      if (hi2s->hdmarx != NULL)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d00f      	beq.n	8002d3c <HAL_I2S_DMAStop+0x100>
      {
        /* Disable the I2S DMA rx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d20:	4618      	mov	r0, r3
 8002d22:	f7ff f903 	bl	8001f2c <HAL_DMA_Abort>
 8002d26:	4603      	mov	r3, r0
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d007      	beq.n	8002d3c <HAL_I2S_DMAStop+0x100>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d30:	f043 0208 	orr.w	r2, r3, #8
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	645a      	str	r2, [r3, #68]	@ 0x44
          errorcode = HAL_ERROR;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	77fb      	strb	r3, [r7, #31]
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a8a      	ldr	r2, [pc, #552]	@ (8002f6c <HAL_I2S_DMAStop+0x330>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d101      	bne.n	8002d4a <HAL_I2S_DMAStop+0x10e>
 8002d46:	4b8a      	ldr	r3, [pc, #552]	@ (8002f70 <HAL_I2S_DMAStop+0x334>)
 8002d48:	e001      	b.n	8002d4e <HAL_I2S_DMAStop+0x112>
 8002d4a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002d4e:	69da      	ldr	r2, [r3, #28]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4985      	ldr	r1, [pc, #532]	@ (8002f6c <HAL_I2S_DMAStop+0x330>)
 8002d56:	428b      	cmp	r3, r1
 8002d58:	d101      	bne.n	8002d5e <HAL_I2S_DMAStop+0x122>
 8002d5a:	4b85      	ldr	r3, [pc, #532]	@ (8002f70 <HAL_I2S_DMAStop+0x334>)
 8002d5c:	e001      	b.n	8002d62 <HAL_I2S_DMAStop+0x126>
 8002d5e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002d62:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d66:	61da      	str	r2, [r3, #28]

      /* Clear OVR flag */
      __HAL_I2SEXT_CLEAR_OVRFLAG(hi2s);
 8002d68:	2300      	movs	r3, #0
 8002d6a:	613b      	str	r3, [r7, #16]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a7e      	ldr	r2, [pc, #504]	@ (8002f6c <HAL_I2S_DMAStop+0x330>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d101      	bne.n	8002d7a <HAL_I2S_DMAStop+0x13e>
 8002d76:	4b7e      	ldr	r3, [pc, #504]	@ (8002f70 <HAL_I2S_DMAStop+0x334>)
 8002d78:	e001      	b.n	8002d7e <HAL_I2S_DMAStop+0x142>
 8002d7a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002d7e:	68db      	ldr	r3, [r3, #12]
 8002d80:	613b      	str	r3, [r7, #16]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a79      	ldr	r2, [pc, #484]	@ (8002f6c <HAL_I2S_DMAStop+0x330>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d101      	bne.n	8002d90 <HAL_I2S_DMAStop+0x154>
 8002d8c:	4b78      	ldr	r3, [pc, #480]	@ (8002f70 <HAL_I2S_DMAStop+0x334>)
 8002d8e:	e001      	b.n	8002d94 <HAL_I2S_DMAStop+0x158>
 8002d90:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	613b      	str	r3, [r7, #16]
 8002d98:	693b      	ldr	r3, [r7, #16]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a73      	ldr	r2, [pc, #460]	@ (8002f6c <HAL_I2S_DMAStop+0x330>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d101      	bne.n	8002da8 <HAL_I2S_DMAStop+0x16c>
 8002da4:	4b72      	ldr	r3, [pc, #456]	@ (8002f70 <HAL_I2S_DMAStop+0x334>)
 8002da6:	e001      	b.n	8002dac <HAL_I2S_DMAStop+0x170>
 8002da8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002dac:	685a      	ldr	r2, [r3, #4]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	496e      	ldr	r1, [pc, #440]	@ (8002f6c <HAL_I2S_DMAStop+0x330>)
 8002db4:	428b      	cmp	r3, r1
 8002db6:	d101      	bne.n	8002dbc <HAL_I2S_DMAStop+0x180>
 8002db8:	4b6d      	ldr	r3, [pc, #436]	@ (8002f70 <HAL_I2S_DMAStop+0x334>)
 8002dba:	e001      	b.n	8002dc0 <HAL_I2S_DMAStop+0x184>
 8002dbc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002dc0:	f022 0201 	bic.w	r2, r2, #1
 8002dc4:	605a      	str	r2, [r3, #4]

      if (hi2s->Init.Mode == I2S_MODE_SLAVE_TX)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d10c      	bne.n	8002de8 <HAL_I2S_DMAStop+0x1ac>
      {
        /* Set the error code */
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dd2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2201      	movs	r2, #1
 8002dde:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        errorcode = HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	77fb      	strb	r3, [r7, #31]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8002de6:	e0fa      	b.n	8002fde <HAL_I2S_DMAStop+0x3a2>
      }
      else
      {
        /* Read DR to Flush RX Data */
        READ_REG(I2SxEXT(hi2s->Instance)->DR);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a5f      	ldr	r2, [pc, #380]	@ (8002f6c <HAL_I2S_DMAStop+0x330>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d101      	bne.n	8002df6 <HAL_I2S_DMAStop+0x1ba>
 8002df2:	4b5f      	ldr	r3, [pc, #380]	@ (8002f70 <HAL_I2S_DMAStop+0x334>)
 8002df4:	e001      	b.n	8002dfa <HAL_I2S_DMAStop+0x1be>
 8002df6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002dfa:	68db      	ldr	r3, [r3, #12]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8002dfc:	e0ef      	b.n	8002fde <HAL_I2S_DMAStop+0x3a2>
      }
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002e06:	d005      	beq.n	8002e14 <HAL_I2S_DMAStop+0x1d8>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002e10:	f040 80e5 	bne.w	8002fde <HAL_I2S_DMAStop+0x3a2>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d00f      	beq.n	8002e3c <HAL_I2S_DMAStop+0x200>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e20:	4618      	mov	r0, r3
 8002e22:	f7ff f883 	bl	8001f2c <HAL_DMA_Abort>
 8002e26:	4603      	mov	r3, r0
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d007      	beq.n	8002e3c <HAL_I2S_DMAStop+0x200>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e30:	f043 0208 	orr.w	r2, r3, #8
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	645a      	str	r2, [r3, #68]	@ 0x44
        errorcode = HAL_ERROR;
 8002e38:	2301      	movs	r3, #1
 8002e3a:	77fb      	strb	r3, [r7, #31]
      }
    }
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e42:	b2db      	uxtb	r3, r3
 8002e44:	2b05      	cmp	r3, #5
 8002e46:	f040 809a 	bne.w	8002f7e <HAL_I2S_DMAStop+0x342>
    {
      /* Abort the I2S DMA tx Stream/Channel */
      if (hi2s->hdmatx != NULL)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d00f      	beq.n	8002e72 <HAL_I2S_DMAStop+0x236>
      {
        /* Disable the I2S DMA tx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e56:	4618      	mov	r0, r3
 8002e58:	f7ff f868 	bl	8001f2c <HAL_DMA_Abort>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d007      	beq.n	8002e72 <HAL_I2S_DMAStop+0x236>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e66:	f043 0208 	orr.w	r2, r3, #8
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	645a      	str	r2, [r3, #68]	@ 0x44
          errorcode = HAL_ERROR;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	77fb      	strb	r3, [r7, #31]
        }
      }

      tickstart = HAL_GetTick();
 8002e72:	f7fe fe13 	bl	8001a9c <HAL_GetTick>
 8002e76:	61b8      	str	r0, [r7, #24]

      /* Wait until TXE flag is set */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 8002e78:	e012      	b.n	8002ea0 <HAL_I2S_DMAStop+0x264>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 8002e7a:	f7fe fe0f 	bl	8001a9c <HAL_GetTick>
 8002e7e:	4602      	mov	r2, r0
 8002e80:	69bb      	ldr	r3, [r7, #24]
 8002e82:	1ad3      	subs	r3, r2, r3
 8002e84:	2b64      	cmp	r3, #100	@ 0x64
 8002e86:	d90b      	bls.n	8002ea0 <HAL_I2S_DMAStop+0x264>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e8c:	f043 0201 	orr.w	r2, r3, #1
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2201      	movs	r2, #1
 8002e98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          errorcode   = HAL_ERROR;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a31      	ldr	r2, [pc, #196]	@ (8002f6c <HAL_I2S_DMAStop+0x330>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d101      	bne.n	8002eae <HAL_I2S_DMAStop+0x272>
 8002eaa:	4b31      	ldr	r3, [pc, #196]	@ (8002f70 <HAL_I2S_DMAStop+0x334>)
 8002eac:	e001      	b.n	8002eb2 <HAL_I2S_DMAStop+0x276>
 8002eae:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002eb2:	689b      	ldr	r3, [r3, #8]
 8002eb4:	f003 0302 	and.w	r3, r3, #2
 8002eb8:	2b02      	cmp	r3, #2
 8002eba:	d1de      	bne.n	8002e7a <HAL_I2S_DMAStop+0x23e>
        }
      }

      /* Wait until BSY flag is Reset */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 8002ebc:	e012      	b.n	8002ee4 <HAL_I2S_DMAStop+0x2a8>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 8002ebe:	f7fe fded 	bl	8001a9c <HAL_GetTick>
 8002ec2:	4602      	mov	r2, r0
 8002ec4:	69bb      	ldr	r3, [r7, #24]
 8002ec6:	1ad3      	subs	r3, r2, r3
 8002ec8:	2b64      	cmp	r3, #100	@ 0x64
 8002eca:	d90b      	bls.n	8002ee4 <HAL_I2S_DMAStop+0x2a8>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ed0:	f043 0201 	orr.w	r2, r3, #1
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2201      	movs	r2, #1
 8002edc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          errorcode   = HAL_ERROR;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a20      	ldr	r2, [pc, #128]	@ (8002f6c <HAL_I2S_DMAStop+0x330>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d101      	bne.n	8002ef2 <HAL_I2S_DMAStop+0x2b6>
 8002eee:	4b20      	ldr	r3, [pc, #128]	@ (8002f70 <HAL_I2S_DMAStop+0x334>)
 8002ef0:	e001      	b.n	8002ef6 <HAL_I2S_DMAStop+0x2ba>
 8002ef2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002ef6:	689b      	ldr	r3, [r3, #8]
 8002ef8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002efc:	2b80      	cmp	r3, #128	@ 0x80
 8002efe:	d0de      	beq.n	8002ebe <HAL_I2S_DMAStop+0x282>
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a19      	ldr	r2, [pc, #100]	@ (8002f6c <HAL_I2S_DMAStop+0x330>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d101      	bne.n	8002f0e <HAL_I2S_DMAStop+0x2d2>
 8002f0a:	4b19      	ldr	r3, [pc, #100]	@ (8002f70 <HAL_I2S_DMAStop+0x334>)
 8002f0c:	e001      	b.n	8002f12 <HAL_I2S_DMAStop+0x2d6>
 8002f0e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002f12:	69da      	ldr	r2, [r3, #28]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4914      	ldr	r1, [pc, #80]	@ (8002f6c <HAL_I2S_DMAStop+0x330>)
 8002f1a:	428b      	cmp	r3, r1
 8002f1c:	d101      	bne.n	8002f22 <HAL_I2S_DMAStop+0x2e6>
 8002f1e:	4b14      	ldr	r3, [pc, #80]	@ (8002f70 <HAL_I2S_DMAStop+0x334>)
 8002f20:	e001      	b.n	8002f26 <HAL_I2S_DMAStop+0x2ea>
 8002f22:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002f26:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002f2a:	61da      	str	r2, [r3, #28]

      /* Clear UDR flag */
      __HAL_I2SEXT_CLEAR_UDRFLAG(hi2s);
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	60fb      	str	r3, [r7, #12]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a0d      	ldr	r2, [pc, #52]	@ (8002f6c <HAL_I2S_DMAStop+0x330>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d101      	bne.n	8002f3e <HAL_I2S_DMAStop+0x302>
 8002f3a:	4b0d      	ldr	r3, [pc, #52]	@ (8002f70 <HAL_I2S_DMAStop+0x334>)
 8002f3c:	e001      	b.n	8002f42 <HAL_I2S_DMAStop+0x306>
 8002f3e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002f42:	689b      	ldr	r3, [r3, #8]
 8002f44:	60fb      	str	r3, [r7, #12]
 8002f46:	68fb      	ldr	r3, [r7, #12]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a07      	ldr	r2, [pc, #28]	@ (8002f6c <HAL_I2S_DMAStop+0x330>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d101      	bne.n	8002f56 <HAL_I2S_DMAStop+0x31a>
 8002f52:	4b07      	ldr	r3, [pc, #28]	@ (8002f70 <HAL_I2S_DMAStop+0x334>)
 8002f54:	e001      	b.n	8002f5a <HAL_I2S_DMAStop+0x31e>
 8002f56:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002f5a:	685a      	ldr	r2, [r3, #4]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4902      	ldr	r1, [pc, #8]	@ (8002f6c <HAL_I2S_DMAStop+0x330>)
 8002f62:	428b      	cmp	r3, r1
 8002f64:	d106      	bne.n	8002f74 <HAL_I2S_DMAStop+0x338>
 8002f66:	4b02      	ldr	r3, [pc, #8]	@ (8002f70 <HAL_I2S_DMAStop+0x334>)
 8002f68:	e006      	b.n	8002f78 <HAL_I2S_DMAStop+0x33c>
 8002f6a:	bf00      	nop
 8002f6c:	40003800 	.word	0x40003800
 8002f70:	40003400 	.word	0x40003400
 8002f74:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002f78:	f022 0202 	bic.w	r2, r2, #2
 8002f7c:	605a      	str	r2, [r3, #4]
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	69da      	ldr	r2, [r3, #28]
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002f8c:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002f8e:	2300      	movs	r3, #0
 8002f90:	60bb      	str	r3, [r7, #8]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	68db      	ldr	r3, [r3, #12]
 8002f98:	60bb      	str	r3, [r7, #8]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	689b      	ldr	r3, [r3, #8]
 8002fa0:	60bb      	str	r3, [r7, #8]
 8002fa2:	68bb      	ldr	r3, [r7, #8]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	685a      	ldr	r2, [r3, #4]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f022 0201 	bic.w	r2, r2, #1
 8002fb2:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002fbc:	d10c      	bne.n	8002fd8 <HAL_I2S_DMAStop+0x39c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fc2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2201      	movs	r2, #1
 8002fce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      errorcode = HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	77fb      	strb	r3, [r7, #31]
 8002fd6:	e002      	b.n	8002fde <HAL_I2S_DMAStop+0x3a2>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2201      	movs	r2, #1
 8002fe2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return errorcode;
 8002fe6:	7ffb      	ldrb	r3, [r7, #31]
}
 8002fe8:	4618      	mov	r0, r3
 8002fea:	3720      	adds	r7, #32
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bd80      	pop	{r7, pc}

08002ff0 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b083      	sub	sp, #12
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8002ff8:	bf00      	nop
 8002ffa:	370c      	adds	r7, #12
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003002:	4770      	bx	lr

08003004 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003004:	b480      	push	{r7}
 8003006:	b083      	sub	sp, #12
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 800300c:	bf00      	nop
 800300e:	370c      	adds	r7, #12
 8003010:	46bd      	mov	sp, r7
 8003012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003016:	4770      	bx	lr

08003018 <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b084      	sub	sp, #16
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003024:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	69db      	ldr	r3, [r3, #28]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d10e      	bne.n	800304c <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	685a      	ldr	r2, [r3, #4]
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f022 0201 	bic.w	r2, r2, #1
 800303c:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	2200      	movs	r2, #0
 8003042:	865a      	strh	r2, [r3, #50]	@ 0x32
    hi2s->State = HAL_I2S_STATE_READY;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	2201      	movs	r2, #1
 8003048:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 800304c:	68f8      	ldr	r0, [r7, #12]
 800304e:	f7fe f815 	bl	800107c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8003052:	bf00      	nop
 8003054:	3710      	adds	r7, #16
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}

0800305a <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800305a:	b580      	push	{r7, lr}
 800305c:	b084      	sub	sp, #16
 800305e:	af00      	add	r7, sp, #0
 8003060:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003066:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 8003068:	68f8      	ldr	r0, [r7, #12]
 800306a:	f7fe f869 	bl	8001140 <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800306e:	bf00      	nop
 8003070:	3710      	adds	r7, #16
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}

08003076 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8003076:	b580      	push	{r7, lr}
 8003078:	b084      	sub	sp, #16
 800307a:	af00      	add	r7, sp, #0
 800307c:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003082:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	685a      	ldr	r2, [r3, #4]
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f022 0203 	bic.w	r2, r2, #3
 8003092:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	2200      	movs	r2, #0
 8003098:	855a      	strh	r2, [r3, #42]	@ 0x2a
  hi2s->RxXferCount = 0U;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	2200      	movs	r2, #0
 800309e:	865a      	strh	r2, [r3, #50]	@ 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	2201      	movs	r2, #1
 80030a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030ac:	f043 0208 	orr.w	r2, r3, #8
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 80030b4:	68f8      	ldr	r0, [r7, #12]
 80030b6:	f7ff ffa5 	bl	8003004 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80030ba:	bf00      	nop
 80030bc:	3710      	adds	r7, #16
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}

080030c2 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80030c2:	b580      	push	{r7, lr}
 80030c4:	b082      	sub	sp, #8
 80030c6:	af00      	add	r7, sp, #0
 80030c8:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030ce:	881a      	ldrh	r2, [r3, #0]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030da:	1c9a      	adds	r2, r3, #2
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030e4:	b29b      	uxth	r3, r3
 80030e6:	3b01      	subs	r3, #1
 80030e8:	b29a      	uxth	r2, r3
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030f2:	b29b      	uxth	r3, r3
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d10e      	bne.n	8003116 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	685a      	ldr	r2, [r3, #4]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003106:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2201      	movs	r2, #1
 800310c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003110:	6878      	ldr	r0, [r7, #4]
 8003112:	f7ff ff6d 	bl	8002ff0 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003116:	bf00      	nop
 8003118:	3708      	adds	r7, #8
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}

0800311e <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 800311e:	b580      	push	{r7, lr}
 8003120:	b082      	sub	sp, #8
 8003122:	af00      	add	r7, sp, #0
 8003124:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	68da      	ldr	r2, [r3, #12]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003130:	b292      	uxth	r2, r2
 8003132:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003138:	1c9a      	adds	r2, r3, #2
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003142:	b29b      	uxth	r3, r3
 8003144:	3b01      	subs	r3, #1
 8003146:	b29a      	uxth	r2, r3
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003150:	b29b      	uxth	r3, r3
 8003152:	2b00      	cmp	r3, #0
 8003154:	d10e      	bne.n	8003174 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	685a      	ldr	r2, [r3, #4]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003164:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2201      	movs	r2, #1
 800316a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 800316e:	6878      	ldr	r0, [r7, #4]
 8003170:	f7fd ff84 	bl	800107c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003174:	bf00      	nop
 8003176:	3708      	adds	r7, #8
 8003178:	46bd      	mov	sp, r7
 800317a:	bd80      	pop	{r7, pc}

0800317c <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b086      	sub	sp, #24
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	689b      	ldr	r3, [r3, #8]
 800318a:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003192:	b2db      	uxtb	r3, r3
 8003194:	2b04      	cmp	r3, #4
 8003196:	d13a      	bne.n	800320e <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003198:	697b      	ldr	r3, [r7, #20]
 800319a:	f003 0301 	and.w	r3, r3, #1
 800319e:	2b01      	cmp	r3, #1
 80031a0:	d109      	bne.n	80031b6 <I2S_IRQHandler+0x3a>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031ac:	2b40      	cmp	r3, #64	@ 0x40
 80031ae:	d102      	bne.n	80031b6 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80031b0:	6878      	ldr	r0, [r7, #4]
 80031b2:	f7ff ffb4 	bl	800311e <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031bc:	2b40      	cmp	r3, #64	@ 0x40
 80031be:	d126      	bne.n	800320e <I2S_IRQHandler+0x92>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	f003 0320 	and.w	r3, r3, #32
 80031ca:	2b20      	cmp	r3, #32
 80031cc:	d11f      	bne.n	800320e <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	685a      	ldr	r2, [r3, #4]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80031dc:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80031de:	2300      	movs	r3, #0
 80031e0:	613b      	str	r3, [r7, #16]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	68db      	ldr	r3, [r3, #12]
 80031e8:	613b      	str	r3, [r7, #16]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	613b      	str	r3, [r7, #16]
 80031f2:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2201      	movs	r2, #1
 80031f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003200:	f043 0202 	orr.w	r2, r3, #2
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003208:	6878      	ldr	r0, [r7, #4]
 800320a:	f7ff fefb 	bl	8003004 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003214:	b2db      	uxtb	r3, r3
 8003216:	2b03      	cmp	r3, #3
 8003218:	d136      	bne.n	8003288 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	f003 0302 	and.w	r3, r3, #2
 8003220:	2b02      	cmp	r3, #2
 8003222:	d109      	bne.n	8003238 <I2S_IRQHandler+0xbc>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800322e:	2b80      	cmp	r3, #128	@ 0x80
 8003230:	d102      	bne.n	8003238 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003232:	6878      	ldr	r0, [r7, #4]
 8003234:	f7ff ff45 	bl	80030c2 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003238:	697b      	ldr	r3, [r7, #20]
 800323a:	f003 0308 	and.w	r3, r3, #8
 800323e:	2b08      	cmp	r3, #8
 8003240:	d122      	bne.n	8003288 <I2S_IRQHandler+0x10c>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	f003 0320 	and.w	r3, r3, #32
 800324c:	2b20      	cmp	r3, #32
 800324e:	d11b      	bne.n	8003288 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	685a      	ldr	r2, [r3, #4]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800325e:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003260:	2300      	movs	r3, #0
 8003262:	60fb      	str	r3, [r7, #12]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	689b      	ldr	r3, [r3, #8]
 800326a:	60fb      	str	r3, [r7, #12]
 800326c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2201      	movs	r2, #1
 8003272:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800327a:	f043 0204 	orr.w	r2, r3, #4
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003282:	6878      	ldr	r0, [r7, #4]
 8003284:	f7ff febe 	bl	8003004 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003288:	bf00      	nop
 800328a:	3718      	adds	r7, #24
 800328c:	46bd      	mov	sp, r7
 800328e:	bd80      	pop	{r7, pc}

08003290 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b086      	sub	sp, #24
 8003294:	af00      	add	r7, sp, #0
 8003296:	60f8      	str	r0, [r7, #12]
 8003298:	60b9      	str	r1, [r7, #8]
 800329a:	603b      	str	r3, [r7, #0]
 800329c:	4613      	mov	r3, r2
 800329e:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 80032a0:	f7fe fbfc 	bl	8001a9c <HAL_GetTick>
 80032a4:	6178      	str	r0, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 80032a6:	e018      	b.n	80032da <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80032ae:	d014      	beq.n	80032da <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 80032b0:	f7fe fbf4 	bl	8001a9c <HAL_GetTick>
 80032b4:	4602      	mov	r2, r0
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	1ad3      	subs	r3, r2, r3
 80032ba:	683a      	ldr	r2, [r7, #0]
 80032bc:	429a      	cmp	r2, r3
 80032be:	d902      	bls.n	80032c6 <I2S_WaitFlagStateUntilTimeout+0x36>
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d109      	bne.n	80032da <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	2201      	movs	r2, #1
 80032ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	2200      	movs	r2, #0
 80032d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 80032d6:	2303      	movs	r3, #3
 80032d8:	e00f      	b.n	80032fa <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	689a      	ldr	r2, [r3, #8]
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	4013      	ands	r3, r2
 80032e4:	68ba      	ldr	r2, [r7, #8]
 80032e6:	429a      	cmp	r2, r3
 80032e8:	bf0c      	ite	eq
 80032ea:	2301      	moveq	r3, #1
 80032ec:	2300      	movne	r3, #0
 80032ee:	b2db      	uxtb	r3, r3
 80032f0:	461a      	mov	r2, r3
 80032f2:	79fb      	ldrb	r3, [r7, #7]
 80032f4:	429a      	cmp	r2, r3
 80032f6:	d1d7      	bne.n	80032a8 <I2S_WaitFlagStateUntilTimeout+0x18>
      }
    }
  }
  return HAL_OK;
 80032f8:	2300      	movs	r3, #0
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	3718      	adds	r7, #24
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd80      	pop	{r7, pc}
	...

08003304 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b088      	sub	sp, #32
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	689b      	ldr	r3, [r3, #8]
 8003312:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a92      	ldr	r2, [pc, #584]	@ (8003564 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d101      	bne.n	8003322 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800331e:	4b92      	ldr	r3, [pc, #584]	@ (8003568 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003320:	e001      	b.n	8003326 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003322:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003326:	689b      	ldr	r3, [r3, #8]
 8003328:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a8b      	ldr	r2, [pc, #556]	@ (8003564 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d101      	bne.n	8003340 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 800333c:	4b8a      	ldr	r3, [pc, #552]	@ (8003568 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800333e:	e001      	b.n	8003344 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003340:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003350:	d004      	beq.n	800335c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	2b00      	cmp	r3, #0
 8003358:	f040 8099 	bne.w	800348e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 800335c:	69fb      	ldr	r3, [r7, #28]
 800335e:	f003 0302 	and.w	r3, r3, #2
 8003362:	2b02      	cmp	r3, #2
 8003364:	d107      	bne.n	8003376 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003366:	697b      	ldr	r3, [r7, #20]
 8003368:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800336c:	2b00      	cmp	r3, #0
 800336e:	d002      	beq.n	8003376 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003370:	6878      	ldr	r0, [r7, #4]
 8003372:	f000 f925 	bl	80035c0 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003376:	69bb      	ldr	r3, [r7, #24]
 8003378:	f003 0301 	and.w	r3, r3, #1
 800337c:	2b01      	cmp	r3, #1
 800337e:	d107      	bne.n	8003390 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003386:	2b00      	cmp	r3, #0
 8003388:	d002      	beq.n	8003390 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800338a:	6878      	ldr	r0, [r7, #4]
 800338c:	f000 f9c8 	bl	8003720 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003390:	69bb      	ldr	r3, [r7, #24]
 8003392:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003396:	2b40      	cmp	r3, #64	@ 0x40
 8003398:	d13a      	bne.n	8003410 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800339a:	693b      	ldr	r3, [r7, #16]
 800339c:	f003 0320 	and.w	r3, r3, #32
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d035      	beq.n	8003410 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a6e      	ldr	r2, [pc, #440]	@ (8003564 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d101      	bne.n	80033b2 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80033ae:	4b6e      	ldr	r3, [pc, #440]	@ (8003568 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80033b0:	e001      	b.n	80033b6 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80033b2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80033b6:	685a      	ldr	r2, [r3, #4]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4969      	ldr	r1, [pc, #420]	@ (8003564 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80033be:	428b      	cmp	r3, r1
 80033c0:	d101      	bne.n	80033c6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80033c2:	4b69      	ldr	r3, [pc, #420]	@ (8003568 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80033c4:	e001      	b.n	80033ca <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80033c6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80033ca:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80033ce:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	685a      	ldr	r2, [r3, #4]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80033de:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80033e0:	2300      	movs	r3, #0
 80033e2:	60fb      	str	r3, [r7, #12]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	68db      	ldr	r3, [r3, #12]
 80033ea:	60fb      	str	r3, [r7, #12]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	689b      	ldr	r3, [r3, #8]
 80033f2:	60fb      	str	r3, [r7, #12]
 80033f4:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2201      	movs	r2, #1
 80033fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003402:	f043 0202 	orr.w	r2, r3, #2
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800340a:	6878      	ldr	r0, [r7, #4]
 800340c:	f7ff fdfa 	bl	8003004 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003410:	69fb      	ldr	r3, [r7, #28]
 8003412:	f003 0308 	and.w	r3, r3, #8
 8003416:	2b08      	cmp	r3, #8
 8003418:	f040 80c3 	bne.w	80035a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	f003 0320 	and.w	r3, r3, #32
 8003422:	2b00      	cmp	r3, #0
 8003424:	f000 80bd 	beq.w	80035a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	685a      	ldr	r2, [r3, #4]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003436:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a49      	ldr	r2, [pc, #292]	@ (8003564 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d101      	bne.n	8003446 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003442:	4b49      	ldr	r3, [pc, #292]	@ (8003568 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003444:	e001      	b.n	800344a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003446:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800344a:	685a      	ldr	r2, [r3, #4]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4944      	ldr	r1, [pc, #272]	@ (8003564 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003452:	428b      	cmp	r3, r1
 8003454:	d101      	bne.n	800345a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003456:	4b44      	ldr	r3, [pc, #272]	@ (8003568 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003458:	e001      	b.n	800345e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800345a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800345e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003462:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003464:	2300      	movs	r3, #0
 8003466:	60bb      	str	r3, [r7, #8]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	689b      	ldr	r3, [r3, #8]
 800346e:	60bb      	str	r3, [r7, #8]
 8003470:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2201      	movs	r2, #1
 8003476:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800347e:	f043 0204 	orr.w	r2, r3, #4
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003486:	6878      	ldr	r0, [r7, #4]
 8003488:	f7ff fdbc 	bl	8003004 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800348c:	e089      	b.n	80035a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800348e:	69bb      	ldr	r3, [r7, #24]
 8003490:	f003 0302 	and.w	r3, r3, #2
 8003494:	2b02      	cmp	r3, #2
 8003496:	d107      	bne.n	80034a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003498:	693b      	ldr	r3, [r7, #16]
 800349a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d002      	beq.n	80034a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80034a2:	6878      	ldr	r0, [r7, #4]
 80034a4:	f000 f8be 	bl	8003624 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80034a8:	69fb      	ldr	r3, [r7, #28]
 80034aa:	f003 0301 	and.w	r3, r3, #1
 80034ae:	2b01      	cmp	r3, #1
 80034b0:	d107      	bne.n	80034c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d002      	beq.n	80034c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80034bc:	6878      	ldr	r0, [r7, #4]
 80034be:	f000 f8fd 	bl	80036bc <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80034c2:	69fb      	ldr	r3, [r7, #28]
 80034c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034c8:	2b40      	cmp	r3, #64	@ 0x40
 80034ca:	d12f      	bne.n	800352c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	f003 0320 	and.w	r3, r3, #32
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d02a      	beq.n	800352c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	685a      	ldr	r2, [r3, #4]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80034e4:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a1e      	ldr	r2, [pc, #120]	@ (8003564 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d101      	bne.n	80034f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80034f0:	4b1d      	ldr	r3, [pc, #116]	@ (8003568 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80034f2:	e001      	b.n	80034f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80034f4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80034f8:	685a      	ldr	r2, [r3, #4]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4919      	ldr	r1, [pc, #100]	@ (8003564 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003500:	428b      	cmp	r3, r1
 8003502:	d101      	bne.n	8003508 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003504:	4b18      	ldr	r3, [pc, #96]	@ (8003568 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003506:	e001      	b.n	800350c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003508:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800350c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003510:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2201      	movs	r2, #1
 8003516:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800351e:	f043 0202 	orr.w	r2, r3, #2
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003526:	6878      	ldr	r0, [r7, #4]
 8003528:	f7ff fd6c 	bl	8003004 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800352c:	69bb      	ldr	r3, [r7, #24]
 800352e:	f003 0308 	and.w	r3, r3, #8
 8003532:	2b08      	cmp	r3, #8
 8003534:	d136      	bne.n	80035a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	f003 0320 	and.w	r3, r3, #32
 800353c:	2b00      	cmp	r3, #0
 800353e:	d031      	beq.n	80035a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a07      	ldr	r2, [pc, #28]	@ (8003564 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d101      	bne.n	800354e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800354a:	4b07      	ldr	r3, [pc, #28]	@ (8003568 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800354c:	e001      	b.n	8003552 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800354e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003552:	685a      	ldr	r2, [r3, #4]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4902      	ldr	r1, [pc, #8]	@ (8003564 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800355a:	428b      	cmp	r3, r1
 800355c:	d106      	bne.n	800356c <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 800355e:	4b02      	ldr	r3, [pc, #8]	@ (8003568 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003560:	e006      	b.n	8003570 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8003562:	bf00      	nop
 8003564:	40003800 	.word	0x40003800
 8003568:	40003400 	.word	0x40003400
 800356c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003570:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003574:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	685a      	ldr	r2, [r3, #4]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003584:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2201      	movs	r2, #1
 800358a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003592:	f043 0204 	orr.w	r2, r3, #4
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800359a:	6878      	ldr	r0, [r7, #4]
 800359c:	f7ff fd32 	bl	8003004 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80035a0:	e000      	b.n	80035a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80035a2:	bf00      	nop
}
 80035a4:	bf00      	nop
 80035a6:	3720      	adds	r7, #32
 80035a8:	46bd      	mov	sp, r7
 80035aa:	bd80      	pop	{r7, pc}

080035ac <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80035ac:	b480      	push	{r7}
 80035ae:	b083      	sub	sp, #12
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80035b4:	bf00      	nop
 80035b6:	370c      	adds	r7, #12
 80035b8:	46bd      	mov	sp, r7
 80035ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035be:	4770      	bx	lr

080035c0 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b082      	sub	sp, #8
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035cc:	1c99      	adds	r1, r3, #2
 80035ce:	687a      	ldr	r2, [r7, #4]
 80035d0:	6251      	str	r1, [r2, #36]	@ 0x24
 80035d2:	881a      	ldrh	r2, [r3, #0]
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035de:	b29b      	uxth	r3, r3
 80035e0:	3b01      	subs	r3, #1
 80035e2:	b29a      	uxth	r2, r3
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035ec:	b29b      	uxth	r3, r3
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d113      	bne.n	800361a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	685a      	ldr	r2, [r3, #4]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003600:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003606:	b29b      	uxth	r3, r3
 8003608:	2b00      	cmp	r3, #0
 800360a:	d106      	bne.n	800361a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2201      	movs	r2, #1
 8003610:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003614:	6878      	ldr	r0, [r7, #4]
 8003616:	f7ff ffc9 	bl	80035ac <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800361a:	bf00      	nop
 800361c:	3708      	adds	r7, #8
 800361e:	46bd      	mov	sp, r7
 8003620:	bd80      	pop	{r7, pc}
	...

08003624 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b082      	sub	sp, #8
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003630:	1c99      	adds	r1, r3, #2
 8003632:	687a      	ldr	r2, [r7, #4]
 8003634:	6251      	str	r1, [r2, #36]	@ 0x24
 8003636:	8819      	ldrh	r1, [r3, #0]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a1d      	ldr	r2, [pc, #116]	@ (80036b4 <I2SEx_TxISR_I2SExt+0x90>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d101      	bne.n	8003646 <I2SEx_TxISR_I2SExt+0x22>
 8003642:	4b1d      	ldr	r3, [pc, #116]	@ (80036b8 <I2SEx_TxISR_I2SExt+0x94>)
 8003644:	e001      	b.n	800364a <I2SEx_TxISR_I2SExt+0x26>
 8003646:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800364a:	460a      	mov	r2, r1
 800364c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003652:	b29b      	uxth	r3, r3
 8003654:	3b01      	subs	r3, #1
 8003656:	b29a      	uxth	r2, r3
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003660:	b29b      	uxth	r3, r3
 8003662:	2b00      	cmp	r3, #0
 8003664:	d121      	bne.n	80036aa <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a12      	ldr	r2, [pc, #72]	@ (80036b4 <I2SEx_TxISR_I2SExt+0x90>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d101      	bne.n	8003674 <I2SEx_TxISR_I2SExt+0x50>
 8003670:	4b11      	ldr	r3, [pc, #68]	@ (80036b8 <I2SEx_TxISR_I2SExt+0x94>)
 8003672:	e001      	b.n	8003678 <I2SEx_TxISR_I2SExt+0x54>
 8003674:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003678:	685a      	ldr	r2, [r3, #4]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	490d      	ldr	r1, [pc, #52]	@ (80036b4 <I2SEx_TxISR_I2SExt+0x90>)
 8003680:	428b      	cmp	r3, r1
 8003682:	d101      	bne.n	8003688 <I2SEx_TxISR_I2SExt+0x64>
 8003684:	4b0c      	ldr	r3, [pc, #48]	@ (80036b8 <I2SEx_TxISR_I2SExt+0x94>)
 8003686:	e001      	b.n	800368c <I2SEx_TxISR_I2SExt+0x68>
 8003688:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800368c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003690:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003696:	b29b      	uxth	r3, r3
 8003698:	2b00      	cmp	r3, #0
 800369a:	d106      	bne.n	80036aa <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2201      	movs	r2, #1
 80036a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80036a4:	6878      	ldr	r0, [r7, #4]
 80036a6:	f7ff ff81 	bl	80035ac <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80036aa:	bf00      	nop
 80036ac:	3708      	adds	r7, #8
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}
 80036b2:	bf00      	nop
 80036b4:	40003800 	.word	0x40003800
 80036b8:	40003400 	.word	0x40003400

080036bc <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b082      	sub	sp, #8
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	68d8      	ldr	r0, [r3, #12]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036ce:	1c99      	adds	r1, r3, #2
 80036d0:	687a      	ldr	r2, [r7, #4]
 80036d2:	62d1      	str	r1, [r2, #44]	@ 0x2c
 80036d4:	b282      	uxth	r2, r0
 80036d6:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80036dc:	b29b      	uxth	r3, r3
 80036de:	3b01      	subs	r3, #1
 80036e0:	b29a      	uxth	r2, r3
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80036ea:	b29b      	uxth	r3, r3
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d113      	bne.n	8003718 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	685a      	ldr	r2, [r3, #4]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80036fe:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003704:	b29b      	uxth	r3, r3
 8003706:	2b00      	cmp	r3, #0
 8003708:	d106      	bne.n	8003718 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2201      	movs	r2, #1
 800370e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003712:	6878      	ldr	r0, [r7, #4]
 8003714:	f7ff ff4a 	bl	80035ac <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003718:	bf00      	nop
 800371a:	3708      	adds	r7, #8
 800371c:	46bd      	mov	sp, r7
 800371e:	bd80      	pop	{r7, pc}

08003720 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b082      	sub	sp, #8
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a20      	ldr	r2, [pc, #128]	@ (80037b0 <I2SEx_RxISR_I2SExt+0x90>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d101      	bne.n	8003736 <I2SEx_RxISR_I2SExt+0x16>
 8003732:	4b20      	ldr	r3, [pc, #128]	@ (80037b4 <I2SEx_RxISR_I2SExt+0x94>)
 8003734:	e001      	b.n	800373a <I2SEx_RxISR_I2SExt+0x1a>
 8003736:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800373a:	68d8      	ldr	r0, [r3, #12]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003740:	1c99      	adds	r1, r3, #2
 8003742:	687a      	ldr	r2, [r7, #4]
 8003744:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8003746:	b282      	uxth	r2, r0
 8003748:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800374e:	b29b      	uxth	r3, r3
 8003750:	3b01      	subs	r3, #1
 8003752:	b29a      	uxth	r2, r3
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800375c:	b29b      	uxth	r3, r3
 800375e:	2b00      	cmp	r3, #0
 8003760:	d121      	bne.n	80037a6 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a12      	ldr	r2, [pc, #72]	@ (80037b0 <I2SEx_RxISR_I2SExt+0x90>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d101      	bne.n	8003770 <I2SEx_RxISR_I2SExt+0x50>
 800376c:	4b11      	ldr	r3, [pc, #68]	@ (80037b4 <I2SEx_RxISR_I2SExt+0x94>)
 800376e:	e001      	b.n	8003774 <I2SEx_RxISR_I2SExt+0x54>
 8003770:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003774:	685a      	ldr	r2, [r3, #4]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	490d      	ldr	r1, [pc, #52]	@ (80037b0 <I2SEx_RxISR_I2SExt+0x90>)
 800377c:	428b      	cmp	r3, r1
 800377e:	d101      	bne.n	8003784 <I2SEx_RxISR_I2SExt+0x64>
 8003780:	4b0c      	ldr	r3, [pc, #48]	@ (80037b4 <I2SEx_RxISR_I2SExt+0x94>)
 8003782:	e001      	b.n	8003788 <I2SEx_RxISR_I2SExt+0x68>
 8003784:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003788:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800378c:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003792:	b29b      	uxth	r3, r3
 8003794:	2b00      	cmp	r3, #0
 8003796:	d106      	bne.n	80037a6 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2201      	movs	r2, #1
 800379c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80037a0:	6878      	ldr	r0, [r7, #4]
 80037a2:	f7ff ff03 	bl	80035ac <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80037a6:	bf00      	nop
 80037a8:	3708      	adds	r7, #8
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}
 80037ae:	bf00      	nop
 80037b0:	40003800 	.word	0x40003800
 80037b4:	40003400 	.word	0x40003400

080037b8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b086      	sub	sp, #24
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d101      	bne.n	80037ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80037c6:	2301      	movs	r3, #1
 80037c8:	e267      	b.n	8003c9a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f003 0301 	and.w	r3, r3, #1
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d075      	beq.n	80038c2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80037d6:	4b88      	ldr	r3, [pc, #544]	@ (80039f8 <HAL_RCC_OscConfig+0x240>)
 80037d8:	689b      	ldr	r3, [r3, #8]
 80037da:	f003 030c 	and.w	r3, r3, #12
 80037de:	2b04      	cmp	r3, #4
 80037e0:	d00c      	beq.n	80037fc <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80037e2:	4b85      	ldr	r3, [pc, #532]	@ (80039f8 <HAL_RCC_OscConfig+0x240>)
 80037e4:	689b      	ldr	r3, [r3, #8]
 80037e6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80037ea:	2b08      	cmp	r3, #8
 80037ec:	d112      	bne.n	8003814 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80037ee:	4b82      	ldr	r3, [pc, #520]	@ (80039f8 <HAL_RCC_OscConfig+0x240>)
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80037f6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80037fa:	d10b      	bne.n	8003814 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037fc:	4b7e      	ldr	r3, [pc, #504]	@ (80039f8 <HAL_RCC_OscConfig+0x240>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003804:	2b00      	cmp	r3, #0
 8003806:	d05b      	beq.n	80038c0 <HAL_RCC_OscConfig+0x108>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d157      	bne.n	80038c0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003810:	2301      	movs	r3, #1
 8003812:	e242      	b.n	8003c9a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800381c:	d106      	bne.n	800382c <HAL_RCC_OscConfig+0x74>
 800381e:	4b76      	ldr	r3, [pc, #472]	@ (80039f8 <HAL_RCC_OscConfig+0x240>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a75      	ldr	r2, [pc, #468]	@ (80039f8 <HAL_RCC_OscConfig+0x240>)
 8003824:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003828:	6013      	str	r3, [r2, #0]
 800382a:	e01d      	b.n	8003868 <HAL_RCC_OscConfig+0xb0>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003834:	d10c      	bne.n	8003850 <HAL_RCC_OscConfig+0x98>
 8003836:	4b70      	ldr	r3, [pc, #448]	@ (80039f8 <HAL_RCC_OscConfig+0x240>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a6f      	ldr	r2, [pc, #444]	@ (80039f8 <HAL_RCC_OscConfig+0x240>)
 800383c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003840:	6013      	str	r3, [r2, #0]
 8003842:	4b6d      	ldr	r3, [pc, #436]	@ (80039f8 <HAL_RCC_OscConfig+0x240>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a6c      	ldr	r2, [pc, #432]	@ (80039f8 <HAL_RCC_OscConfig+0x240>)
 8003848:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800384c:	6013      	str	r3, [r2, #0]
 800384e:	e00b      	b.n	8003868 <HAL_RCC_OscConfig+0xb0>
 8003850:	4b69      	ldr	r3, [pc, #420]	@ (80039f8 <HAL_RCC_OscConfig+0x240>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a68      	ldr	r2, [pc, #416]	@ (80039f8 <HAL_RCC_OscConfig+0x240>)
 8003856:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800385a:	6013      	str	r3, [r2, #0]
 800385c:	4b66      	ldr	r3, [pc, #408]	@ (80039f8 <HAL_RCC_OscConfig+0x240>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a65      	ldr	r2, [pc, #404]	@ (80039f8 <HAL_RCC_OscConfig+0x240>)
 8003862:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003866:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d013      	beq.n	8003898 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003870:	f7fe f914 	bl	8001a9c <HAL_GetTick>
 8003874:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003876:	e008      	b.n	800388a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003878:	f7fe f910 	bl	8001a9c <HAL_GetTick>
 800387c:	4602      	mov	r2, r0
 800387e:	693b      	ldr	r3, [r7, #16]
 8003880:	1ad3      	subs	r3, r2, r3
 8003882:	2b64      	cmp	r3, #100	@ 0x64
 8003884:	d901      	bls.n	800388a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003886:	2303      	movs	r3, #3
 8003888:	e207      	b.n	8003c9a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800388a:	4b5b      	ldr	r3, [pc, #364]	@ (80039f8 <HAL_RCC_OscConfig+0x240>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003892:	2b00      	cmp	r3, #0
 8003894:	d0f0      	beq.n	8003878 <HAL_RCC_OscConfig+0xc0>
 8003896:	e014      	b.n	80038c2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003898:	f7fe f900 	bl	8001a9c <HAL_GetTick>
 800389c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800389e:	e008      	b.n	80038b2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038a0:	f7fe f8fc 	bl	8001a9c <HAL_GetTick>
 80038a4:	4602      	mov	r2, r0
 80038a6:	693b      	ldr	r3, [r7, #16]
 80038a8:	1ad3      	subs	r3, r2, r3
 80038aa:	2b64      	cmp	r3, #100	@ 0x64
 80038ac:	d901      	bls.n	80038b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80038ae:	2303      	movs	r3, #3
 80038b0:	e1f3      	b.n	8003c9a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038b2:	4b51      	ldr	r3, [pc, #324]	@ (80039f8 <HAL_RCC_OscConfig+0x240>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d1f0      	bne.n	80038a0 <HAL_RCC_OscConfig+0xe8>
 80038be:	e000      	b.n	80038c2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f003 0302 	and.w	r3, r3, #2
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d063      	beq.n	8003996 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80038ce:	4b4a      	ldr	r3, [pc, #296]	@ (80039f8 <HAL_RCC_OscConfig+0x240>)
 80038d0:	689b      	ldr	r3, [r3, #8]
 80038d2:	f003 030c 	and.w	r3, r3, #12
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d00b      	beq.n	80038f2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80038da:	4b47      	ldr	r3, [pc, #284]	@ (80039f8 <HAL_RCC_OscConfig+0x240>)
 80038dc:	689b      	ldr	r3, [r3, #8]
 80038de:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80038e2:	2b08      	cmp	r3, #8
 80038e4:	d11c      	bne.n	8003920 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80038e6:	4b44      	ldr	r3, [pc, #272]	@ (80039f8 <HAL_RCC_OscConfig+0x240>)
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d116      	bne.n	8003920 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038f2:	4b41      	ldr	r3, [pc, #260]	@ (80039f8 <HAL_RCC_OscConfig+0x240>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f003 0302 	and.w	r3, r3, #2
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d005      	beq.n	800390a <HAL_RCC_OscConfig+0x152>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	68db      	ldr	r3, [r3, #12]
 8003902:	2b01      	cmp	r3, #1
 8003904:	d001      	beq.n	800390a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003906:	2301      	movs	r3, #1
 8003908:	e1c7      	b.n	8003c9a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800390a:	4b3b      	ldr	r3, [pc, #236]	@ (80039f8 <HAL_RCC_OscConfig+0x240>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	691b      	ldr	r3, [r3, #16]
 8003916:	00db      	lsls	r3, r3, #3
 8003918:	4937      	ldr	r1, [pc, #220]	@ (80039f8 <HAL_RCC_OscConfig+0x240>)
 800391a:	4313      	orrs	r3, r2
 800391c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800391e:	e03a      	b.n	8003996 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	68db      	ldr	r3, [r3, #12]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d020      	beq.n	800396a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003928:	4b34      	ldr	r3, [pc, #208]	@ (80039fc <HAL_RCC_OscConfig+0x244>)
 800392a:	2201      	movs	r2, #1
 800392c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800392e:	f7fe f8b5 	bl	8001a9c <HAL_GetTick>
 8003932:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003934:	e008      	b.n	8003948 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003936:	f7fe f8b1 	bl	8001a9c <HAL_GetTick>
 800393a:	4602      	mov	r2, r0
 800393c:	693b      	ldr	r3, [r7, #16]
 800393e:	1ad3      	subs	r3, r2, r3
 8003940:	2b02      	cmp	r3, #2
 8003942:	d901      	bls.n	8003948 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003944:	2303      	movs	r3, #3
 8003946:	e1a8      	b.n	8003c9a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003948:	4b2b      	ldr	r3, [pc, #172]	@ (80039f8 <HAL_RCC_OscConfig+0x240>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f003 0302 	and.w	r3, r3, #2
 8003950:	2b00      	cmp	r3, #0
 8003952:	d0f0      	beq.n	8003936 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003954:	4b28      	ldr	r3, [pc, #160]	@ (80039f8 <HAL_RCC_OscConfig+0x240>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	691b      	ldr	r3, [r3, #16]
 8003960:	00db      	lsls	r3, r3, #3
 8003962:	4925      	ldr	r1, [pc, #148]	@ (80039f8 <HAL_RCC_OscConfig+0x240>)
 8003964:	4313      	orrs	r3, r2
 8003966:	600b      	str	r3, [r1, #0]
 8003968:	e015      	b.n	8003996 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800396a:	4b24      	ldr	r3, [pc, #144]	@ (80039fc <HAL_RCC_OscConfig+0x244>)
 800396c:	2200      	movs	r2, #0
 800396e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003970:	f7fe f894 	bl	8001a9c <HAL_GetTick>
 8003974:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003976:	e008      	b.n	800398a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003978:	f7fe f890 	bl	8001a9c <HAL_GetTick>
 800397c:	4602      	mov	r2, r0
 800397e:	693b      	ldr	r3, [r7, #16]
 8003980:	1ad3      	subs	r3, r2, r3
 8003982:	2b02      	cmp	r3, #2
 8003984:	d901      	bls.n	800398a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003986:	2303      	movs	r3, #3
 8003988:	e187      	b.n	8003c9a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800398a:	4b1b      	ldr	r3, [pc, #108]	@ (80039f8 <HAL_RCC_OscConfig+0x240>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f003 0302 	and.w	r3, r3, #2
 8003992:	2b00      	cmp	r3, #0
 8003994:	d1f0      	bne.n	8003978 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f003 0308 	and.w	r3, r3, #8
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d036      	beq.n	8003a10 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	695b      	ldr	r3, [r3, #20]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d016      	beq.n	80039d8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80039aa:	4b15      	ldr	r3, [pc, #84]	@ (8003a00 <HAL_RCC_OscConfig+0x248>)
 80039ac:	2201      	movs	r2, #1
 80039ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039b0:	f7fe f874 	bl	8001a9c <HAL_GetTick>
 80039b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039b6:	e008      	b.n	80039ca <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039b8:	f7fe f870 	bl	8001a9c <HAL_GetTick>
 80039bc:	4602      	mov	r2, r0
 80039be:	693b      	ldr	r3, [r7, #16]
 80039c0:	1ad3      	subs	r3, r2, r3
 80039c2:	2b02      	cmp	r3, #2
 80039c4:	d901      	bls.n	80039ca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80039c6:	2303      	movs	r3, #3
 80039c8:	e167      	b.n	8003c9a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039ca:	4b0b      	ldr	r3, [pc, #44]	@ (80039f8 <HAL_RCC_OscConfig+0x240>)
 80039cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80039ce:	f003 0302 	and.w	r3, r3, #2
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d0f0      	beq.n	80039b8 <HAL_RCC_OscConfig+0x200>
 80039d6:	e01b      	b.n	8003a10 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039d8:	4b09      	ldr	r3, [pc, #36]	@ (8003a00 <HAL_RCC_OscConfig+0x248>)
 80039da:	2200      	movs	r2, #0
 80039dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039de:	f7fe f85d 	bl	8001a9c <HAL_GetTick>
 80039e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039e4:	e00e      	b.n	8003a04 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039e6:	f7fe f859 	bl	8001a9c <HAL_GetTick>
 80039ea:	4602      	mov	r2, r0
 80039ec:	693b      	ldr	r3, [r7, #16]
 80039ee:	1ad3      	subs	r3, r2, r3
 80039f0:	2b02      	cmp	r3, #2
 80039f2:	d907      	bls.n	8003a04 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80039f4:	2303      	movs	r3, #3
 80039f6:	e150      	b.n	8003c9a <HAL_RCC_OscConfig+0x4e2>
 80039f8:	40023800 	.word	0x40023800
 80039fc:	42470000 	.word	0x42470000
 8003a00:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a04:	4b88      	ldr	r3, [pc, #544]	@ (8003c28 <HAL_RCC_OscConfig+0x470>)
 8003a06:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a08:	f003 0302 	and.w	r3, r3, #2
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d1ea      	bne.n	80039e6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f003 0304 	and.w	r3, r3, #4
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	f000 8097 	beq.w	8003b4c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a22:	4b81      	ldr	r3, [pc, #516]	@ (8003c28 <HAL_RCC_OscConfig+0x470>)
 8003a24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d10f      	bne.n	8003a4e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a2e:	2300      	movs	r3, #0
 8003a30:	60bb      	str	r3, [r7, #8]
 8003a32:	4b7d      	ldr	r3, [pc, #500]	@ (8003c28 <HAL_RCC_OscConfig+0x470>)
 8003a34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a36:	4a7c      	ldr	r2, [pc, #496]	@ (8003c28 <HAL_RCC_OscConfig+0x470>)
 8003a38:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a3c:	6413      	str	r3, [r2, #64]	@ 0x40
 8003a3e:	4b7a      	ldr	r3, [pc, #488]	@ (8003c28 <HAL_RCC_OscConfig+0x470>)
 8003a40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a46:	60bb      	str	r3, [r7, #8]
 8003a48:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a4e:	4b77      	ldr	r3, [pc, #476]	@ (8003c2c <HAL_RCC_OscConfig+0x474>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d118      	bne.n	8003a8c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a5a:	4b74      	ldr	r3, [pc, #464]	@ (8003c2c <HAL_RCC_OscConfig+0x474>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a73      	ldr	r2, [pc, #460]	@ (8003c2c <HAL_RCC_OscConfig+0x474>)
 8003a60:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a64:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a66:	f7fe f819 	bl	8001a9c <HAL_GetTick>
 8003a6a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a6c:	e008      	b.n	8003a80 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a6e:	f7fe f815 	bl	8001a9c <HAL_GetTick>
 8003a72:	4602      	mov	r2, r0
 8003a74:	693b      	ldr	r3, [r7, #16]
 8003a76:	1ad3      	subs	r3, r2, r3
 8003a78:	2b02      	cmp	r3, #2
 8003a7a:	d901      	bls.n	8003a80 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003a7c:	2303      	movs	r3, #3
 8003a7e:	e10c      	b.n	8003c9a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a80:	4b6a      	ldr	r3, [pc, #424]	@ (8003c2c <HAL_RCC_OscConfig+0x474>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d0f0      	beq.n	8003a6e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	689b      	ldr	r3, [r3, #8]
 8003a90:	2b01      	cmp	r3, #1
 8003a92:	d106      	bne.n	8003aa2 <HAL_RCC_OscConfig+0x2ea>
 8003a94:	4b64      	ldr	r3, [pc, #400]	@ (8003c28 <HAL_RCC_OscConfig+0x470>)
 8003a96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a98:	4a63      	ldr	r2, [pc, #396]	@ (8003c28 <HAL_RCC_OscConfig+0x470>)
 8003a9a:	f043 0301 	orr.w	r3, r3, #1
 8003a9e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003aa0:	e01c      	b.n	8003adc <HAL_RCC_OscConfig+0x324>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	689b      	ldr	r3, [r3, #8]
 8003aa6:	2b05      	cmp	r3, #5
 8003aa8:	d10c      	bne.n	8003ac4 <HAL_RCC_OscConfig+0x30c>
 8003aaa:	4b5f      	ldr	r3, [pc, #380]	@ (8003c28 <HAL_RCC_OscConfig+0x470>)
 8003aac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003aae:	4a5e      	ldr	r2, [pc, #376]	@ (8003c28 <HAL_RCC_OscConfig+0x470>)
 8003ab0:	f043 0304 	orr.w	r3, r3, #4
 8003ab4:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ab6:	4b5c      	ldr	r3, [pc, #368]	@ (8003c28 <HAL_RCC_OscConfig+0x470>)
 8003ab8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003aba:	4a5b      	ldr	r2, [pc, #364]	@ (8003c28 <HAL_RCC_OscConfig+0x470>)
 8003abc:	f043 0301 	orr.w	r3, r3, #1
 8003ac0:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ac2:	e00b      	b.n	8003adc <HAL_RCC_OscConfig+0x324>
 8003ac4:	4b58      	ldr	r3, [pc, #352]	@ (8003c28 <HAL_RCC_OscConfig+0x470>)
 8003ac6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ac8:	4a57      	ldr	r2, [pc, #348]	@ (8003c28 <HAL_RCC_OscConfig+0x470>)
 8003aca:	f023 0301 	bic.w	r3, r3, #1
 8003ace:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ad0:	4b55      	ldr	r3, [pc, #340]	@ (8003c28 <HAL_RCC_OscConfig+0x470>)
 8003ad2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ad4:	4a54      	ldr	r2, [pc, #336]	@ (8003c28 <HAL_RCC_OscConfig+0x470>)
 8003ad6:	f023 0304 	bic.w	r3, r3, #4
 8003ada:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	689b      	ldr	r3, [r3, #8]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d015      	beq.n	8003b10 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ae4:	f7fd ffda 	bl	8001a9c <HAL_GetTick>
 8003ae8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003aea:	e00a      	b.n	8003b02 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003aec:	f7fd ffd6 	bl	8001a9c <HAL_GetTick>
 8003af0:	4602      	mov	r2, r0
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	1ad3      	subs	r3, r2, r3
 8003af6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d901      	bls.n	8003b02 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003afe:	2303      	movs	r3, #3
 8003b00:	e0cb      	b.n	8003c9a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b02:	4b49      	ldr	r3, [pc, #292]	@ (8003c28 <HAL_RCC_OscConfig+0x470>)
 8003b04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b06:	f003 0302 	and.w	r3, r3, #2
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d0ee      	beq.n	8003aec <HAL_RCC_OscConfig+0x334>
 8003b0e:	e014      	b.n	8003b3a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b10:	f7fd ffc4 	bl	8001a9c <HAL_GetTick>
 8003b14:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b16:	e00a      	b.n	8003b2e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b18:	f7fd ffc0 	bl	8001a9c <HAL_GetTick>
 8003b1c:	4602      	mov	r2, r0
 8003b1e:	693b      	ldr	r3, [r7, #16]
 8003b20:	1ad3      	subs	r3, r2, r3
 8003b22:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d901      	bls.n	8003b2e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003b2a:	2303      	movs	r3, #3
 8003b2c:	e0b5      	b.n	8003c9a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b2e:	4b3e      	ldr	r3, [pc, #248]	@ (8003c28 <HAL_RCC_OscConfig+0x470>)
 8003b30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b32:	f003 0302 	and.w	r3, r3, #2
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d1ee      	bne.n	8003b18 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003b3a:	7dfb      	ldrb	r3, [r7, #23]
 8003b3c:	2b01      	cmp	r3, #1
 8003b3e:	d105      	bne.n	8003b4c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b40:	4b39      	ldr	r3, [pc, #228]	@ (8003c28 <HAL_RCC_OscConfig+0x470>)
 8003b42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b44:	4a38      	ldr	r2, [pc, #224]	@ (8003c28 <HAL_RCC_OscConfig+0x470>)
 8003b46:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003b4a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	699b      	ldr	r3, [r3, #24]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	f000 80a1 	beq.w	8003c98 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003b56:	4b34      	ldr	r3, [pc, #208]	@ (8003c28 <HAL_RCC_OscConfig+0x470>)
 8003b58:	689b      	ldr	r3, [r3, #8]
 8003b5a:	f003 030c 	and.w	r3, r3, #12
 8003b5e:	2b08      	cmp	r3, #8
 8003b60:	d05c      	beq.n	8003c1c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	699b      	ldr	r3, [r3, #24]
 8003b66:	2b02      	cmp	r3, #2
 8003b68:	d141      	bne.n	8003bee <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b6a:	4b31      	ldr	r3, [pc, #196]	@ (8003c30 <HAL_RCC_OscConfig+0x478>)
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b70:	f7fd ff94 	bl	8001a9c <HAL_GetTick>
 8003b74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b76:	e008      	b.n	8003b8a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b78:	f7fd ff90 	bl	8001a9c <HAL_GetTick>
 8003b7c:	4602      	mov	r2, r0
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	1ad3      	subs	r3, r2, r3
 8003b82:	2b02      	cmp	r3, #2
 8003b84:	d901      	bls.n	8003b8a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003b86:	2303      	movs	r3, #3
 8003b88:	e087      	b.n	8003c9a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b8a:	4b27      	ldr	r3, [pc, #156]	@ (8003c28 <HAL_RCC_OscConfig+0x470>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d1f0      	bne.n	8003b78 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	69da      	ldr	r2, [r3, #28]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6a1b      	ldr	r3, [r3, #32]
 8003b9e:	431a      	orrs	r2, r3
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ba4:	019b      	lsls	r3, r3, #6
 8003ba6:	431a      	orrs	r2, r3
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bac:	085b      	lsrs	r3, r3, #1
 8003bae:	3b01      	subs	r3, #1
 8003bb0:	041b      	lsls	r3, r3, #16
 8003bb2:	431a      	orrs	r2, r3
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bb8:	061b      	lsls	r3, r3, #24
 8003bba:	491b      	ldr	r1, [pc, #108]	@ (8003c28 <HAL_RCC_OscConfig+0x470>)
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003bc0:	4b1b      	ldr	r3, [pc, #108]	@ (8003c30 <HAL_RCC_OscConfig+0x478>)
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bc6:	f7fd ff69 	bl	8001a9c <HAL_GetTick>
 8003bca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bcc:	e008      	b.n	8003be0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bce:	f7fd ff65 	bl	8001a9c <HAL_GetTick>
 8003bd2:	4602      	mov	r2, r0
 8003bd4:	693b      	ldr	r3, [r7, #16]
 8003bd6:	1ad3      	subs	r3, r2, r3
 8003bd8:	2b02      	cmp	r3, #2
 8003bda:	d901      	bls.n	8003be0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003bdc:	2303      	movs	r3, #3
 8003bde:	e05c      	b.n	8003c9a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003be0:	4b11      	ldr	r3, [pc, #68]	@ (8003c28 <HAL_RCC_OscConfig+0x470>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d0f0      	beq.n	8003bce <HAL_RCC_OscConfig+0x416>
 8003bec:	e054      	b.n	8003c98 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bee:	4b10      	ldr	r3, [pc, #64]	@ (8003c30 <HAL_RCC_OscConfig+0x478>)
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bf4:	f7fd ff52 	bl	8001a9c <HAL_GetTick>
 8003bf8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bfa:	e008      	b.n	8003c0e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bfc:	f7fd ff4e 	bl	8001a9c <HAL_GetTick>
 8003c00:	4602      	mov	r2, r0
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	1ad3      	subs	r3, r2, r3
 8003c06:	2b02      	cmp	r3, #2
 8003c08:	d901      	bls.n	8003c0e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003c0a:	2303      	movs	r3, #3
 8003c0c:	e045      	b.n	8003c9a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c0e:	4b06      	ldr	r3, [pc, #24]	@ (8003c28 <HAL_RCC_OscConfig+0x470>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d1f0      	bne.n	8003bfc <HAL_RCC_OscConfig+0x444>
 8003c1a:	e03d      	b.n	8003c98 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	699b      	ldr	r3, [r3, #24]
 8003c20:	2b01      	cmp	r3, #1
 8003c22:	d107      	bne.n	8003c34 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003c24:	2301      	movs	r3, #1
 8003c26:	e038      	b.n	8003c9a <HAL_RCC_OscConfig+0x4e2>
 8003c28:	40023800 	.word	0x40023800
 8003c2c:	40007000 	.word	0x40007000
 8003c30:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003c34:	4b1b      	ldr	r3, [pc, #108]	@ (8003ca4 <HAL_RCC_OscConfig+0x4ec>)
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	699b      	ldr	r3, [r3, #24]
 8003c3e:	2b01      	cmp	r3, #1
 8003c40:	d028      	beq.n	8003c94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c4c:	429a      	cmp	r2, r3
 8003c4e:	d121      	bne.n	8003c94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c5a:	429a      	cmp	r2, r3
 8003c5c:	d11a      	bne.n	8003c94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c5e:	68fa      	ldr	r2, [r7, #12]
 8003c60:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003c64:	4013      	ands	r3, r2
 8003c66:	687a      	ldr	r2, [r7, #4]
 8003c68:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003c6a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d111      	bne.n	8003c94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c7a:	085b      	lsrs	r3, r3, #1
 8003c7c:	3b01      	subs	r3, #1
 8003c7e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c80:	429a      	cmp	r2, r3
 8003c82:	d107      	bne.n	8003c94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c8e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c90:	429a      	cmp	r2, r3
 8003c92:	d001      	beq.n	8003c98 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003c94:	2301      	movs	r3, #1
 8003c96:	e000      	b.n	8003c9a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003c98:	2300      	movs	r3, #0
}
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	3718      	adds	r7, #24
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bd80      	pop	{r7, pc}
 8003ca2:	bf00      	nop
 8003ca4:	40023800 	.word	0x40023800

08003ca8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b084      	sub	sp, #16
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
 8003cb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d101      	bne.n	8003cbc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003cb8:	2301      	movs	r3, #1
 8003cba:	e0cc      	b.n	8003e56 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003cbc:	4b68      	ldr	r3, [pc, #416]	@ (8003e60 <HAL_RCC_ClockConfig+0x1b8>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f003 0307 	and.w	r3, r3, #7
 8003cc4:	683a      	ldr	r2, [r7, #0]
 8003cc6:	429a      	cmp	r2, r3
 8003cc8:	d90c      	bls.n	8003ce4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cca:	4b65      	ldr	r3, [pc, #404]	@ (8003e60 <HAL_RCC_ClockConfig+0x1b8>)
 8003ccc:	683a      	ldr	r2, [r7, #0]
 8003cce:	b2d2      	uxtb	r2, r2
 8003cd0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cd2:	4b63      	ldr	r3, [pc, #396]	@ (8003e60 <HAL_RCC_ClockConfig+0x1b8>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f003 0307 	and.w	r3, r3, #7
 8003cda:	683a      	ldr	r2, [r7, #0]
 8003cdc:	429a      	cmp	r2, r3
 8003cde:	d001      	beq.n	8003ce4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	e0b8      	b.n	8003e56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f003 0302 	and.w	r3, r3, #2
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d020      	beq.n	8003d32 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f003 0304 	and.w	r3, r3, #4
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d005      	beq.n	8003d08 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003cfc:	4b59      	ldr	r3, [pc, #356]	@ (8003e64 <HAL_RCC_ClockConfig+0x1bc>)
 8003cfe:	689b      	ldr	r3, [r3, #8]
 8003d00:	4a58      	ldr	r2, [pc, #352]	@ (8003e64 <HAL_RCC_ClockConfig+0x1bc>)
 8003d02:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003d06:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f003 0308 	and.w	r3, r3, #8
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d005      	beq.n	8003d20 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d14:	4b53      	ldr	r3, [pc, #332]	@ (8003e64 <HAL_RCC_ClockConfig+0x1bc>)
 8003d16:	689b      	ldr	r3, [r3, #8]
 8003d18:	4a52      	ldr	r2, [pc, #328]	@ (8003e64 <HAL_RCC_ClockConfig+0x1bc>)
 8003d1a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003d1e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d20:	4b50      	ldr	r3, [pc, #320]	@ (8003e64 <HAL_RCC_ClockConfig+0x1bc>)
 8003d22:	689b      	ldr	r3, [r3, #8]
 8003d24:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	689b      	ldr	r3, [r3, #8]
 8003d2c:	494d      	ldr	r1, [pc, #308]	@ (8003e64 <HAL_RCC_ClockConfig+0x1bc>)
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f003 0301 	and.w	r3, r3, #1
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d044      	beq.n	8003dc8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	2b01      	cmp	r3, #1
 8003d44:	d107      	bne.n	8003d56 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d46:	4b47      	ldr	r3, [pc, #284]	@ (8003e64 <HAL_RCC_ClockConfig+0x1bc>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d119      	bne.n	8003d86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d52:	2301      	movs	r3, #1
 8003d54:	e07f      	b.n	8003e56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	2b02      	cmp	r3, #2
 8003d5c:	d003      	beq.n	8003d66 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d62:	2b03      	cmp	r3, #3
 8003d64:	d107      	bne.n	8003d76 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d66:	4b3f      	ldr	r3, [pc, #252]	@ (8003e64 <HAL_RCC_ClockConfig+0x1bc>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d109      	bne.n	8003d86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d72:	2301      	movs	r3, #1
 8003d74:	e06f      	b.n	8003e56 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d76:	4b3b      	ldr	r3, [pc, #236]	@ (8003e64 <HAL_RCC_ClockConfig+0x1bc>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f003 0302 	and.w	r3, r3, #2
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d101      	bne.n	8003d86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d82:	2301      	movs	r3, #1
 8003d84:	e067      	b.n	8003e56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d86:	4b37      	ldr	r3, [pc, #220]	@ (8003e64 <HAL_RCC_ClockConfig+0x1bc>)
 8003d88:	689b      	ldr	r3, [r3, #8]
 8003d8a:	f023 0203 	bic.w	r2, r3, #3
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	4934      	ldr	r1, [pc, #208]	@ (8003e64 <HAL_RCC_ClockConfig+0x1bc>)
 8003d94:	4313      	orrs	r3, r2
 8003d96:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d98:	f7fd fe80 	bl	8001a9c <HAL_GetTick>
 8003d9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d9e:	e00a      	b.n	8003db6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003da0:	f7fd fe7c 	bl	8001a9c <HAL_GetTick>
 8003da4:	4602      	mov	r2, r0
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	1ad3      	subs	r3, r2, r3
 8003daa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d901      	bls.n	8003db6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003db2:	2303      	movs	r3, #3
 8003db4:	e04f      	b.n	8003e56 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003db6:	4b2b      	ldr	r3, [pc, #172]	@ (8003e64 <HAL_RCC_ClockConfig+0x1bc>)
 8003db8:	689b      	ldr	r3, [r3, #8]
 8003dba:	f003 020c 	and.w	r2, r3, #12
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	009b      	lsls	r3, r3, #2
 8003dc4:	429a      	cmp	r2, r3
 8003dc6:	d1eb      	bne.n	8003da0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003dc8:	4b25      	ldr	r3, [pc, #148]	@ (8003e60 <HAL_RCC_ClockConfig+0x1b8>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f003 0307 	and.w	r3, r3, #7
 8003dd0:	683a      	ldr	r2, [r7, #0]
 8003dd2:	429a      	cmp	r2, r3
 8003dd4:	d20c      	bcs.n	8003df0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dd6:	4b22      	ldr	r3, [pc, #136]	@ (8003e60 <HAL_RCC_ClockConfig+0x1b8>)
 8003dd8:	683a      	ldr	r2, [r7, #0]
 8003dda:	b2d2      	uxtb	r2, r2
 8003ddc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dde:	4b20      	ldr	r3, [pc, #128]	@ (8003e60 <HAL_RCC_ClockConfig+0x1b8>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f003 0307 	and.w	r3, r3, #7
 8003de6:	683a      	ldr	r2, [r7, #0]
 8003de8:	429a      	cmp	r2, r3
 8003dea:	d001      	beq.n	8003df0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003dec:	2301      	movs	r3, #1
 8003dee:	e032      	b.n	8003e56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f003 0304 	and.w	r3, r3, #4
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d008      	beq.n	8003e0e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003dfc:	4b19      	ldr	r3, [pc, #100]	@ (8003e64 <HAL_RCC_ClockConfig+0x1bc>)
 8003dfe:	689b      	ldr	r3, [r3, #8]
 8003e00:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	68db      	ldr	r3, [r3, #12]
 8003e08:	4916      	ldr	r1, [pc, #88]	@ (8003e64 <HAL_RCC_ClockConfig+0x1bc>)
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f003 0308 	and.w	r3, r3, #8
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d009      	beq.n	8003e2e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e1a:	4b12      	ldr	r3, [pc, #72]	@ (8003e64 <HAL_RCC_ClockConfig+0x1bc>)
 8003e1c:	689b      	ldr	r3, [r3, #8]
 8003e1e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	691b      	ldr	r3, [r3, #16]
 8003e26:	00db      	lsls	r3, r3, #3
 8003e28:	490e      	ldr	r1, [pc, #56]	@ (8003e64 <HAL_RCC_ClockConfig+0x1bc>)
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003e2e:	f000 f821 	bl	8003e74 <HAL_RCC_GetSysClockFreq>
 8003e32:	4602      	mov	r2, r0
 8003e34:	4b0b      	ldr	r3, [pc, #44]	@ (8003e64 <HAL_RCC_ClockConfig+0x1bc>)
 8003e36:	689b      	ldr	r3, [r3, #8]
 8003e38:	091b      	lsrs	r3, r3, #4
 8003e3a:	f003 030f 	and.w	r3, r3, #15
 8003e3e:	490a      	ldr	r1, [pc, #40]	@ (8003e68 <HAL_RCC_ClockConfig+0x1c0>)
 8003e40:	5ccb      	ldrb	r3, [r1, r3]
 8003e42:	fa22 f303 	lsr.w	r3, r2, r3
 8003e46:	4a09      	ldr	r2, [pc, #36]	@ (8003e6c <HAL_RCC_ClockConfig+0x1c4>)
 8003e48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003e4a:	4b09      	ldr	r3, [pc, #36]	@ (8003e70 <HAL_RCC_ClockConfig+0x1c8>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4618      	mov	r0, r3
 8003e50:	f7fd fde0 	bl	8001a14 <HAL_InitTick>

  return HAL_OK;
 8003e54:	2300      	movs	r3, #0
}
 8003e56:	4618      	mov	r0, r3
 8003e58:	3710      	adds	r7, #16
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bd80      	pop	{r7, pc}
 8003e5e:	bf00      	nop
 8003e60:	40023c00 	.word	0x40023c00
 8003e64:	40023800 	.word	0x40023800
 8003e68:	0800939c 	.word	0x0800939c
 8003e6c:	20000030 	.word	0x20000030
 8003e70:	20000034 	.word	0x20000034

08003e74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e78:	b094      	sub	sp, #80	@ 0x50
 8003e7a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003e80:	2300      	movs	r3, #0
 8003e82:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003e84:	2300      	movs	r3, #0
 8003e86:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003e88:	2300      	movs	r3, #0
 8003e8a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e8c:	4b79      	ldr	r3, [pc, #484]	@ (8004074 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e8e:	689b      	ldr	r3, [r3, #8]
 8003e90:	f003 030c 	and.w	r3, r3, #12
 8003e94:	2b08      	cmp	r3, #8
 8003e96:	d00d      	beq.n	8003eb4 <HAL_RCC_GetSysClockFreq+0x40>
 8003e98:	2b08      	cmp	r3, #8
 8003e9a:	f200 80e1 	bhi.w	8004060 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d002      	beq.n	8003ea8 <HAL_RCC_GetSysClockFreq+0x34>
 8003ea2:	2b04      	cmp	r3, #4
 8003ea4:	d003      	beq.n	8003eae <HAL_RCC_GetSysClockFreq+0x3a>
 8003ea6:	e0db      	b.n	8004060 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003ea8:	4b73      	ldr	r3, [pc, #460]	@ (8004078 <HAL_RCC_GetSysClockFreq+0x204>)
 8003eaa:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003eac:	e0db      	b.n	8004066 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003eae:	4b73      	ldr	r3, [pc, #460]	@ (800407c <HAL_RCC_GetSysClockFreq+0x208>)
 8003eb0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003eb2:	e0d8      	b.n	8004066 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003eb4:	4b6f      	ldr	r3, [pc, #444]	@ (8004074 <HAL_RCC_GetSysClockFreq+0x200>)
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003ebc:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003ebe:	4b6d      	ldr	r3, [pc, #436]	@ (8004074 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d063      	beq.n	8003f92 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003eca:	4b6a      	ldr	r3, [pc, #424]	@ (8004074 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	099b      	lsrs	r3, r3, #6
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003ed4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003ed6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ed8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003edc:	633b      	str	r3, [r7, #48]	@ 0x30
 8003ede:	2300      	movs	r3, #0
 8003ee0:	637b      	str	r3, [r7, #52]	@ 0x34
 8003ee2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003ee6:	4622      	mov	r2, r4
 8003ee8:	462b      	mov	r3, r5
 8003eea:	f04f 0000 	mov.w	r0, #0
 8003eee:	f04f 0100 	mov.w	r1, #0
 8003ef2:	0159      	lsls	r1, r3, #5
 8003ef4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ef8:	0150      	lsls	r0, r2, #5
 8003efa:	4602      	mov	r2, r0
 8003efc:	460b      	mov	r3, r1
 8003efe:	4621      	mov	r1, r4
 8003f00:	1a51      	subs	r1, r2, r1
 8003f02:	6139      	str	r1, [r7, #16]
 8003f04:	4629      	mov	r1, r5
 8003f06:	eb63 0301 	sbc.w	r3, r3, r1
 8003f0a:	617b      	str	r3, [r7, #20]
 8003f0c:	f04f 0200 	mov.w	r2, #0
 8003f10:	f04f 0300 	mov.w	r3, #0
 8003f14:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003f18:	4659      	mov	r1, fp
 8003f1a:	018b      	lsls	r3, r1, #6
 8003f1c:	4651      	mov	r1, sl
 8003f1e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003f22:	4651      	mov	r1, sl
 8003f24:	018a      	lsls	r2, r1, #6
 8003f26:	4651      	mov	r1, sl
 8003f28:	ebb2 0801 	subs.w	r8, r2, r1
 8003f2c:	4659      	mov	r1, fp
 8003f2e:	eb63 0901 	sbc.w	r9, r3, r1
 8003f32:	f04f 0200 	mov.w	r2, #0
 8003f36:	f04f 0300 	mov.w	r3, #0
 8003f3a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003f3e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003f42:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003f46:	4690      	mov	r8, r2
 8003f48:	4699      	mov	r9, r3
 8003f4a:	4623      	mov	r3, r4
 8003f4c:	eb18 0303 	adds.w	r3, r8, r3
 8003f50:	60bb      	str	r3, [r7, #8]
 8003f52:	462b      	mov	r3, r5
 8003f54:	eb49 0303 	adc.w	r3, r9, r3
 8003f58:	60fb      	str	r3, [r7, #12]
 8003f5a:	f04f 0200 	mov.w	r2, #0
 8003f5e:	f04f 0300 	mov.w	r3, #0
 8003f62:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003f66:	4629      	mov	r1, r5
 8003f68:	024b      	lsls	r3, r1, #9
 8003f6a:	4621      	mov	r1, r4
 8003f6c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003f70:	4621      	mov	r1, r4
 8003f72:	024a      	lsls	r2, r1, #9
 8003f74:	4610      	mov	r0, r2
 8003f76:	4619      	mov	r1, r3
 8003f78:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003f7e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003f80:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003f84:	f7fc f984 	bl	8000290 <__aeabi_uldivmod>
 8003f88:	4602      	mov	r2, r0
 8003f8a:	460b      	mov	r3, r1
 8003f8c:	4613      	mov	r3, r2
 8003f8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003f90:	e058      	b.n	8004044 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f92:	4b38      	ldr	r3, [pc, #224]	@ (8004074 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	099b      	lsrs	r3, r3, #6
 8003f98:	2200      	movs	r2, #0
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	4611      	mov	r1, r2
 8003f9e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003fa2:	623b      	str	r3, [r7, #32]
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	627b      	str	r3, [r7, #36]	@ 0x24
 8003fa8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003fac:	4642      	mov	r2, r8
 8003fae:	464b      	mov	r3, r9
 8003fb0:	f04f 0000 	mov.w	r0, #0
 8003fb4:	f04f 0100 	mov.w	r1, #0
 8003fb8:	0159      	lsls	r1, r3, #5
 8003fba:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003fbe:	0150      	lsls	r0, r2, #5
 8003fc0:	4602      	mov	r2, r0
 8003fc2:	460b      	mov	r3, r1
 8003fc4:	4641      	mov	r1, r8
 8003fc6:	ebb2 0a01 	subs.w	sl, r2, r1
 8003fca:	4649      	mov	r1, r9
 8003fcc:	eb63 0b01 	sbc.w	fp, r3, r1
 8003fd0:	f04f 0200 	mov.w	r2, #0
 8003fd4:	f04f 0300 	mov.w	r3, #0
 8003fd8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003fdc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003fe0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003fe4:	ebb2 040a 	subs.w	r4, r2, sl
 8003fe8:	eb63 050b 	sbc.w	r5, r3, fp
 8003fec:	f04f 0200 	mov.w	r2, #0
 8003ff0:	f04f 0300 	mov.w	r3, #0
 8003ff4:	00eb      	lsls	r3, r5, #3
 8003ff6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003ffa:	00e2      	lsls	r2, r4, #3
 8003ffc:	4614      	mov	r4, r2
 8003ffe:	461d      	mov	r5, r3
 8004000:	4643      	mov	r3, r8
 8004002:	18e3      	adds	r3, r4, r3
 8004004:	603b      	str	r3, [r7, #0]
 8004006:	464b      	mov	r3, r9
 8004008:	eb45 0303 	adc.w	r3, r5, r3
 800400c:	607b      	str	r3, [r7, #4]
 800400e:	f04f 0200 	mov.w	r2, #0
 8004012:	f04f 0300 	mov.w	r3, #0
 8004016:	e9d7 4500 	ldrd	r4, r5, [r7]
 800401a:	4629      	mov	r1, r5
 800401c:	028b      	lsls	r3, r1, #10
 800401e:	4621      	mov	r1, r4
 8004020:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004024:	4621      	mov	r1, r4
 8004026:	028a      	lsls	r2, r1, #10
 8004028:	4610      	mov	r0, r2
 800402a:	4619      	mov	r1, r3
 800402c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800402e:	2200      	movs	r2, #0
 8004030:	61bb      	str	r3, [r7, #24]
 8004032:	61fa      	str	r2, [r7, #28]
 8004034:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004038:	f7fc f92a 	bl	8000290 <__aeabi_uldivmod>
 800403c:	4602      	mov	r2, r0
 800403e:	460b      	mov	r3, r1
 8004040:	4613      	mov	r3, r2
 8004042:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004044:	4b0b      	ldr	r3, [pc, #44]	@ (8004074 <HAL_RCC_GetSysClockFreq+0x200>)
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	0c1b      	lsrs	r3, r3, #16
 800404a:	f003 0303 	and.w	r3, r3, #3
 800404e:	3301      	adds	r3, #1
 8004050:	005b      	lsls	r3, r3, #1
 8004052:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004054:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004056:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004058:	fbb2 f3f3 	udiv	r3, r2, r3
 800405c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800405e:	e002      	b.n	8004066 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004060:	4b05      	ldr	r3, [pc, #20]	@ (8004078 <HAL_RCC_GetSysClockFreq+0x204>)
 8004062:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004064:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004066:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004068:	4618      	mov	r0, r3
 800406a:	3750      	adds	r7, #80	@ 0x50
 800406c:	46bd      	mov	sp, r7
 800406e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004072:	bf00      	nop
 8004074:	40023800 	.word	0x40023800
 8004078:	00f42400 	.word	0x00f42400
 800407c:	007a1200 	.word	0x007a1200

08004080 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004080:	b480      	push	{r7}
 8004082:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004084:	4b03      	ldr	r3, [pc, #12]	@ (8004094 <HAL_RCC_GetHCLKFreq+0x14>)
 8004086:	681b      	ldr	r3, [r3, #0]
}
 8004088:	4618      	mov	r0, r3
 800408a:	46bd      	mov	sp, r7
 800408c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004090:	4770      	bx	lr
 8004092:	bf00      	nop
 8004094:	20000030 	.word	0x20000030

08004098 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800409c:	f7ff fff0 	bl	8004080 <HAL_RCC_GetHCLKFreq>
 80040a0:	4602      	mov	r2, r0
 80040a2:	4b05      	ldr	r3, [pc, #20]	@ (80040b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80040a4:	689b      	ldr	r3, [r3, #8]
 80040a6:	0a9b      	lsrs	r3, r3, #10
 80040a8:	f003 0307 	and.w	r3, r3, #7
 80040ac:	4903      	ldr	r1, [pc, #12]	@ (80040bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80040ae:	5ccb      	ldrb	r3, [r1, r3]
 80040b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040b4:	4618      	mov	r0, r3
 80040b6:	bd80      	pop	{r7, pc}
 80040b8:	40023800 	.word	0x40023800
 80040bc:	080093ac 	.word	0x080093ac

080040c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80040c4:	f7ff ffdc 	bl	8004080 <HAL_RCC_GetHCLKFreq>
 80040c8:	4602      	mov	r2, r0
 80040ca:	4b05      	ldr	r3, [pc, #20]	@ (80040e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80040cc:	689b      	ldr	r3, [r3, #8]
 80040ce:	0b5b      	lsrs	r3, r3, #13
 80040d0:	f003 0307 	and.w	r3, r3, #7
 80040d4:	4903      	ldr	r1, [pc, #12]	@ (80040e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80040d6:	5ccb      	ldrb	r3, [r1, r3]
 80040d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040dc:	4618      	mov	r0, r3
 80040de:	bd80      	pop	{r7, pc}
 80040e0:	40023800 	.word	0x40023800
 80040e4:	080093ac 	.word	0x080093ac

080040e8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b086      	sub	sp, #24
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80040f0:	2300      	movs	r3, #0
 80040f2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80040f4:	2300      	movs	r3, #0
 80040f6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f003 0301 	and.w	r3, r3, #1
 8004100:	2b00      	cmp	r3, #0
 8004102:	d105      	bne.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800410c:	2b00      	cmp	r3, #0
 800410e:	d038      	beq.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004110:	4b68      	ldr	r3, [pc, #416]	@ (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004112:	2200      	movs	r2, #0
 8004114:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004116:	f7fd fcc1 	bl	8001a9c <HAL_GetTick>
 800411a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800411c:	e008      	b.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800411e:	f7fd fcbd 	bl	8001a9c <HAL_GetTick>
 8004122:	4602      	mov	r2, r0
 8004124:	697b      	ldr	r3, [r7, #20]
 8004126:	1ad3      	subs	r3, r2, r3
 8004128:	2b02      	cmp	r3, #2
 800412a:	d901      	bls.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800412c:	2303      	movs	r3, #3
 800412e:	e0bd      	b.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004130:	4b61      	ldr	r3, [pc, #388]	@ (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004138:	2b00      	cmp	r3, #0
 800413a:	d1f0      	bne.n	800411e <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN,
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	685a      	ldr	r2, [r3, #4]
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	689b      	ldr	r3, [r3, #8]
 8004144:	019b      	lsls	r3, r3, #6
 8004146:	431a      	orrs	r2, r3
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	68db      	ldr	r3, [r3, #12]
 800414c:	071b      	lsls	r3, r3, #28
 800414e:	495a      	ldr	r1, [pc, #360]	@ (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004150:	4313      	orrs	r3, r2
 8004152:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004156:	4b57      	ldr	r3, [pc, #348]	@ (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004158:	2201      	movs	r2, #1
 800415a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800415c:	f7fd fc9e 	bl	8001a9c <HAL_GetTick>
 8004160:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004162:	e008      	b.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004164:	f7fd fc9a 	bl	8001a9c <HAL_GetTick>
 8004168:	4602      	mov	r2, r0
 800416a:	697b      	ldr	r3, [r7, #20]
 800416c:	1ad3      	subs	r3, r2, r3
 800416e:	2b02      	cmp	r3, #2
 8004170:	d901      	bls.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004172:	2303      	movs	r3, #3
 8004174:	e09a      	b.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004176:	4b50      	ldr	r3, [pc, #320]	@ (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800417e:	2b00      	cmp	r3, #0
 8004180:	d0f0      	beq.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f003 0302 	and.w	r3, r3, #2
 800418a:	2b00      	cmp	r3, #0
 800418c:	f000 8083 	beq.w	8004296 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004190:	2300      	movs	r3, #0
 8004192:	60fb      	str	r3, [r7, #12]
 8004194:	4b48      	ldr	r3, [pc, #288]	@ (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004196:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004198:	4a47      	ldr	r2, [pc, #284]	@ (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800419a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800419e:	6413      	str	r3, [r2, #64]	@ 0x40
 80041a0:	4b45      	ldr	r3, [pc, #276]	@ (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80041a8:	60fb      	str	r3, [r7, #12]
 80041aa:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80041ac:	4b43      	ldr	r3, [pc, #268]	@ (80042bc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a42      	ldr	r2, [pc, #264]	@ (80042bc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80041b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80041b6:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80041b8:	f7fd fc70 	bl	8001a9c <HAL_GetTick>
 80041bc:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80041be:	e008      	b.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041c0:	f7fd fc6c 	bl	8001a9c <HAL_GetTick>
 80041c4:	4602      	mov	r2, r0
 80041c6:	697b      	ldr	r3, [r7, #20]
 80041c8:	1ad3      	subs	r3, r2, r3
 80041ca:	2b02      	cmp	r3, #2
 80041cc:	d901      	bls.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 80041ce:	2303      	movs	r3, #3
 80041d0:	e06c      	b.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80041d2:	4b3a      	ldr	r3, [pc, #232]	@ (80042bc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d0f0      	beq.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80041de:	4b36      	ldr	r3, [pc, #216]	@ (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80041e6:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80041e8:	693b      	ldr	r3, [r7, #16]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d02f      	beq.n	800424e <HAL_RCCEx_PeriphCLKConfig+0x166>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	691b      	ldr	r3, [r3, #16]
 80041f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80041f6:	693a      	ldr	r2, [r7, #16]
 80041f8:	429a      	cmp	r2, r3
 80041fa:	d028      	beq.n	800424e <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80041fc:	4b2e      	ldr	r3, [pc, #184]	@ (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004200:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004204:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004206:	4b2e      	ldr	r3, [pc, #184]	@ (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004208:	2201      	movs	r2, #1
 800420a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800420c:	4b2c      	ldr	r3, [pc, #176]	@ (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800420e:	2200      	movs	r2, #0
 8004210:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004212:	4a29      	ldr	r2, [pc, #164]	@ (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004214:	693b      	ldr	r3, [r7, #16]
 8004216:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004218:	4b27      	ldr	r3, [pc, #156]	@ (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800421a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800421c:	f003 0301 	and.w	r3, r3, #1
 8004220:	2b01      	cmp	r3, #1
 8004222:	d114      	bne.n	800424e <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004224:	f7fd fc3a 	bl	8001a9c <HAL_GetTick>
 8004228:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800422a:	e00a      	b.n	8004242 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800422c:	f7fd fc36 	bl	8001a9c <HAL_GetTick>
 8004230:	4602      	mov	r2, r0
 8004232:	697b      	ldr	r3, [r7, #20]
 8004234:	1ad3      	subs	r3, r2, r3
 8004236:	f241 3288 	movw	r2, #5000	@ 0x1388
 800423a:	4293      	cmp	r3, r2
 800423c:	d901      	bls.n	8004242 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 800423e:	2303      	movs	r3, #3
 8004240:	e034      	b.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004242:	4b1d      	ldr	r3, [pc, #116]	@ (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004244:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004246:	f003 0302 	and.w	r3, r3, #2
 800424a:	2b00      	cmp	r3, #0
 800424c:	d0ee      	beq.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	691b      	ldr	r3, [r3, #16]
 8004252:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004256:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800425a:	d10d      	bne.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0x190>
 800425c:	4b16      	ldr	r3, [pc, #88]	@ (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800425e:	689b      	ldr	r3, [r3, #8]
 8004260:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	691b      	ldr	r3, [r3, #16]
 8004268:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800426c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004270:	4911      	ldr	r1, [pc, #68]	@ (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004272:	4313      	orrs	r3, r2
 8004274:	608b      	str	r3, [r1, #8]
 8004276:	e005      	b.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8004278:	4b0f      	ldr	r3, [pc, #60]	@ (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800427a:	689b      	ldr	r3, [r3, #8]
 800427c:	4a0e      	ldr	r2, [pc, #56]	@ (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800427e:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004282:	6093      	str	r3, [r2, #8]
 8004284:	4b0c      	ldr	r3, [pc, #48]	@ (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004286:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	691b      	ldr	r3, [r3, #16]
 800428c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004290:	4909      	ldr	r1, [pc, #36]	@ (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004292:	4313      	orrs	r3, r2
 8004294:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f003 0308 	and.w	r3, r3, #8
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d003      	beq.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	7d1a      	ldrb	r2, [r3, #20]
 80042a6:	4b07      	ldr	r3, [pc, #28]	@ (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 80042a8:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80042aa:	2300      	movs	r3, #0
}
 80042ac:	4618      	mov	r0, r3
 80042ae:	3718      	adds	r7, #24
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}
 80042b4:	42470068 	.word	0x42470068
 80042b8:	40023800 	.word	0x40023800
 80042bc:	40007000 	.word	0x40007000
 80042c0:	42470e40 	.word	0x42470e40
 80042c4:	424711e0 	.word	0x424711e0

080042c8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80042c8:	b480      	push	{r7}
 80042ca:	b087      	sub	sp, #28
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80042d0:	2300      	movs	r3, #0
 80042d2:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80042d4:	2300      	movs	r3, #0
 80042d6:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80042d8:	2300      	movs	r3, #0
 80042da:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80042dc:	2300      	movs	r3, #0
 80042de:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2b01      	cmp	r3, #1
 80042e4:	d141      	bne.n	800436a <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80042e6:	4b25      	ldr	r3, [pc, #148]	@ (800437c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80042e8:	689b      	ldr	r3, [r3, #8]
 80042ea:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80042ee:	60fb      	str	r3, [r7, #12]
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d006      	beq.n	8004304 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80042fc:	d131      	bne.n	8004362 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80042fe:	4b20      	ldr	r3, [pc, #128]	@ (8004380 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004300:	617b      	str	r3, [r7, #20]
          break;
 8004302:	e031      	b.n	8004368 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
        case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004304:	4b1d      	ldr	r3, [pc, #116]	@ (800437c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800430c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004310:	d109      	bne.n	8004326 <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8004312:	4b1a      	ldr	r3, [pc, #104]	@ (800437c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004314:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004318:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800431c:	4a19      	ldr	r2, [pc, #100]	@ (8004384 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 800431e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004322:	613b      	str	r3, [r7, #16]
 8004324:	e008      	b.n	8004338 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8004326:	4b15      	ldr	r3, [pc, #84]	@ (800437c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004328:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800432c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004330:	4a15      	ldr	r2, [pc, #84]	@ (8004388 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 8004332:	fbb2 f3f3 	udiv	r3, r2, r3
 8004336:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004338:	4b10      	ldr	r3, [pc, #64]	@ (800437c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800433a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800433e:	099b      	lsrs	r3, r3, #6
 8004340:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004344:	693b      	ldr	r3, [r7, #16]
 8004346:	fb02 f303 	mul.w	r3, r2, r3
 800434a:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800434c:	4b0b      	ldr	r3, [pc, #44]	@ (800437c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800434e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004352:	0f1b      	lsrs	r3, r3, #28
 8004354:	f003 0307 	and.w	r3, r3, #7
 8004358:	68ba      	ldr	r2, [r7, #8]
 800435a:	fbb2 f3f3 	udiv	r3, r2, r3
 800435e:	617b      	str	r3, [r7, #20]
          break;
 8004360:	e002      	b.n	8004368 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8004362:	2300      	movs	r3, #0
 8004364:	617b      	str	r3, [r7, #20]
          break;
 8004366:	bf00      	nop
        }
      }
      break;
 8004368:	e000      	b.n	800436c <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
    }
    default:
    {
      break;
 800436a:	bf00      	nop
    }
  }
  return frequency;
 800436c:	697b      	ldr	r3, [r7, #20]
}
 800436e:	4618      	mov	r0, r3
 8004370:	371c      	adds	r7, #28
 8004372:	46bd      	mov	sp, r7
 8004374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004378:	4770      	bx	lr
 800437a:	bf00      	nop
 800437c:	40023800 	.word	0x40023800
 8004380:	00bb8000 	.word	0x00bb8000
 8004384:	007a1200 	.word	0x007a1200
 8004388:	00f42400 	.word	0x00f42400

0800438c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b082      	sub	sp, #8
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d101      	bne.n	800439e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800439a:	2301      	movs	r3, #1
 800439c:	e07b      	b.n	8004496 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d108      	bne.n	80043b8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80043ae:	d009      	beq.n	80043c4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2200      	movs	r2, #0
 80043b4:	61da      	str	r2, [r3, #28]
 80043b6:	e005      	b.n	80043c4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2200      	movs	r2, #0
 80043bc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2200      	movs	r2, #0
 80043c2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2200      	movs	r2, #0
 80043c8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80043d0:	b2db      	uxtb	r3, r3
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d106      	bne.n	80043e4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2200      	movs	r2, #0
 80043da:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80043de:	6878      	ldr	r0, [r7, #4]
 80043e0:	f7fd f974 	bl	80016cc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2202      	movs	r2, #2
 80043e8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	681a      	ldr	r2, [r3, #0]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80043fa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	689b      	ldr	r3, [r3, #8]
 8004408:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800440c:	431a      	orrs	r2, r3
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	68db      	ldr	r3, [r3, #12]
 8004412:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004416:	431a      	orrs	r2, r3
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	691b      	ldr	r3, [r3, #16]
 800441c:	f003 0302 	and.w	r3, r3, #2
 8004420:	431a      	orrs	r2, r3
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	695b      	ldr	r3, [r3, #20]
 8004426:	f003 0301 	and.w	r3, r3, #1
 800442a:	431a      	orrs	r2, r3
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	699b      	ldr	r3, [r3, #24]
 8004430:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004434:	431a      	orrs	r2, r3
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	69db      	ldr	r3, [r3, #28]
 800443a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800443e:	431a      	orrs	r2, r3
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6a1b      	ldr	r3, [r3, #32]
 8004444:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004448:	ea42 0103 	orr.w	r1, r2, r3
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004450:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	430a      	orrs	r2, r1
 800445a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	699b      	ldr	r3, [r3, #24]
 8004460:	0c1b      	lsrs	r3, r3, #16
 8004462:	f003 0104 	and.w	r1, r3, #4
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800446a:	f003 0210 	and.w	r2, r3, #16
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	430a      	orrs	r2, r1
 8004474:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	69da      	ldr	r2, [r3, #28]
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004484:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2200      	movs	r2, #0
 800448a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2201      	movs	r2, #1
 8004490:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004494:	2300      	movs	r3, #0
}
 8004496:	4618      	mov	r0, r3
 8004498:	3708      	adds	r7, #8
 800449a:	46bd      	mov	sp, r7
 800449c:	bd80      	pop	{r7, pc}

0800449e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800449e:	b580      	push	{r7, lr}
 80044a0:	b088      	sub	sp, #32
 80044a2:	af00      	add	r7, sp, #0
 80044a4:	60f8      	str	r0, [r7, #12]
 80044a6:	60b9      	str	r1, [r7, #8]
 80044a8:	603b      	str	r3, [r7, #0]
 80044aa:	4613      	mov	r3, r2
 80044ac:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80044ae:	f7fd faf5 	bl	8001a9c <HAL_GetTick>
 80044b2:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80044b4:	88fb      	ldrh	r3, [r7, #6]
 80044b6:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80044be:	b2db      	uxtb	r3, r3
 80044c0:	2b01      	cmp	r3, #1
 80044c2:	d001      	beq.n	80044c8 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80044c4:	2302      	movs	r3, #2
 80044c6:	e12a      	b.n	800471e <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d002      	beq.n	80044d4 <HAL_SPI_Transmit+0x36>
 80044ce:	88fb      	ldrh	r3, [r7, #6]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d101      	bne.n	80044d8 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80044d4:	2301      	movs	r3, #1
 80044d6:	e122      	b.n	800471e <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80044de:	2b01      	cmp	r3, #1
 80044e0:	d101      	bne.n	80044e6 <HAL_SPI_Transmit+0x48>
 80044e2:	2302      	movs	r3, #2
 80044e4:	e11b      	b.n	800471e <HAL_SPI_Transmit+0x280>
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	2201      	movs	r2, #1
 80044ea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	2203      	movs	r2, #3
 80044f2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	2200      	movs	r2, #0
 80044fa:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	68ba      	ldr	r2, [r7, #8]
 8004500:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	88fa      	ldrh	r2, [r7, #6]
 8004506:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	88fa      	ldrh	r2, [r7, #6]
 800450c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	2200      	movs	r2, #0
 8004512:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	2200      	movs	r2, #0
 8004518:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	2200      	movs	r2, #0
 800451e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	2200      	movs	r2, #0
 8004524:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	2200      	movs	r2, #0
 800452a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	689b      	ldr	r3, [r3, #8]
 8004530:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004534:	d10f      	bne.n	8004556 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	681a      	ldr	r2, [r3, #0]
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004544:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	681a      	ldr	r2, [r3, #0]
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004554:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004560:	2b40      	cmp	r3, #64	@ 0x40
 8004562:	d007      	beq.n	8004574 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	681a      	ldr	r2, [r3, #0]
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004572:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	68db      	ldr	r3, [r3, #12]
 8004578:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800457c:	d152      	bne.n	8004624 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d002      	beq.n	800458c <HAL_SPI_Transmit+0xee>
 8004586:	8b7b      	ldrh	r3, [r7, #26]
 8004588:	2b01      	cmp	r3, #1
 800458a:	d145      	bne.n	8004618 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004590:	881a      	ldrh	r2, [r3, #0]
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800459c:	1c9a      	adds	r2, r3, #2
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80045a6:	b29b      	uxth	r3, r3
 80045a8:	3b01      	subs	r3, #1
 80045aa:	b29a      	uxth	r2, r3
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80045b0:	e032      	b.n	8004618 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	689b      	ldr	r3, [r3, #8]
 80045b8:	f003 0302 	and.w	r3, r3, #2
 80045bc:	2b02      	cmp	r3, #2
 80045be:	d112      	bne.n	80045e6 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045c4:	881a      	ldrh	r2, [r3, #0]
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045d0:	1c9a      	adds	r2, r3, #2
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80045da:	b29b      	uxth	r3, r3
 80045dc:	3b01      	subs	r3, #1
 80045de:	b29a      	uxth	r2, r3
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	86da      	strh	r2, [r3, #54]	@ 0x36
 80045e4:	e018      	b.n	8004618 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80045e6:	f7fd fa59 	bl	8001a9c <HAL_GetTick>
 80045ea:	4602      	mov	r2, r0
 80045ec:	69fb      	ldr	r3, [r7, #28]
 80045ee:	1ad3      	subs	r3, r2, r3
 80045f0:	683a      	ldr	r2, [r7, #0]
 80045f2:	429a      	cmp	r2, r3
 80045f4:	d803      	bhi.n	80045fe <HAL_SPI_Transmit+0x160>
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80045fc:	d102      	bne.n	8004604 <HAL_SPI_Transmit+0x166>
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d109      	bne.n	8004618 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	2201      	movs	r2, #1
 8004608:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	2200      	movs	r2, #0
 8004610:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004614:	2303      	movs	r3, #3
 8004616:	e082      	b.n	800471e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800461c:	b29b      	uxth	r3, r3
 800461e:	2b00      	cmp	r3, #0
 8004620:	d1c7      	bne.n	80045b2 <HAL_SPI_Transmit+0x114>
 8004622:	e053      	b.n	80046cc <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	685b      	ldr	r3, [r3, #4]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d002      	beq.n	8004632 <HAL_SPI_Transmit+0x194>
 800462c:	8b7b      	ldrh	r3, [r7, #26]
 800462e:	2b01      	cmp	r3, #1
 8004630:	d147      	bne.n	80046c2 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	330c      	adds	r3, #12
 800463c:	7812      	ldrb	r2, [r2, #0]
 800463e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004644:	1c5a      	adds	r2, r3, #1
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800464e:	b29b      	uxth	r3, r3
 8004650:	3b01      	subs	r3, #1
 8004652:	b29a      	uxth	r2, r3
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004658:	e033      	b.n	80046c2 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	689b      	ldr	r3, [r3, #8]
 8004660:	f003 0302 	and.w	r3, r3, #2
 8004664:	2b02      	cmp	r3, #2
 8004666:	d113      	bne.n	8004690 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	330c      	adds	r3, #12
 8004672:	7812      	ldrb	r2, [r2, #0]
 8004674:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800467a:	1c5a      	adds	r2, r3, #1
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004684:	b29b      	uxth	r3, r3
 8004686:	3b01      	subs	r3, #1
 8004688:	b29a      	uxth	r2, r3
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	86da      	strh	r2, [r3, #54]	@ 0x36
 800468e:	e018      	b.n	80046c2 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004690:	f7fd fa04 	bl	8001a9c <HAL_GetTick>
 8004694:	4602      	mov	r2, r0
 8004696:	69fb      	ldr	r3, [r7, #28]
 8004698:	1ad3      	subs	r3, r2, r3
 800469a:	683a      	ldr	r2, [r7, #0]
 800469c:	429a      	cmp	r2, r3
 800469e:	d803      	bhi.n	80046a8 <HAL_SPI_Transmit+0x20a>
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80046a6:	d102      	bne.n	80046ae <HAL_SPI_Transmit+0x210>
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d109      	bne.n	80046c2 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	2201      	movs	r2, #1
 80046b2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	2200      	movs	r2, #0
 80046ba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80046be:	2303      	movs	r3, #3
 80046c0:	e02d      	b.n	800471e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80046c6:	b29b      	uxth	r3, r3
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d1c6      	bne.n	800465a <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80046cc:	69fa      	ldr	r2, [r7, #28]
 80046ce:	6839      	ldr	r1, [r7, #0]
 80046d0:	68f8      	ldr	r0, [r7, #12]
 80046d2:	f000 fa59 	bl	8004b88 <SPI_EndRxTxTransaction>
 80046d6:	4603      	mov	r3, r0
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d002      	beq.n	80046e2 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	2220      	movs	r2, #32
 80046e0:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	689b      	ldr	r3, [r3, #8]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d10a      	bne.n	8004700 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80046ea:	2300      	movs	r3, #0
 80046ec:	617b      	str	r3, [r7, #20]
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	68db      	ldr	r3, [r3, #12]
 80046f4:	617b      	str	r3, [r7, #20]
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	689b      	ldr	r3, [r3, #8]
 80046fc:	617b      	str	r3, [r7, #20]
 80046fe:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	2201      	movs	r2, #1
 8004704:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	2200      	movs	r2, #0
 800470c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004714:	2b00      	cmp	r3, #0
 8004716:	d001      	beq.n	800471c <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8004718:	2301      	movs	r3, #1
 800471a:	e000      	b.n	800471e <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 800471c:	2300      	movs	r3, #0
  }
}
 800471e:	4618      	mov	r0, r3
 8004720:	3720      	adds	r7, #32
 8004722:	46bd      	mov	sp, r7
 8004724:	bd80      	pop	{r7, pc}

08004726 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004726:	b580      	push	{r7, lr}
 8004728:	b08a      	sub	sp, #40	@ 0x28
 800472a:	af00      	add	r7, sp, #0
 800472c:	60f8      	str	r0, [r7, #12]
 800472e:	60b9      	str	r1, [r7, #8]
 8004730:	607a      	str	r2, [r7, #4]
 8004732:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004734:	2301      	movs	r3, #1
 8004736:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004738:	f7fd f9b0 	bl	8001a9c <HAL_GetTick>
 800473c:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004744:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	685b      	ldr	r3, [r3, #4]
 800474a:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800474c:	887b      	ldrh	r3, [r7, #2]
 800474e:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004750:	7ffb      	ldrb	r3, [r7, #31]
 8004752:	2b01      	cmp	r3, #1
 8004754:	d00c      	beq.n	8004770 <HAL_SPI_TransmitReceive+0x4a>
 8004756:	69bb      	ldr	r3, [r7, #24]
 8004758:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800475c:	d106      	bne.n	800476c <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	689b      	ldr	r3, [r3, #8]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d102      	bne.n	800476c <HAL_SPI_TransmitReceive+0x46>
 8004766:	7ffb      	ldrb	r3, [r7, #31]
 8004768:	2b04      	cmp	r3, #4
 800476a:	d001      	beq.n	8004770 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 800476c:	2302      	movs	r3, #2
 800476e:	e17f      	b.n	8004a70 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d005      	beq.n	8004782 <HAL_SPI_TransmitReceive+0x5c>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d002      	beq.n	8004782 <HAL_SPI_TransmitReceive+0x5c>
 800477c:	887b      	ldrh	r3, [r7, #2]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d101      	bne.n	8004786 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8004782:	2301      	movs	r3, #1
 8004784:	e174      	b.n	8004a70 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800478c:	2b01      	cmp	r3, #1
 800478e:	d101      	bne.n	8004794 <HAL_SPI_TransmitReceive+0x6e>
 8004790:	2302      	movs	r3, #2
 8004792:	e16d      	b.n	8004a70 <HAL_SPI_TransmitReceive+0x34a>
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	2201      	movs	r2, #1
 8004798:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80047a2:	b2db      	uxtb	r3, r3
 80047a4:	2b04      	cmp	r3, #4
 80047a6:	d003      	beq.n	80047b0 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	2205      	movs	r2, #5
 80047ac:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	2200      	movs	r2, #0
 80047b4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	687a      	ldr	r2, [r7, #4]
 80047ba:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	887a      	ldrh	r2, [r7, #2]
 80047c0:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	887a      	ldrh	r2, [r7, #2]
 80047c6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	68ba      	ldr	r2, [r7, #8]
 80047cc:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	887a      	ldrh	r2, [r7, #2]
 80047d2:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	887a      	ldrh	r2, [r7, #2]
 80047d8:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	2200      	movs	r2, #0
 80047de:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	2200      	movs	r2, #0
 80047e4:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047f0:	2b40      	cmp	r3, #64	@ 0x40
 80047f2:	d007      	beq.n	8004804 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	681a      	ldr	r2, [r3, #0]
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004802:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	68db      	ldr	r3, [r3, #12]
 8004808:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800480c:	d17e      	bne.n	800490c <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d002      	beq.n	800481c <HAL_SPI_TransmitReceive+0xf6>
 8004816:	8afb      	ldrh	r3, [r7, #22]
 8004818:	2b01      	cmp	r3, #1
 800481a:	d16c      	bne.n	80048f6 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004820:	881a      	ldrh	r2, [r3, #0]
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800482c:	1c9a      	adds	r2, r3, #2
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004836:	b29b      	uxth	r3, r3
 8004838:	3b01      	subs	r3, #1
 800483a:	b29a      	uxth	r2, r3
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004840:	e059      	b.n	80048f6 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	689b      	ldr	r3, [r3, #8]
 8004848:	f003 0302 	and.w	r3, r3, #2
 800484c:	2b02      	cmp	r3, #2
 800484e:	d11b      	bne.n	8004888 <HAL_SPI_TransmitReceive+0x162>
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004854:	b29b      	uxth	r3, r3
 8004856:	2b00      	cmp	r3, #0
 8004858:	d016      	beq.n	8004888 <HAL_SPI_TransmitReceive+0x162>
 800485a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800485c:	2b01      	cmp	r3, #1
 800485e:	d113      	bne.n	8004888 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004864:	881a      	ldrh	r2, [r3, #0]
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004870:	1c9a      	adds	r2, r3, #2
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800487a:	b29b      	uxth	r3, r3
 800487c:	3b01      	subs	r3, #1
 800487e:	b29a      	uxth	r2, r3
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004884:	2300      	movs	r3, #0
 8004886:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	689b      	ldr	r3, [r3, #8]
 800488e:	f003 0301 	and.w	r3, r3, #1
 8004892:	2b01      	cmp	r3, #1
 8004894:	d119      	bne.n	80048ca <HAL_SPI_TransmitReceive+0x1a4>
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800489a:	b29b      	uxth	r3, r3
 800489c:	2b00      	cmp	r3, #0
 800489e:	d014      	beq.n	80048ca <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	68da      	ldr	r2, [r3, #12]
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048aa:	b292      	uxth	r2, r2
 80048ac:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048b2:	1c9a      	adds	r2, r3, #2
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80048bc:	b29b      	uxth	r3, r3
 80048be:	3b01      	subs	r3, #1
 80048c0:	b29a      	uxth	r2, r3
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80048c6:	2301      	movs	r3, #1
 80048c8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80048ca:	f7fd f8e7 	bl	8001a9c <HAL_GetTick>
 80048ce:	4602      	mov	r2, r0
 80048d0:	6a3b      	ldr	r3, [r7, #32]
 80048d2:	1ad3      	subs	r3, r2, r3
 80048d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80048d6:	429a      	cmp	r2, r3
 80048d8:	d80d      	bhi.n	80048f6 <HAL_SPI_TransmitReceive+0x1d0>
 80048da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048dc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80048e0:	d009      	beq.n	80048f6 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	2201      	movs	r2, #1
 80048e6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	2200      	movs	r2, #0
 80048ee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80048f2:	2303      	movs	r3, #3
 80048f4:	e0bc      	b.n	8004a70 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80048fa:	b29b      	uxth	r3, r3
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d1a0      	bne.n	8004842 <HAL_SPI_TransmitReceive+0x11c>
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004904:	b29b      	uxth	r3, r3
 8004906:	2b00      	cmp	r3, #0
 8004908:	d19b      	bne.n	8004842 <HAL_SPI_TransmitReceive+0x11c>
 800490a:	e082      	b.n	8004a12 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	685b      	ldr	r3, [r3, #4]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d002      	beq.n	800491a <HAL_SPI_TransmitReceive+0x1f4>
 8004914:	8afb      	ldrh	r3, [r7, #22]
 8004916:	2b01      	cmp	r3, #1
 8004918:	d171      	bne.n	80049fe <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	330c      	adds	r3, #12
 8004924:	7812      	ldrb	r2, [r2, #0]
 8004926:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800492c:	1c5a      	adds	r2, r3, #1
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004936:	b29b      	uxth	r3, r3
 8004938:	3b01      	subs	r3, #1
 800493a:	b29a      	uxth	r2, r3
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004940:	e05d      	b.n	80049fe <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	689b      	ldr	r3, [r3, #8]
 8004948:	f003 0302 	and.w	r3, r3, #2
 800494c:	2b02      	cmp	r3, #2
 800494e:	d11c      	bne.n	800498a <HAL_SPI_TransmitReceive+0x264>
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004954:	b29b      	uxth	r3, r3
 8004956:	2b00      	cmp	r3, #0
 8004958:	d017      	beq.n	800498a <HAL_SPI_TransmitReceive+0x264>
 800495a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800495c:	2b01      	cmp	r3, #1
 800495e:	d114      	bne.n	800498a <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	330c      	adds	r3, #12
 800496a:	7812      	ldrb	r2, [r2, #0]
 800496c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004972:	1c5a      	adds	r2, r3, #1
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800497c:	b29b      	uxth	r3, r3
 800497e:	3b01      	subs	r3, #1
 8004980:	b29a      	uxth	r2, r3
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004986:	2300      	movs	r3, #0
 8004988:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	689b      	ldr	r3, [r3, #8]
 8004990:	f003 0301 	and.w	r3, r3, #1
 8004994:	2b01      	cmp	r3, #1
 8004996:	d119      	bne.n	80049cc <HAL_SPI_TransmitReceive+0x2a6>
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800499c:	b29b      	uxth	r3, r3
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d014      	beq.n	80049cc <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	68da      	ldr	r2, [r3, #12]
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049ac:	b2d2      	uxtb	r2, r2
 80049ae:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049b4:	1c5a      	adds	r2, r3, #1
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80049be:	b29b      	uxth	r3, r3
 80049c0:	3b01      	subs	r3, #1
 80049c2:	b29a      	uxth	r2, r3
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80049c8:	2301      	movs	r3, #1
 80049ca:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80049cc:	f7fd f866 	bl	8001a9c <HAL_GetTick>
 80049d0:	4602      	mov	r2, r0
 80049d2:	6a3b      	ldr	r3, [r7, #32]
 80049d4:	1ad3      	subs	r3, r2, r3
 80049d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80049d8:	429a      	cmp	r2, r3
 80049da:	d803      	bhi.n	80049e4 <HAL_SPI_TransmitReceive+0x2be>
 80049dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049de:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80049e2:	d102      	bne.n	80049ea <HAL_SPI_TransmitReceive+0x2c4>
 80049e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d109      	bne.n	80049fe <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	2201      	movs	r2, #1
 80049ee:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	2200      	movs	r2, #0
 80049f6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80049fa:	2303      	movs	r3, #3
 80049fc:	e038      	b.n	8004a70 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004a02:	b29b      	uxth	r3, r3
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d19c      	bne.n	8004942 <HAL_SPI_TransmitReceive+0x21c>
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004a0c:	b29b      	uxth	r3, r3
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d197      	bne.n	8004942 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004a12:	6a3a      	ldr	r2, [r7, #32]
 8004a14:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004a16:	68f8      	ldr	r0, [r7, #12]
 8004a18:	f000 f8b6 	bl	8004b88 <SPI_EndRxTxTransaction>
 8004a1c:	4603      	mov	r3, r0
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d008      	beq.n	8004a34 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	2220      	movs	r2, #32
 8004a26:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8004a30:	2301      	movs	r3, #1
 8004a32:	e01d      	b.n	8004a70 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	689b      	ldr	r3, [r3, #8]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d10a      	bne.n	8004a52 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	613b      	str	r3, [r7, #16]
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	68db      	ldr	r3, [r3, #12]
 8004a46:	613b      	str	r3, [r7, #16]
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	689b      	ldr	r3, [r3, #8]
 8004a4e:	613b      	str	r3, [r7, #16]
 8004a50:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	2201      	movs	r2, #1
 8004a56:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d001      	beq.n	8004a6e <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	e000      	b.n	8004a70 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8004a6e:	2300      	movs	r3, #0
  }
}
 8004a70:	4618      	mov	r0, r3
 8004a72:	3728      	adds	r7, #40	@ 0x28
 8004a74:	46bd      	mov	sp, r7
 8004a76:	bd80      	pop	{r7, pc}

08004a78 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b088      	sub	sp, #32
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	60f8      	str	r0, [r7, #12]
 8004a80:	60b9      	str	r1, [r7, #8]
 8004a82:	603b      	str	r3, [r7, #0]
 8004a84:	4613      	mov	r3, r2
 8004a86:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004a88:	f7fd f808 	bl	8001a9c <HAL_GetTick>
 8004a8c:	4602      	mov	r2, r0
 8004a8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a90:	1a9b      	subs	r3, r3, r2
 8004a92:	683a      	ldr	r2, [r7, #0]
 8004a94:	4413      	add	r3, r2
 8004a96:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004a98:	f7fd f800 	bl	8001a9c <HAL_GetTick>
 8004a9c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004a9e:	4b39      	ldr	r3, [pc, #228]	@ (8004b84 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	015b      	lsls	r3, r3, #5
 8004aa4:	0d1b      	lsrs	r3, r3, #20
 8004aa6:	69fa      	ldr	r2, [r7, #28]
 8004aa8:	fb02 f303 	mul.w	r3, r2, r3
 8004aac:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004aae:	e054      	b.n	8004b5a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004ab6:	d050      	beq.n	8004b5a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004ab8:	f7fc fff0 	bl	8001a9c <HAL_GetTick>
 8004abc:	4602      	mov	r2, r0
 8004abe:	69bb      	ldr	r3, [r7, #24]
 8004ac0:	1ad3      	subs	r3, r2, r3
 8004ac2:	69fa      	ldr	r2, [r7, #28]
 8004ac4:	429a      	cmp	r2, r3
 8004ac6:	d902      	bls.n	8004ace <SPI_WaitFlagStateUntilTimeout+0x56>
 8004ac8:	69fb      	ldr	r3, [r7, #28]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d13d      	bne.n	8004b4a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	685a      	ldr	r2, [r3, #4]
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004adc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	685b      	ldr	r3, [r3, #4]
 8004ae2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004ae6:	d111      	bne.n	8004b0c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	689b      	ldr	r3, [r3, #8]
 8004aec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004af0:	d004      	beq.n	8004afc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	689b      	ldr	r3, [r3, #8]
 8004af6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004afa:	d107      	bne.n	8004b0c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	681a      	ldr	r2, [r3, #0]
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004b0a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b10:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b14:	d10f      	bne.n	8004b36 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	681a      	ldr	r2, [r3, #0]
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004b24:	601a      	str	r2, [r3, #0]
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	681a      	ldr	r2, [r3, #0]
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004b34:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	2201      	movs	r2, #1
 8004b3a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	2200      	movs	r2, #0
 8004b42:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8004b46:	2303      	movs	r3, #3
 8004b48:	e017      	b.n	8004b7a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004b4a:	697b      	ldr	r3, [r7, #20]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d101      	bne.n	8004b54 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004b50:	2300      	movs	r3, #0
 8004b52:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004b54:	697b      	ldr	r3, [r7, #20]
 8004b56:	3b01      	subs	r3, #1
 8004b58:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	689a      	ldr	r2, [r3, #8]
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	4013      	ands	r3, r2
 8004b64:	68ba      	ldr	r2, [r7, #8]
 8004b66:	429a      	cmp	r2, r3
 8004b68:	bf0c      	ite	eq
 8004b6a:	2301      	moveq	r3, #1
 8004b6c:	2300      	movne	r3, #0
 8004b6e:	b2db      	uxtb	r3, r3
 8004b70:	461a      	mov	r2, r3
 8004b72:	79fb      	ldrb	r3, [r7, #7]
 8004b74:	429a      	cmp	r2, r3
 8004b76:	d19b      	bne.n	8004ab0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004b78:	2300      	movs	r3, #0
}
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	3720      	adds	r7, #32
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	bd80      	pop	{r7, pc}
 8004b82:	bf00      	nop
 8004b84:	20000030 	.word	0x20000030

08004b88 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b088      	sub	sp, #32
 8004b8c:	af02      	add	r7, sp, #8
 8004b8e:	60f8      	str	r0, [r7, #12]
 8004b90:	60b9      	str	r1, [r7, #8]
 8004b92:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	9300      	str	r3, [sp, #0]
 8004b98:	68bb      	ldr	r3, [r7, #8]
 8004b9a:	2201      	movs	r2, #1
 8004b9c:	2102      	movs	r1, #2
 8004b9e:	68f8      	ldr	r0, [r7, #12]
 8004ba0:	f7ff ff6a 	bl	8004a78 <SPI_WaitFlagStateUntilTimeout>
 8004ba4:	4603      	mov	r3, r0
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d007      	beq.n	8004bba <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bae:	f043 0220 	orr.w	r2, r3, #32
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8004bb6:	2303      	movs	r3, #3
 8004bb8:	e032      	b.n	8004c20 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004bba:	4b1b      	ldr	r3, [pc, #108]	@ (8004c28 <SPI_EndRxTxTransaction+0xa0>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4a1b      	ldr	r2, [pc, #108]	@ (8004c2c <SPI_EndRxTxTransaction+0xa4>)
 8004bc0:	fba2 2303 	umull	r2, r3, r2, r3
 8004bc4:	0d5b      	lsrs	r3, r3, #21
 8004bc6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004bca:	fb02 f303 	mul.w	r3, r2, r3
 8004bce:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	685b      	ldr	r3, [r3, #4]
 8004bd4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004bd8:	d112      	bne.n	8004c00 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	9300      	str	r3, [sp, #0]
 8004bde:	68bb      	ldr	r3, [r7, #8]
 8004be0:	2200      	movs	r2, #0
 8004be2:	2180      	movs	r1, #128	@ 0x80
 8004be4:	68f8      	ldr	r0, [r7, #12]
 8004be6:	f7ff ff47 	bl	8004a78 <SPI_WaitFlagStateUntilTimeout>
 8004bea:	4603      	mov	r3, r0
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d016      	beq.n	8004c1e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bf4:	f043 0220 	orr.w	r2, r3, #32
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004bfc:	2303      	movs	r3, #3
 8004bfe:	e00f      	b.n	8004c20 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004c00:	697b      	ldr	r3, [r7, #20]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d00a      	beq.n	8004c1c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8004c06:	697b      	ldr	r3, [r7, #20]
 8004c08:	3b01      	subs	r3, #1
 8004c0a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	689b      	ldr	r3, [r3, #8]
 8004c12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c16:	2b80      	cmp	r3, #128	@ 0x80
 8004c18:	d0f2      	beq.n	8004c00 <SPI_EndRxTxTransaction+0x78>
 8004c1a:	e000      	b.n	8004c1e <SPI_EndRxTxTransaction+0x96>
        break;
 8004c1c:	bf00      	nop
  }

  return HAL_OK;
 8004c1e:	2300      	movs	r3, #0
}
 8004c20:	4618      	mov	r0, r3
 8004c22:	3718      	adds	r7, #24
 8004c24:	46bd      	mov	sp, r7
 8004c26:	bd80      	pop	{r7, pc}
 8004c28:	20000030 	.word	0x20000030
 8004c2c:	165e9f81 	.word	0x165e9f81

08004c30 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b082      	sub	sp, #8
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d101      	bne.n	8004c42 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c3e:	2301      	movs	r3, #1
 8004c40:	e042      	b.n	8004cc8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004c48:	b2db      	uxtb	r3, r3
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d106      	bne.n	8004c5c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2200      	movs	r2, #0
 8004c52:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c56:	6878      	ldr	r0, [r7, #4]
 8004c58:	f7fc fda0 	bl	800179c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2224      	movs	r2, #36	@ 0x24
 8004c60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	68da      	ldr	r2, [r3, #12]
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004c72:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004c74:	6878      	ldr	r0, [r7, #4]
 8004c76:	f000 f973 	bl	8004f60 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	691a      	ldr	r2, [r3, #16]
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004c88:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	695a      	ldr	r2, [r3, #20]
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004c98:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	68da      	ldr	r2, [r3, #12]
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004ca8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2200      	movs	r2, #0
 8004cae:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2220      	movs	r2, #32
 8004cb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2220      	movs	r2, #32
 8004cbc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004cc6:	2300      	movs	r3, #0
}
 8004cc8:	4618      	mov	r0, r3
 8004cca:	3708      	adds	r7, #8
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	bd80      	pop	{r7, pc}

08004cd0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b08a      	sub	sp, #40	@ 0x28
 8004cd4:	af02      	add	r7, sp, #8
 8004cd6:	60f8      	str	r0, [r7, #12]
 8004cd8:	60b9      	str	r1, [r7, #8]
 8004cda:	603b      	str	r3, [r7, #0]
 8004cdc:	4613      	mov	r3, r2
 8004cde:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004cea:	b2db      	uxtb	r3, r3
 8004cec:	2b20      	cmp	r3, #32
 8004cee:	d175      	bne.n	8004ddc <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004cf0:	68bb      	ldr	r3, [r7, #8]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d002      	beq.n	8004cfc <HAL_UART_Transmit+0x2c>
 8004cf6:	88fb      	ldrh	r3, [r7, #6]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d101      	bne.n	8004d00 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	e06e      	b.n	8004dde <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	2200      	movs	r2, #0
 8004d04:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	2221      	movs	r2, #33	@ 0x21
 8004d0a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004d0e:	f7fc fec5 	bl	8001a9c <HAL_GetTick>
 8004d12:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	88fa      	ldrh	r2, [r7, #6]
 8004d18:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	88fa      	ldrh	r2, [r7, #6]
 8004d1e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	689b      	ldr	r3, [r3, #8]
 8004d24:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d28:	d108      	bne.n	8004d3c <HAL_UART_Transmit+0x6c>
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	691b      	ldr	r3, [r3, #16]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d104      	bne.n	8004d3c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004d32:	2300      	movs	r3, #0
 8004d34:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004d36:	68bb      	ldr	r3, [r7, #8]
 8004d38:	61bb      	str	r3, [r7, #24]
 8004d3a:	e003      	b.n	8004d44 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004d3c:	68bb      	ldr	r3, [r7, #8]
 8004d3e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004d40:	2300      	movs	r3, #0
 8004d42:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004d44:	e02e      	b.n	8004da4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	9300      	str	r3, [sp, #0]
 8004d4a:	697b      	ldr	r3, [r7, #20]
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	2180      	movs	r1, #128	@ 0x80
 8004d50:	68f8      	ldr	r0, [r7, #12]
 8004d52:	f000 f848 	bl	8004de6 <UART_WaitOnFlagUntilTimeout>
 8004d56:	4603      	mov	r3, r0
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d005      	beq.n	8004d68 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	2220      	movs	r2, #32
 8004d60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004d64:	2303      	movs	r3, #3
 8004d66:	e03a      	b.n	8004dde <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004d68:	69fb      	ldr	r3, [r7, #28]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d10b      	bne.n	8004d86 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004d6e:	69bb      	ldr	r3, [r7, #24]
 8004d70:	881b      	ldrh	r3, [r3, #0]
 8004d72:	461a      	mov	r2, r3
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d7c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004d7e:	69bb      	ldr	r3, [r7, #24]
 8004d80:	3302      	adds	r3, #2
 8004d82:	61bb      	str	r3, [r7, #24]
 8004d84:	e007      	b.n	8004d96 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004d86:	69fb      	ldr	r3, [r7, #28]
 8004d88:	781a      	ldrb	r2, [r3, #0]
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004d90:	69fb      	ldr	r3, [r7, #28]
 8004d92:	3301      	adds	r3, #1
 8004d94:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004d9a:	b29b      	uxth	r3, r3
 8004d9c:	3b01      	subs	r3, #1
 8004d9e:	b29a      	uxth	r2, r3
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004da8:	b29b      	uxth	r3, r3
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d1cb      	bne.n	8004d46 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	9300      	str	r3, [sp, #0]
 8004db2:	697b      	ldr	r3, [r7, #20]
 8004db4:	2200      	movs	r2, #0
 8004db6:	2140      	movs	r1, #64	@ 0x40
 8004db8:	68f8      	ldr	r0, [r7, #12]
 8004dba:	f000 f814 	bl	8004de6 <UART_WaitOnFlagUntilTimeout>
 8004dbe:	4603      	mov	r3, r0
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d005      	beq.n	8004dd0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	2220      	movs	r2, #32
 8004dc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004dcc:	2303      	movs	r3, #3
 8004dce:	e006      	b.n	8004dde <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	2220      	movs	r2, #32
 8004dd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004dd8:	2300      	movs	r3, #0
 8004dda:	e000      	b.n	8004dde <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004ddc:	2302      	movs	r3, #2
  }
}
 8004dde:	4618      	mov	r0, r3
 8004de0:	3720      	adds	r7, #32
 8004de2:	46bd      	mov	sp, r7
 8004de4:	bd80      	pop	{r7, pc}

08004de6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004de6:	b580      	push	{r7, lr}
 8004de8:	b086      	sub	sp, #24
 8004dea:	af00      	add	r7, sp, #0
 8004dec:	60f8      	str	r0, [r7, #12]
 8004dee:	60b9      	str	r1, [r7, #8]
 8004df0:	603b      	str	r3, [r7, #0]
 8004df2:	4613      	mov	r3, r2
 8004df4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004df6:	e03b      	b.n	8004e70 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004df8:	6a3b      	ldr	r3, [r7, #32]
 8004dfa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004dfe:	d037      	beq.n	8004e70 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e00:	f7fc fe4c 	bl	8001a9c <HAL_GetTick>
 8004e04:	4602      	mov	r2, r0
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	1ad3      	subs	r3, r2, r3
 8004e0a:	6a3a      	ldr	r2, [r7, #32]
 8004e0c:	429a      	cmp	r2, r3
 8004e0e:	d302      	bcc.n	8004e16 <UART_WaitOnFlagUntilTimeout+0x30>
 8004e10:	6a3b      	ldr	r3, [r7, #32]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d101      	bne.n	8004e1a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004e16:	2303      	movs	r3, #3
 8004e18:	e03a      	b.n	8004e90 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	68db      	ldr	r3, [r3, #12]
 8004e20:	f003 0304 	and.w	r3, r3, #4
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d023      	beq.n	8004e70 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	2b80      	cmp	r3, #128	@ 0x80
 8004e2c:	d020      	beq.n	8004e70 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	2b40      	cmp	r3, #64	@ 0x40
 8004e32:	d01d      	beq.n	8004e70 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f003 0308 	and.w	r3, r3, #8
 8004e3e:	2b08      	cmp	r3, #8
 8004e40:	d116      	bne.n	8004e70 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004e42:	2300      	movs	r3, #0
 8004e44:	617b      	str	r3, [r7, #20]
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	617b      	str	r3, [r7, #20]
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	685b      	ldr	r3, [r3, #4]
 8004e54:	617b      	str	r3, [r7, #20]
 8004e56:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004e58:	68f8      	ldr	r0, [r7, #12]
 8004e5a:	f000 f81d 	bl	8004e98 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	2208      	movs	r2, #8
 8004e62:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	2200      	movs	r2, #0
 8004e68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	e00f      	b.n	8004e90 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	681a      	ldr	r2, [r3, #0]
 8004e76:	68bb      	ldr	r3, [r7, #8]
 8004e78:	4013      	ands	r3, r2
 8004e7a:	68ba      	ldr	r2, [r7, #8]
 8004e7c:	429a      	cmp	r2, r3
 8004e7e:	bf0c      	ite	eq
 8004e80:	2301      	moveq	r3, #1
 8004e82:	2300      	movne	r3, #0
 8004e84:	b2db      	uxtb	r3, r3
 8004e86:	461a      	mov	r2, r3
 8004e88:	79fb      	ldrb	r3, [r7, #7]
 8004e8a:	429a      	cmp	r2, r3
 8004e8c:	d0b4      	beq.n	8004df8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004e8e:	2300      	movs	r3, #0
}
 8004e90:	4618      	mov	r0, r3
 8004e92:	3718      	adds	r7, #24
 8004e94:	46bd      	mov	sp, r7
 8004e96:	bd80      	pop	{r7, pc}

08004e98 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004e98:	b480      	push	{r7}
 8004e9a:	b095      	sub	sp, #84	@ 0x54
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	330c      	adds	r3, #12
 8004ea6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ea8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004eaa:	e853 3f00 	ldrex	r3, [r3]
 8004eae:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004eb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004eb2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004eb6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	330c      	adds	r3, #12
 8004ebe:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004ec0:	643a      	str	r2, [r7, #64]	@ 0x40
 8004ec2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ec4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004ec6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004ec8:	e841 2300 	strex	r3, r2, [r1]
 8004ecc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004ece:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d1e5      	bne.n	8004ea0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	3314      	adds	r3, #20
 8004eda:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004edc:	6a3b      	ldr	r3, [r7, #32]
 8004ede:	e853 3f00 	ldrex	r3, [r3]
 8004ee2:	61fb      	str	r3, [r7, #28]
   return(result);
 8004ee4:	69fb      	ldr	r3, [r7, #28]
 8004ee6:	f023 0301 	bic.w	r3, r3, #1
 8004eea:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	3314      	adds	r3, #20
 8004ef2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004ef4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004ef6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ef8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004efa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004efc:	e841 2300 	strex	r3, r2, [r1]
 8004f00:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004f02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d1e5      	bne.n	8004ed4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f0c:	2b01      	cmp	r3, #1
 8004f0e:	d119      	bne.n	8004f44 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	330c      	adds	r3, #12
 8004f16:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	e853 3f00 	ldrex	r3, [r3]
 8004f1e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004f20:	68bb      	ldr	r3, [r7, #8]
 8004f22:	f023 0310 	bic.w	r3, r3, #16
 8004f26:	647b      	str	r3, [r7, #68]	@ 0x44
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	330c      	adds	r3, #12
 8004f2e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004f30:	61ba      	str	r2, [r7, #24]
 8004f32:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f34:	6979      	ldr	r1, [r7, #20]
 8004f36:	69ba      	ldr	r2, [r7, #24]
 8004f38:	e841 2300 	strex	r3, r2, [r1]
 8004f3c:	613b      	str	r3, [r7, #16]
   return(result);
 8004f3e:	693b      	ldr	r3, [r7, #16]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d1e5      	bne.n	8004f10 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2220      	movs	r2, #32
 8004f48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004f52:	bf00      	nop
 8004f54:	3754      	adds	r7, #84	@ 0x54
 8004f56:	46bd      	mov	sp, r7
 8004f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5c:	4770      	bx	lr
	...

08004f60 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004f64:	b0c0      	sub	sp, #256	@ 0x100
 8004f66:	af00      	add	r7, sp, #0
 8004f68:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	691b      	ldr	r3, [r3, #16]
 8004f74:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004f78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f7c:	68d9      	ldr	r1, [r3, #12]
 8004f7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f82:	681a      	ldr	r2, [r3, #0]
 8004f84:	ea40 0301 	orr.w	r3, r0, r1
 8004f88:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004f8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f8e:	689a      	ldr	r2, [r3, #8]
 8004f90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f94:	691b      	ldr	r3, [r3, #16]
 8004f96:	431a      	orrs	r2, r3
 8004f98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f9c:	695b      	ldr	r3, [r3, #20]
 8004f9e:	431a      	orrs	r2, r3
 8004fa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fa4:	69db      	ldr	r3, [r3, #28]
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004fac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	68db      	ldr	r3, [r3, #12]
 8004fb4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004fb8:	f021 010c 	bic.w	r1, r1, #12
 8004fbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fc0:	681a      	ldr	r2, [r3, #0]
 8004fc2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004fc6:	430b      	orrs	r3, r1
 8004fc8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004fca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	695b      	ldr	r3, [r3, #20]
 8004fd2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004fd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fda:	6999      	ldr	r1, [r3, #24]
 8004fdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fe0:	681a      	ldr	r2, [r3, #0]
 8004fe2:	ea40 0301 	orr.w	r3, r0, r1
 8004fe6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004fe8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fec:	681a      	ldr	r2, [r3, #0]
 8004fee:	4b8f      	ldr	r3, [pc, #572]	@ (800522c <UART_SetConfig+0x2cc>)
 8004ff0:	429a      	cmp	r2, r3
 8004ff2:	d005      	beq.n	8005000 <UART_SetConfig+0xa0>
 8004ff4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ff8:	681a      	ldr	r2, [r3, #0]
 8004ffa:	4b8d      	ldr	r3, [pc, #564]	@ (8005230 <UART_SetConfig+0x2d0>)
 8004ffc:	429a      	cmp	r2, r3
 8004ffe:	d104      	bne.n	800500a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005000:	f7ff f85e 	bl	80040c0 <HAL_RCC_GetPCLK2Freq>
 8005004:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005008:	e003      	b.n	8005012 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800500a:	f7ff f845 	bl	8004098 <HAL_RCC_GetPCLK1Freq>
 800500e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005012:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005016:	69db      	ldr	r3, [r3, #28]
 8005018:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800501c:	f040 810c 	bne.w	8005238 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005020:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005024:	2200      	movs	r2, #0
 8005026:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800502a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800502e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005032:	4622      	mov	r2, r4
 8005034:	462b      	mov	r3, r5
 8005036:	1891      	adds	r1, r2, r2
 8005038:	65b9      	str	r1, [r7, #88]	@ 0x58
 800503a:	415b      	adcs	r3, r3
 800503c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800503e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005042:	4621      	mov	r1, r4
 8005044:	eb12 0801 	adds.w	r8, r2, r1
 8005048:	4629      	mov	r1, r5
 800504a:	eb43 0901 	adc.w	r9, r3, r1
 800504e:	f04f 0200 	mov.w	r2, #0
 8005052:	f04f 0300 	mov.w	r3, #0
 8005056:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800505a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800505e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005062:	4690      	mov	r8, r2
 8005064:	4699      	mov	r9, r3
 8005066:	4623      	mov	r3, r4
 8005068:	eb18 0303 	adds.w	r3, r8, r3
 800506c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005070:	462b      	mov	r3, r5
 8005072:	eb49 0303 	adc.w	r3, r9, r3
 8005076:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800507a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800507e:	685b      	ldr	r3, [r3, #4]
 8005080:	2200      	movs	r2, #0
 8005082:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005086:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800508a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800508e:	460b      	mov	r3, r1
 8005090:	18db      	adds	r3, r3, r3
 8005092:	653b      	str	r3, [r7, #80]	@ 0x50
 8005094:	4613      	mov	r3, r2
 8005096:	eb42 0303 	adc.w	r3, r2, r3
 800509a:	657b      	str	r3, [r7, #84]	@ 0x54
 800509c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80050a0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80050a4:	f7fb f8f4 	bl	8000290 <__aeabi_uldivmod>
 80050a8:	4602      	mov	r2, r0
 80050aa:	460b      	mov	r3, r1
 80050ac:	4b61      	ldr	r3, [pc, #388]	@ (8005234 <UART_SetConfig+0x2d4>)
 80050ae:	fba3 2302 	umull	r2, r3, r3, r2
 80050b2:	095b      	lsrs	r3, r3, #5
 80050b4:	011c      	lsls	r4, r3, #4
 80050b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80050ba:	2200      	movs	r2, #0
 80050bc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80050c0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80050c4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80050c8:	4642      	mov	r2, r8
 80050ca:	464b      	mov	r3, r9
 80050cc:	1891      	adds	r1, r2, r2
 80050ce:	64b9      	str	r1, [r7, #72]	@ 0x48
 80050d0:	415b      	adcs	r3, r3
 80050d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80050d4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80050d8:	4641      	mov	r1, r8
 80050da:	eb12 0a01 	adds.w	sl, r2, r1
 80050de:	4649      	mov	r1, r9
 80050e0:	eb43 0b01 	adc.w	fp, r3, r1
 80050e4:	f04f 0200 	mov.w	r2, #0
 80050e8:	f04f 0300 	mov.w	r3, #0
 80050ec:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80050f0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80050f4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80050f8:	4692      	mov	sl, r2
 80050fa:	469b      	mov	fp, r3
 80050fc:	4643      	mov	r3, r8
 80050fe:	eb1a 0303 	adds.w	r3, sl, r3
 8005102:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005106:	464b      	mov	r3, r9
 8005108:	eb4b 0303 	adc.w	r3, fp, r3
 800510c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005110:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005114:	685b      	ldr	r3, [r3, #4]
 8005116:	2200      	movs	r2, #0
 8005118:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800511c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005120:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005124:	460b      	mov	r3, r1
 8005126:	18db      	adds	r3, r3, r3
 8005128:	643b      	str	r3, [r7, #64]	@ 0x40
 800512a:	4613      	mov	r3, r2
 800512c:	eb42 0303 	adc.w	r3, r2, r3
 8005130:	647b      	str	r3, [r7, #68]	@ 0x44
 8005132:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005136:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800513a:	f7fb f8a9 	bl	8000290 <__aeabi_uldivmod>
 800513e:	4602      	mov	r2, r0
 8005140:	460b      	mov	r3, r1
 8005142:	4611      	mov	r1, r2
 8005144:	4b3b      	ldr	r3, [pc, #236]	@ (8005234 <UART_SetConfig+0x2d4>)
 8005146:	fba3 2301 	umull	r2, r3, r3, r1
 800514a:	095b      	lsrs	r3, r3, #5
 800514c:	2264      	movs	r2, #100	@ 0x64
 800514e:	fb02 f303 	mul.w	r3, r2, r3
 8005152:	1acb      	subs	r3, r1, r3
 8005154:	00db      	lsls	r3, r3, #3
 8005156:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800515a:	4b36      	ldr	r3, [pc, #216]	@ (8005234 <UART_SetConfig+0x2d4>)
 800515c:	fba3 2302 	umull	r2, r3, r3, r2
 8005160:	095b      	lsrs	r3, r3, #5
 8005162:	005b      	lsls	r3, r3, #1
 8005164:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005168:	441c      	add	r4, r3
 800516a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800516e:	2200      	movs	r2, #0
 8005170:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005174:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005178:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800517c:	4642      	mov	r2, r8
 800517e:	464b      	mov	r3, r9
 8005180:	1891      	adds	r1, r2, r2
 8005182:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005184:	415b      	adcs	r3, r3
 8005186:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005188:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800518c:	4641      	mov	r1, r8
 800518e:	1851      	adds	r1, r2, r1
 8005190:	6339      	str	r1, [r7, #48]	@ 0x30
 8005192:	4649      	mov	r1, r9
 8005194:	414b      	adcs	r3, r1
 8005196:	637b      	str	r3, [r7, #52]	@ 0x34
 8005198:	f04f 0200 	mov.w	r2, #0
 800519c:	f04f 0300 	mov.w	r3, #0
 80051a0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80051a4:	4659      	mov	r1, fp
 80051a6:	00cb      	lsls	r3, r1, #3
 80051a8:	4651      	mov	r1, sl
 80051aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80051ae:	4651      	mov	r1, sl
 80051b0:	00ca      	lsls	r2, r1, #3
 80051b2:	4610      	mov	r0, r2
 80051b4:	4619      	mov	r1, r3
 80051b6:	4603      	mov	r3, r0
 80051b8:	4642      	mov	r2, r8
 80051ba:	189b      	adds	r3, r3, r2
 80051bc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80051c0:	464b      	mov	r3, r9
 80051c2:	460a      	mov	r2, r1
 80051c4:	eb42 0303 	adc.w	r3, r2, r3
 80051c8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80051cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051d0:	685b      	ldr	r3, [r3, #4]
 80051d2:	2200      	movs	r2, #0
 80051d4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80051d8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80051dc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80051e0:	460b      	mov	r3, r1
 80051e2:	18db      	adds	r3, r3, r3
 80051e4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80051e6:	4613      	mov	r3, r2
 80051e8:	eb42 0303 	adc.w	r3, r2, r3
 80051ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80051ee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80051f2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80051f6:	f7fb f84b 	bl	8000290 <__aeabi_uldivmod>
 80051fa:	4602      	mov	r2, r0
 80051fc:	460b      	mov	r3, r1
 80051fe:	4b0d      	ldr	r3, [pc, #52]	@ (8005234 <UART_SetConfig+0x2d4>)
 8005200:	fba3 1302 	umull	r1, r3, r3, r2
 8005204:	095b      	lsrs	r3, r3, #5
 8005206:	2164      	movs	r1, #100	@ 0x64
 8005208:	fb01 f303 	mul.w	r3, r1, r3
 800520c:	1ad3      	subs	r3, r2, r3
 800520e:	00db      	lsls	r3, r3, #3
 8005210:	3332      	adds	r3, #50	@ 0x32
 8005212:	4a08      	ldr	r2, [pc, #32]	@ (8005234 <UART_SetConfig+0x2d4>)
 8005214:	fba2 2303 	umull	r2, r3, r2, r3
 8005218:	095b      	lsrs	r3, r3, #5
 800521a:	f003 0207 	and.w	r2, r3, #7
 800521e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	4422      	add	r2, r4
 8005226:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005228:	e106      	b.n	8005438 <UART_SetConfig+0x4d8>
 800522a:	bf00      	nop
 800522c:	40011000 	.word	0x40011000
 8005230:	40011400 	.word	0x40011400
 8005234:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005238:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800523c:	2200      	movs	r2, #0
 800523e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005242:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005246:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800524a:	4642      	mov	r2, r8
 800524c:	464b      	mov	r3, r9
 800524e:	1891      	adds	r1, r2, r2
 8005250:	6239      	str	r1, [r7, #32]
 8005252:	415b      	adcs	r3, r3
 8005254:	627b      	str	r3, [r7, #36]	@ 0x24
 8005256:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800525a:	4641      	mov	r1, r8
 800525c:	1854      	adds	r4, r2, r1
 800525e:	4649      	mov	r1, r9
 8005260:	eb43 0501 	adc.w	r5, r3, r1
 8005264:	f04f 0200 	mov.w	r2, #0
 8005268:	f04f 0300 	mov.w	r3, #0
 800526c:	00eb      	lsls	r3, r5, #3
 800526e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005272:	00e2      	lsls	r2, r4, #3
 8005274:	4614      	mov	r4, r2
 8005276:	461d      	mov	r5, r3
 8005278:	4643      	mov	r3, r8
 800527a:	18e3      	adds	r3, r4, r3
 800527c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005280:	464b      	mov	r3, r9
 8005282:	eb45 0303 	adc.w	r3, r5, r3
 8005286:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800528a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800528e:	685b      	ldr	r3, [r3, #4]
 8005290:	2200      	movs	r2, #0
 8005292:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005296:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800529a:	f04f 0200 	mov.w	r2, #0
 800529e:	f04f 0300 	mov.w	r3, #0
 80052a2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80052a6:	4629      	mov	r1, r5
 80052a8:	008b      	lsls	r3, r1, #2
 80052aa:	4621      	mov	r1, r4
 80052ac:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80052b0:	4621      	mov	r1, r4
 80052b2:	008a      	lsls	r2, r1, #2
 80052b4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80052b8:	f7fa ffea 	bl	8000290 <__aeabi_uldivmod>
 80052bc:	4602      	mov	r2, r0
 80052be:	460b      	mov	r3, r1
 80052c0:	4b60      	ldr	r3, [pc, #384]	@ (8005444 <UART_SetConfig+0x4e4>)
 80052c2:	fba3 2302 	umull	r2, r3, r3, r2
 80052c6:	095b      	lsrs	r3, r3, #5
 80052c8:	011c      	lsls	r4, r3, #4
 80052ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80052ce:	2200      	movs	r2, #0
 80052d0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80052d4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80052d8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80052dc:	4642      	mov	r2, r8
 80052de:	464b      	mov	r3, r9
 80052e0:	1891      	adds	r1, r2, r2
 80052e2:	61b9      	str	r1, [r7, #24]
 80052e4:	415b      	adcs	r3, r3
 80052e6:	61fb      	str	r3, [r7, #28]
 80052e8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80052ec:	4641      	mov	r1, r8
 80052ee:	1851      	adds	r1, r2, r1
 80052f0:	6139      	str	r1, [r7, #16]
 80052f2:	4649      	mov	r1, r9
 80052f4:	414b      	adcs	r3, r1
 80052f6:	617b      	str	r3, [r7, #20]
 80052f8:	f04f 0200 	mov.w	r2, #0
 80052fc:	f04f 0300 	mov.w	r3, #0
 8005300:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005304:	4659      	mov	r1, fp
 8005306:	00cb      	lsls	r3, r1, #3
 8005308:	4651      	mov	r1, sl
 800530a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800530e:	4651      	mov	r1, sl
 8005310:	00ca      	lsls	r2, r1, #3
 8005312:	4610      	mov	r0, r2
 8005314:	4619      	mov	r1, r3
 8005316:	4603      	mov	r3, r0
 8005318:	4642      	mov	r2, r8
 800531a:	189b      	adds	r3, r3, r2
 800531c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005320:	464b      	mov	r3, r9
 8005322:	460a      	mov	r2, r1
 8005324:	eb42 0303 	adc.w	r3, r2, r3
 8005328:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800532c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005330:	685b      	ldr	r3, [r3, #4]
 8005332:	2200      	movs	r2, #0
 8005334:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005336:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005338:	f04f 0200 	mov.w	r2, #0
 800533c:	f04f 0300 	mov.w	r3, #0
 8005340:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005344:	4649      	mov	r1, r9
 8005346:	008b      	lsls	r3, r1, #2
 8005348:	4641      	mov	r1, r8
 800534a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800534e:	4641      	mov	r1, r8
 8005350:	008a      	lsls	r2, r1, #2
 8005352:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005356:	f7fa ff9b 	bl	8000290 <__aeabi_uldivmod>
 800535a:	4602      	mov	r2, r0
 800535c:	460b      	mov	r3, r1
 800535e:	4611      	mov	r1, r2
 8005360:	4b38      	ldr	r3, [pc, #224]	@ (8005444 <UART_SetConfig+0x4e4>)
 8005362:	fba3 2301 	umull	r2, r3, r3, r1
 8005366:	095b      	lsrs	r3, r3, #5
 8005368:	2264      	movs	r2, #100	@ 0x64
 800536a:	fb02 f303 	mul.w	r3, r2, r3
 800536e:	1acb      	subs	r3, r1, r3
 8005370:	011b      	lsls	r3, r3, #4
 8005372:	3332      	adds	r3, #50	@ 0x32
 8005374:	4a33      	ldr	r2, [pc, #204]	@ (8005444 <UART_SetConfig+0x4e4>)
 8005376:	fba2 2303 	umull	r2, r3, r2, r3
 800537a:	095b      	lsrs	r3, r3, #5
 800537c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005380:	441c      	add	r4, r3
 8005382:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005386:	2200      	movs	r2, #0
 8005388:	673b      	str	r3, [r7, #112]	@ 0x70
 800538a:	677a      	str	r2, [r7, #116]	@ 0x74
 800538c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005390:	4642      	mov	r2, r8
 8005392:	464b      	mov	r3, r9
 8005394:	1891      	adds	r1, r2, r2
 8005396:	60b9      	str	r1, [r7, #8]
 8005398:	415b      	adcs	r3, r3
 800539a:	60fb      	str	r3, [r7, #12]
 800539c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80053a0:	4641      	mov	r1, r8
 80053a2:	1851      	adds	r1, r2, r1
 80053a4:	6039      	str	r1, [r7, #0]
 80053a6:	4649      	mov	r1, r9
 80053a8:	414b      	adcs	r3, r1
 80053aa:	607b      	str	r3, [r7, #4]
 80053ac:	f04f 0200 	mov.w	r2, #0
 80053b0:	f04f 0300 	mov.w	r3, #0
 80053b4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80053b8:	4659      	mov	r1, fp
 80053ba:	00cb      	lsls	r3, r1, #3
 80053bc:	4651      	mov	r1, sl
 80053be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80053c2:	4651      	mov	r1, sl
 80053c4:	00ca      	lsls	r2, r1, #3
 80053c6:	4610      	mov	r0, r2
 80053c8:	4619      	mov	r1, r3
 80053ca:	4603      	mov	r3, r0
 80053cc:	4642      	mov	r2, r8
 80053ce:	189b      	adds	r3, r3, r2
 80053d0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80053d2:	464b      	mov	r3, r9
 80053d4:	460a      	mov	r2, r1
 80053d6:	eb42 0303 	adc.w	r3, r2, r3
 80053da:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80053dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053e0:	685b      	ldr	r3, [r3, #4]
 80053e2:	2200      	movs	r2, #0
 80053e4:	663b      	str	r3, [r7, #96]	@ 0x60
 80053e6:	667a      	str	r2, [r7, #100]	@ 0x64
 80053e8:	f04f 0200 	mov.w	r2, #0
 80053ec:	f04f 0300 	mov.w	r3, #0
 80053f0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80053f4:	4649      	mov	r1, r9
 80053f6:	008b      	lsls	r3, r1, #2
 80053f8:	4641      	mov	r1, r8
 80053fa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80053fe:	4641      	mov	r1, r8
 8005400:	008a      	lsls	r2, r1, #2
 8005402:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005406:	f7fa ff43 	bl	8000290 <__aeabi_uldivmod>
 800540a:	4602      	mov	r2, r0
 800540c:	460b      	mov	r3, r1
 800540e:	4b0d      	ldr	r3, [pc, #52]	@ (8005444 <UART_SetConfig+0x4e4>)
 8005410:	fba3 1302 	umull	r1, r3, r3, r2
 8005414:	095b      	lsrs	r3, r3, #5
 8005416:	2164      	movs	r1, #100	@ 0x64
 8005418:	fb01 f303 	mul.w	r3, r1, r3
 800541c:	1ad3      	subs	r3, r2, r3
 800541e:	011b      	lsls	r3, r3, #4
 8005420:	3332      	adds	r3, #50	@ 0x32
 8005422:	4a08      	ldr	r2, [pc, #32]	@ (8005444 <UART_SetConfig+0x4e4>)
 8005424:	fba2 2303 	umull	r2, r3, r2, r3
 8005428:	095b      	lsrs	r3, r3, #5
 800542a:	f003 020f 	and.w	r2, r3, #15
 800542e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	4422      	add	r2, r4
 8005436:	609a      	str	r2, [r3, #8]
}
 8005438:	bf00      	nop
 800543a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800543e:	46bd      	mov	sp, r7
 8005440:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005444:	51eb851f 	.word	0x51eb851f

08005448 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800544c:	4904      	ldr	r1, [pc, #16]	@ (8005460 <MX_FATFS_Init+0x18>)
 800544e:	4805      	ldr	r0, [pc, #20]	@ (8005464 <MX_FATFS_Init+0x1c>)
 8005450:	f003 f9b6 	bl	80087c0 <FATFS_LinkDriver>
 8005454:	4603      	mov	r3, r0
 8005456:	461a      	mov	r2, r3
 8005458:	4b03      	ldr	r3, [pc, #12]	@ (8005468 <MX_FATFS_Init+0x20>)
 800545a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800545c:	bf00      	nop
 800545e:	bd80      	pop	{r7, pc}
 8005460:	20004988 	.word	0x20004988
 8005464:	2000003c 	.word	0x2000003c
 8005468:	20004984 	.word	0x20004984

0800546c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800546c:	b480      	push	{r7}
 800546e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8005470:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8005472:	4618      	mov	r0, r3
 8005474:	46bd      	mov	sp, r7
 8005476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547a:	4770      	bx	lr

0800547c <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b082      	sub	sp, #8
 8005480:	af00      	add	r7, sp, #0
 8005482:	4603      	mov	r3, r0
 8005484:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 8005486:	4b06      	ldr	r3, [pc, #24]	@ (80054a0 <USER_initialize+0x24>)
 8005488:	2201      	movs	r2, #1
 800548a:	701a      	strb	r2, [r3, #0]
//    return Stat;
    return USER_SPI_initialize(pdrv); //add this line
 800548c:	79fb      	ldrb	r3, [r7, #7]
 800548e:	4618      	mov	r0, r3
 8005490:	f000 f9de 	bl	8005850 <USER_SPI_initialize>
 8005494:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8005496:	4618      	mov	r0, r3
 8005498:	3708      	adds	r7, #8
 800549a:	46bd      	mov	sp, r7
 800549c:	bd80      	pop	{r7, pc}
 800549e:	bf00      	nop
 80054a0:	20000039 	.word	0x20000039

080054a4 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b082      	sub	sp, #8
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	4603      	mov	r3, r0
 80054ac:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 80054ae:	4b06      	ldr	r3, [pc, #24]	@ (80054c8 <USER_status+0x24>)
 80054b0:	2201      	movs	r2, #1
 80054b2:	701a      	strb	r2, [r3, #0]
//    return Stat;
    return USER_SPI_status(pdrv); //add this line
 80054b4:	79fb      	ldrb	r3, [r7, #7]
 80054b6:	4618      	mov	r0, r3
 80054b8:	f000 fab6 	bl	8005a28 <USER_SPI_status>
 80054bc:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 80054be:	4618      	mov	r0, r3
 80054c0:	3708      	adds	r7, #8
 80054c2:	46bd      	mov	sp, r7
 80054c4:	bd80      	pop	{r7, pc}
 80054c6:	bf00      	nop
 80054c8:	20000039 	.word	0x20000039

080054cc <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b084      	sub	sp, #16
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	60b9      	str	r1, [r7, #8]
 80054d4:	607a      	str	r2, [r7, #4]
 80054d6:	603b      	str	r3, [r7, #0]
 80054d8:	4603      	mov	r3, r0
 80054da:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
//    return RES_OK;
	return USER_SPI_read(pdrv, buff, sector,count); //add this line
 80054dc:	7bf8      	ldrb	r0, [r7, #15]
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	687a      	ldr	r2, [r7, #4]
 80054e2:	68b9      	ldr	r1, [r7, #8]
 80054e4:	f000 fab6 	bl	8005a54 <USER_SPI_read>
 80054e8:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 80054ea:	4618      	mov	r0, r3
 80054ec:	3710      	adds	r7, #16
 80054ee:	46bd      	mov	sp, r7
 80054f0:	bd80      	pop	{r7, pc}

080054f2 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80054f2:	b580      	push	{r7, lr}
 80054f4:	b084      	sub	sp, #16
 80054f6:	af00      	add	r7, sp, #0
 80054f8:	60b9      	str	r1, [r7, #8]
 80054fa:	607a      	str	r2, [r7, #4]
 80054fc:	603b      	str	r3, [r7, #0]
 80054fe:	4603      	mov	r3, r0
 8005500:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
//    return RES_OK;
	return USER_SPI_write(pdrv, buff, sector, count); //add this line
 8005502:	7bf8      	ldrb	r0, [r7, #15]
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	687a      	ldr	r2, [r7, #4]
 8005508:	68b9      	ldr	r1, [r7, #8]
 800550a:	f000 fb09 	bl	8005b20 <USER_SPI_write>
 800550e:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8005510:	4618      	mov	r0, r3
 8005512:	3710      	adds	r7, #16
 8005514:	46bd      	mov	sp, r7
 8005516:	bd80      	pop	{r7, pc}

08005518 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8005518:	b580      	push	{r7, lr}
 800551a:	b084      	sub	sp, #16
 800551c:	af00      	add	r7, sp, #0
 800551e:	4603      	mov	r3, r0
 8005520:	603a      	str	r2, [r7, #0]
 8005522:	71fb      	strb	r3, [r7, #7]
 8005524:	460b      	mov	r3, r1
 8005526:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 8005528:	2301      	movs	r3, #1
 800552a:	73fb      	strb	r3, [r7, #15]
//    return res;
    return USER_SPI_ioctl(pdrv, cmd, buff); //add this line
 800552c:	79b9      	ldrb	r1, [r7, #6]
 800552e:	79fb      	ldrb	r3, [r7, #7]
 8005530:	683a      	ldr	r2, [r7, #0]
 8005532:	4618      	mov	r0, r3
 8005534:	f000 fb70 	bl	8005c18 <USER_SPI_ioctl>
 8005538:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800553a:	4618      	mov	r0, r3
 800553c:	3710      	adds	r7, #16
 800553e:	46bd      	mov	sp, r7
 8005540:	bd80      	pop	{r7, pc}
	...

08005544 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8005544:	b580      	push	{r7, lr}
 8005546:	b082      	sub	sp, #8
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 800554c:	f7fc faa6 	bl	8001a9c <HAL_GetTick>
 8005550:	4603      	mov	r3, r0
 8005552:	4a04      	ldr	r2, [pc, #16]	@ (8005564 <SPI_Timer_On+0x20>)
 8005554:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 8005556:	4a04      	ldr	r2, [pc, #16]	@ (8005568 <SPI_Timer_On+0x24>)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6013      	str	r3, [r2, #0]
}
 800555c:	bf00      	nop
 800555e:	3708      	adds	r7, #8
 8005560:	46bd      	mov	sp, r7
 8005562:	bd80      	pop	{r7, pc}
 8005564:	20004990 	.word	0x20004990
 8005568:	20004994 	.word	0x20004994

0800556c <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 800556c:	b580      	push	{r7, lr}
 800556e:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8005570:	f7fc fa94 	bl	8001a9c <HAL_GetTick>
 8005574:	4602      	mov	r2, r0
 8005576:	4b06      	ldr	r3, [pc, #24]	@ (8005590 <SPI_Timer_Status+0x24>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	1ad2      	subs	r2, r2, r3
 800557c:	4b05      	ldr	r3, [pc, #20]	@ (8005594 <SPI_Timer_Status+0x28>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	429a      	cmp	r2, r3
 8005582:	bf34      	ite	cc
 8005584:	2301      	movcc	r3, #1
 8005586:	2300      	movcs	r3, #0
 8005588:	b2db      	uxtb	r3, r3
}
 800558a:	4618      	mov	r0, r3
 800558c:	bd80      	pop	{r7, pc}
 800558e:	bf00      	nop
 8005590:	20004990 	.word	0x20004990
 8005594:	20004994 	.word	0x20004994

08005598 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 8005598:	b580      	push	{r7, lr}
 800559a:	b086      	sub	sp, #24
 800559c:	af02      	add	r7, sp, #8
 800559e:	4603      	mov	r3, r0
 80055a0:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 80055a2:	f107 020f 	add.w	r2, r7, #15
 80055a6:	1df9      	adds	r1, r7, #7
 80055a8:	2332      	movs	r3, #50	@ 0x32
 80055aa:	9300      	str	r3, [sp, #0]
 80055ac:	2301      	movs	r3, #1
 80055ae:	4804      	ldr	r0, [pc, #16]	@ (80055c0 <xchg_spi+0x28>)
 80055b0:	f7ff f8b9 	bl	8004726 <HAL_SPI_TransmitReceive>
    return rxDat;
 80055b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80055b6:	4618      	mov	r0, r3
 80055b8:	3710      	adds	r7, #16
 80055ba:	46bd      	mov	sp, r7
 80055bc:	bd80      	pop	{r7, pc}
 80055be:	bf00      	nop
 80055c0:	20000360 	.word	0x20000360

080055c4 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 80055c4:	b590      	push	{r4, r7, lr}
 80055c6:	b085      	sub	sp, #20
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
 80055cc:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 80055ce:	2300      	movs	r3, #0
 80055d0:	60fb      	str	r3, [r7, #12]
 80055d2:	e00a      	b.n	80055ea <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 80055d4:	687a      	ldr	r2, [r7, #4]
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	18d4      	adds	r4, r2, r3
 80055da:	20ff      	movs	r0, #255	@ 0xff
 80055dc:	f7ff ffdc 	bl	8005598 <xchg_spi>
 80055e0:	4603      	mov	r3, r0
 80055e2:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	3301      	adds	r3, #1
 80055e8:	60fb      	str	r3, [r7, #12]
 80055ea:	68fa      	ldr	r2, [r7, #12]
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	429a      	cmp	r2, r3
 80055f0:	d3f0      	bcc.n	80055d4 <rcvr_spi_multi+0x10>
	}
}
 80055f2:	bf00      	nop
 80055f4:	bf00      	nop
 80055f6:	3714      	adds	r7, #20
 80055f8:	46bd      	mov	sp, r7
 80055fa:	bd90      	pop	{r4, r7, pc}

080055fc <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b082      	sub	sp, #8
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
 8005604:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&SD_SPI_HANDLE, buff, btx, HAL_MAX_DELAY);
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	b29a      	uxth	r2, r3
 800560a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800560e:	6879      	ldr	r1, [r7, #4]
 8005610:	4803      	ldr	r0, [pc, #12]	@ (8005620 <xmit_spi_multi+0x24>)
 8005612:	f7fe ff44 	bl	800449e <HAL_SPI_Transmit>
}
 8005616:	bf00      	nop
 8005618:	3708      	adds	r7, #8
 800561a:	46bd      	mov	sp, r7
 800561c:	bd80      	pop	{r7, pc}
 800561e:	bf00      	nop
 8005620:	20000360 	.word	0x20000360

08005624 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b086      	sub	sp, #24
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 800562c:	f7fc fa36 	bl	8001a9c <HAL_GetTick>
 8005630:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 8005636:	20ff      	movs	r0, #255	@ 0xff
 8005638:	f7ff ffae 	bl	8005598 <xchg_spi>
 800563c:	4603      	mov	r3, r0
 800563e:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 8005640:	7bfb      	ldrb	r3, [r7, #15]
 8005642:	2bff      	cmp	r3, #255	@ 0xff
 8005644:	d007      	beq.n	8005656 <wait_ready+0x32>
 8005646:	f7fc fa29 	bl	8001a9c <HAL_GetTick>
 800564a:	4602      	mov	r2, r0
 800564c:	697b      	ldr	r3, [r7, #20]
 800564e:	1ad3      	subs	r3, r2, r3
 8005650:	693a      	ldr	r2, [r7, #16]
 8005652:	429a      	cmp	r2, r3
 8005654:	d8ef      	bhi.n	8005636 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 8005656:	7bfb      	ldrb	r3, [r7, #15]
 8005658:	2bff      	cmp	r3, #255	@ 0xff
 800565a:	bf0c      	ite	eq
 800565c:	2301      	moveq	r3, #1
 800565e:	2300      	movne	r3, #0
 8005660:	b2db      	uxtb	r3, r3
}
 8005662:	4618      	mov	r0, r3
 8005664:	3718      	adds	r7, #24
 8005666:	46bd      	mov	sp, r7
 8005668:	bd80      	pop	{r7, pc}
	...

0800566c <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 800566c:	b580      	push	{r7, lr}
 800566e:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8005670:	2201      	movs	r2, #1
 8005672:	2102      	movs	r1, #2
 8005674:	4803      	ldr	r0, [pc, #12]	@ (8005684 <despiselect+0x18>)
 8005676:	f7fd f8b7 	bl	80027e8 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 800567a:	20ff      	movs	r0, #255	@ 0xff
 800567c:	f7ff ff8c 	bl	8005598 <xchg_spi>

}
 8005680:	bf00      	nop
 8005682:	bd80      	pop	{r7, pc}
 8005684:	40020400 	.word	0x40020400

08005688 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8005688:	b580      	push	{r7, lr}
 800568a:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 800568c:	2200      	movs	r2, #0
 800568e:	2102      	movs	r1, #2
 8005690:	4809      	ldr	r0, [pc, #36]	@ (80056b8 <spiselect+0x30>)
 8005692:	f7fd f8a9 	bl	80027e8 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 8005696:	20ff      	movs	r0, #255	@ 0xff
 8005698:	f7ff ff7e 	bl	8005598 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 800569c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80056a0:	f7ff ffc0 	bl	8005624 <wait_ready>
 80056a4:	4603      	mov	r3, r0
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d001      	beq.n	80056ae <spiselect+0x26>
 80056aa:	2301      	movs	r3, #1
 80056ac:	e002      	b.n	80056b4 <spiselect+0x2c>

	despiselect();
 80056ae:	f7ff ffdd 	bl	800566c <despiselect>
	return 0;	/* Timeout */
 80056b2:	2300      	movs	r3, #0
}
 80056b4:	4618      	mov	r0, r3
 80056b6:	bd80      	pop	{r7, pc}
 80056b8:	40020400 	.word	0x40020400

080056bc <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b084      	sub	sp, #16
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
 80056c4:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 80056c6:	20c8      	movs	r0, #200	@ 0xc8
 80056c8:	f7ff ff3c 	bl	8005544 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 80056cc:	20ff      	movs	r0, #255	@ 0xff
 80056ce:	f7ff ff63 	bl	8005598 <xchg_spi>
 80056d2:	4603      	mov	r3, r0
 80056d4:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 80056d6:	7bfb      	ldrb	r3, [r7, #15]
 80056d8:	2bff      	cmp	r3, #255	@ 0xff
 80056da:	d104      	bne.n	80056e6 <rcvr_datablock+0x2a>
 80056dc:	f7ff ff46 	bl	800556c <SPI_Timer_Status>
 80056e0:	4603      	mov	r3, r0
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d1f2      	bne.n	80056cc <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 80056e6:	7bfb      	ldrb	r3, [r7, #15]
 80056e8:	2bfe      	cmp	r3, #254	@ 0xfe
 80056ea:	d001      	beq.n	80056f0 <rcvr_datablock+0x34>
 80056ec:	2300      	movs	r3, #0
 80056ee:	e00a      	b.n	8005706 <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 80056f0:	6839      	ldr	r1, [r7, #0]
 80056f2:	6878      	ldr	r0, [r7, #4]
 80056f4:	f7ff ff66 	bl	80055c4 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 80056f8:	20ff      	movs	r0, #255	@ 0xff
 80056fa:	f7ff ff4d 	bl	8005598 <xchg_spi>
 80056fe:	20ff      	movs	r0, #255	@ 0xff
 8005700:	f7ff ff4a 	bl	8005598 <xchg_spi>

	return 1;						/* Function succeeded */
 8005704:	2301      	movs	r3, #1
}
 8005706:	4618      	mov	r0, r3
 8005708:	3710      	adds	r7, #16
 800570a:	46bd      	mov	sp, r7
 800570c:	bd80      	pop	{r7, pc}

0800570e <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 800570e:	b580      	push	{r7, lr}
 8005710:	b084      	sub	sp, #16
 8005712:	af00      	add	r7, sp, #0
 8005714:	6078      	str	r0, [r7, #4]
 8005716:	460b      	mov	r3, r1
 8005718:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 800571a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800571e:	f7ff ff81 	bl	8005624 <wait_ready>
 8005722:	4603      	mov	r3, r0
 8005724:	2b00      	cmp	r3, #0
 8005726:	d101      	bne.n	800572c <xmit_datablock+0x1e>
 8005728:	2300      	movs	r3, #0
 800572a:	e01e      	b.n	800576a <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 800572c:	78fb      	ldrb	r3, [r7, #3]
 800572e:	4618      	mov	r0, r3
 8005730:	f7ff ff32 	bl	8005598 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8005734:	78fb      	ldrb	r3, [r7, #3]
 8005736:	2bfd      	cmp	r3, #253	@ 0xfd
 8005738:	d016      	beq.n	8005768 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 800573a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800573e:	6878      	ldr	r0, [r7, #4]
 8005740:	f7ff ff5c 	bl	80055fc <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8005744:	20ff      	movs	r0, #255	@ 0xff
 8005746:	f7ff ff27 	bl	8005598 <xchg_spi>
 800574a:	20ff      	movs	r0, #255	@ 0xff
 800574c:	f7ff ff24 	bl	8005598 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8005750:	20ff      	movs	r0, #255	@ 0xff
 8005752:	f7ff ff21 	bl	8005598 <xchg_spi>
 8005756:	4603      	mov	r3, r0
 8005758:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 800575a:	7bfb      	ldrb	r3, [r7, #15]
 800575c:	f003 031f 	and.w	r3, r3, #31
 8005760:	2b05      	cmp	r3, #5
 8005762:	d001      	beq.n	8005768 <xmit_datablock+0x5a>
 8005764:	2300      	movs	r3, #0
 8005766:	e000      	b.n	800576a <xmit_datablock+0x5c>
	}
	return 1;
 8005768:	2301      	movs	r3, #1
}
 800576a:	4618      	mov	r0, r3
 800576c:	3710      	adds	r7, #16
 800576e:	46bd      	mov	sp, r7
 8005770:	bd80      	pop	{r7, pc}

08005772 <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 8005772:	b580      	push	{r7, lr}
 8005774:	b084      	sub	sp, #16
 8005776:	af00      	add	r7, sp, #0
 8005778:	4603      	mov	r3, r0
 800577a:	6039      	str	r1, [r7, #0]
 800577c:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 800577e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005782:	2b00      	cmp	r3, #0
 8005784:	da0e      	bge.n	80057a4 <send_cmd+0x32>
		cmd &= 0x7F;
 8005786:	79fb      	ldrb	r3, [r7, #7]
 8005788:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800578c:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 800578e:	2100      	movs	r1, #0
 8005790:	2037      	movs	r0, #55	@ 0x37
 8005792:	f7ff ffee 	bl	8005772 <send_cmd>
 8005796:	4603      	mov	r3, r0
 8005798:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 800579a:	7bbb      	ldrb	r3, [r7, #14]
 800579c:	2b01      	cmp	r3, #1
 800579e:	d901      	bls.n	80057a4 <send_cmd+0x32>
 80057a0:	7bbb      	ldrb	r3, [r7, #14]
 80057a2:	e051      	b.n	8005848 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 80057a4:	79fb      	ldrb	r3, [r7, #7]
 80057a6:	2b0c      	cmp	r3, #12
 80057a8:	d008      	beq.n	80057bc <send_cmd+0x4a>
		despiselect();
 80057aa:	f7ff ff5f 	bl	800566c <despiselect>
		if (!spiselect()) return 0xFF;
 80057ae:	f7ff ff6b 	bl	8005688 <spiselect>
 80057b2:	4603      	mov	r3, r0
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d101      	bne.n	80057bc <send_cmd+0x4a>
 80057b8:	23ff      	movs	r3, #255	@ 0xff
 80057ba:	e045      	b.n	8005848 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 80057bc:	79fb      	ldrb	r3, [r7, #7]
 80057be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80057c2:	b2db      	uxtb	r3, r3
 80057c4:	4618      	mov	r0, r3
 80057c6:	f7ff fee7 	bl	8005598 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	0e1b      	lsrs	r3, r3, #24
 80057ce:	b2db      	uxtb	r3, r3
 80057d0:	4618      	mov	r0, r3
 80057d2:	f7ff fee1 	bl	8005598 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	0c1b      	lsrs	r3, r3, #16
 80057da:	b2db      	uxtb	r3, r3
 80057dc:	4618      	mov	r0, r3
 80057de:	f7ff fedb 	bl	8005598 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	0a1b      	lsrs	r3, r3, #8
 80057e6:	b2db      	uxtb	r3, r3
 80057e8:	4618      	mov	r0, r3
 80057ea:	f7ff fed5 	bl	8005598 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	b2db      	uxtb	r3, r3
 80057f2:	4618      	mov	r0, r3
 80057f4:	f7ff fed0 	bl	8005598 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 80057f8:	2301      	movs	r3, #1
 80057fa:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 80057fc:	79fb      	ldrb	r3, [r7, #7]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d101      	bne.n	8005806 <send_cmd+0x94>
 8005802:	2395      	movs	r3, #149	@ 0x95
 8005804:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 8005806:	79fb      	ldrb	r3, [r7, #7]
 8005808:	2b08      	cmp	r3, #8
 800580a:	d101      	bne.n	8005810 <send_cmd+0x9e>
 800580c:	2387      	movs	r3, #135	@ 0x87
 800580e:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 8005810:	7bfb      	ldrb	r3, [r7, #15]
 8005812:	4618      	mov	r0, r3
 8005814:	f7ff fec0 	bl	8005598 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8005818:	79fb      	ldrb	r3, [r7, #7]
 800581a:	2b0c      	cmp	r3, #12
 800581c:	d102      	bne.n	8005824 <send_cmd+0xb2>
 800581e:	20ff      	movs	r0, #255	@ 0xff
 8005820:	f7ff feba 	bl	8005598 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 8005824:	230a      	movs	r3, #10
 8005826:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 8005828:	20ff      	movs	r0, #255	@ 0xff
 800582a:	f7ff feb5 	bl	8005598 <xchg_spi>
 800582e:	4603      	mov	r3, r0
 8005830:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 8005832:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005836:	2b00      	cmp	r3, #0
 8005838:	da05      	bge.n	8005846 <send_cmd+0xd4>
 800583a:	7bfb      	ldrb	r3, [r7, #15]
 800583c:	3b01      	subs	r3, #1
 800583e:	73fb      	strb	r3, [r7, #15]
 8005840:	7bfb      	ldrb	r3, [r7, #15]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d1f0      	bne.n	8005828 <send_cmd+0xb6>

	return res;							/* Return received response */
 8005846:	7bbb      	ldrb	r3, [r7, #14]
}
 8005848:	4618      	mov	r0, r3
 800584a:	3710      	adds	r7, #16
 800584c:	46bd      	mov	sp, r7
 800584e:	bd80      	pop	{r7, pc}

08005850 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8005850:	b590      	push	{r4, r7, lr}
 8005852:	b085      	sub	sp, #20
 8005854:	af00      	add	r7, sp, #0
 8005856:	4603      	mov	r3, r0
 8005858:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 800585a:	79fb      	ldrb	r3, [r7, #7]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d001      	beq.n	8005864 <USER_SPI_initialize+0x14>
 8005860:	2301      	movs	r3, #1
 8005862:	e0d6      	b.n	8005a12 <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8005864:	4b6d      	ldr	r3, [pc, #436]	@ (8005a1c <USER_SPI_initialize+0x1cc>)
 8005866:	781b      	ldrb	r3, [r3, #0]
 8005868:	b2db      	uxtb	r3, r3
 800586a:	f003 0302 	and.w	r3, r3, #2
 800586e:	2b00      	cmp	r3, #0
 8005870:	d003      	beq.n	800587a <USER_SPI_initialize+0x2a>
 8005872:	4b6a      	ldr	r3, [pc, #424]	@ (8005a1c <USER_SPI_initialize+0x1cc>)
 8005874:	781b      	ldrb	r3, [r3, #0]
 8005876:	b2db      	uxtb	r3, r3
 8005878:	e0cb      	b.n	8005a12 <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 800587a:	4b69      	ldr	r3, [pc, #420]	@ (8005a20 <USER_SPI_initialize+0x1d0>)
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 8005884:	4b66      	ldr	r3, [pc, #408]	@ (8005a20 <USER_SPI_initialize+0x1d0>)
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f042 0230 	orr.w	r2, r2, #48	@ 0x30
 800588c:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 800588e:	230a      	movs	r3, #10
 8005890:	73fb      	strb	r3, [r7, #15]
 8005892:	e005      	b.n	80058a0 <USER_SPI_initialize+0x50>
 8005894:	20ff      	movs	r0, #255	@ 0xff
 8005896:	f7ff fe7f 	bl	8005598 <xchg_spi>
 800589a:	7bfb      	ldrb	r3, [r7, #15]
 800589c:	3b01      	subs	r3, #1
 800589e:	73fb      	strb	r3, [r7, #15]
 80058a0:	7bfb      	ldrb	r3, [r7, #15]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d1f6      	bne.n	8005894 <USER_SPI_initialize+0x44>

	ty = 0;
 80058a6:	2300      	movs	r3, #0
 80058a8:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 80058aa:	2100      	movs	r1, #0
 80058ac:	2000      	movs	r0, #0
 80058ae:	f7ff ff60 	bl	8005772 <send_cmd>
 80058b2:	4603      	mov	r3, r0
 80058b4:	2b01      	cmp	r3, #1
 80058b6:	f040 808b 	bne.w	80059d0 <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 80058ba:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80058be:	f7ff fe41 	bl	8005544 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 80058c2:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 80058c6:	2008      	movs	r0, #8
 80058c8:	f7ff ff53 	bl	8005772 <send_cmd>
 80058cc:	4603      	mov	r3, r0
 80058ce:	2b01      	cmp	r3, #1
 80058d0:	d151      	bne.n	8005976 <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 80058d2:	2300      	movs	r3, #0
 80058d4:	73fb      	strb	r3, [r7, #15]
 80058d6:	e00d      	b.n	80058f4 <USER_SPI_initialize+0xa4>
 80058d8:	7bfc      	ldrb	r4, [r7, #15]
 80058da:	20ff      	movs	r0, #255	@ 0xff
 80058dc:	f7ff fe5c 	bl	8005598 <xchg_spi>
 80058e0:	4603      	mov	r3, r0
 80058e2:	461a      	mov	r2, r3
 80058e4:	f104 0310 	add.w	r3, r4, #16
 80058e8:	443b      	add	r3, r7
 80058ea:	f803 2c08 	strb.w	r2, [r3, #-8]
 80058ee:	7bfb      	ldrb	r3, [r7, #15]
 80058f0:	3301      	adds	r3, #1
 80058f2:	73fb      	strb	r3, [r7, #15]
 80058f4:	7bfb      	ldrb	r3, [r7, #15]
 80058f6:	2b03      	cmp	r3, #3
 80058f8:	d9ee      	bls.n	80058d8 <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 80058fa:	7abb      	ldrb	r3, [r7, #10]
 80058fc:	2b01      	cmp	r3, #1
 80058fe:	d167      	bne.n	80059d0 <USER_SPI_initialize+0x180>
 8005900:	7afb      	ldrb	r3, [r7, #11]
 8005902:	2baa      	cmp	r3, #170	@ 0xaa
 8005904:	d164      	bne.n	80059d0 <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 8005906:	bf00      	nop
 8005908:	f7ff fe30 	bl	800556c <SPI_Timer_Status>
 800590c:	4603      	mov	r3, r0
 800590e:	2b00      	cmp	r3, #0
 8005910:	d007      	beq.n	8005922 <USER_SPI_initialize+0xd2>
 8005912:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8005916:	20a9      	movs	r0, #169	@ 0xa9
 8005918:	f7ff ff2b 	bl	8005772 <send_cmd>
 800591c:	4603      	mov	r3, r0
 800591e:	2b00      	cmp	r3, #0
 8005920:	d1f2      	bne.n	8005908 <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 8005922:	f7ff fe23 	bl	800556c <SPI_Timer_Status>
 8005926:	4603      	mov	r3, r0
 8005928:	2b00      	cmp	r3, #0
 800592a:	d051      	beq.n	80059d0 <USER_SPI_initialize+0x180>
 800592c:	2100      	movs	r1, #0
 800592e:	203a      	movs	r0, #58	@ 0x3a
 8005930:	f7ff ff1f 	bl	8005772 <send_cmd>
 8005934:	4603      	mov	r3, r0
 8005936:	2b00      	cmp	r3, #0
 8005938:	d14a      	bne.n	80059d0 <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 800593a:	2300      	movs	r3, #0
 800593c:	73fb      	strb	r3, [r7, #15]
 800593e:	e00d      	b.n	800595c <USER_SPI_initialize+0x10c>
 8005940:	7bfc      	ldrb	r4, [r7, #15]
 8005942:	20ff      	movs	r0, #255	@ 0xff
 8005944:	f7ff fe28 	bl	8005598 <xchg_spi>
 8005948:	4603      	mov	r3, r0
 800594a:	461a      	mov	r2, r3
 800594c:	f104 0310 	add.w	r3, r4, #16
 8005950:	443b      	add	r3, r7
 8005952:	f803 2c08 	strb.w	r2, [r3, #-8]
 8005956:	7bfb      	ldrb	r3, [r7, #15]
 8005958:	3301      	adds	r3, #1
 800595a:	73fb      	strb	r3, [r7, #15]
 800595c:	7bfb      	ldrb	r3, [r7, #15]
 800595e:	2b03      	cmp	r3, #3
 8005960:	d9ee      	bls.n	8005940 <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 8005962:	7a3b      	ldrb	r3, [r7, #8]
 8005964:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005968:	2b00      	cmp	r3, #0
 800596a:	d001      	beq.n	8005970 <USER_SPI_initialize+0x120>
 800596c:	230c      	movs	r3, #12
 800596e:	e000      	b.n	8005972 <USER_SPI_initialize+0x122>
 8005970:	2304      	movs	r3, #4
 8005972:	737b      	strb	r3, [r7, #13]
 8005974:	e02c      	b.n	80059d0 <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 8005976:	2100      	movs	r1, #0
 8005978:	20a9      	movs	r0, #169	@ 0xa9
 800597a:	f7ff fefa 	bl	8005772 <send_cmd>
 800597e:	4603      	mov	r3, r0
 8005980:	2b01      	cmp	r3, #1
 8005982:	d804      	bhi.n	800598e <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8005984:	2302      	movs	r3, #2
 8005986:	737b      	strb	r3, [r7, #13]
 8005988:	23a9      	movs	r3, #169	@ 0xa9
 800598a:	73bb      	strb	r3, [r7, #14]
 800598c:	e003      	b.n	8005996 <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 800598e:	2301      	movs	r3, #1
 8005990:	737b      	strb	r3, [r7, #13]
 8005992:	2301      	movs	r3, #1
 8005994:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 8005996:	bf00      	nop
 8005998:	f7ff fde8 	bl	800556c <SPI_Timer_Status>
 800599c:	4603      	mov	r3, r0
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d007      	beq.n	80059b2 <USER_SPI_initialize+0x162>
 80059a2:	7bbb      	ldrb	r3, [r7, #14]
 80059a4:	2100      	movs	r1, #0
 80059a6:	4618      	mov	r0, r3
 80059a8:	f7ff fee3 	bl	8005772 <send_cmd>
 80059ac:	4603      	mov	r3, r0
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d1f2      	bne.n	8005998 <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 80059b2:	f7ff fddb 	bl	800556c <SPI_Timer_Status>
 80059b6:	4603      	mov	r3, r0
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d007      	beq.n	80059cc <USER_SPI_initialize+0x17c>
 80059bc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80059c0:	2010      	movs	r0, #16
 80059c2:	f7ff fed6 	bl	8005772 <send_cmd>
 80059c6:	4603      	mov	r3, r0
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d001      	beq.n	80059d0 <USER_SPI_initialize+0x180>
				ty = 0;
 80059cc:	2300      	movs	r3, #0
 80059ce:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 80059d0:	4a14      	ldr	r2, [pc, #80]	@ (8005a24 <USER_SPI_initialize+0x1d4>)
 80059d2:	7b7b      	ldrb	r3, [r7, #13]
 80059d4:	7013      	strb	r3, [r2, #0]
	despiselect();
 80059d6:	f7ff fe49 	bl	800566c <despiselect>

	if (ty) {			/* OK */
 80059da:	7b7b      	ldrb	r3, [r7, #13]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d012      	beq.n	8005a06 <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 80059e0:	4b0f      	ldr	r3, [pc, #60]	@ (8005a20 <USER_SPI_initialize+0x1d0>)
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 80059ea:	4b0d      	ldr	r3, [pc, #52]	@ (8005a20 <USER_SPI_initialize+0x1d0>)
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f042 0210 	orr.w	r2, r2, #16
 80059f2:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 80059f4:	4b09      	ldr	r3, [pc, #36]	@ (8005a1c <USER_SPI_initialize+0x1cc>)
 80059f6:	781b      	ldrb	r3, [r3, #0]
 80059f8:	b2db      	uxtb	r3, r3
 80059fa:	f023 0301 	bic.w	r3, r3, #1
 80059fe:	b2da      	uxtb	r2, r3
 8005a00:	4b06      	ldr	r3, [pc, #24]	@ (8005a1c <USER_SPI_initialize+0x1cc>)
 8005a02:	701a      	strb	r2, [r3, #0]
 8005a04:	e002      	b.n	8005a0c <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 8005a06:	4b05      	ldr	r3, [pc, #20]	@ (8005a1c <USER_SPI_initialize+0x1cc>)
 8005a08:	2201      	movs	r2, #1
 8005a0a:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 8005a0c:	4b03      	ldr	r3, [pc, #12]	@ (8005a1c <USER_SPI_initialize+0x1cc>)
 8005a0e:	781b      	ldrb	r3, [r3, #0]
 8005a10:	b2db      	uxtb	r3, r3
}
 8005a12:	4618      	mov	r0, r3
 8005a14:	3714      	adds	r7, #20
 8005a16:	46bd      	mov	sp, r7
 8005a18:	bd90      	pop	{r4, r7, pc}
 8005a1a:	bf00      	nop
 8005a1c:	20000050 	.word	0x20000050
 8005a20:	20000360 	.word	0x20000360
 8005a24:	2000498c 	.word	0x2000498c

08005a28 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 8005a28:	b480      	push	{r7}
 8005a2a:	b083      	sub	sp, #12
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	4603      	mov	r3, r0
 8005a30:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 8005a32:	79fb      	ldrb	r3, [r7, #7]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d001      	beq.n	8005a3c <USER_SPI_status+0x14>
 8005a38:	2301      	movs	r3, #1
 8005a3a:	e002      	b.n	8005a42 <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 8005a3c:	4b04      	ldr	r3, [pc, #16]	@ (8005a50 <USER_SPI_status+0x28>)
 8005a3e:	781b      	ldrb	r3, [r3, #0]
 8005a40:	b2db      	uxtb	r3, r3
}
 8005a42:	4618      	mov	r0, r3
 8005a44:	370c      	adds	r7, #12
 8005a46:	46bd      	mov	sp, r7
 8005a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4c:	4770      	bx	lr
 8005a4e:	bf00      	nop
 8005a50:	20000050 	.word	0x20000050

08005a54 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b084      	sub	sp, #16
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	60b9      	str	r1, [r7, #8]
 8005a5c:	607a      	str	r2, [r7, #4]
 8005a5e:	603b      	str	r3, [r7, #0]
 8005a60:	4603      	mov	r3, r0
 8005a62:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8005a64:	7bfb      	ldrb	r3, [r7, #15]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d102      	bne.n	8005a70 <USER_SPI_read+0x1c>
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d101      	bne.n	8005a74 <USER_SPI_read+0x20>
 8005a70:	2304      	movs	r3, #4
 8005a72:	e04d      	b.n	8005b10 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8005a74:	4b28      	ldr	r3, [pc, #160]	@ (8005b18 <USER_SPI_read+0xc4>)
 8005a76:	781b      	ldrb	r3, [r3, #0]
 8005a78:	b2db      	uxtb	r3, r3
 8005a7a:	f003 0301 	and.w	r3, r3, #1
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d001      	beq.n	8005a86 <USER_SPI_read+0x32>
 8005a82:	2303      	movs	r3, #3
 8005a84:	e044      	b.n	8005b10 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 8005a86:	4b25      	ldr	r3, [pc, #148]	@ (8005b1c <USER_SPI_read+0xc8>)
 8005a88:	781b      	ldrb	r3, [r3, #0]
 8005a8a:	f003 0308 	and.w	r3, r3, #8
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d102      	bne.n	8005a98 <USER_SPI_read+0x44>
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	025b      	lsls	r3, r3, #9
 8005a96:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	2b01      	cmp	r3, #1
 8005a9c:	d111      	bne.n	8005ac2 <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 8005a9e:	6879      	ldr	r1, [r7, #4]
 8005aa0:	2011      	movs	r0, #17
 8005aa2:	f7ff fe66 	bl	8005772 <send_cmd>
 8005aa6:	4603      	mov	r3, r0
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d129      	bne.n	8005b00 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 8005aac:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8005ab0:	68b8      	ldr	r0, [r7, #8]
 8005ab2:	f7ff fe03 	bl	80056bc <rcvr_datablock>
 8005ab6:	4603      	mov	r3, r0
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d021      	beq.n	8005b00 <USER_SPI_read+0xac>
			count = 0;
 8005abc:	2300      	movs	r3, #0
 8005abe:	603b      	str	r3, [r7, #0]
 8005ac0:	e01e      	b.n	8005b00 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 8005ac2:	6879      	ldr	r1, [r7, #4]
 8005ac4:	2012      	movs	r0, #18
 8005ac6:	f7ff fe54 	bl	8005772 <send_cmd>
 8005aca:	4603      	mov	r3, r0
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d117      	bne.n	8005b00 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8005ad0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8005ad4:	68b8      	ldr	r0, [r7, #8]
 8005ad6:	f7ff fdf1 	bl	80056bc <rcvr_datablock>
 8005ada:	4603      	mov	r3, r0
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d00a      	beq.n	8005af6 <USER_SPI_read+0xa2>
				buff += 512;
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8005ae6:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	3b01      	subs	r3, #1
 8005aec:	603b      	str	r3, [r7, #0]
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d1ed      	bne.n	8005ad0 <USER_SPI_read+0x7c>
 8005af4:	e000      	b.n	8005af8 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 8005af6:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8005af8:	2100      	movs	r1, #0
 8005afa:	200c      	movs	r0, #12
 8005afc:	f7ff fe39 	bl	8005772 <send_cmd>
		}
	}
	despiselect();
 8005b00:	f7ff fdb4 	bl	800566c <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	bf14      	ite	ne
 8005b0a:	2301      	movne	r3, #1
 8005b0c:	2300      	moveq	r3, #0
 8005b0e:	b2db      	uxtb	r3, r3
}
 8005b10:	4618      	mov	r0, r3
 8005b12:	3710      	adds	r7, #16
 8005b14:	46bd      	mov	sp, r7
 8005b16:	bd80      	pop	{r7, pc}
 8005b18:	20000050 	.word	0x20000050
 8005b1c:	2000498c 	.word	0x2000498c

08005b20 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b084      	sub	sp, #16
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	60b9      	str	r1, [r7, #8]
 8005b28:	607a      	str	r2, [r7, #4]
 8005b2a:	603b      	str	r3, [r7, #0]
 8005b2c:	4603      	mov	r3, r0
 8005b2e:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8005b30:	7bfb      	ldrb	r3, [r7, #15]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d102      	bne.n	8005b3c <USER_SPI_write+0x1c>
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d101      	bne.n	8005b40 <USER_SPI_write+0x20>
 8005b3c:	2304      	movs	r3, #4
 8005b3e:	e063      	b.n	8005c08 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8005b40:	4b33      	ldr	r3, [pc, #204]	@ (8005c10 <USER_SPI_write+0xf0>)
 8005b42:	781b      	ldrb	r3, [r3, #0]
 8005b44:	b2db      	uxtb	r3, r3
 8005b46:	f003 0301 	and.w	r3, r3, #1
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d001      	beq.n	8005b52 <USER_SPI_write+0x32>
 8005b4e:	2303      	movs	r3, #3
 8005b50:	e05a      	b.n	8005c08 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 8005b52:	4b2f      	ldr	r3, [pc, #188]	@ (8005c10 <USER_SPI_write+0xf0>)
 8005b54:	781b      	ldrb	r3, [r3, #0]
 8005b56:	b2db      	uxtb	r3, r3
 8005b58:	f003 0304 	and.w	r3, r3, #4
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d001      	beq.n	8005b64 <USER_SPI_write+0x44>
 8005b60:	2302      	movs	r3, #2
 8005b62:	e051      	b.n	8005c08 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8005b64:	4b2b      	ldr	r3, [pc, #172]	@ (8005c14 <USER_SPI_write+0xf4>)
 8005b66:	781b      	ldrb	r3, [r3, #0]
 8005b68:	f003 0308 	and.w	r3, r3, #8
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d102      	bne.n	8005b76 <USER_SPI_write+0x56>
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	025b      	lsls	r3, r3, #9
 8005b74:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	2b01      	cmp	r3, #1
 8005b7a:	d110      	bne.n	8005b9e <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8005b7c:	6879      	ldr	r1, [r7, #4]
 8005b7e:	2018      	movs	r0, #24
 8005b80:	f7ff fdf7 	bl	8005772 <send_cmd>
 8005b84:	4603      	mov	r3, r0
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d136      	bne.n	8005bf8 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 8005b8a:	21fe      	movs	r1, #254	@ 0xfe
 8005b8c:	68b8      	ldr	r0, [r7, #8]
 8005b8e:	f7ff fdbe 	bl	800570e <xmit_datablock>
 8005b92:	4603      	mov	r3, r0
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d02f      	beq.n	8005bf8 <USER_SPI_write+0xd8>
			count = 0;
 8005b98:	2300      	movs	r3, #0
 8005b9a:	603b      	str	r3, [r7, #0]
 8005b9c:	e02c      	b.n	8005bf8 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 8005b9e:	4b1d      	ldr	r3, [pc, #116]	@ (8005c14 <USER_SPI_write+0xf4>)
 8005ba0:	781b      	ldrb	r3, [r3, #0]
 8005ba2:	f003 0306 	and.w	r3, r3, #6
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d003      	beq.n	8005bb2 <USER_SPI_write+0x92>
 8005baa:	6839      	ldr	r1, [r7, #0]
 8005bac:	2097      	movs	r0, #151	@ 0x97
 8005bae:	f7ff fde0 	bl	8005772 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 8005bb2:	6879      	ldr	r1, [r7, #4]
 8005bb4:	2019      	movs	r0, #25
 8005bb6:	f7ff fddc 	bl	8005772 <send_cmd>
 8005bba:	4603      	mov	r3, r0
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d11b      	bne.n	8005bf8 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8005bc0:	21fc      	movs	r1, #252	@ 0xfc
 8005bc2:	68b8      	ldr	r0, [r7, #8]
 8005bc4:	f7ff fda3 	bl	800570e <xmit_datablock>
 8005bc8:	4603      	mov	r3, r0
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d00a      	beq.n	8005be4 <USER_SPI_write+0xc4>
				buff += 512;
 8005bce:	68bb      	ldr	r3, [r7, #8]
 8005bd0:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8005bd4:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	3b01      	subs	r3, #1
 8005bda:	603b      	str	r3, [r7, #0]
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d1ee      	bne.n	8005bc0 <USER_SPI_write+0xa0>
 8005be2:	e000      	b.n	8005be6 <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 8005be4:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 8005be6:	21fd      	movs	r1, #253	@ 0xfd
 8005be8:	2000      	movs	r0, #0
 8005bea:	f7ff fd90 	bl	800570e <xmit_datablock>
 8005bee:	4603      	mov	r3, r0
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d101      	bne.n	8005bf8 <USER_SPI_write+0xd8>
 8005bf4:	2301      	movs	r3, #1
 8005bf6:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 8005bf8:	f7ff fd38 	bl	800566c <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	bf14      	ite	ne
 8005c02:	2301      	movne	r3, #1
 8005c04:	2300      	moveq	r3, #0
 8005c06:	b2db      	uxtb	r3, r3
}
 8005c08:	4618      	mov	r0, r3
 8005c0a:	3710      	adds	r7, #16
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	bd80      	pop	{r7, pc}
 8005c10:	20000050 	.word	0x20000050
 8005c14:	2000498c 	.word	0x2000498c

08005c18 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b08c      	sub	sp, #48	@ 0x30
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	4603      	mov	r3, r0
 8005c20:	603a      	str	r2, [r7, #0]
 8005c22:	71fb      	strb	r3, [r7, #7]
 8005c24:	460b      	mov	r3, r1
 8005c26:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 8005c28:	79fb      	ldrb	r3, [r7, #7]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d001      	beq.n	8005c32 <USER_SPI_ioctl+0x1a>
 8005c2e:	2304      	movs	r3, #4
 8005c30:	e15a      	b.n	8005ee8 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8005c32:	4baf      	ldr	r3, [pc, #700]	@ (8005ef0 <USER_SPI_ioctl+0x2d8>)
 8005c34:	781b      	ldrb	r3, [r3, #0]
 8005c36:	b2db      	uxtb	r3, r3
 8005c38:	f003 0301 	and.w	r3, r3, #1
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d001      	beq.n	8005c44 <USER_SPI_ioctl+0x2c>
 8005c40:	2303      	movs	r3, #3
 8005c42:	e151      	b.n	8005ee8 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 8005c44:	2301      	movs	r3, #1
 8005c46:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	switch (cmd) {
 8005c4a:	79bb      	ldrb	r3, [r7, #6]
 8005c4c:	2b04      	cmp	r3, #4
 8005c4e:	f200 8136 	bhi.w	8005ebe <USER_SPI_ioctl+0x2a6>
 8005c52:	a201      	add	r2, pc, #4	@ (adr r2, 8005c58 <USER_SPI_ioctl+0x40>)
 8005c54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c58:	08005c6d 	.word	0x08005c6d
 8005c5c:	08005c81 	.word	0x08005c81
 8005c60:	08005ebf 	.word	0x08005ebf
 8005c64:	08005d2d 	.word	0x08005d2d
 8005c68:	08005e23 	.word	0x08005e23
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 8005c6c:	f7ff fd0c 	bl	8005688 <spiselect>
 8005c70:	4603      	mov	r3, r0
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	f000 8127 	beq.w	8005ec6 <USER_SPI_ioctl+0x2ae>
 8005c78:	2300      	movs	r3, #0
 8005c7a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 8005c7e:	e122      	b.n	8005ec6 <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8005c80:	2100      	movs	r1, #0
 8005c82:	2009      	movs	r0, #9
 8005c84:	f7ff fd75 	bl	8005772 <send_cmd>
 8005c88:	4603      	mov	r3, r0
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	f040 811d 	bne.w	8005eca <USER_SPI_ioctl+0x2b2>
 8005c90:	f107 030c 	add.w	r3, r7, #12
 8005c94:	2110      	movs	r1, #16
 8005c96:	4618      	mov	r0, r3
 8005c98:	f7ff fd10 	bl	80056bc <rcvr_datablock>
 8005c9c:	4603      	mov	r3, r0
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	f000 8113 	beq.w	8005eca <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8005ca4:	7b3b      	ldrb	r3, [r7, #12]
 8005ca6:	099b      	lsrs	r3, r3, #6
 8005ca8:	b2db      	uxtb	r3, r3
 8005caa:	2b01      	cmp	r3, #1
 8005cac:	d111      	bne.n	8005cd2 <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 8005cae:	7d7b      	ldrb	r3, [r7, #21]
 8005cb0:	461a      	mov	r2, r3
 8005cb2:	7d3b      	ldrb	r3, [r7, #20]
 8005cb4:	021b      	lsls	r3, r3, #8
 8005cb6:	4413      	add	r3, r2
 8005cb8:	461a      	mov	r2, r3
 8005cba:	7cfb      	ldrb	r3, [r7, #19]
 8005cbc:	041b      	lsls	r3, r3, #16
 8005cbe:	f403 137c 	and.w	r3, r3, #4128768	@ 0x3f0000
 8005cc2:	4413      	add	r3, r2
 8005cc4:	3301      	adds	r3, #1
 8005cc6:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 8005cc8:	69fb      	ldr	r3, [r7, #28]
 8005cca:	029a      	lsls	r2, r3, #10
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	601a      	str	r2, [r3, #0]
 8005cd0:	e028      	b.n	8005d24 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8005cd2:	7c7b      	ldrb	r3, [r7, #17]
 8005cd4:	f003 030f 	and.w	r3, r3, #15
 8005cd8:	b2da      	uxtb	r2, r3
 8005cda:	7dbb      	ldrb	r3, [r7, #22]
 8005cdc:	09db      	lsrs	r3, r3, #7
 8005cde:	b2db      	uxtb	r3, r3
 8005ce0:	4413      	add	r3, r2
 8005ce2:	b2da      	uxtb	r2, r3
 8005ce4:	7d7b      	ldrb	r3, [r7, #21]
 8005ce6:	005b      	lsls	r3, r3, #1
 8005ce8:	b2db      	uxtb	r3, r3
 8005cea:	f003 0306 	and.w	r3, r3, #6
 8005cee:	b2db      	uxtb	r3, r3
 8005cf0:	4413      	add	r3, r2
 8005cf2:	b2db      	uxtb	r3, r3
 8005cf4:	3302      	adds	r3, #2
 8005cf6:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8005cfa:	7d3b      	ldrb	r3, [r7, #20]
 8005cfc:	099b      	lsrs	r3, r3, #6
 8005cfe:	b2db      	uxtb	r3, r3
 8005d00:	461a      	mov	r2, r3
 8005d02:	7cfb      	ldrb	r3, [r7, #19]
 8005d04:	009b      	lsls	r3, r3, #2
 8005d06:	441a      	add	r2, r3
 8005d08:	7cbb      	ldrb	r3, [r7, #18]
 8005d0a:	029b      	lsls	r3, r3, #10
 8005d0c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005d10:	4413      	add	r3, r2
 8005d12:	3301      	adds	r3, #1
 8005d14:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 8005d16:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005d1a:	3b09      	subs	r3, #9
 8005d1c:	69fa      	ldr	r2, [r7, #28]
 8005d1e:	409a      	lsls	r2, r3
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8005d24:	2300      	movs	r3, #0
 8005d26:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 8005d2a:	e0ce      	b.n	8005eca <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8005d2c:	4b71      	ldr	r3, [pc, #452]	@ (8005ef4 <USER_SPI_ioctl+0x2dc>)
 8005d2e:	781b      	ldrb	r3, [r3, #0]
 8005d30:	f003 0304 	and.w	r3, r3, #4
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d031      	beq.n	8005d9c <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8005d38:	2100      	movs	r1, #0
 8005d3a:	208d      	movs	r0, #141	@ 0x8d
 8005d3c:	f7ff fd19 	bl	8005772 <send_cmd>
 8005d40:	4603      	mov	r3, r0
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	f040 80c3 	bne.w	8005ece <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 8005d48:	20ff      	movs	r0, #255	@ 0xff
 8005d4a:	f7ff fc25 	bl	8005598 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 8005d4e:	f107 030c 	add.w	r3, r7, #12
 8005d52:	2110      	movs	r1, #16
 8005d54:	4618      	mov	r0, r3
 8005d56:	f7ff fcb1 	bl	80056bc <rcvr_datablock>
 8005d5a:	4603      	mov	r3, r0
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	f000 80b6 	beq.w	8005ece <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 8005d62:	2330      	movs	r3, #48	@ 0x30
 8005d64:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8005d68:	e007      	b.n	8005d7a <USER_SPI_ioctl+0x162>
 8005d6a:	20ff      	movs	r0, #255	@ 0xff
 8005d6c:	f7ff fc14 	bl	8005598 <xchg_spi>
 8005d70:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005d74:	3b01      	subs	r3, #1
 8005d76:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8005d7a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d1f3      	bne.n	8005d6a <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 8005d82:	7dbb      	ldrb	r3, [r7, #22]
 8005d84:	091b      	lsrs	r3, r3, #4
 8005d86:	b2db      	uxtb	r3, r3
 8005d88:	461a      	mov	r2, r3
 8005d8a:	2310      	movs	r3, #16
 8005d8c:	fa03 f202 	lsl.w	r2, r3, r2
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 8005d94:	2300      	movs	r3, #0
 8005d96:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 8005d9a:	e098      	b.n	8005ece <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8005d9c:	2100      	movs	r1, #0
 8005d9e:	2009      	movs	r0, #9
 8005da0:	f7ff fce7 	bl	8005772 <send_cmd>
 8005da4:	4603      	mov	r3, r0
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	f040 8091 	bne.w	8005ece <USER_SPI_ioctl+0x2b6>
 8005dac:	f107 030c 	add.w	r3, r7, #12
 8005db0:	2110      	movs	r1, #16
 8005db2:	4618      	mov	r0, r3
 8005db4:	f7ff fc82 	bl	80056bc <rcvr_datablock>
 8005db8:	4603      	mov	r3, r0
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	f000 8087 	beq.w	8005ece <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8005dc0:	4b4c      	ldr	r3, [pc, #304]	@ (8005ef4 <USER_SPI_ioctl+0x2dc>)
 8005dc2:	781b      	ldrb	r3, [r3, #0]
 8005dc4:	f003 0302 	and.w	r3, r3, #2
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d012      	beq.n	8005df2 <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8005dcc:	7dbb      	ldrb	r3, [r7, #22]
 8005dce:	005b      	lsls	r3, r3, #1
 8005dd0:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 8005dd4:	7dfa      	ldrb	r2, [r7, #23]
 8005dd6:	09d2      	lsrs	r2, r2, #7
 8005dd8:	b2d2      	uxtb	r2, r2
 8005dda:	4413      	add	r3, r2
 8005ddc:	1c5a      	adds	r2, r3, #1
 8005dde:	7e7b      	ldrb	r3, [r7, #25]
 8005de0:	099b      	lsrs	r3, r3, #6
 8005de2:	b2db      	uxtb	r3, r3
 8005de4:	3b01      	subs	r3, #1
 8005de6:	fa02 f303 	lsl.w	r3, r2, r3
 8005dea:	461a      	mov	r2, r3
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	601a      	str	r2, [r3, #0]
 8005df0:	e013      	b.n	8005e1a <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 8005df2:	7dbb      	ldrb	r3, [r7, #22]
 8005df4:	109b      	asrs	r3, r3, #2
 8005df6:	b29b      	uxth	r3, r3
 8005df8:	f003 031f 	and.w	r3, r3, #31
 8005dfc:	3301      	adds	r3, #1
 8005dfe:	7dfa      	ldrb	r2, [r7, #23]
 8005e00:	00d2      	lsls	r2, r2, #3
 8005e02:	f002 0218 	and.w	r2, r2, #24
 8005e06:	7df9      	ldrb	r1, [r7, #23]
 8005e08:	0949      	lsrs	r1, r1, #5
 8005e0a:	b2c9      	uxtb	r1, r1
 8005e0c:	440a      	add	r2, r1
 8005e0e:	3201      	adds	r2, #1
 8005e10:	fb02 f303 	mul.w	r3, r2, r3
 8005e14:	461a      	mov	r2, r3
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 8005e20:	e055      	b.n	8005ece <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8005e22:	4b34      	ldr	r3, [pc, #208]	@ (8005ef4 <USER_SPI_ioctl+0x2dc>)
 8005e24:	781b      	ldrb	r3, [r3, #0]
 8005e26:	f003 0306 	and.w	r3, r3, #6
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d051      	beq.n	8005ed2 <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8005e2e:	f107 020c 	add.w	r2, r7, #12
 8005e32:	79fb      	ldrb	r3, [r7, #7]
 8005e34:	210b      	movs	r1, #11
 8005e36:	4618      	mov	r0, r3
 8005e38:	f7ff feee 	bl	8005c18 <USER_SPI_ioctl>
 8005e3c:	4603      	mov	r3, r0
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d149      	bne.n	8005ed6 <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8005e42:	7b3b      	ldrb	r3, [r7, #12]
 8005e44:	099b      	lsrs	r3, r3, #6
 8005e46:	b2db      	uxtb	r3, r3
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d104      	bne.n	8005e56 <USER_SPI_ioctl+0x23e>
 8005e4c:	7dbb      	ldrb	r3, [r7, #22]
 8005e4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d041      	beq.n	8005eda <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	623b      	str	r3, [r7, #32]
 8005e5a:	6a3b      	ldr	r3, [r7, #32]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005e60:	6a3b      	ldr	r3, [r7, #32]
 8005e62:	685b      	ldr	r3, [r3, #4]
 8005e64:	627b      	str	r3, [r7, #36]	@ 0x24
		if (!(CardType & CT_BLOCK)) {
 8005e66:	4b23      	ldr	r3, [pc, #140]	@ (8005ef4 <USER_SPI_ioctl+0x2dc>)
 8005e68:	781b      	ldrb	r3, [r3, #0]
 8005e6a:	f003 0308 	and.w	r3, r3, #8
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d105      	bne.n	8005e7e <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 8005e72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e74:	025b      	lsls	r3, r3, #9
 8005e76:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005e78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e7a:	025b      	lsls	r3, r3, #9
 8005e7c:	627b      	str	r3, [r7, #36]	@ 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 8005e7e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005e80:	2020      	movs	r0, #32
 8005e82:	f7ff fc76 	bl	8005772 <send_cmd>
 8005e86:	4603      	mov	r3, r0
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d128      	bne.n	8005ede <USER_SPI_ioctl+0x2c6>
 8005e8c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005e8e:	2021      	movs	r0, #33	@ 0x21
 8005e90:	f7ff fc6f 	bl	8005772 <send_cmd>
 8005e94:	4603      	mov	r3, r0
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d121      	bne.n	8005ede <USER_SPI_ioctl+0x2c6>
 8005e9a:	2100      	movs	r1, #0
 8005e9c:	2026      	movs	r0, #38	@ 0x26
 8005e9e:	f7ff fc68 	bl	8005772 <send_cmd>
 8005ea2:	4603      	mov	r3, r0
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d11a      	bne.n	8005ede <USER_SPI_ioctl+0x2c6>
 8005ea8:	f247 5030 	movw	r0, #30000	@ 0x7530
 8005eac:	f7ff fbba 	bl	8005624 <wait_ready>
 8005eb0:	4603      	mov	r3, r0
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d013      	beq.n	8005ede <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 8005ebc:	e00f      	b.n	8005ede <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 8005ebe:	2304      	movs	r3, #4
 8005ec0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8005ec4:	e00c      	b.n	8005ee0 <USER_SPI_ioctl+0x2c8>
		break;
 8005ec6:	bf00      	nop
 8005ec8:	e00a      	b.n	8005ee0 <USER_SPI_ioctl+0x2c8>
		break;
 8005eca:	bf00      	nop
 8005ecc:	e008      	b.n	8005ee0 <USER_SPI_ioctl+0x2c8>
		break;
 8005ece:	bf00      	nop
 8005ed0:	e006      	b.n	8005ee0 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8005ed2:	bf00      	nop
 8005ed4:	e004      	b.n	8005ee0 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8005ed6:	bf00      	nop
 8005ed8:	e002      	b.n	8005ee0 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8005eda:	bf00      	nop
 8005edc:	e000      	b.n	8005ee0 <USER_SPI_ioctl+0x2c8>
		break;
 8005ede:	bf00      	nop
	}

	despiselect();
 8005ee0:	f7ff fbc4 	bl	800566c <despiselect>

	return res;
 8005ee4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8005ee8:	4618      	mov	r0, r3
 8005eea:	3730      	adds	r7, #48	@ 0x30
 8005eec:	46bd      	mov	sp, r7
 8005eee:	bd80      	pop	{r7, pc}
 8005ef0:	20000050 	.word	0x20000050
 8005ef4:	2000498c 	.word	0x2000498c

08005ef8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b084      	sub	sp, #16
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	4603      	mov	r3, r0
 8005f00:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8005f02:	79fb      	ldrb	r3, [r7, #7]
 8005f04:	4a08      	ldr	r2, [pc, #32]	@ (8005f28 <disk_status+0x30>)
 8005f06:	009b      	lsls	r3, r3, #2
 8005f08:	4413      	add	r3, r2
 8005f0a:	685b      	ldr	r3, [r3, #4]
 8005f0c:	685b      	ldr	r3, [r3, #4]
 8005f0e:	79fa      	ldrb	r2, [r7, #7]
 8005f10:	4905      	ldr	r1, [pc, #20]	@ (8005f28 <disk_status+0x30>)
 8005f12:	440a      	add	r2, r1
 8005f14:	7a12      	ldrb	r2, [r2, #8]
 8005f16:	4610      	mov	r0, r2
 8005f18:	4798      	blx	r3
 8005f1a:	4603      	mov	r3, r0
 8005f1c:	73fb      	strb	r3, [r7, #15]
  return stat;
 8005f1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f20:	4618      	mov	r0, r3
 8005f22:	3710      	adds	r7, #16
 8005f24:	46bd      	mov	sp, r7
 8005f26:	bd80      	pop	{r7, pc}
 8005f28:	200049c0 	.word	0x200049c0

08005f2c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b084      	sub	sp, #16
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	4603      	mov	r3, r0
 8005f34:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8005f36:	2300      	movs	r3, #0
 8005f38:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8005f3a:	79fb      	ldrb	r3, [r7, #7]
 8005f3c:	4a0e      	ldr	r2, [pc, #56]	@ (8005f78 <disk_initialize+0x4c>)
 8005f3e:	5cd3      	ldrb	r3, [r2, r3]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d114      	bne.n	8005f6e <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8005f44:	79fb      	ldrb	r3, [r7, #7]
 8005f46:	4a0c      	ldr	r2, [pc, #48]	@ (8005f78 <disk_initialize+0x4c>)
 8005f48:	009b      	lsls	r3, r3, #2
 8005f4a:	4413      	add	r3, r2
 8005f4c:	685b      	ldr	r3, [r3, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	79fa      	ldrb	r2, [r7, #7]
 8005f52:	4909      	ldr	r1, [pc, #36]	@ (8005f78 <disk_initialize+0x4c>)
 8005f54:	440a      	add	r2, r1
 8005f56:	7a12      	ldrb	r2, [r2, #8]
 8005f58:	4610      	mov	r0, r2
 8005f5a:	4798      	blx	r3
 8005f5c:	4603      	mov	r3, r0
 8005f5e:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 8005f60:	7bfb      	ldrb	r3, [r7, #15]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d103      	bne.n	8005f6e <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 8005f66:	79fb      	ldrb	r3, [r7, #7]
 8005f68:	4a03      	ldr	r2, [pc, #12]	@ (8005f78 <disk_initialize+0x4c>)
 8005f6a:	2101      	movs	r1, #1
 8005f6c:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 8005f6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f70:	4618      	mov	r0, r3
 8005f72:	3710      	adds	r7, #16
 8005f74:	46bd      	mov	sp, r7
 8005f76:	bd80      	pop	{r7, pc}
 8005f78:	200049c0 	.word	0x200049c0

08005f7c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8005f7c:	b590      	push	{r4, r7, lr}
 8005f7e:	b087      	sub	sp, #28
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	60b9      	str	r1, [r7, #8]
 8005f84:	607a      	str	r2, [r7, #4]
 8005f86:	603b      	str	r3, [r7, #0]
 8005f88:	4603      	mov	r3, r0
 8005f8a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8005f8c:	7bfb      	ldrb	r3, [r7, #15]
 8005f8e:	4a0a      	ldr	r2, [pc, #40]	@ (8005fb8 <disk_read+0x3c>)
 8005f90:	009b      	lsls	r3, r3, #2
 8005f92:	4413      	add	r3, r2
 8005f94:	685b      	ldr	r3, [r3, #4]
 8005f96:	689c      	ldr	r4, [r3, #8]
 8005f98:	7bfb      	ldrb	r3, [r7, #15]
 8005f9a:	4a07      	ldr	r2, [pc, #28]	@ (8005fb8 <disk_read+0x3c>)
 8005f9c:	4413      	add	r3, r2
 8005f9e:	7a18      	ldrb	r0, [r3, #8]
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	687a      	ldr	r2, [r7, #4]
 8005fa4:	68b9      	ldr	r1, [r7, #8]
 8005fa6:	47a0      	blx	r4
 8005fa8:	4603      	mov	r3, r0
 8005faa:	75fb      	strb	r3, [r7, #23]
  return res;
 8005fac:	7dfb      	ldrb	r3, [r7, #23]
}
 8005fae:	4618      	mov	r0, r3
 8005fb0:	371c      	adds	r7, #28
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	bd90      	pop	{r4, r7, pc}
 8005fb6:	bf00      	nop
 8005fb8:	200049c0 	.word	0x200049c0

08005fbc <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8005fbc:	b590      	push	{r4, r7, lr}
 8005fbe:	b087      	sub	sp, #28
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	60b9      	str	r1, [r7, #8]
 8005fc4:	607a      	str	r2, [r7, #4]
 8005fc6:	603b      	str	r3, [r7, #0]
 8005fc8:	4603      	mov	r3, r0
 8005fca:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8005fcc:	7bfb      	ldrb	r3, [r7, #15]
 8005fce:	4a0a      	ldr	r2, [pc, #40]	@ (8005ff8 <disk_write+0x3c>)
 8005fd0:	009b      	lsls	r3, r3, #2
 8005fd2:	4413      	add	r3, r2
 8005fd4:	685b      	ldr	r3, [r3, #4]
 8005fd6:	68dc      	ldr	r4, [r3, #12]
 8005fd8:	7bfb      	ldrb	r3, [r7, #15]
 8005fda:	4a07      	ldr	r2, [pc, #28]	@ (8005ff8 <disk_write+0x3c>)
 8005fdc:	4413      	add	r3, r2
 8005fde:	7a18      	ldrb	r0, [r3, #8]
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	687a      	ldr	r2, [r7, #4]
 8005fe4:	68b9      	ldr	r1, [r7, #8]
 8005fe6:	47a0      	blx	r4
 8005fe8:	4603      	mov	r3, r0
 8005fea:	75fb      	strb	r3, [r7, #23]
  return res;
 8005fec:	7dfb      	ldrb	r3, [r7, #23]
}
 8005fee:	4618      	mov	r0, r3
 8005ff0:	371c      	adds	r7, #28
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	bd90      	pop	{r4, r7, pc}
 8005ff6:	bf00      	nop
 8005ff8:	200049c0 	.word	0x200049c0

08005ffc <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b084      	sub	sp, #16
 8006000:	af00      	add	r7, sp, #0
 8006002:	4603      	mov	r3, r0
 8006004:	603a      	str	r2, [r7, #0]
 8006006:	71fb      	strb	r3, [r7, #7]
 8006008:	460b      	mov	r3, r1
 800600a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800600c:	79fb      	ldrb	r3, [r7, #7]
 800600e:	4a09      	ldr	r2, [pc, #36]	@ (8006034 <disk_ioctl+0x38>)
 8006010:	009b      	lsls	r3, r3, #2
 8006012:	4413      	add	r3, r2
 8006014:	685b      	ldr	r3, [r3, #4]
 8006016:	691b      	ldr	r3, [r3, #16]
 8006018:	79fa      	ldrb	r2, [r7, #7]
 800601a:	4906      	ldr	r1, [pc, #24]	@ (8006034 <disk_ioctl+0x38>)
 800601c:	440a      	add	r2, r1
 800601e:	7a10      	ldrb	r0, [r2, #8]
 8006020:	79b9      	ldrb	r1, [r7, #6]
 8006022:	683a      	ldr	r2, [r7, #0]
 8006024:	4798      	blx	r3
 8006026:	4603      	mov	r3, r0
 8006028:	73fb      	strb	r3, [r7, #15]
  return res;
 800602a:	7bfb      	ldrb	r3, [r7, #15]
}
 800602c:	4618      	mov	r0, r3
 800602e:	3710      	adds	r7, #16
 8006030:	46bd      	mov	sp, r7
 8006032:	bd80      	pop	{r7, pc}
 8006034:	200049c0 	.word	0x200049c0

08006038 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8006038:	b480      	push	{r7}
 800603a:	b085      	sub	sp, #20
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	3301      	adds	r3, #1
 8006044:	781b      	ldrb	r3, [r3, #0]
 8006046:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8006048:	89fb      	ldrh	r3, [r7, #14]
 800604a:	021b      	lsls	r3, r3, #8
 800604c:	b21a      	sxth	r2, r3
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	781b      	ldrb	r3, [r3, #0]
 8006052:	b21b      	sxth	r3, r3
 8006054:	4313      	orrs	r3, r2
 8006056:	b21b      	sxth	r3, r3
 8006058:	81fb      	strh	r3, [r7, #14]
	return rv;
 800605a:	89fb      	ldrh	r3, [r7, #14]
}
 800605c:	4618      	mov	r0, r3
 800605e:	3714      	adds	r7, #20
 8006060:	46bd      	mov	sp, r7
 8006062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006066:	4770      	bx	lr

08006068 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8006068:	b480      	push	{r7}
 800606a:	b085      	sub	sp, #20
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	3303      	adds	r3, #3
 8006074:	781b      	ldrb	r3, [r3, #0]
 8006076:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	021b      	lsls	r3, r3, #8
 800607c:	687a      	ldr	r2, [r7, #4]
 800607e:	3202      	adds	r2, #2
 8006080:	7812      	ldrb	r2, [r2, #0]
 8006082:	4313      	orrs	r3, r2
 8006084:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	021b      	lsls	r3, r3, #8
 800608a:	687a      	ldr	r2, [r7, #4]
 800608c:	3201      	adds	r2, #1
 800608e:	7812      	ldrb	r2, [r2, #0]
 8006090:	4313      	orrs	r3, r2
 8006092:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	021b      	lsls	r3, r3, #8
 8006098:	687a      	ldr	r2, [r7, #4]
 800609a:	7812      	ldrb	r2, [r2, #0]
 800609c:	4313      	orrs	r3, r2
 800609e:	60fb      	str	r3, [r7, #12]
	return rv;
 80060a0:	68fb      	ldr	r3, [r7, #12]
}
 80060a2:	4618      	mov	r0, r3
 80060a4:	3714      	adds	r7, #20
 80060a6:	46bd      	mov	sp, r7
 80060a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ac:	4770      	bx	lr

080060ae <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80060ae:	b480      	push	{r7}
 80060b0:	b083      	sub	sp, #12
 80060b2:	af00      	add	r7, sp, #0
 80060b4:	6078      	str	r0, [r7, #4]
 80060b6:	460b      	mov	r3, r1
 80060b8:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	1c5a      	adds	r2, r3, #1
 80060be:	607a      	str	r2, [r7, #4]
 80060c0:	887a      	ldrh	r2, [r7, #2]
 80060c2:	b2d2      	uxtb	r2, r2
 80060c4:	701a      	strb	r2, [r3, #0]
 80060c6:	887b      	ldrh	r3, [r7, #2]
 80060c8:	0a1b      	lsrs	r3, r3, #8
 80060ca:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	1c5a      	adds	r2, r3, #1
 80060d0:	607a      	str	r2, [r7, #4]
 80060d2:	887a      	ldrh	r2, [r7, #2]
 80060d4:	b2d2      	uxtb	r2, r2
 80060d6:	701a      	strb	r2, [r3, #0]
}
 80060d8:	bf00      	nop
 80060da:	370c      	adds	r7, #12
 80060dc:	46bd      	mov	sp, r7
 80060de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e2:	4770      	bx	lr

080060e4 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80060e4:	b480      	push	{r7}
 80060e6:	b083      	sub	sp, #12
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
 80060ec:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	1c5a      	adds	r2, r3, #1
 80060f2:	607a      	str	r2, [r7, #4]
 80060f4:	683a      	ldr	r2, [r7, #0]
 80060f6:	b2d2      	uxtb	r2, r2
 80060f8:	701a      	strb	r2, [r3, #0]
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	0a1b      	lsrs	r3, r3, #8
 80060fe:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	1c5a      	adds	r2, r3, #1
 8006104:	607a      	str	r2, [r7, #4]
 8006106:	683a      	ldr	r2, [r7, #0]
 8006108:	b2d2      	uxtb	r2, r2
 800610a:	701a      	strb	r2, [r3, #0]
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	0a1b      	lsrs	r3, r3, #8
 8006110:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	1c5a      	adds	r2, r3, #1
 8006116:	607a      	str	r2, [r7, #4]
 8006118:	683a      	ldr	r2, [r7, #0]
 800611a:	b2d2      	uxtb	r2, r2
 800611c:	701a      	strb	r2, [r3, #0]
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	0a1b      	lsrs	r3, r3, #8
 8006122:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	1c5a      	adds	r2, r3, #1
 8006128:	607a      	str	r2, [r7, #4]
 800612a:	683a      	ldr	r2, [r7, #0]
 800612c:	b2d2      	uxtb	r2, r2
 800612e:	701a      	strb	r2, [r3, #0]
}
 8006130:	bf00      	nop
 8006132:	370c      	adds	r7, #12
 8006134:	46bd      	mov	sp, r7
 8006136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613a:	4770      	bx	lr

0800613c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800613c:	b480      	push	{r7}
 800613e:	b087      	sub	sp, #28
 8006140:	af00      	add	r7, sp, #0
 8006142:	60f8      	str	r0, [r7, #12]
 8006144:	60b9      	str	r1, [r7, #8]
 8006146:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800614c:	68bb      	ldr	r3, [r7, #8]
 800614e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d00d      	beq.n	8006172 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8006156:	693a      	ldr	r2, [r7, #16]
 8006158:	1c53      	adds	r3, r2, #1
 800615a:	613b      	str	r3, [r7, #16]
 800615c:	697b      	ldr	r3, [r7, #20]
 800615e:	1c59      	adds	r1, r3, #1
 8006160:	6179      	str	r1, [r7, #20]
 8006162:	7812      	ldrb	r2, [r2, #0]
 8006164:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	3b01      	subs	r3, #1
 800616a:	607b      	str	r3, [r7, #4]
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d1f1      	bne.n	8006156 <mem_cpy+0x1a>
	}
}
 8006172:	bf00      	nop
 8006174:	371c      	adds	r7, #28
 8006176:	46bd      	mov	sp, r7
 8006178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617c:	4770      	bx	lr

0800617e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800617e:	b480      	push	{r7}
 8006180:	b087      	sub	sp, #28
 8006182:	af00      	add	r7, sp, #0
 8006184:	60f8      	str	r0, [r7, #12]
 8006186:	60b9      	str	r1, [r7, #8]
 8006188:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800618e:	697b      	ldr	r3, [r7, #20]
 8006190:	1c5a      	adds	r2, r3, #1
 8006192:	617a      	str	r2, [r7, #20]
 8006194:	68ba      	ldr	r2, [r7, #8]
 8006196:	b2d2      	uxtb	r2, r2
 8006198:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	3b01      	subs	r3, #1
 800619e:	607b      	str	r3, [r7, #4]
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d1f3      	bne.n	800618e <mem_set+0x10>
}
 80061a6:	bf00      	nop
 80061a8:	bf00      	nop
 80061aa:	371c      	adds	r7, #28
 80061ac:	46bd      	mov	sp, r7
 80061ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b2:	4770      	bx	lr

080061b4 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80061b4:	b480      	push	{r7}
 80061b6:	b089      	sub	sp, #36	@ 0x24
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	60f8      	str	r0, [r7, #12]
 80061bc:	60b9      	str	r1, [r7, #8]
 80061be:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	61fb      	str	r3, [r7, #28]
 80061c4:	68bb      	ldr	r3, [r7, #8]
 80061c6:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80061c8:	2300      	movs	r3, #0
 80061ca:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80061cc:	69fb      	ldr	r3, [r7, #28]
 80061ce:	1c5a      	adds	r2, r3, #1
 80061d0:	61fa      	str	r2, [r7, #28]
 80061d2:	781b      	ldrb	r3, [r3, #0]
 80061d4:	4619      	mov	r1, r3
 80061d6:	69bb      	ldr	r3, [r7, #24]
 80061d8:	1c5a      	adds	r2, r3, #1
 80061da:	61ba      	str	r2, [r7, #24]
 80061dc:	781b      	ldrb	r3, [r3, #0]
 80061de:	1acb      	subs	r3, r1, r3
 80061e0:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	3b01      	subs	r3, #1
 80061e6:	607b      	str	r3, [r7, #4]
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d002      	beq.n	80061f4 <mem_cmp+0x40>
 80061ee:	697b      	ldr	r3, [r7, #20]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d0eb      	beq.n	80061cc <mem_cmp+0x18>

	return r;
 80061f4:	697b      	ldr	r3, [r7, #20]
}
 80061f6:	4618      	mov	r0, r3
 80061f8:	3724      	adds	r7, #36	@ 0x24
 80061fa:	46bd      	mov	sp, r7
 80061fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006200:	4770      	bx	lr

08006202 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8006202:	b480      	push	{r7}
 8006204:	b083      	sub	sp, #12
 8006206:	af00      	add	r7, sp, #0
 8006208:	6078      	str	r0, [r7, #4]
 800620a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800620c:	e002      	b.n	8006214 <chk_chr+0x12>
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	3301      	adds	r3, #1
 8006212:	607b      	str	r3, [r7, #4]
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	781b      	ldrb	r3, [r3, #0]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d005      	beq.n	8006228 <chk_chr+0x26>
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	781b      	ldrb	r3, [r3, #0]
 8006220:	461a      	mov	r2, r3
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	4293      	cmp	r3, r2
 8006226:	d1f2      	bne.n	800620e <chk_chr+0xc>
	return *str;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	781b      	ldrb	r3, [r3, #0]
}
 800622c:	4618      	mov	r0, r3
 800622e:	370c      	adds	r7, #12
 8006230:	46bd      	mov	sp, r7
 8006232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006236:	4770      	bx	lr

08006238 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006238:	b480      	push	{r7}
 800623a:	b085      	sub	sp, #20
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
 8006240:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006242:	2300      	movs	r3, #0
 8006244:	60bb      	str	r3, [r7, #8]
 8006246:	68bb      	ldr	r3, [r7, #8]
 8006248:	60fb      	str	r3, [r7, #12]
 800624a:	e029      	b.n	80062a0 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800624c:	4a27      	ldr	r2, [pc, #156]	@ (80062ec <chk_lock+0xb4>)
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	011b      	lsls	r3, r3, #4
 8006252:	4413      	add	r3, r2
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	2b00      	cmp	r3, #0
 8006258:	d01d      	beq.n	8006296 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800625a:	4a24      	ldr	r2, [pc, #144]	@ (80062ec <chk_lock+0xb4>)
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	011b      	lsls	r3, r3, #4
 8006260:	4413      	add	r3, r2
 8006262:	681a      	ldr	r2, [r3, #0]
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	429a      	cmp	r2, r3
 800626a:	d116      	bne.n	800629a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800626c:	4a1f      	ldr	r2, [pc, #124]	@ (80062ec <chk_lock+0xb4>)
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	011b      	lsls	r3, r3, #4
 8006272:	4413      	add	r3, r2
 8006274:	3304      	adds	r3, #4
 8006276:	681a      	ldr	r2, [r3, #0]
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800627c:	429a      	cmp	r2, r3
 800627e:	d10c      	bne.n	800629a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8006280:	4a1a      	ldr	r2, [pc, #104]	@ (80062ec <chk_lock+0xb4>)
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	011b      	lsls	r3, r3, #4
 8006286:	4413      	add	r3, r2
 8006288:	3308      	adds	r3, #8
 800628a:	681a      	ldr	r2, [r3, #0]
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8006290:	429a      	cmp	r2, r3
 8006292:	d102      	bne.n	800629a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8006294:	e007      	b.n	80062a6 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8006296:	2301      	movs	r3, #1
 8006298:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	3301      	adds	r3, #1
 800629e:	60fb      	str	r3, [r7, #12]
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	2b01      	cmp	r3, #1
 80062a4:	d9d2      	bls.n	800624c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	2b02      	cmp	r3, #2
 80062aa:	d109      	bne.n	80062c0 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80062ac:	68bb      	ldr	r3, [r7, #8]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d102      	bne.n	80062b8 <chk_lock+0x80>
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	2b02      	cmp	r3, #2
 80062b6:	d101      	bne.n	80062bc <chk_lock+0x84>
 80062b8:	2300      	movs	r3, #0
 80062ba:	e010      	b.n	80062de <chk_lock+0xa6>
 80062bc:	2312      	movs	r3, #18
 80062be:	e00e      	b.n	80062de <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d108      	bne.n	80062d8 <chk_lock+0xa0>
 80062c6:	4a09      	ldr	r2, [pc, #36]	@ (80062ec <chk_lock+0xb4>)
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	011b      	lsls	r3, r3, #4
 80062cc:	4413      	add	r3, r2
 80062ce:	330c      	adds	r3, #12
 80062d0:	881b      	ldrh	r3, [r3, #0]
 80062d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80062d6:	d101      	bne.n	80062dc <chk_lock+0xa4>
 80062d8:	2310      	movs	r3, #16
 80062da:	e000      	b.n	80062de <chk_lock+0xa6>
 80062dc:	2300      	movs	r3, #0
}
 80062de:	4618      	mov	r0, r3
 80062e0:	3714      	adds	r7, #20
 80062e2:	46bd      	mov	sp, r7
 80062e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e8:	4770      	bx	lr
 80062ea:	bf00      	nop
 80062ec:	200049a0 	.word	0x200049a0

080062f0 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80062f0:	b480      	push	{r7}
 80062f2:	b083      	sub	sp, #12
 80062f4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80062f6:	2300      	movs	r3, #0
 80062f8:	607b      	str	r3, [r7, #4]
 80062fa:	e002      	b.n	8006302 <enq_lock+0x12>
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	3301      	adds	r3, #1
 8006300:	607b      	str	r3, [r7, #4]
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2b01      	cmp	r3, #1
 8006306:	d806      	bhi.n	8006316 <enq_lock+0x26>
 8006308:	4a09      	ldr	r2, [pc, #36]	@ (8006330 <enq_lock+0x40>)
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	011b      	lsls	r3, r3, #4
 800630e:	4413      	add	r3, r2
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d1f2      	bne.n	80062fc <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2b02      	cmp	r3, #2
 800631a:	bf14      	ite	ne
 800631c:	2301      	movne	r3, #1
 800631e:	2300      	moveq	r3, #0
 8006320:	b2db      	uxtb	r3, r3
}
 8006322:	4618      	mov	r0, r3
 8006324:	370c      	adds	r7, #12
 8006326:	46bd      	mov	sp, r7
 8006328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632c:	4770      	bx	lr
 800632e:	bf00      	nop
 8006330:	200049a0 	.word	0x200049a0

08006334 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006334:	b480      	push	{r7}
 8006336:	b085      	sub	sp, #20
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
 800633c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800633e:	2300      	movs	r3, #0
 8006340:	60fb      	str	r3, [r7, #12]
 8006342:	e01f      	b.n	8006384 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8006344:	4a41      	ldr	r2, [pc, #260]	@ (800644c <inc_lock+0x118>)
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	011b      	lsls	r3, r3, #4
 800634a:	4413      	add	r3, r2
 800634c:	681a      	ldr	r2, [r3, #0]
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	429a      	cmp	r2, r3
 8006354:	d113      	bne.n	800637e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8006356:	4a3d      	ldr	r2, [pc, #244]	@ (800644c <inc_lock+0x118>)
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	011b      	lsls	r3, r3, #4
 800635c:	4413      	add	r3, r2
 800635e:	3304      	adds	r3, #4
 8006360:	681a      	ldr	r2, [r3, #0]
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8006366:	429a      	cmp	r2, r3
 8006368:	d109      	bne.n	800637e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800636a:	4a38      	ldr	r2, [pc, #224]	@ (800644c <inc_lock+0x118>)
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	011b      	lsls	r3, r3, #4
 8006370:	4413      	add	r3, r2
 8006372:	3308      	adds	r3, #8
 8006374:	681a      	ldr	r2, [r3, #0]
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800637a:	429a      	cmp	r2, r3
 800637c:	d006      	beq.n	800638c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	3301      	adds	r3, #1
 8006382:	60fb      	str	r3, [r7, #12]
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	2b01      	cmp	r3, #1
 8006388:	d9dc      	bls.n	8006344 <inc_lock+0x10>
 800638a:	e000      	b.n	800638e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800638c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	2b02      	cmp	r3, #2
 8006392:	d132      	bne.n	80063fa <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006394:	2300      	movs	r3, #0
 8006396:	60fb      	str	r3, [r7, #12]
 8006398:	e002      	b.n	80063a0 <inc_lock+0x6c>
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	3301      	adds	r3, #1
 800639e:	60fb      	str	r3, [r7, #12]
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	2b01      	cmp	r3, #1
 80063a4:	d806      	bhi.n	80063b4 <inc_lock+0x80>
 80063a6:	4a29      	ldr	r2, [pc, #164]	@ (800644c <inc_lock+0x118>)
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	011b      	lsls	r3, r3, #4
 80063ac:	4413      	add	r3, r2
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d1f2      	bne.n	800639a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	2b02      	cmp	r3, #2
 80063b8:	d101      	bne.n	80063be <inc_lock+0x8a>
 80063ba:	2300      	movs	r3, #0
 80063bc:	e040      	b.n	8006440 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681a      	ldr	r2, [r3, #0]
 80063c2:	4922      	ldr	r1, [pc, #136]	@ (800644c <inc_lock+0x118>)
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	011b      	lsls	r3, r3, #4
 80063c8:	440b      	add	r3, r1
 80063ca:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	689a      	ldr	r2, [r3, #8]
 80063d0:	491e      	ldr	r1, [pc, #120]	@ (800644c <inc_lock+0x118>)
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	011b      	lsls	r3, r3, #4
 80063d6:	440b      	add	r3, r1
 80063d8:	3304      	adds	r3, #4
 80063da:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	695a      	ldr	r2, [r3, #20]
 80063e0:	491a      	ldr	r1, [pc, #104]	@ (800644c <inc_lock+0x118>)
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	011b      	lsls	r3, r3, #4
 80063e6:	440b      	add	r3, r1
 80063e8:	3308      	adds	r3, #8
 80063ea:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80063ec:	4a17      	ldr	r2, [pc, #92]	@ (800644c <inc_lock+0x118>)
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	011b      	lsls	r3, r3, #4
 80063f2:	4413      	add	r3, r2
 80063f4:	330c      	adds	r3, #12
 80063f6:	2200      	movs	r2, #0
 80063f8:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d009      	beq.n	8006414 <inc_lock+0xe0>
 8006400:	4a12      	ldr	r2, [pc, #72]	@ (800644c <inc_lock+0x118>)
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	011b      	lsls	r3, r3, #4
 8006406:	4413      	add	r3, r2
 8006408:	330c      	adds	r3, #12
 800640a:	881b      	ldrh	r3, [r3, #0]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d001      	beq.n	8006414 <inc_lock+0xe0>
 8006410:	2300      	movs	r3, #0
 8006412:	e015      	b.n	8006440 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8006414:	683b      	ldr	r3, [r7, #0]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d108      	bne.n	800642c <inc_lock+0xf8>
 800641a:	4a0c      	ldr	r2, [pc, #48]	@ (800644c <inc_lock+0x118>)
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	011b      	lsls	r3, r3, #4
 8006420:	4413      	add	r3, r2
 8006422:	330c      	adds	r3, #12
 8006424:	881b      	ldrh	r3, [r3, #0]
 8006426:	3301      	adds	r3, #1
 8006428:	b29a      	uxth	r2, r3
 800642a:	e001      	b.n	8006430 <inc_lock+0xfc>
 800642c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006430:	4906      	ldr	r1, [pc, #24]	@ (800644c <inc_lock+0x118>)
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	011b      	lsls	r3, r3, #4
 8006436:	440b      	add	r3, r1
 8006438:	330c      	adds	r3, #12
 800643a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	3301      	adds	r3, #1
}
 8006440:	4618      	mov	r0, r3
 8006442:	3714      	adds	r7, #20
 8006444:	46bd      	mov	sp, r7
 8006446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644a:	4770      	bx	lr
 800644c:	200049a0 	.word	0x200049a0

08006450 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8006450:	b480      	push	{r7}
 8006452:	b085      	sub	sp, #20
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	3b01      	subs	r3, #1
 800645c:	607b      	str	r3, [r7, #4]
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	2b01      	cmp	r3, #1
 8006462:	d825      	bhi.n	80064b0 <dec_lock+0x60>
		n = Files[i].ctr;
 8006464:	4a17      	ldr	r2, [pc, #92]	@ (80064c4 <dec_lock+0x74>)
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	011b      	lsls	r3, r3, #4
 800646a:	4413      	add	r3, r2
 800646c:	330c      	adds	r3, #12
 800646e:	881b      	ldrh	r3, [r3, #0]
 8006470:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8006472:	89fb      	ldrh	r3, [r7, #14]
 8006474:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006478:	d101      	bne.n	800647e <dec_lock+0x2e>
 800647a:	2300      	movs	r3, #0
 800647c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800647e:	89fb      	ldrh	r3, [r7, #14]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d002      	beq.n	800648a <dec_lock+0x3a>
 8006484:	89fb      	ldrh	r3, [r7, #14]
 8006486:	3b01      	subs	r3, #1
 8006488:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800648a:	4a0e      	ldr	r2, [pc, #56]	@ (80064c4 <dec_lock+0x74>)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	011b      	lsls	r3, r3, #4
 8006490:	4413      	add	r3, r2
 8006492:	330c      	adds	r3, #12
 8006494:	89fa      	ldrh	r2, [r7, #14]
 8006496:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8006498:	89fb      	ldrh	r3, [r7, #14]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d105      	bne.n	80064aa <dec_lock+0x5a>
 800649e:	4a09      	ldr	r2, [pc, #36]	@ (80064c4 <dec_lock+0x74>)
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	011b      	lsls	r3, r3, #4
 80064a4:	4413      	add	r3, r2
 80064a6:	2200      	movs	r2, #0
 80064a8:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80064aa:	2300      	movs	r3, #0
 80064ac:	737b      	strb	r3, [r7, #13]
 80064ae:	e001      	b.n	80064b4 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80064b0:	2302      	movs	r3, #2
 80064b2:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80064b4:	7b7b      	ldrb	r3, [r7, #13]
}
 80064b6:	4618      	mov	r0, r3
 80064b8:	3714      	adds	r7, #20
 80064ba:	46bd      	mov	sp, r7
 80064bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c0:	4770      	bx	lr
 80064c2:	bf00      	nop
 80064c4:	200049a0 	.word	0x200049a0

080064c8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80064c8:	b480      	push	{r7}
 80064ca:	b085      	sub	sp, #20
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80064d0:	2300      	movs	r3, #0
 80064d2:	60fb      	str	r3, [r7, #12]
 80064d4:	e010      	b.n	80064f8 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80064d6:	4a0d      	ldr	r2, [pc, #52]	@ (800650c <clear_lock+0x44>)
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	011b      	lsls	r3, r3, #4
 80064dc:	4413      	add	r3, r2
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	687a      	ldr	r2, [r7, #4]
 80064e2:	429a      	cmp	r2, r3
 80064e4:	d105      	bne.n	80064f2 <clear_lock+0x2a>
 80064e6:	4a09      	ldr	r2, [pc, #36]	@ (800650c <clear_lock+0x44>)
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	011b      	lsls	r3, r3, #4
 80064ec:	4413      	add	r3, r2
 80064ee:	2200      	movs	r2, #0
 80064f0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	3301      	adds	r3, #1
 80064f6:	60fb      	str	r3, [r7, #12]
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	2b01      	cmp	r3, #1
 80064fc:	d9eb      	bls.n	80064d6 <clear_lock+0xe>
	}
}
 80064fe:	bf00      	nop
 8006500:	bf00      	nop
 8006502:	3714      	adds	r7, #20
 8006504:	46bd      	mov	sp, r7
 8006506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650a:	4770      	bx	lr
 800650c:	200049a0 	.word	0x200049a0

08006510 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8006510:	b580      	push	{r7, lr}
 8006512:	b086      	sub	sp, #24
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8006518:	2300      	movs	r3, #0
 800651a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	78db      	ldrb	r3, [r3, #3]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d034      	beq.n	800658e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006528:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	7858      	ldrb	r0, [r3, #1]
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8006534:	2301      	movs	r3, #1
 8006536:	697a      	ldr	r2, [r7, #20]
 8006538:	f7ff fd40 	bl	8005fbc <disk_write>
 800653c:	4603      	mov	r3, r0
 800653e:	2b00      	cmp	r3, #0
 8006540:	d002      	beq.n	8006548 <sync_window+0x38>
			res = FR_DISK_ERR;
 8006542:	2301      	movs	r3, #1
 8006544:	73fb      	strb	r3, [r7, #15]
 8006546:	e022      	b.n	800658e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2200      	movs	r2, #0
 800654c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6a1b      	ldr	r3, [r3, #32]
 8006552:	697a      	ldr	r2, [r7, #20]
 8006554:	1ad2      	subs	r2, r2, r3
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	699b      	ldr	r3, [r3, #24]
 800655a:	429a      	cmp	r2, r3
 800655c:	d217      	bcs.n	800658e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	789b      	ldrb	r3, [r3, #2]
 8006562:	613b      	str	r3, [r7, #16]
 8006564:	e010      	b.n	8006588 <sync_window+0x78>
					wsect += fs->fsize;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	699b      	ldr	r3, [r3, #24]
 800656a:	697a      	ldr	r2, [r7, #20]
 800656c:	4413      	add	r3, r2
 800656e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	7858      	ldrb	r0, [r3, #1]
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800657a:	2301      	movs	r3, #1
 800657c:	697a      	ldr	r2, [r7, #20]
 800657e:	f7ff fd1d 	bl	8005fbc <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006582:	693b      	ldr	r3, [r7, #16]
 8006584:	3b01      	subs	r3, #1
 8006586:	613b      	str	r3, [r7, #16]
 8006588:	693b      	ldr	r3, [r7, #16]
 800658a:	2b01      	cmp	r3, #1
 800658c:	d8eb      	bhi.n	8006566 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800658e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006590:	4618      	mov	r0, r3
 8006592:	3718      	adds	r7, #24
 8006594:	46bd      	mov	sp, r7
 8006596:	bd80      	pop	{r7, pc}

08006598 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8006598:	b580      	push	{r7, lr}
 800659a:	b084      	sub	sp, #16
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
 80065a0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80065a2:	2300      	movs	r3, #0
 80065a4:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065aa:	683a      	ldr	r2, [r7, #0]
 80065ac:	429a      	cmp	r2, r3
 80065ae:	d01b      	beq.n	80065e8 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80065b0:	6878      	ldr	r0, [r7, #4]
 80065b2:	f7ff ffad 	bl	8006510 <sync_window>
 80065b6:	4603      	mov	r3, r0
 80065b8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80065ba:	7bfb      	ldrb	r3, [r7, #15]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d113      	bne.n	80065e8 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	7858      	ldrb	r0, [r3, #1]
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80065ca:	2301      	movs	r3, #1
 80065cc:	683a      	ldr	r2, [r7, #0]
 80065ce:	f7ff fcd5 	bl	8005f7c <disk_read>
 80065d2:	4603      	mov	r3, r0
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d004      	beq.n	80065e2 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80065d8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80065dc:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80065de:	2301      	movs	r3, #1
 80065e0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	683a      	ldr	r2, [r7, #0]
 80065e6:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 80065e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80065ea:	4618      	mov	r0, r3
 80065ec:	3710      	adds	r7, #16
 80065ee:	46bd      	mov	sp, r7
 80065f0:	bd80      	pop	{r7, pc}
	...

080065f4 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b084      	sub	sp, #16
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80065fc:	6878      	ldr	r0, [r7, #4]
 80065fe:	f7ff ff87 	bl	8006510 <sync_window>
 8006602:	4603      	mov	r3, r0
 8006604:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8006606:	7bfb      	ldrb	r3, [r7, #15]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d158      	bne.n	80066be <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	781b      	ldrb	r3, [r3, #0]
 8006610:	2b03      	cmp	r3, #3
 8006612:	d148      	bne.n	80066a6 <sync_fs+0xb2>
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	791b      	ldrb	r3, [r3, #4]
 8006618:	2b01      	cmp	r3, #1
 800661a:	d144      	bne.n	80066a6 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	3330      	adds	r3, #48	@ 0x30
 8006620:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006624:	2100      	movs	r1, #0
 8006626:	4618      	mov	r0, r3
 8006628:	f7ff fda9 	bl	800617e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	3330      	adds	r3, #48	@ 0x30
 8006630:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8006634:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8006638:	4618      	mov	r0, r3
 800663a:	f7ff fd38 	bl	80060ae <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	3330      	adds	r3, #48	@ 0x30
 8006642:	4921      	ldr	r1, [pc, #132]	@ (80066c8 <sync_fs+0xd4>)
 8006644:	4618      	mov	r0, r3
 8006646:	f7ff fd4d 	bl	80060e4 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	3330      	adds	r3, #48	@ 0x30
 800664e:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8006652:	491e      	ldr	r1, [pc, #120]	@ (80066cc <sync_fs+0xd8>)
 8006654:	4618      	mov	r0, r3
 8006656:	f7ff fd45 	bl	80060e4 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	3330      	adds	r3, #48	@ 0x30
 800665e:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	691b      	ldr	r3, [r3, #16]
 8006666:	4619      	mov	r1, r3
 8006668:	4610      	mov	r0, r2
 800666a:	f7ff fd3b 	bl	80060e4 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	3330      	adds	r3, #48	@ 0x30
 8006672:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	68db      	ldr	r3, [r3, #12]
 800667a:	4619      	mov	r1, r3
 800667c:	4610      	mov	r0, r2
 800667e:	f7ff fd31 	bl	80060e4 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	69db      	ldr	r3, [r3, #28]
 8006686:	1c5a      	adds	r2, r3, #1
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	7858      	ldrb	r0, [r3, #1]
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800669a:	2301      	movs	r3, #1
 800669c:	f7ff fc8e 	bl	8005fbc <disk_write>
			fs->fsi_flag = 0;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2200      	movs	r2, #0
 80066a4:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	785b      	ldrb	r3, [r3, #1]
 80066aa:	2200      	movs	r2, #0
 80066ac:	2100      	movs	r1, #0
 80066ae:	4618      	mov	r0, r3
 80066b0:	f7ff fca4 	bl	8005ffc <disk_ioctl>
 80066b4:	4603      	mov	r3, r0
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d001      	beq.n	80066be <sync_fs+0xca>
 80066ba:	2301      	movs	r3, #1
 80066bc:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80066be:	7bfb      	ldrb	r3, [r7, #15]
}
 80066c0:	4618      	mov	r0, r3
 80066c2:	3710      	adds	r7, #16
 80066c4:	46bd      	mov	sp, r7
 80066c6:	bd80      	pop	{r7, pc}
 80066c8:	41615252 	.word	0x41615252
 80066cc:	61417272 	.word	0x61417272

080066d0 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80066d0:	b480      	push	{r7}
 80066d2:	b083      	sub	sp, #12
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
 80066d8:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	3b02      	subs	r3, #2
 80066de:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	695b      	ldr	r3, [r3, #20]
 80066e4:	3b02      	subs	r3, #2
 80066e6:	683a      	ldr	r2, [r7, #0]
 80066e8:	429a      	cmp	r2, r3
 80066ea:	d301      	bcc.n	80066f0 <clust2sect+0x20>
 80066ec:	2300      	movs	r3, #0
 80066ee:	e008      	b.n	8006702 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	895b      	ldrh	r3, [r3, #10]
 80066f4:	461a      	mov	r2, r3
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	fb03 f202 	mul.w	r2, r3, r2
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006700:	4413      	add	r3, r2
}
 8006702:	4618      	mov	r0, r3
 8006704:	370c      	adds	r7, #12
 8006706:	46bd      	mov	sp, r7
 8006708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670c:	4770      	bx	lr

0800670e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800670e:	b580      	push	{r7, lr}
 8006710:	b086      	sub	sp, #24
 8006712:	af00      	add	r7, sp, #0
 8006714:	6078      	str	r0, [r7, #4]
 8006716:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	2b01      	cmp	r3, #1
 8006722:	d904      	bls.n	800672e <get_fat+0x20>
 8006724:	693b      	ldr	r3, [r7, #16]
 8006726:	695b      	ldr	r3, [r3, #20]
 8006728:	683a      	ldr	r2, [r7, #0]
 800672a:	429a      	cmp	r2, r3
 800672c:	d302      	bcc.n	8006734 <get_fat+0x26>
		val = 1;	/* Internal error */
 800672e:	2301      	movs	r3, #1
 8006730:	617b      	str	r3, [r7, #20]
 8006732:	e08e      	b.n	8006852 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8006734:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006738:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800673a:	693b      	ldr	r3, [r7, #16]
 800673c:	781b      	ldrb	r3, [r3, #0]
 800673e:	2b03      	cmp	r3, #3
 8006740:	d061      	beq.n	8006806 <get_fat+0xf8>
 8006742:	2b03      	cmp	r3, #3
 8006744:	dc7b      	bgt.n	800683e <get_fat+0x130>
 8006746:	2b01      	cmp	r3, #1
 8006748:	d002      	beq.n	8006750 <get_fat+0x42>
 800674a:	2b02      	cmp	r3, #2
 800674c:	d041      	beq.n	80067d2 <get_fat+0xc4>
 800674e:	e076      	b.n	800683e <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	60fb      	str	r3, [r7, #12]
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	085b      	lsrs	r3, r3, #1
 8006758:	68fa      	ldr	r2, [r7, #12]
 800675a:	4413      	add	r3, r2
 800675c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800675e:	693b      	ldr	r3, [r7, #16]
 8006760:	6a1a      	ldr	r2, [r3, #32]
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	0a5b      	lsrs	r3, r3, #9
 8006766:	4413      	add	r3, r2
 8006768:	4619      	mov	r1, r3
 800676a:	6938      	ldr	r0, [r7, #16]
 800676c:	f7ff ff14 	bl	8006598 <move_window>
 8006770:	4603      	mov	r3, r0
 8006772:	2b00      	cmp	r3, #0
 8006774:	d166      	bne.n	8006844 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	1c5a      	adds	r2, r3, #1
 800677a:	60fa      	str	r2, [r7, #12]
 800677c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006780:	693a      	ldr	r2, [r7, #16]
 8006782:	4413      	add	r3, r2
 8006784:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006788:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800678a:	693b      	ldr	r3, [r7, #16]
 800678c:	6a1a      	ldr	r2, [r3, #32]
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	0a5b      	lsrs	r3, r3, #9
 8006792:	4413      	add	r3, r2
 8006794:	4619      	mov	r1, r3
 8006796:	6938      	ldr	r0, [r7, #16]
 8006798:	f7ff fefe 	bl	8006598 <move_window>
 800679c:	4603      	mov	r3, r0
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d152      	bne.n	8006848 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067a8:	693a      	ldr	r2, [r7, #16]
 80067aa:	4413      	add	r3, r2
 80067ac:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80067b0:	021b      	lsls	r3, r3, #8
 80067b2:	68ba      	ldr	r2, [r7, #8]
 80067b4:	4313      	orrs	r3, r2
 80067b6:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	f003 0301 	and.w	r3, r3, #1
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d002      	beq.n	80067c8 <get_fat+0xba>
 80067c2:	68bb      	ldr	r3, [r7, #8]
 80067c4:	091b      	lsrs	r3, r3, #4
 80067c6:	e002      	b.n	80067ce <get_fat+0xc0>
 80067c8:	68bb      	ldr	r3, [r7, #8]
 80067ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80067ce:	617b      	str	r3, [r7, #20]
			break;
 80067d0:	e03f      	b.n	8006852 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80067d2:	693b      	ldr	r3, [r7, #16]
 80067d4:	6a1a      	ldr	r2, [r3, #32]
 80067d6:	683b      	ldr	r3, [r7, #0]
 80067d8:	0a1b      	lsrs	r3, r3, #8
 80067da:	4413      	add	r3, r2
 80067dc:	4619      	mov	r1, r3
 80067de:	6938      	ldr	r0, [r7, #16]
 80067e0:	f7ff feda 	bl	8006598 <move_window>
 80067e4:	4603      	mov	r3, r0
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d130      	bne.n	800684c <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80067ea:	693b      	ldr	r3, [r7, #16]
 80067ec:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	005b      	lsls	r3, r3, #1
 80067f4:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 80067f8:	4413      	add	r3, r2
 80067fa:	4618      	mov	r0, r3
 80067fc:	f7ff fc1c 	bl	8006038 <ld_word>
 8006800:	4603      	mov	r3, r0
 8006802:	617b      	str	r3, [r7, #20]
			break;
 8006804:	e025      	b.n	8006852 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006806:	693b      	ldr	r3, [r7, #16]
 8006808:	6a1a      	ldr	r2, [r3, #32]
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	09db      	lsrs	r3, r3, #7
 800680e:	4413      	add	r3, r2
 8006810:	4619      	mov	r1, r3
 8006812:	6938      	ldr	r0, [r7, #16]
 8006814:	f7ff fec0 	bl	8006598 <move_window>
 8006818:	4603      	mov	r3, r0
 800681a:	2b00      	cmp	r3, #0
 800681c:	d118      	bne.n	8006850 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800681e:	693b      	ldr	r3, [r7, #16]
 8006820:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	009b      	lsls	r3, r3, #2
 8006828:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800682c:	4413      	add	r3, r2
 800682e:	4618      	mov	r0, r3
 8006830:	f7ff fc1a 	bl	8006068 <ld_dword>
 8006834:	4603      	mov	r3, r0
 8006836:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800683a:	617b      	str	r3, [r7, #20]
			break;
 800683c:	e009      	b.n	8006852 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800683e:	2301      	movs	r3, #1
 8006840:	617b      	str	r3, [r7, #20]
 8006842:	e006      	b.n	8006852 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006844:	bf00      	nop
 8006846:	e004      	b.n	8006852 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006848:	bf00      	nop
 800684a:	e002      	b.n	8006852 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800684c:	bf00      	nop
 800684e:	e000      	b.n	8006852 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006850:	bf00      	nop
		}
	}

	return val;
 8006852:	697b      	ldr	r3, [r7, #20]
}
 8006854:	4618      	mov	r0, r3
 8006856:	3718      	adds	r7, #24
 8006858:	46bd      	mov	sp, r7
 800685a:	bd80      	pop	{r7, pc}

0800685c <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800685c:	b590      	push	{r4, r7, lr}
 800685e:	b089      	sub	sp, #36	@ 0x24
 8006860:	af00      	add	r7, sp, #0
 8006862:	60f8      	str	r0, [r7, #12]
 8006864:	60b9      	str	r1, [r7, #8]
 8006866:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8006868:	2302      	movs	r3, #2
 800686a:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800686c:	68bb      	ldr	r3, [r7, #8]
 800686e:	2b01      	cmp	r3, #1
 8006870:	f240 80d9 	bls.w	8006a26 <put_fat+0x1ca>
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	695b      	ldr	r3, [r3, #20]
 8006878:	68ba      	ldr	r2, [r7, #8]
 800687a:	429a      	cmp	r2, r3
 800687c:	f080 80d3 	bcs.w	8006a26 <put_fat+0x1ca>
		switch (fs->fs_type) {
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	781b      	ldrb	r3, [r3, #0]
 8006884:	2b03      	cmp	r3, #3
 8006886:	f000 8096 	beq.w	80069b6 <put_fat+0x15a>
 800688a:	2b03      	cmp	r3, #3
 800688c:	f300 80cb 	bgt.w	8006a26 <put_fat+0x1ca>
 8006890:	2b01      	cmp	r3, #1
 8006892:	d002      	beq.n	800689a <put_fat+0x3e>
 8006894:	2b02      	cmp	r3, #2
 8006896:	d06e      	beq.n	8006976 <put_fat+0x11a>
 8006898:	e0c5      	b.n	8006a26 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800689a:	68bb      	ldr	r3, [r7, #8]
 800689c:	61bb      	str	r3, [r7, #24]
 800689e:	69bb      	ldr	r3, [r7, #24]
 80068a0:	085b      	lsrs	r3, r3, #1
 80068a2:	69ba      	ldr	r2, [r7, #24]
 80068a4:	4413      	add	r3, r2
 80068a6:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	6a1a      	ldr	r2, [r3, #32]
 80068ac:	69bb      	ldr	r3, [r7, #24]
 80068ae:	0a5b      	lsrs	r3, r3, #9
 80068b0:	4413      	add	r3, r2
 80068b2:	4619      	mov	r1, r3
 80068b4:	68f8      	ldr	r0, [r7, #12]
 80068b6:	f7ff fe6f 	bl	8006598 <move_window>
 80068ba:	4603      	mov	r3, r0
 80068bc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80068be:	7ffb      	ldrb	r3, [r7, #31]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	f040 80a9 	bne.w	8006a18 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80068cc:	69bb      	ldr	r3, [r7, #24]
 80068ce:	1c59      	adds	r1, r3, #1
 80068d0:	61b9      	str	r1, [r7, #24]
 80068d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068d6:	4413      	add	r3, r2
 80068d8:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80068da:	68bb      	ldr	r3, [r7, #8]
 80068dc:	f003 0301 	and.w	r3, r3, #1
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d00d      	beq.n	8006900 <put_fat+0xa4>
 80068e4:	697b      	ldr	r3, [r7, #20]
 80068e6:	781b      	ldrb	r3, [r3, #0]
 80068e8:	b25b      	sxtb	r3, r3
 80068ea:	f003 030f 	and.w	r3, r3, #15
 80068ee:	b25a      	sxtb	r2, r3
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	b2db      	uxtb	r3, r3
 80068f4:	011b      	lsls	r3, r3, #4
 80068f6:	b25b      	sxtb	r3, r3
 80068f8:	4313      	orrs	r3, r2
 80068fa:	b25b      	sxtb	r3, r3
 80068fc:	b2db      	uxtb	r3, r3
 80068fe:	e001      	b.n	8006904 <put_fat+0xa8>
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	b2db      	uxtb	r3, r3
 8006904:	697a      	ldr	r2, [r7, #20]
 8006906:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	2201      	movs	r2, #1
 800690c:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	6a1a      	ldr	r2, [r3, #32]
 8006912:	69bb      	ldr	r3, [r7, #24]
 8006914:	0a5b      	lsrs	r3, r3, #9
 8006916:	4413      	add	r3, r2
 8006918:	4619      	mov	r1, r3
 800691a:	68f8      	ldr	r0, [r7, #12]
 800691c:	f7ff fe3c 	bl	8006598 <move_window>
 8006920:	4603      	mov	r3, r0
 8006922:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006924:	7ffb      	ldrb	r3, [r7, #31]
 8006926:	2b00      	cmp	r3, #0
 8006928:	d178      	bne.n	8006a1c <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006930:	69bb      	ldr	r3, [r7, #24]
 8006932:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006936:	4413      	add	r3, r2
 8006938:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800693a:	68bb      	ldr	r3, [r7, #8]
 800693c:	f003 0301 	and.w	r3, r3, #1
 8006940:	2b00      	cmp	r3, #0
 8006942:	d003      	beq.n	800694c <put_fat+0xf0>
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	091b      	lsrs	r3, r3, #4
 8006948:	b2db      	uxtb	r3, r3
 800694a:	e00e      	b.n	800696a <put_fat+0x10e>
 800694c:	697b      	ldr	r3, [r7, #20]
 800694e:	781b      	ldrb	r3, [r3, #0]
 8006950:	b25b      	sxtb	r3, r3
 8006952:	f023 030f 	bic.w	r3, r3, #15
 8006956:	b25a      	sxtb	r2, r3
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	0a1b      	lsrs	r3, r3, #8
 800695c:	b25b      	sxtb	r3, r3
 800695e:	f003 030f 	and.w	r3, r3, #15
 8006962:	b25b      	sxtb	r3, r3
 8006964:	4313      	orrs	r3, r2
 8006966:	b25b      	sxtb	r3, r3
 8006968:	b2db      	uxtb	r3, r3
 800696a:	697a      	ldr	r2, [r7, #20]
 800696c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	2201      	movs	r2, #1
 8006972:	70da      	strb	r2, [r3, #3]
			break;
 8006974:	e057      	b.n	8006a26 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	6a1a      	ldr	r2, [r3, #32]
 800697a:	68bb      	ldr	r3, [r7, #8]
 800697c:	0a1b      	lsrs	r3, r3, #8
 800697e:	4413      	add	r3, r2
 8006980:	4619      	mov	r1, r3
 8006982:	68f8      	ldr	r0, [r7, #12]
 8006984:	f7ff fe08 	bl	8006598 <move_window>
 8006988:	4603      	mov	r3, r0
 800698a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800698c:	7ffb      	ldrb	r3, [r7, #31]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d146      	bne.n	8006a20 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006998:	68bb      	ldr	r3, [r7, #8]
 800699a:	005b      	lsls	r3, r3, #1
 800699c:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 80069a0:	4413      	add	r3, r2
 80069a2:	687a      	ldr	r2, [r7, #4]
 80069a4:	b292      	uxth	r2, r2
 80069a6:	4611      	mov	r1, r2
 80069a8:	4618      	mov	r0, r3
 80069aa:	f7ff fb80 	bl	80060ae <st_word>
			fs->wflag = 1;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	2201      	movs	r2, #1
 80069b2:	70da      	strb	r2, [r3, #3]
			break;
 80069b4:	e037      	b.n	8006a26 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	6a1a      	ldr	r2, [r3, #32]
 80069ba:	68bb      	ldr	r3, [r7, #8]
 80069bc:	09db      	lsrs	r3, r3, #7
 80069be:	4413      	add	r3, r2
 80069c0:	4619      	mov	r1, r3
 80069c2:	68f8      	ldr	r0, [r7, #12]
 80069c4:	f7ff fde8 	bl	8006598 <move_window>
 80069c8:	4603      	mov	r3, r0
 80069ca:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80069cc:	7ffb      	ldrb	r3, [r7, #31]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d128      	bne.n	8006a24 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80069de:	68bb      	ldr	r3, [r7, #8]
 80069e0:	009b      	lsls	r3, r3, #2
 80069e2:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 80069e6:	4413      	add	r3, r2
 80069e8:	4618      	mov	r0, r3
 80069ea:	f7ff fb3d 	bl	8006068 <ld_dword>
 80069ee:	4603      	mov	r3, r0
 80069f0:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80069f4:	4323      	orrs	r3, r4
 80069f6:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80069fe:	68bb      	ldr	r3, [r7, #8]
 8006a00:	009b      	lsls	r3, r3, #2
 8006a02:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8006a06:	4413      	add	r3, r2
 8006a08:	6879      	ldr	r1, [r7, #4]
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	f7ff fb6a 	bl	80060e4 <st_dword>
			fs->wflag = 1;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	2201      	movs	r2, #1
 8006a14:	70da      	strb	r2, [r3, #3]
			break;
 8006a16:	e006      	b.n	8006a26 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8006a18:	bf00      	nop
 8006a1a:	e004      	b.n	8006a26 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8006a1c:	bf00      	nop
 8006a1e:	e002      	b.n	8006a26 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8006a20:	bf00      	nop
 8006a22:	e000      	b.n	8006a26 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8006a24:	bf00      	nop
		}
	}
	return res;
 8006a26:	7ffb      	ldrb	r3, [r7, #31]
}
 8006a28:	4618      	mov	r0, r3
 8006a2a:	3724      	adds	r7, #36	@ 0x24
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	bd90      	pop	{r4, r7, pc}

08006a30 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b088      	sub	sp, #32
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	60f8      	str	r0, [r7, #12]
 8006a38:	60b9      	str	r1, [r7, #8]
 8006a3a:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8006a46:	68bb      	ldr	r3, [r7, #8]
 8006a48:	2b01      	cmp	r3, #1
 8006a4a:	d904      	bls.n	8006a56 <remove_chain+0x26>
 8006a4c:	69bb      	ldr	r3, [r7, #24]
 8006a4e:	695b      	ldr	r3, [r3, #20]
 8006a50:	68ba      	ldr	r2, [r7, #8]
 8006a52:	429a      	cmp	r2, r3
 8006a54:	d301      	bcc.n	8006a5a <remove_chain+0x2a>
 8006a56:	2302      	movs	r3, #2
 8006a58:	e04b      	b.n	8006af2 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d00c      	beq.n	8006a7a <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8006a60:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006a64:	6879      	ldr	r1, [r7, #4]
 8006a66:	69b8      	ldr	r0, [r7, #24]
 8006a68:	f7ff fef8 	bl	800685c <put_fat>
 8006a6c:	4603      	mov	r3, r0
 8006a6e:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8006a70:	7ffb      	ldrb	r3, [r7, #31]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d001      	beq.n	8006a7a <remove_chain+0x4a>
 8006a76:	7ffb      	ldrb	r3, [r7, #31]
 8006a78:	e03b      	b.n	8006af2 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8006a7a:	68b9      	ldr	r1, [r7, #8]
 8006a7c:	68f8      	ldr	r0, [r7, #12]
 8006a7e:	f7ff fe46 	bl	800670e <get_fat>
 8006a82:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8006a84:	697b      	ldr	r3, [r7, #20]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d031      	beq.n	8006aee <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8006a8a:	697b      	ldr	r3, [r7, #20]
 8006a8c:	2b01      	cmp	r3, #1
 8006a8e:	d101      	bne.n	8006a94 <remove_chain+0x64>
 8006a90:	2302      	movs	r3, #2
 8006a92:	e02e      	b.n	8006af2 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8006a94:	697b      	ldr	r3, [r7, #20]
 8006a96:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006a9a:	d101      	bne.n	8006aa0 <remove_chain+0x70>
 8006a9c:	2301      	movs	r3, #1
 8006a9e:	e028      	b.n	8006af2 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	68b9      	ldr	r1, [r7, #8]
 8006aa4:	69b8      	ldr	r0, [r7, #24]
 8006aa6:	f7ff fed9 	bl	800685c <put_fat>
 8006aaa:	4603      	mov	r3, r0
 8006aac:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8006aae:	7ffb      	ldrb	r3, [r7, #31]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d001      	beq.n	8006ab8 <remove_chain+0x88>
 8006ab4:	7ffb      	ldrb	r3, [r7, #31]
 8006ab6:	e01c      	b.n	8006af2 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8006ab8:	69bb      	ldr	r3, [r7, #24]
 8006aba:	691a      	ldr	r2, [r3, #16]
 8006abc:	69bb      	ldr	r3, [r7, #24]
 8006abe:	695b      	ldr	r3, [r3, #20]
 8006ac0:	3b02      	subs	r3, #2
 8006ac2:	429a      	cmp	r2, r3
 8006ac4:	d20b      	bcs.n	8006ade <remove_chain+0xae>
			fs->free_clst++;
 8006ac6:	69bb      	ldr	r3, [r7, #24]
 8006ac8:	691b      	ldr	r3, [r3, #16]
 8006aca:	1c5a      	adds	r2, r3, #1
 8006acc:	69bb      	ldr	r3, [r7, #24]
 8006ace:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8006ad0:	69bb      	ldr	r3, [r7, #24]
 8006ad2:	791b      	ldrb	r3, [r3, #4]
 8006ad4:	f043 0301 	orr.w	r3, r3, #1
 8006ad8:	b2da      	uxtb	r2, r3
 8006ada:	69bb      	ldr	r3, [r7, #24]
 8006adc:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8006ade:	697b      	ldr	r3, [r7, #20]
 8006ae0:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8006ae2:	69bb      	ldr	r3, [r7, #24]
 8006ae4:	695b      	ldr	r3, [r3, #20]
 8006ae6:	68ba      	ldr	r2, [r7, #8]
 8006ae8:	429a      	cmp	r2, r3
 8006aea:	d3c6      	bcc.n	8006a7a <remove_chain+0x4a>
 8006aec:	e000      	b.n	8006af0 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8006aee:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8006af0:	2300      	movs	r3, #0
}
 8006af2:	4618      	mov	r0, r3
 8006af4:	3720      	adds	r7, #32
 8006af6:	46bd      	mov	sp, r7
 8006af8:	bd80      	pop	{r7, pc}

08006afa <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8006afa:	b580      	push	{r7, lr}
 8006afc:	b088      	sub	sp, #32
 8006afe:	af00      	add	r7, sp, #0
 8006b00:	6078      	str	r0, [r7, #4]
 8006b02:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8006b0a:	683b      	ldr	r3, [r7, #0]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d10d      	bne.n	8006b2c <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8006b10:	693b      	ldr	r3, [r7, #16]
 8006b12:	68db      	ldr	r3, [r3, #12]
 8006b14:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8006b16:	69bb      	ldr	r3, [r7, #24]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d004      	beq.n	8006b26 <create_chain+0x2c>
 8006b1c:	693b      	ldr	r3, [r7, #16]
 8006b1e:	695b      	ldr	r3, [r3, #20]
 8006b20:	69ba      	ldr	r2, [r7, #24]
 8006b22:	429a      	cmp	r2, r3
 8006b24:	d31b      	bcc.n	8006b5e <create_chain+0x64>
 8006b26:	2301      	movs	r3, #1
 8006b28:	61bb      	str	r3, [r7, #24]
 8006b2a:	e018      	b.n	8006b5e <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8006b2c:	6839      	ldr	r1, [r7, #0]
 8006b2e:	6878      	ldr	r0, [r7, #4]
 8006b30:	f7ff fded 	bl	800670e <get_fat>
 8006b34:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	2b01      	cmp	r3, #1
 8006b3a:	d801      	bhi.n	8006b40 <create_chain+0x46>
 8006b3c:	2301      	movs	r3, #1
 8006b3e:	e070      	b.n	8006c22 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006b46:	d101      	bne.n	8006b4c <create_chain+0x52>
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	e06a      	b.n	8006c22 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8006b4c:	693b      	ldr	r3, [r7, #16]
 8006b4e:	695b      	ldr	r3, [r3, #20]
 8006b50:	68fa      	ldr	r2, [r7, #12]
 8006b52:	429a      	cmp	r2, r3
 8006b54:	d201      	bcs.n	8006b5a <create_chain+0x60>
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	e063      	b.n	8006c22 <create_chain+0x128>
		scl = clst;
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8006b5e:	69bb      	ldr	r3, [r7, #24]
 8006b60:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8006b62:	69fb      	ldr	r3, [r7, #28]
 8006b64:	3301      	adds	r3, #1
 8006b66:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8006b68:	693b      	ldr	r3, [r7, #16]
 8006b6a:	695b      	ldr	r3, [r3, #20]
 8006b6c:	69fa      	ldr	r2, [r7, #28]
 8006b6e:	429a      	cmp	r2, r3
 8006b70:	d307      	bcc.n	8006b82 <create_chain+0x88>
				ncl = 2;
 8006b72:	2302      	movs	r3, #2
 8006b74:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8006b76:	69fa      	ldr	r2, [r7, #28]
 8006b78:	69bb      	ldr	r3, [r7, #24]
 8006b7a:	429a      	cmp	r2, r3
 8006b7c:	d901      	bls.n	8006b82 <create_chain+0x88>
 8006b7e:	2300      	movs	r3, #0
 8006b80:	e04f      	b.n	8006c22 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8006b82:	69f9      	ldr	r1, [r7, #28]
 8006b84:	6878      	ldr	r0, [r7, #4]
 8006b86:	f7ff fdc2 	bl	800670e <get_fat>
 8006b8a:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d00e      	beq.n	8006bb0 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	2b01      	cmp	r3, #1
 8006b96:	d003      	beq.n	8006ba0 <create_chain+0xa6>
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006b9e:	d101      	bne.n	8006ba4 <create_chain+0xaa>
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	e03e      	b.n	8006c22 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8006ba4:	69fa      	ldr	r2, [r7, #28]
 8006ba6:	69bb      	ldr	r3, [r7, #24]
 8006ba8:	429a      	cmp	r2, r3
 8006baa:	d1da      	bne.n	8006b62 <create_chain+0x68>
 8006bac:	2300      	movs	r3, #0
 8006bae:	e038      	b.n	8006c22 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8006bb0:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8006bb2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006bb6:	69f9      	ldr	r1, [r7, #28]
 8006bb8:	6938      	ldr	r0, [r7, #16]
 8006bba:	f7ff fe4f 	bl	800685c <put_fat>
 8006bbe:	4603      	mov	r3, r0
 8006bc0:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8006bc2:	7dfb      	ldrb	r3, [r7, #23]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d109      	bne.n	8006bdc <create_chain+0xe2>
 8006bc8:	683b      	ldr	r3, [r7, #0]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d006      	beq.n	8006bdc <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8006bce:	69fa      	ldr	r2, [r7, #28]
 8006bd0:	6839      	ldr	r1, [r7, #0]
 8006bd2:	6938      	ldr	r0, [r7, #16]
 8006bd4:	f7ff fe42 	bl	800685c <put_fat>
 8006bd8:	4603      	mov	r3, r0
 8006bda:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8006bdc:	7dfb      	ldrb	r3, [r7, #23]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d116      	bne.n	8006c10 <create_chain+0x116>
		fs->last_clst = ncl;
 8006be2:	693b      	ldr	r3, [r7, #16]
 8006be4:	69fa      	ldr	r2, [r7, #28]
 8006be6:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8006be8:	693b      	ldr	r3, [r7, #16]
 8006bea:	691a      	ldr	r2, [r3, #16]
 8006bec:	693b      	ldr	r3, [r7, #16]
 8006bee:	695b      	ldr	r3, [r3, #20]
 8006bf0:	3b02      	subs	r3, #2
 8006bf2:	429a      	cmp	r2, r3
 8006bf4:	d804      	bhi.n	8006c00 <create_chain+0x106>
 8006bf6:	693b      	ldr	r3, [r7, #16]
 8006bf8:	691b      	ldr	r3, [r3, #16]
 8006bfa:	1e5a      	subs	r2, r3, #1
 8006bfc:	693b      	ldr	r3, [r7, #16]
 8006bfe:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8006c00:	693b      	ldr	r3, [r7, #16]
 8006c02:	791b      	ldrb	r3, [r3, #4]
 8006c04:	f043 0301 	orr.w	r3, r3, #1
 8006c08:	b2da      	uxtb	r2, r3
 8006c0a:	693b      	ldr	r3, [r7, #16]
 8006c0c:	711a      	strb	r2, [r3, #4]
 8006c0e:	e007      	b.n	8006c20 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8006c10:	7dfb      	ldrb	r3, [r7, #23]
 8006c12:	2b01      	cmp	r3, #1
 8006c14:	d102      	bne.n	8006c1c <create_chain+0x122>
 8006c16:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006c1a:	e000      	b.n	8006c1e <create_chain+0x124>
 8006c1c:	2301      	movs	r3, #1
 8006c1e:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8006c20:	69fb      	ldr	r3, [r7, #28]
}
 8006c22:	4618      	mov	r0, r3
 8006c24:	3720      	adds	r7, #32
 8006c26:	46bd      	mov	sp, r7
 8006c28:	bd80      	pop	{r7, pc}

08006c2a <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8006c2a:	b480      	push	{r7}
 8006c2c:	b087      	sub	sp, #28
 8006c2e:	af00      	add	r7, sp, #0
 8006c30:	6078      	str	r0, [r7, #4]
 8006c32:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c3e:	3304      	adds	r3, #4
 8006c40:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	0a5b      	lsrs	r3, r3, #9
 8006c46:	68fa      	ldr	r2, [r7, #12]
 8006c48:	8952      	ldrh	r2, [r2, #10]
 8006c4a:	fbb3 f3f2 	udiv	r3, r3, r2
 8006c4e:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006c50:	693b      	ldr	r3, [r7, #16]
 8006c52:	1d1a      	adds	r2, r3, #4
 8006c54:	613a      	str	r2, [r7, #16]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8006c5a:	68bb      	ldr	r3, [r7, #8]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d101      	bne.n	8006c64 <clmt_clust+0x3a>
 8006c60:	2300      	movs	r3, #0
 8006c62:	e010      	b.n	8006c86 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8006c64:	697a      	ldr	r2, [r7, #20]
 8006c66:	68bb      	ldr	r3, [r7, #8]
 8006c68:	429a      	cmp	r2, r3
 8006c6a:	d307      	bcc.n	8006c7c <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8006c6c:	697a      	ldr	r2, [r7, #20]
 8006c6e:	68bb      	ldr	r3, [r7, #8]
 8006c70:	1ad3      	subs	r3, r2, r3
 8006c72:	617b      	str	r3, [r7, #20]
 8006c74:	693b      	ldr	r3, [r7, #16]
 8006c76:	3304      	adds	r3, #4
 8006c78:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006c7a:	e7e9      	b.n	8006c50 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8006c7c:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8006c7e:	693b      	ldr	r3, [r7, #16]
 8006c80:	681a      	ldr	r2, [r3, #0]
 8006c82:	697b      	ldr	r3, [r7, #20]
 8006c84:	4413      	add	r3, r2
}
 8006c86:	4618      	mov	r0, r3
 8006c88:	371c      	adds	r7, #28
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c90:	4770      	bx	lr

08006c92 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8006c92:	b580      	push	{r7, lr}
 8006c94:	b086      	sub	sp, #24
 8006c96:	af00      	add	r7, sp, #0
 8006c98:	6078      	str	r0, [r7, #4]
 8006c9a:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006ca8:	d204      	bcs.n	8006cb4 <dir_sdi+0x22>
 8006caa:	683b      	ldr	r3, [r7, #0]
 8006cac:	f003 031f 	and.w	r3, r3, #31
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d001      	beq.n	8006cb8 <dir_sdi+0x26>
		return FR_INT_ERR;
 8006cb4:	2302      	movs	r3, #2
 8006cb6:	e063      	b.n	8006d80 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	683a      	ldr	r2, [r7, #0]
 8006cbc:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	689b      	ldr	r3, [r3, #8]
 8006cc2:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8006cc4:	697b      	ldr	r3, [r7, #20]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d106      	bne.n	8006cd8 <dir_sdi+0x46>
 8006cca:	693b      	ldr	r3, [r7, #16]
 8006ccc:	781b      	ldrb	r3, [r3, #0]
 8006cce:	2b02      	cmp	r3, #2
 8006cd0:	d902      	bls.n	8006cd8 <dir_sdi+0x46>
		clst = fs->dirbase;
 8006cd2:	693b      	ldr	r3, [r7, #16]
 8006cd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cd6:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8006cd8:	697b      	ldr	r3, [r7, #20]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d10c      	bne.n	8006cf8 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	095b      	lsrs	r3, r3, #5
 8006ce2:	693a      	ldr	r2, [r7, #16]
 8006ce4:	8912      	ldrh	r2, [r2, #8]
 8006ce6:	4293      	cmp	r3, r2
 8006ce8:	d301      	bcc.n	8006cee <dir_sdi+0x5c>
 8006cea:	2302      	movs	r3, #2
 8006cec:	e048      	b.n	8006d80 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8006cee:	693b      	ldr	r3, [r7, #16]
 8006cf0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	61da      	str	r2, [r3, #28]
 8006cf6:	e029      	b.n	8006d4c <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8006cf8:	693b      	ldr	r3, [r7, #16]
 8006cfa:	895b      	ldrh	r3, [r3, #10]
 8006cfc:	025b      	lsls	r3, r3, #9
 8006cfe:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006d00:	e019      	b.n	8006d36 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	6979      	ldr	r1, [r7, #20]
 8006d06:	4618      	mov	r0, r3
 8006d08:	f7ff fd01 	bl	800670e <get_fat>
 8006d0c:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006d0e:	697b      	ldr	r3, [r7, #20]
 8006d10:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006d14:	d101      	bne.n	8006d1a <dir_sdi+0x88>
 8006d16:	2301      	movs	r3, #1
 8006d18:	e032      	b.n	8006d80 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8006d1a:	697b      	ldr	r3, [r7, #20]
 8006d1c:	2b01      	cmp	r3, #1
 8006d1e:	d904      	bls.n	8006d2a <dir_sdi+0x98>
 8006d20:	693b      	ldr	r3, [r7, #16]
 8006d22:	695b      	ldr	r3, [r3, #20]
 8006d24:	697a      	ldr	r2, [r7, #20]
 8006d26:	429a      	cmp	r2, r3
 8006d28:	d301      	bcc.n	8006d2e <dir_sdi+0x9c>
 8006d2a:	2302      	movs	r3, #2
 8006d2c:	e028      	b.n	8006d80 <dir_sdi+0xee>
			ofs -= csz;
 8006d2e:	683a      	ldr	r2, [r7, #0]
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	1ad3      	subs	r3, r2, r3
 8006d34:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006d36:	683a      	ldr	r2, [r7, #0]
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	429a      	cmp	r2, r3
 8006d3c:	d2e1      	bcs.n	8006d02 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8006d3e:	6979      	ldr	r1, [r7, #20]
 8006d40:	6938      	ldr	r0, [r7, #16]
 8006d42:	f7ff fcc5 	bl	80066d0 <clust2sect>
 8006d46:	4602      	mov	r2, r0
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	697a      	ldr	r2, [r7, #20]
 8006d50:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	69db      	ldr	r3, [r3, #28]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d101      	bne.n	8006d5e <dir_sdi+0xcc>
 8006d5a:	2302      	movs	r3, #2
 8006d5c:	e010      	b.n	8006d80 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	69da      	ldr	r2, [r3, #28]
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	0a5b      	lsrs	r3, r3, #9
 8006d66:	441a      	add	r2, r3
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8006d6c:	693b      	ldr	r3, [r7, #16]
 8006d6e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006d72:	683b      	ldr	r3, [r7, #0]
 8006d74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d78:	441a      	add	r2, r3
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006d7e:	2300      	movs	r3, #0
}
 8006d80:	4618      	mov	r0, r3
 8006d82:	3718      	adds	r7, #24
 8006d84:	46bd      	mov	sp, r7
 8006d86:	bd80      	pop	{r7, pc}

08006d88 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b086      	sub	sp, #24
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
 8006d90:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	695b      	ldr	r3, [r3, #20]
 8006d9c:	3320      	adds	r3, #32
 8006d9e:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	69db      	ldr	r3, [r3, #28]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d003      	beq.n	8006db0 <dir_next+0x28>
 8006da8:	68bb      	ldr	r3, [r7, #8]
 8006daa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006dae:	d301      	bcc.n	8006db4 <dir_next+0x2c>
 8006db0:	2304      	movs	r3, #4
 8006db2:	e0aa      	b.n	8006f0a <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8006db4:	68bb      	ldr	r3, [r7, #8]
 8006db6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	f040 8098 	bne.w	8006ef0 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	69db      	ldr	r3, [r3, #28]
 8006dc4:	1c5a      	adds	r2, r3, #1
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	699b      	ldr	r3, [r3, #24]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d10b      	bne.n	8006dea <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8006dd2:	68bb      	ldr	r3, [r7, #8]
 8006dd4:	095b      	lsrs	r3, r3, #5
 8006dd6:	68fa      	ldr	r2, [r7, #12]
 8006dd8:	8912      	ldrh	r2, [r2, #8]
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	f0c0 8088 	bcc.w	8006ef0 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2200      	movs	r2, #0
 8006de4:	61da      	str	r2, [r3, #28]
 8006de6:	2304      	movs	r3, #4
 8006de8:	e08f      	b.n	8006f0a <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8006dea:	68bb      	ldr	r3, [r7, #8]
 8006dec:	0a5b      	lsrs	r3, r3, #9
 8006dee:	68fa      	ldr	r2, [r7, #12]
 8006df0:	8952      	ldrh	r2, [r2, #10]
 8006df2:	3a01      	subs	r2, #1
 8006df4:	4013      	ands	r3, r2
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d17a      	bne.n	8006ef0 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8006dfa:	687a      	ldr	r2, [r7, #4]
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	699b      	ldr	r3, [r3, #24]
 8006e00:	4619      	mov	r1, r3
 8006e02:	4610      	mov	r0, r2
 8006e04:	f7ff fc83 	bl	800670e <get_fat>
 8006e08:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8006e0a:	697b      	ldr	r3, [r7, #20]
 8006e0c:	2b01      	cmp	r3, #1
 8006e0e:	d801      	bhi.n	8006e14 <dir_next+0x8c>
 8006e10:	2302      	movs	r3, #2
 8006e12:	e07a      	b.n	8006f0a <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8006e14:	697b      	ldr	r3, [r7, #20]
 8006e16:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006e1a:	d101      	bne.n	8006e20 <dir_next+0x98>
 8006e1c:	2301      	movs	r3, #1
 8006e1e:	e074      	b.n	8006f0a <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	695b      	ldr	r3, [r3, #20]
 8006e24:	697a      	ldr	r2, [r7, #20]
 8006e26:	429a      	cmp	r2, r3
 8006e28:	d358      	bcc.n	8006edc <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8006e2a:	683b      	ldr	r3, [r7, #0]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d104      	bne.n	8006e3a <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2200      	movs	r2, #0
 8006e34:	61da      	str	r2, [r3, #28]
 8006e36:	2304      	movs	r3, #4
 8006e38:	e067      	b.n	8006f0a <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8006e3a:	687a      	ldr	r2, [r7, #4]
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	699b      	ldr	r3, [r3, #24]
 8006e40:	4619      	mov	r1, r3
 8006e42:	4610      	mov	r0, r2
 8006e44:	f7ff fe59 	bl	8006afa <create_chain>
 8006e48:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8006e4a:	697b      	ldr	r3, [r7, #20]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d101      	bne.n	8006e54 <dir_next+0xcc>
 8006e50:	2307      	movs	r3, #7
 8006e52:	e05a      	b.n	8006f0a <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8006e54:	697b      	ldr	r3, [r7, #20]
 8006e56:	2b01      	cmp	r3, #1
 8006e58:	d101      	bne.n	8006e5e <dir_next+0xd6>
 8006e5a:	2302      	movs	r3, #2
 8006e5c:	e055      	b.n	8006f0a <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006e5e:	697b      	ldr	r3, [r7, #20]
 8006e60:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006e64:	d101      	bne.n	8006e6a <dir_next+0xe2>
 8006e66:	2301      	movs	r3, #1
 8006e68:	e04f      	b.n	8006f0a <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8006e6a:	68f8      	ldr	r0, [r7, #12]
 8006e6c:	f7ff fb50 	bl	8006510 <sync_window>
 8006e70:	4603      	mov	r3, r0
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d001      	beq.n	8006e7a <dir_next+0xf2>
 8006e76:	2301      	movs	r3, #1
 8006e78:	e047      	b.n	8006f0a <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	3330      	adds	r3, #48	@ 0x30
 8006e7e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006e82:	2100      	movs	r1, #0
 8006e84:	4618      	mov	r0, r3
 8006e86:	f7ff f97a 	bl	800617e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	613b      	str	r3, [r7, #16]
 8006e8e:	6979      	ldr	r1, [r7, #20]
 8006e90:	68f8      	ldr	r0, [r7, #12]
 8006e92:	f7ff fc1d 	bl	80066d0 <clust2sect>
 8006e96:	4602      	mov	r2, r0
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	62da      	str	r2, [r3, #44]	@ 0x2c
 8006e9c:	e012      	b.n	8006ec4 <dir_next+0x13c>
						fs->wflag = 1;
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	2201      	movs	r2, #1
 8006ea2:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8006ea4:	68f8      	ldr	r0, [r7, #12]
 8006ea6:	f7ff fb33 	bl	8006510 <sync_window>
 8006eaa:	4603      	mov	r3, r0
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d001      	beq.n	8006eb4 <dir_next+0x12c>
 8006eb0:	2301      	movs	r3, #1
 8006eb2:	e02a      	b.n	8006f0a <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006eb4:	693b      	ldr	r3, [r7, #16]
 8006eb6:	3301      	adds	r3, #1
 8006eb8:	613b      	str	r3, [r7, #16]
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ebe:	1c5a      	adds	r2, r3, #1
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	62da      	str	r2, [r3, #44]	@ 0x2c
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	895b      	ldrh	r3, [r3, #10]
 8006ec8:	461a      	mov	r2, r3
 8006eca:	693b      	ldr	r3, [r7, #16]
 8006ecc:	4293      	cmp	r3, r2
 8006ece:	d3e6      	bcc.n	8006e9e <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ed4:	693b      	ldr	r3, [r7, #16]
 8006ed6:	1ad2      	subs	r2, r2, r3
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	697a      	ldr	r2, [r7, #20]
 8006ee0:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8006ee2:	6979      	ldr	r1, [r7, #20]
 8006ee4:	68f8      	ldr	r0, [r7, #12]
 8006ee6:	f7ff fbf3 	bl	80066d0 <clust2sect>
 8006eea:	4602      	mov	r2, r0
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	68ba      	ldr	r2, [r7, #8]
 8006ef4:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006efc:	68bb      	ldr	r3, [r7, #8]
 8006efe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f02:	441a      	add	r2, r3
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006f08:	2300      	movs	r3, #0
}
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	3718      	adds	r7, #24
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	bd80      	pop	{r7, pc}

08006f12 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8006f12:	b580      	push	{r7, lr}
 8006f14:	b086      	sub	sp, #24
 8006f16:	af00      	add	r7, sp, #0
 8006f18:	6078      	str	r0, [r7, #4]
 8006f1a:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8006f22:	2100      	movs	r1, #0
 8006f24:	6878      	ldr	r0, [r7, #4]
 8006f26:	f7ff feb4 	bl	8006c92 <dir_sdi>
 8006f2a:	4603      	mov	r3, r0
 8006f2c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8006f2e:	7dfb      	ldrb	r3, [r7, #23]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d12b      	bne.n	8006f8c <dir_alloc+0x7a>
		n = 0;
 8006f34:	2300      	movs	r3, #0
 8006f36:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	69db      	ldr	r3, [r3, #28]
 8006f3c:	4619      	mov	r1, r3
 8006f3e:	68f8      	ldr	r0, [r7, #12]
 8006f40:	f7ff fb2a 	bl	8006598 <move_window>
 8006f44:	4603      	mov	r3, r0
 8006f46:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8006f48:	7dfb      	ldrb	r3, [r7, #23]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d11d      	bne.n	8006f8a <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	6a1b      	ldr	r3, [r3, #32]
 8006f52:	781b      	ldrb	r3, [r3, #0]
 8006f54:	2be5      	cmp	r3, #229	@ 0xe5
 8006f56:	d004      	beq.n	8006f62 <dir_alloc+0x50>
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	6a1b      	ldr	r3, [r3, #32]
 8006f5c:	781b      	ldrb	r3, [r3, #0]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d107      	bne.n	8006f72 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8006f62:	693b      	ldr	r3, [r7, #16]
 8006f64:	3301      	adds	r3, #1
 8006f66:	613b      	str	r3, [r7, #16]
 8006f68:	693a      	ldr	r2, [r7, #16]
 8006f6a:	683b      	ldr	r3, [r7, #0]
 8006f6c:	429a      	cmp	r2, r3
 8006f6e:	d102      	bne.n	8006f76 <dir_alloc+0x64>
 8006f70:	e00c      	b.n	8006f8c <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8006f72:	2300      	movs	r3, #0
 8006f74:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8006f76:	2101      	movs	r1, #1
 8006f78:	6878      	ldr	r0, [r7, #4]
 8006f7a:	f7ff ff05 	bl	8006d88 <dir_next>
 8006f7e:	4603      	mov	r3, r0
 8006f80:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8006f82:	7dfb      	ldrb	r3, [r7, #23]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d0d7      	beq.n	8006f38 <dir_alloc+0x26>
 8006f88:	e000      	b.n	8006f8c <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8006f8a:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8006f8c:	7dfb      	ldrb	r3, [r7, #23]
 8006f8e:	2b04      	cmp	r3, #4
 8006f90:	d101      	bne.n	8006f96 <dir_alloc+0x84>
 8006f92:	2307      	movs	r3, #7
 8006f94:	75fb      	strb	r3, [r7, #23]
	return res;
 8006f96:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f98:	4618      	mov	r0, r3
 8006f9a:	3718      	adds	r7, #24
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	bd80      	pop	{r7, pc}

08006fa0 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	b084      	sub	sp, #16
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]
 8006fa8:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8006faa:	683b      	ldr	r3, [r7, #0]
 8006fac:	331a      	adds	r3, #26
 8006fae:	4618      	mov	r0, r3
 8006fb0:	f7ff f842 	bl	8006038 <ld_word>
 8006fb4:	4603      	mov	r3, r0
 8006fb6:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	781b      	ldrb	r3, [r3, #0]
 8006fbc:	2b03      	cmp	r3, #3
 8006fbe:	d109      	bne.n	8006fd4 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	3314      	adds	r3, #20
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	f7ff f837 	bl	8006038 <ld_word>
 8006fca:	4603      	mov	r3, r0
 8006fcc:	041b      	lsls	r3, r3, #16
 8006fce:	68fa      	ldr	r2, [r7, #12]
 8006fd0:	4313      	orrs	r3, r2
 8006fd2:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8006fd4:	68fb      	ldr	r3, [r7, #12]
}
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	3710      	adds	r7, #16
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	bd80      	pop	{r7, pc}

08006fde <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8006fde:	b580      	push	{r7, lr}
 8006fe0:	b084      	sub	sp, #16
 8006fe2:	af00      	add	r7, sp, #0
 8006fe4:	60f8      	str	r0, [r7, #12]
 8006fe6:	60b9      	str	r1, [r7, #8]
 8006fe8:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8006fea:	68bb      	ldr	r3, [r7, #8]
 8006fec:	331a      	adds	r3, #26
 8006fee:	687a      	ldr	r2, [r7, #4]
 8006ff0:	b292      	uxth	r2, r2
 8006ff2:	4611      	mov	r1, r2
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	f7ff f85a 	bl	80060ae <st_word>
	if (fs->fs_type == FS_FAT32) {
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	781b      	ldrb	r3, [r3, #0]
 8006ffe:	2b03      	cmp	r3, #3
 8007000:	d109      	bne.n	8007016 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8007002:	68bb      	ldr	r3, [r7, #8]
 8007004:	f103 0214 	add.w	r2, r3, #20
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	0c1b      	lsrs	r3, r3, #16
 800700c:	b29b      	uxth	r3, r3
 800700e:	4619      	mov	r1, r3
 8007010:	4610      	mov	r0, r2
 8007012:	f7ff f84c 	bl	80060ae <st_word>
	}
}
 8007016:	bf00      	nop
 8007018:	3710      	adds	r7, #16
 800701a:	46bd      	mov	sp, r7
 800701c:	bd80      	pop	{r7, pc}

0800701e <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800701e:	b580      	push	{r7, lr}
 8007020:	b086      	sub	sp, #24
 8007022:	af00      	add	r7, sp, #0
 8007024:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800702c:	2100      	movs	r1, #0
 800702e:	6878      	ldr	r0, [r7, #4]
 8007030:	f7ff fe2f 	bl	8006c92 <dir_sdi>
 8007034:	4603      	mov	r3, r0
 8007036:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8007038:	7dfb      	ldrb	r3, [r7, #23]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d001      	beq.n	8007042 <dir_find+0x24>
 800703e:	7dfb      	ldrb	r3, [r7, #23]
 8007040:	e03e      	b.n	80070c0 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	69db      	ldr	r3, [r3, #28]
 8007046:	4619      	mov	r1, r3
 8007048:	6938      	ldr	r0, [r7, #16]
 800704a:	f7ff faa5 	bl	8006598 <move_window>
 800704e:	4603      	mov	r3, r0
 8007050:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8007052:	7dfb      	ldrb	r3, [r7, #23]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d12f      	bne.n	80070b8 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	6a1b      	ldr	r3, [r3, #32]
 800705c:	781b      	ldrb	r3, [r3, #0]
 800705e:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8007060:	7bfb      	ldrb	r3, [r7, #15]
 8007062:	2b00      	cmp	r3, #0
 8007064:	d102      	bne.n	800706c <dir_find+0x4e>
 8007066:	2304      	movs	r3, #4
 8007068:	75fb      	strb	r3, [r7, #23]
 800706a:	e028      	b.n	80070be <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	6a1b      	ldr	r3, [r3, #32]
 8007070:	330b      	adds	r3, #11
 8007072:	781b      	ldrb	r3, [r3, #0]
 8007074:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007078:	b2da      	uxtb	r2, r3
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	6a1b      	ldr	r3, [r3, #32]
 8007082:	330b      	adds	r3, #11
 8007084:	781b      	ldrb	r3, [r3, #0]
 8007086:	f003 0308 	and.w	r3, r3, #8
 800708a:	2b00      	cmp	r3, #0
 800708c:	d10a      	bne.n	80070a4 <dir_find+0x86>
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	6a18      	ldr	r0, [r3, #32]
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	3324      	adds	r3, #36	@ 0x24
 8007096:	220b      	movs	r2, #11
 8007098:	4619      	mov	r1, r3
 800709a:	f7ff f88b 	bl	80061b4 <mem_cmp>
 800709e:	4603      	mov	r3, r0
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d00b      	beq.n	80070bc <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80070a4:	2100      	movs	r1, #0
 80070a6:	6878      	ldr	r0, [r7, #4]
 80070a8:	f7ff fe6e 	bl	8006d88 <dir_next>
 80070ac:	4603      	mov	r3, r0
 80070ae:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80070b0:	7dfb      	ldrb	r3, [r7, #23]
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d0c5      	beq.n	8007042 <dir_find+0x24>
 80070b6:	e002      	b.n	80070be <dir_find+0xa0>
		if (res != FR_OK) break;
 80070b8:	bf00      	nop
 80070ba:	e000      	b.n	80070be <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80070bc:	bf00      	nop

	return res;
 80070be:	7dfb      	ldrb	r3, [r7, #23]
}
 80070c0:	4618      	mov	r0, r3
 80070c2:	3718      	adds	r7, #24
 80070c4:	46bd      	mov	sp, r7
 80070c6:	bd80      	pop	{r7, pc}

080070c8 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b084      	sub	sp, #16
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80070d6:	2101      	movs	r1, #1
 80070d8:	6878      	ldr	r0, [r7, #4]
 80070da:	f7ff ff1a 	bl	8006f12 <dir_alloc>
 80070de:	4603      	mov	r3, r0
 80070e0:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80070e2:	7bfb      	ldrb	r3, [r7, #15]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d11c      	bne.n	8007122 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	69db      	ldr	r3, [r3, #28]
 80070ec:	4619      	mov	r1, r3
 80070ee:	68b8      	ldr	r0, [r7, #8]
 80070f0:	f7ff fa52 	bl	8006598 <move_window>
 80070f4:	4603      	mov	r3, r0
 80070f6:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80070f8:	7bfb      	ldrb	r3, [r7, #15]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d111      	bne.n	8007122 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	6a1b      	ldr	r3, [r3, #32]
 8007102:	2220      	movs	r2, #32
 8007104:	2100      	movs	r1, #0
 8007106:	4618      	mov	r0, r3
 8007108:	f7ff f839 	bl	800617e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	6a18      	ldr	r0, [r3, #32]
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	3324      	adds	r3, #36	@ 0x24
 8007114:	220b      	movs	r2, #11
 8007116:	4619      	mov	r1, r3
 8007118:	f7ff f810 	bl	800613c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800711c:	68bb      	ldr	r3, [r7, #8]
 800711e:	2201      	movs	r2, #1
 8007120:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8007122:	7bfb      	ldrb	r3, [r7, #15]
}
 8007124:	4618      	mov	r0, r3
 8007126:	3710      	adds	r7, #16
 8007128:	46bd      	mov	sp, r7
 800712a:	bd80      	pop	{r7, pc}

0800712c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800712c:	b580      	push	{r7, lr}
 800712e:	b088      	sub	sp, #32
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]
 8007134:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8007136:	683b      	ldr	r3, [r7, #0]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	60fb      	str	r3, [r7, #12]
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	3324      	adds	r3, #36	@ 0x24
 8007140:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8007142:	220b      	movs	r2, #11
 8007144:	2120      	movs	r1, #32
 8007146:	68b8      	ldr	r0, [r7, #8]
 8007148:	f7ff f819 	bl	800617e <mem_set>
	si = i = 0; ni = 8;
 800714c:	2300      	movs	r3, #0
 800714e:	613b      	str	r3, [r7, #16]
 8007150:	693b      	ldr	r3, [r7, #16]
 8007152:	61fb      	str	r3, [r7, #28]
 8007154:	2308      	movs	r3, #8
 8007156:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8007158:	69fb      	ldr	r3, [r7, #28]
 800715a:	1c5a      	adds	r2, r3, #1
 800715c:	61fa      	str	r2, [r7, #28]
 800715e:	68fa      	ldr	r2, [r7, #12]
 8007160:	4413      	add	r3, r2
 8007162:	781b      	ldrb	r3, [r3, #0]
 8007164:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8007166:	7efb      	ldrb	r3, [r7, #27]
 8007168:	2b20      	cmp	r3, #32
 800716a:	d94e      	bls.n	800720a <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800716c:	7efb      	ldrb	r3, [r7, #27]
 800716e:	2b2f      	cmp	r3, #47	@ 0x2f
 8007170:	d006      	beq.n	8007180 <create_name+0x54>
 8007172:	7efb      	ldrb	r3, [r7, #27]
 8007174:	2b5c      	cmp	r3, #92	@ 0x5c
 8007176:	d110      	bne.n	800719a <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8007178:	e002      	b.n	8007180 <create_name+0x54>
 800717a:	69fb      	ldr	r3, [r7, #28]
 800717c:	3301      	adds	r3, #1
 800717e:	61fb      	str	r3, [r7, #28]
 8007180:	68fa      	ldr	r2, [r7, #12]
 8007182:	69fb      	ldr	r3, [r7, #28]
 8007184:	4413      	add	r3, r2
 8007186:	781b      	ldrb	r3, [r3, #0]
 8007188:	2b2f      	cmp	r3, #47	@ 0x2f
 800718a:	d0f6      	beq.n	800717a <create_name+0x4e>
 800718c:	68fa      	ldr	r2, [r7, #12]
 800718e:	69fb      	ldr	r3, [r7, #28]
 8007190:	4413      	add	r3, r2
 8007192:	781b      	ldrb	r3, [r3, #0]
 8007194:	2b5c      	cmp	r3, #92	@ 0x5c
 8007196:	d0f0      	beq.n	800717a <create_name+0x4e>
			break;
 8007198:	e038      	b.n	800720c <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800719a:	7efb      	ldrb	r3, [r7, #27]
 800719c:	2b2e      	cmp	r3, #46	@ 0x2e
 800719e:	d003      	beq.n	80071a8 <create_name+0x7c>
 80071a0:	693a      	ldr	r2, [r7, #16]
 80071a2:	697b      	ldr	r3, [r7, #20]
 80071a4:	429a      	cmp	r2, r3
 80071a6:	d30c      	bcc.n	80071c2 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 80071a8:	697b      	ldr	r3, [r7, #20]
 80071aa:	2b0b      	cmp	r3, #11
 80071ac:	d002      	beq.n	80071b4 <create_name+0x88>
 80071ae:	7efb      	ldrb	r3, [r7, #27]
 80071b0:	2b2e      	cmp	r3, #46	@ 0x2e
 80071b2:	d001      	beq.n	80071b8 <create_name+0x8c>
 80071b4:	2306      	movs	r3, #6
 80071b6:	e044      	b.n	8007242 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 80071b8:	2308      	movs	r3, #8
 80071ba:	613b      	str	r3, [r7, #16]
 80071bc:	230b      	movs	r3, #11
 80071be:	617b      	str	r3, [r7, #20]
			continue;
 80071c0:	e022      	b.n	8007208 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 80071c2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	da04      	bge.n	80071d4 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80071ca:	7efb      	ldrb	r3, [r7, #27]
 80071cc:	3b80      	subs	r3, #128	@ 0x80
 80071ce:	4a1f      	ldr	r2, [pc, #124]	@ (800724c <create_name+0x120>)
 80071d0:	5cd3      	ldrb	r3, [r2, r3]
 80071d2:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 80071d4:	7efb      	ldrb	r3, [r7, #27]
 80071d6:	4619      	mov	r1, r3
 80071d8:	481d      	ldr	r0, [pc, #116]	@ (8007250 <create_name+0x124>)
 80071da:	f7ff f812 	bl	8006202 <chk_chr>
 80071de:	4603      	mov	r3, r0
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d001      	beq.n	80071e8 <create_name+0xbc>
 80071e4:	2306      	movs	r3, #6
 80071e6:	e02c      	b.n	8007242 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 80071e8:	7efb      	ldrb	r3, [r7, #27]
 80071ea:	2b60      	cmp	r3, #96	@ 0x60
 80071ec:	d905      	bls.n	80071fa <create_name+0xce>
 80071ee:	7efb      	ldrb	r3, [r7, #27]
 80071f0:	2b7a      	cmp	r3, #122	@ 0x7a
 80071f2:	d802      	bhi.n	80071fa <create_name+0xce>
 80071f4:	7efb      	ldrb	r3, [r7, #27]
 80071f6:	3b20      	subs	r3, #32
 80071f8:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 80071fa:	693b      	ldr	r3, [r7, #16]
 80071fc:	1c5a      	adds	r2, r3, #1
 80071fe:	613a      	str	r2, [r7, #16]
 8007200:	68ba      	ldr	r2, [r7, #8]
 8007202:	4413      	add	r3, r2
 8007204:	7efa      	ldrb	r2, [r7, #27]
 8007206:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8007208:	e7a6      	b.n	8007158 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800720a:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800720c:	68fa      	ldr	r2, [r7, #12]
 800720e:	69fb      	ldr	r3, [r7, #28]
 8007210:	441a      	add	r2, r3
 8007212:	683b      	ldr	r3, [r7, #0]
 8007214:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8007216:	693b      	ldr	r3, [r7, #16]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d101      	bne.n	8007220 <create_name+0xf4>
 800721c:	2306      	movs	r3, #6
 800721e:	e010      	b.n	8007242 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8007220:	68bb      	ldr	r3, [r7, #8]
 8007222:	781b      	ldrb	r3, [r3, #0]
 8007224:	2be5      	cmp	r3, #229	@ 0xe5
 8007226:	d102      	bne.n	800722e <create_name+0x102>
 8007228:	68bb      	ldr	r3, [r7, #8]
 800722a:	2205      	movs	r2, #5
 800722c:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800722e:	7efb      	ldrb	r3, [r7, #27]
 8007230:	2b20      	cmp	r3, #32
 8007232:	d801      	bhi.n	8007238 <create_name+0x10c>
 8007234:	2204      	movs	r2, #4
 8007236:	e000      	b.n	800723a <create_name+0x10e>
 8007238:	2200      	movs	r2, #0
 800723a:	68bb      	ldr	r3, [r7, #8]
 800723c:	330b      	adds	r3, #11
 800723e:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8007240:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8007242:	4618      	mov	r0, r3
 8007244:	3720      	adds	r7, #32
 8007246:	46bd      	mov	sp, r7
 8007248:	bd80      	pop	{r7, pc}
 800724a:	bf00      	nop
 800724c:	080093bc 	.word	0x080093bc
 8007250:	08009358 	.word	0x08009358

08007254 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8007254:	b580      	push	{r7, lr}
 8007256:	b086      	sub	sp, #24
 8007258:	af00      	add	r7, sp, #0
 800725a:	6078      	str	r0, [r7, #4]
 800725c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8007262:	693b      	ldr	r3, [r7, #16]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8007268:	e002      	b.n	8007270 <follow_path+0x1c>
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	3301      	adds	r3, #1
 800726e:	603b      	str	r3, [r7, #0]
 8007270:	683b      	ldr	r3, [r7, #0]
 8007272:	781b      	ldrb	r3, [r3, #0]
 8007274:	2b2f      	cmp	r3, #47	@ 0x2f
 8007276:	d0f8      	beq.n	800726a <follow_path+0x16>
 8007278:	683b      	ldr	r3, [r7, #0]
 800727a:	781b      	ldrb	r3, [r3, #0]
 800727c:	2b5c      	cmp	r3, #92	@ 0x5c
 800727e:	d0f4      	beq.n	800726a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8007280:	693b      	ldr	r3, [r7, #16]
 8007282:	2200      	movs	r2, #0
 8007284:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8007286:	683b      	ldr	r3, [r7, #0]
 8007288:	781b      	ldrb	r3, [r3, #0]
 800728a:	2b1f      	cmp	r3, #31
 800728c:	d80a      	bhi.n	80072a4 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	2280      	movs	r2, #128	@ 0x80
 8007292:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 8007296:	2100      	movs	r1, #0
 8007298:	6878      	ldr	r0, [r7, #4]
 800729a:	f7ff fcfa 	bl	8006c92 <dir_sdi>
 800729e:	4603      	mov	r3, r0
 80072a0:	75fb      	strb	r3, [r7, #23]
 80072a2:	e043      	b.n	800732c <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80072a4:	463b      	mov	r3, r7
 80072a6:	4619      	mov	r1, r3
 80072a8:	6878      	ldr	r0, [r7, #4]
 80072aa:	f7ff ff3f 	bl	800712c <create_name>
 80072ae:	4603      	mov	r3, r0
 80072b0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80072b2:	7dfb      	ldrb	r3, [r7, #23]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d134      	bne.n	8007322 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 80072b8:	6878      	ldr	r0, [r7, #4]
 80072ba:	f7ff feb0 	bl	800701e <dir_find>
 80072be:	4603      	mov	r3, r0
 80072c0:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80072c8:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80072ca:	7dfb      	ldrb	r3, [r7, #23]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d00a      	beq.n	80072e6 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80072d0:	7dfb      	ldrb	r3, [r7, #23]
 80072d2:	2b04      	cmp	r3, #4
 80072d4:	d127      	bne.n	8007326 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80072d6:	7afb      	ldrb	r3, [r7, #11]
 80072d8:	f003 0304 	and.w	r3, r3, #4
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d122      	bne.n	8007326 <follow_path+0xd2>
 80072e0:	2305      	movs	r3, #5
 80072e2:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80072e4:	e01f      	b.n	8007326 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80072e6:	7afb      	ldrb	r3, [r7, #11]
 80072e8:	f003 0304 	and.w	r3, r3, #4
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d11c      	bne.n	800732a <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80072f0:	693b      	ldr	r3, [r7, #16]
 80072f2:	799b      	ldrb	r3, [r3, #6]
 80072f4:	f003 0310 	and.w	r3, r3, #16
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d102      	bne.n	8007302 <follow_path+0xae>
				res = FR_NO_PATH; break;
 80072fc:	2305      	movs	r3, #5
 80072fe:	75fb      	strb	r3, [r7, #23]
 8007300:	e014      	b.n	800732c <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	695b      	ldr	r3, [r3, #20]
 800730c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007310:	4413      	add	r3, r2
 8007312:	4619      	mov	r1, r3
 8007314:	68f8      	ldr	r0, [r7, #12]
 8007316:	f7ff fe43 	bl	8006fa0 <ld_clust>
 800731a:	4602      	mov	r2, r0
 800731c:	693b      	ldr	r3, [r7, #16]
 800731e:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007320:	e7c0      	b.n	80072a4 <follow_path+0x50>
			if (res != FR_OK) break;
 8007322:	bf00      	nop
 8007324:	e002      	b.n	800732c <follow_path+0xd8>
				break;
 8007326:	bf00      	nop
 8007328:	e000      	b.n	800732c <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800732a:	bf00      	nop
			}
		}
	}

	return res;
 800732c:	7dfb      	ldrb	r3, [r7, #23]
}
 800732e:	4618      	mov	r0, r3
 8007330:	3718      	adds	r7, #24
 8007332:	46bd      	mov	sp, r7
 8007334:	bd80      	pop	{r7, pc}

08007336 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8007336:	b480      	push	{r7}
 8007338:	b087      	sub	sp, #28
 800733a:	af00      	add	r7, sp, #0
 800733c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800733e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007342:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	2b00      	cmp	r3, #0
 800734a:	d031      	beq.n	80073b0 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	617b      	str	r3, [r7, #20]
 8007352:	e002      	b.n	800735a <get_ldnumber+0x24>
 8007354:	697b      	ldr	r3, [r7, #20]
 8007356:	3301      	adds	r3, #1
 8007358:	617b      	str	r3, [r7, #20]
 800735a:	697b      	ldr	r3, [r7, #20]
 800735c:	781b      	ldrb	r3, [r3, #0]
 800735e:	2b20      	cmp	r3, #32
 8007360:	d903      	bls.n	800736a <get_ldnumber+0x34>
 8007362:	697b      	ldr	r3, [r7, #20]
 8007364:	781b      	ldrb	r3, [r3, #0]
 8007366:	2b3a      	cmp	r3, #58	@ 0x3a
 8007368:	d1f4      	bne.n	8007354 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800736a:	697b      	ldr	r3, [r7, #20]
 800736c:	781b      	ldrb	r3, [r3, #0]
 800736e:	2b3a      	cmp	r3, #58	@ 0x3a
 8007370:	d11c      	bne.n	80073ac <get_ldnumber+0x76>
			tp = *path;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	1c5a      	adds	r2, r3, #1
 800737c:	60fa      	str	r2, [r7, #12]
 800737e:	781b      	ldrb	r3, [r3, #0]
 8007380:	3b30      	subs	r3, #48	@ 0x30
 8007382:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8007384:	68bb      	ldr	r3, [r7, #8]
 8007386:	2b09      	cmp	r3, #9
 8007388:	d80e      	bhi.n	80073a8 <get_ldnumber+0x72>
 800738a:	68fa      	ldr	r2, [r7, #12]
 800738c:	697b      	ldr	r3, [r7, #20]
 800738e:	429a      	cmp	r2, r3
 8007390:	d10a      	bne.n	80073a8 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8007392:	68bb      	ldr	r3, [r7, #8]
 8007394:	2b00      	cmp	r3, #0
 8007396:	d107      	bne.n	80073a8 <get_ldnumber+0x72>
					vol = (int)i;
 8007398:	68bb      	ldr	r3, [r7, #8]
 800739a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800739c:	697b      	ldr	r3, [r7, #20]
 800739e:	3301      	adds	r3, #1
 80073a0:	617b      	str	r3, [r7, #20]
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	697a      	ldr	r2, [r7, #20]
 80073a6:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80073a8:	693b      	ldr	r3, [r7, #16]
 80073aa:	e002      	b.n	80073b2 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80073ac:	2300      	movs	r3, #0
 80073ae:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80073b0:	693b      	ldr	r3, [r7, #16]
}
 80073b2:	4618      	mov	r0, r3
 80073b4:	371c      	adds	r7, #28
 80073b6:	46bd      	mov	sp, r7
 80073b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073bc:	4770      	bx	lr
	...

080073c0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b082      	sub	sp, #8
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
 80073c8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	2200      	movs	r2, #0
 80073ce:	70da      	strb	r2, [r3, #3]
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80073d6:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80073d8:	6839      	ldr	r1, [r7, #0]
 80073da:	6878      	ldr	r0, [r7, #4]
 80073dc:	f7ff f8dc 	bl	8006598 <move_window>
 80073e0:	4603      	mov	r3, r0
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d001      	beq.n	80073ea <check_fs+0x2a>
 80073e6:	2304      	movs	r3, #4
 80073e8:	e038      	b.n	800745c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	3330      	adds	r3, #48	@ 0x30
 80073ee:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80073f2:	4618      	mov	r0, r3
 80073f4:	f7fe fe20 	bl	8006038 <ld_word>
 80073f8:	4603      	mov	r3, r0
 80073fa:	461a      	mov	r2, r3
 80073fc:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8007400:	429a      	cmp	r2, r3
 8007402:	d001      	beq.n	8007408 <check_fs+0x48>
 8007404:	2303      	movs	r3, #3
 8007406:	e029      	b.n	800745c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800740e:	2be9      	cmp	r3, #233	@ 0xe9
 8007410:	d009      	beq.n	8007426 <check_fs+0x66>
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007418:	2beb      	cmp	r3, #235	@ 0xeb
 800741a:	d11e      	bne.n	800745a <check_fs+0x9a>
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8007422:	2b90      	cmp	r3, #144	@ 0x90
 8007424:	d119      	bne.n	800745a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	3330      	adds	r3, #48	@ 0x30
 800742a:	3336      	adds	r3, #54	@ 0x36
 800742c:	4618      	mov	r0, r3
 800742e:	f7fe fe1b 	bl	8006068 <ld_dword>
 8007432:	4603      	mov	r3, r0
 8007434:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8007438:	4a0a      	ldr	r2, [pc, #40]	@ (8007464 <check_fs+0xa4>)
 800743a:	4293      	cmp	r3, r2
 800743c:	d101      	bne.n	8007442 <check_fs+0x82>
 800743e:	2300      	movs	r3, #0
 8007440:	e00c      	b.n	800745c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	3330      	adds	r3, #48	@ 0x30
 8007446:	3352      	adds	r3, #82	@ 0x52
 8007448:	4618      	mov	r0, r3
 800744a:	f7fe fe0d 	bl	8006068 <ld_dword>
 800744e:	4603      	mov	r3, r0
 8007450:	4a05      	ldr	r2, [pc, #20]	@ (8007468 <check_fs+0xa8>)
 8007452:	4293      	cmp	r3, r2
 8007454:	d101      	bne.n	800745a <check_fs+0x9a>
 8007456:	2300      	movs	r3, #0
 8007458:	e000      	b.n	800745c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800745a:	2302      	movs	r3, #2
}
 800745c:	4618      	mov	r0, r3
 800745e:	3708      	adds	r7, #8
 8007460:	46bd      	mov	sp, r7
 8007462:	bd80      	pop	{r7, pc}
 8007464:	00544146 	.word	0x00544146
 8007468:	33544146 	.word	0x33544146

0800746c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800746c:	b580      	push	{r7, lr}
 800746e:	b096      	sub	sp, #88	@ 0x58
 8007470:	af00      	add	r7, sp, #0
 8007472:	60f8      	str	r0, [r7, #12]
 8007474:	60b9      	str	r1, [r7, #8]
 8007476:	4613      	mov	r3, r2
 8007478:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800747a:	68bb      	ldr	r3, [r7, #8]
 800747c:	2200      	movs	r2, #0
 800747e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8007480:	68f8      	ldr	r0, [r7, #12]
 8007482:	f7ff ff58 	bl	8007336 <get_ldnumber>
 8007486:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8007488:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800748a:	2b00      	cmp	r3, #0
 800748c:	da01      	bge.n	8007492 <find_volume+0x26>
 800748e:	230b      	movs	r3, #11
 8007490:	e22d      	b.n	80078ee <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8007492:	4aa1      	ldr	r2, [pc, #644]	@ (8007718 <find_volume+0x2ac>)
 8007494:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007496:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800749a:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800749c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d101      	bne.n	80074a6 <find_volume+0x3a>
 80074a2:	230c      	movs	r3, #12
 80074a4:	e223      	b.n	80078ee <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80074a6:	68bb      	ldr	r3, [r7, #8]
 80074a8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80074aa:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80074ac:	79fb      	ldrb	r3, [r7, #7]
 80074ae:	f023 0301 	bic.w	r3, r3, #1
 80074b2:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80074b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074b6:	781b      	ldrb	r3, [r3, #0]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d01a      	beq.n	80074f2 <find_volume+0x86>
		stat = disk_status(fs->drv);
 80074bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074be:	785b      	ldrb	r3, [r3, #1]
 80074c0:	4618      	mov	r0, r3
 80074c2:	f7fe fd19 	bl	8005ef8 <disk_status>
 80074c6:	4603      	mov	r3, r0
 80074c8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80074cc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80074d0:	f003 0301 	and.w	r3, r3, #1
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d10c      	bne.n	80074f2 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80074d8:	79fb      	ldrb	r3, [r7, #7]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d007      	beq.n	80074ee <find_volume+0x82>
 80074de:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80074e2:	f003 0304 	and.w	r3, r3, #4
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d001      	beq.n	80074ee <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80074ea:	230a      	movs	r3, #10
 80074ec:	e1ff      	b.n	80078ee <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 80074ee:	2300      	movs	r3, #0
 80074f0:	e1fd      	b.n	80078ee <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80074f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074f4:	2200      	movs	r2, #0
 80074f6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80074f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80074fa:	b2da      	uxtb	r2, r3
 80074fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074fe:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8007500:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007502:	785b      	ldrb	r3, [r3, #1]
 8007504:	4618      	mov	r0, r3
 8007506:	f7fe fd11 	bl	8005f2c <disk_initialize>
 800750a:	4603      	mov	r3, r0
 800750c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8007510:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007514:	f003 0301 	and.w	r3, r3, #1
 8007518:	2b00      	cmp	r3, #0
 800751a:	d001      	beq.n	8007520 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800751c:	2303      	movs	r3, #3
 800751e:	e1e6      	b.n	80078ee <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8007520:	79fb      	ldrb	r3, [r7, #7]
 8007522:	2b00      	cmp	r3, #0
 8007524:	d007      	beq.n	8007536 <find_volume+0xca>
 8007526:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800752a:	f003 0304 	and.w	r3, r3, #4
 800752e:	2b00      	cmp	r3, #0
 8007530:	d001      	beq.n	8007536 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8007532:	230a      	movs	r3, #10
 8007534:	e1db      	b.n	80078ee <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8007536:	2300      	movs	r3, #0
 8007538:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800753a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800753c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800753e:	f7ff ff3f 	bl	80073c0 <check_fs>
 8007542:	4603      	mov	r3, r0
 8007544:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8007548:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800754c:	2b02      	cmp	r3, #2
 800754e:	d149      	bne.n	80075e4 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007550:	2300      	movs	r3, #0
 8007552:	643b      	str	r3, [r7, #64]	@ 0x40
 8007554:	e01e      	b.n	8007594 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8007556:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007558:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800755c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800755e:	011b      	lsls	r3, r3, #4
 8007560:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8007564:	4413      	add	r3, r2
 8007566:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8007568:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800756a:	3304      	adds	r3, #4
 800756c:	781b      	ldrb	r3, [r3, #0]
 800756e:	2b00      	cmp	r3, #0
 8007570:	d006      	beq.n	8007580 <find_volume+0x114>
 8007572:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007574:	3308      	adds	r3, #8
 8007576:	4618      	mov	r0, r3
 8007578:	f7fe fd76 	bl	8006068 <ld_dword>
 800757c:	4602      	mov	r2, r0
 800757e:	e000      	b.n	8007582 <find_volume+0x116>
 8007580:	2200      	movs	r2, #0
 8007582:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007584:	009b      	lsls	r3, r3, #2
 8007586:	3358      	adds	r3, #88	@ 0x58
 8007588:	443b      	add	r3, r7
 800758a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800758e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007590:	3301      	adds	r3, #1
 8007592:	643b      	str	r3, [r7, #64]	@ 0x40
 8007594:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007596:	2b03      	cmp	r3, #3
 8007598:	d9dd      	bls.n	8007556 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800759a:	2300      	movs	r3, #0
 800759c:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800759e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d002      	beq.n	80075aa <find_volume+0x13e>
 80075a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80075a6:	3b01      	subs	r3, #1
 80075a8:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80075aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80075ac:	009b      	lsls	r3, r3, #2
 80075ae:	3358      	adds	r3, #88	@ 0x58
 80075b0:	443b      	add	r3, r7
 80075b2:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80075b6:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80075b8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d005      	beq.n	80075ca <find_volume+0x15e>
 80075be:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80075c0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80075c2:	f7ff fefd 	bl	80073c0 <check_fs>
 80075c6:	4603      	mov	r3, r0
 80075c8:	e000      	b.n	80075cc <find_volume+0x160>
 80075ca:	2303      	movs	r3, #3
 80075cc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80075d0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80075d4:	2b01      	cmp	r3, #1
 80075d6:	d905      	bls.n	80075e4 <find_volume+0x178>
 80075d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80075da:	3301      	adds	r3, #1
 80075dc:	643b      	str	r3, [r7, #64]	@ 0x40
 80075de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80075e0:	2b03      	cmp	r3, #3
 80075e2:	d9e2      	bls.n	80075aa <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80075e4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80075e8:	2b04      	cmp	r3, #4
 80075ea:	d101      	bne.n	80075f0 <find_volume+0x184>
 80075ec:	2301      	movs	r3, #1
 80075ee:	e17e      	b.n	80078ee <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80075f0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80075f4:	2b01      	cmp	r3, #1
 80075f6:	d901      	bls.n	80075fc <find_volume+0x190>
 80075f8:	230d      	movs	r3, #13
 80075fa:	e178      	b.n	80078ee <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80075fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075fe:	3330      	adds	r3, #48	@ 0x30
 8007600:	330b      	adds	r3, #11
 8007602:	4618      	mov	r0, r3
 8007604:	f7fe fd18 	bl	8006038 <ld_word>
 8007608:	4603      	mov	r3, r0
 800760a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800760e:	d001      	beq.n	8007614 <find_volume+0x1a8>
 8007610:	230d      	movs	r3, #13
 8007612:	e16c      	b.n	80078ee <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8007614:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007616:	3330      	adds	r3, #48	@ 0x30
 8007618:	3316      	adds	r3, #22
 800761a:	4618      	mov	r0, r3
 800761c:	f7fe fd0c 	bl	8006038 <ld_word>
 8007620:	4603      	mov	r3, r0
 8007622:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8007624:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007626:	2b00      	cmp	r3, #0
 8007628:	d106      	bne.n	8007638 <find_volume+0x1cc>
 800762a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800762c:	3330      	adds	r3, #48	@ 0x30
 800762e:	3324      	adds	r3, #36	@ 0x24
 8007630:	4618      	mov	r0, r3
 8007632:	f7fe fd19 	bl	8006068 <ld_dword>
 8007636:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8007638:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800763a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800763c:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800763e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007640:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 8007644:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007646:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8007648:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800764a:	789b      	ldrb	r3, [r3, #2]
 800764c:	2b01      	cmp	r3, #1
 800764e:	d005      	beq.n	800765c <find_volume+0x1f0>
 8007650:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007652:	789b      	ldrb	r3, [r3, #2]
 8007654:	2b02      	cmp	r3, #2
 8007656:	d001      	beq.n	800765c <find_volume+0x1f0>
 8007658:	230d      	movs	r3, #13
 800765a:	e148      	b.n	80078ee <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800765c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800765e:	789b      	ldrb	r3, [r3, #2]
 8007660:	461a      	mov	r2, r3
 8007662:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007664:	fb02 f303 	mul.w	r3, r2, r3
 8007668:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800766a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800766c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007670:	461a      	mov	r2, r3
 8007672:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007674:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8007676:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007678:	895b      	ldrh	r3, [r3, #10]
 800767a:	2b00      	cmp	r3, #0
 800767c:	d008      	beq.n	8007690 <find_volume+0x224>
 800767e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007680:	895b      	ldrh	r3, [r3, #10]
 8007682:	461a      	mov	r2, r3
 8007684:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007686:	895b      	ldrh	r3, [r3, #10]
 8007688:	3b01      	subs	r3, #1
 800768a:	4013      	ands	r3, r2
 800768c:	2b00      	cmp	r3, #0
 800768e:	d001      	beq.n	8007694 <find_volume+0x228>
 8007690:	230d      	movs	r3, #13
 8007692:	e12c      	b.n	80078ee <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8007694:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007696:	3330      	adds	r3, #48	@ 0x30
 8007698:	3311      	adds	r3, #17
 800769a:	4618      	mov	r0, r3
 800769c:	f7fe fccc 	bl	8006038 <ld_word>
 80076a0:	4603      	mov	r3, r0
 80076a2:	461a      	mov	r2, r3
 80076a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076a6:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80076a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076aa:	891b      	ldrh	r3, [r3, #8]
 80076ac:	f003 030f 	and.w	r3, r3, #15
 80076b0:	b29b      	uxth	r3, r3
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d001      	beq.n	80076ba <find_volume+0x24e>
 80076b6:	230d      	movs	r3, #13
 80076b8:	e119      	b.n	80078ee <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80076ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076bc:	3330      	adds	r3, #48	@ 0x30
 80076be:	3313      	adds	r3, #19
 80076c0:	4618      	mov	r0, r3
 80076c2:	f7fe fcb9 	bl	8006038 <ld_word>
 80076c6:	4603      	mov	r3, r0
 80076c8:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80076ca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d106      	bne.n	80076de <find_volume+0x272>
 80076d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076d2:	3330      	adds	r3, #48	@ 0x30
 80076d4:	3320      	adds	r3, #32
 80076d6:	4618      	mov	r0, r3
 80076d8:	f7fe fcc6 	bl	8006068 <ld_dword>
 80076dc:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80076de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076e0:	3330      	adds	r3, #48	@ 0x30
 80076e2:	330e      	adds	r3, #14
 80076e4:	4618      	mov	r0, r3
 80076e6:	f7fe fca7 	bl	8006038 <ld_word>
 80076ea:	4603      	mov	r3, r0
 80076ec:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80076ee:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d101      	bne.n	80076f8 <find_volume+0x28c>
 80076f4:	230d      	movs	r3, #13
 80076f6:	e0fa      	b.n	80078ee <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80076f8:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80076fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80076fc:	4413      	add	r3, r2
 80076fe:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007700:	8912      	ldrh	r2, [r2, #8]
 8007702:	0912      	lsrs	r2, r2, #4
 8007704:	b292      	uxth	r2, r2
 8007706:	4413      	add	r3, r2
 8007708:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800770a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800770c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800770e:	429a      	cmp	r2, r3
 8007710:	d204      	bcs.n	800771c <find_volume+0x2b0>
 8007712:	230d      	movs	r3, #13
 8007714:	e0eb      	b.n	80078ee <find_volume+0x482>
 8007716:	bf00      	nop
 8007718:	20004998 	.word	0x20004998
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800771c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800771e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007720:	1ad3      	subs	r3, r2, r3
 8007722:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007724:	8952      	ldrh	r2, [r2, #10]
 8007726:	fbb3 f3f2 	udiv	r3, r3, r2
 800772a:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800772c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800772e:	2b00      	cmp	r3, #0
 8007730:	d101      	bne.n	8007736 <find_volume+0x2ca>
 8007732:	230d      	movs	r3, #13
 8007734:	e0db      	b.n	80078ee <find_volume+0x482>
		fmt = FS_FAT32;
 8007736:	2303      	movs	r3, #3
 8007738:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800773c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800773e:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8007742:	4293      	cmp	r3, r2
 8007744:	d802      	bhi.n	800774c <find_volume+0x2e0>
 8007746:	2302      	movs	r3, #2
 8007748:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800774c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800774e:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8007752:	4293      	cmp	r3, r2
 8007754:	d802      	bhi.n	800775c <find_volume+0x2f0>
 8007756:	2301      	movs	r3, #1
 8007758:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800775c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800775e:	1c9a      	adds	r2, r3, #2
 8007760:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007762:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8007764:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007766:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007768:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800776a:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800776c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800776e:	441a      	add	r2, r3
 8007770:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007772:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8007774:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007776:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007778:	441a      	add	r2, r3
 800777a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800777c:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 800777e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007782:	2b03      	cmp	r3, #3
 8007784:	d11e      	bne.n	80077c4 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8007786:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007788:	3330      	adds	r3, #48	@ 0x30
 800778a:	332a      	adds	r3, #42	@ 0x2a
 800778c:	4618      	mov	r0, r3
 800778e:	f7fe fc53 	bl	8006038 <ld_word>
 8007792:	4603      	mov	r3, r0
 8007794:	2b00      	cmp	r3, #0
 8007796:	d001      	beq.n	800779c <find_volume+0x330>
 8007798:	230d      	movs	r3, #13
 800779a:	e0a8      	b.n	80078ee <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800779c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800779e:	891b      	ldrh	r3, [r3, #8]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d001      	beq.n	80077a8 <find_volume+0x33c>
 80077a4:	230d      	movs	r3, #13
 80077a6:	e0a2      	b.n	80078ee <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80077a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077aa:	3330      	adds	r3, #48	@ 0x30
 80077ac:	332c      	adds	r3, #44	@ 0x2c
 80077ae:	4618      	mov	r0, r3
 80077b0:	f7fe fc5a 	bl	8006068 <ld_dword>
 80077b4:	4602      	mov	r2, r0
 80077b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077b8:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80077ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077bc:	695b      	ldr	r3, [r3, #20]
 80077be:	009b      	lsls	r3, r3, #2
 80077c0:	647b      	str	r3, [r7, #68]	@ 0x44
 80077c2:	e01f      	b.n	8007804 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80077c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077c6:	891b      	ldrh	r3, [r3, #8]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d101      	bne.n	80077d0 <find_volume+0x364>
 80077cc:	230d      	movs	r3, #13
 80077ce:	e08e      	b.n	80078ee <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80077d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077d2:	6a1a      	ldr	r2, [r3, #32]
 80077d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80077d6:	441a      	add	r2, r3
 80077d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077da:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80077dc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80077e0:	2b02      	cmp	r3, #2
 80077e2:	d103      	bne.n	80077ec <find_volume+0x380>
 80077e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077e6:	695b      	ldr	r3, [r3, #20]
 80077e8:	005b      	lsls	r3, r3, #1
 80077ea:	e00a      	b.n	8007802 <find_volume+0x396>
 80077ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077ee:	695a      	ldr	r2, [r3, #20]
 80077f0:	4613      	mov	r3, r2
 80077f2:	005b      	lsls	r3, r3, #1
 80077f4:	4413      	add	r3, r2
 80077f6:	085a      	lsrs	r2, r3, #1
 80077f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077fa:	695b      	ldr	r3, [r3, #20]
 80077fc:	f003 0301 	and.w	r3, r3, #1
 8007800:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8007802:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8007804:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007806:	699a      	ldr	r2, [r3, #24]
 8007808:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800780a:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800780e:	0a5b      	lsrs	r3, r3, #9
 8007810:	429a      	cmp	r2, r3
 8007812:	d201      	bcs.n	8007818 <find_volume+0x3ac>
 8007814:	230d      	movs	r3, #13
 8007816:	e06a      	b.n	80078ee <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8007818:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800781a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800781e:	611a      	str	r2, [r3, #16]
 8007820:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007822:	691a      	ldr	r2, [r3, #16]
 8007824:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007826:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8007828:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800782a:	2280      	movs	r2, #128	@ 0x80
 800782c:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800782e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007832:	2b03      	cmp	r3, #3
 8007834:	d149      	bne.n	80078ca <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8007836:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007838:	3330      	adds	r3, #48	@ 0x30
 800783a:	3330      	adds	r3, #48	@ 0x30
 800783c:	4618      	mov	r0, r3
 800783e:	f7fe fbfb 	bl	8006038 <ld_word>
 8007842:	4603      	mov	r3, r0
 8007844:	2b01      	cmp	r3, #1
 8007846:	d140      	bne.n	80078ca <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8007848:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800784a:	3301      	adds	r3, #1
 800784c:	4619      	mov	r1, r3
 800784e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007850:	f7fe fea2 	bl	8006598 <move_window>
 8007854:	4603      	mov	r3, r0
 8007856:	2b00      	cmp	r3, #0
 8007858:	d137      	bne.n	80078ca <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800785a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800785c:	2200      	movs	r2, #0
 800785e:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8007860:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007862:	3330      	adds	r3, #48	@ 0x30
 8007864:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8007868:	4618      	mov	r0, r3
 800786a:	f7fe fbe5 	bl	8006038 <ld_word>
 800786e:	4603      	mov	r3, r0
 8007870:	461a      	mov	r2, r3
 8007872:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8007876:	429a      	cmp	r2, r3
 8007878:	d127      	bne.n	80078ca <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800787a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800787c:	3330      	adds	r3, #48	@ 0x30
 800787e:	4618      	mov	r0, r3
 8007880:	f7fe fbf2 	bl	8006068 <ld_dword>
 8007884:	4603      	mov	r3, r0
 8007886:	4a1c      	ldr	r2, [pc, #112]	@ (80078f8 <find_volume+0x48c>)
 8007888:	4293      	cmp	r3, r2
 800788a:	d11e      	bne.n	80078ca <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800788c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800788e:	3330      	adds	r3, #48	@ 0x30
 8007890:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8007894:	4618      	mov	r0, r3
 8007896:	f7fe fbe7 	bl	8006068 <ld_dword>
 800789a:	4603      	mov	r3, r0
 800789c:	4a17      	ldr	r2, [pc, #92]	@ (80078fc <find_volume+0x490>)
 800789e:	4293      	cmp	r3, r2
 80078a0:	d113      	bne.n	80078ca <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80078a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078a4:	3330      	adds	r3, #48	@ 0x30
 80078a6:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 80078aa:	4618      	mov	r0, r3
 80078ac:	f7fe fbdc 	bl	8006068 <ld_dword>
 80078b0:	4602      	mov	r2, r0
 80078b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078b4:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80078b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078b8:	3330      	adds	r3, #48	@ 0x30
 80078ba:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 80078be:	4618      	mov	r0, r3
 80078c0:	f7fe fbd2 	bl	8006068 <ld_dword>
 80078c4:	4602      	mov	r2, r0
 80078c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078c8:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80078ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078cc:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 80078d0:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80078d2:	4b0b      	ldr	r3, [pc, #44]	@ (8007900 <find_volume+0x494>)
 80078d4:	881b      	ldrh	r3, [r3, #0]
 80078d6:	3301      	adds	r3, #1
 80078d8:	b29a      	uxth	r2, r3
 80078da:	4b09      	ldr	r3, [pc, #36]	@ (8007900 <find_volume+0x494>)
 80078dc:	801a      	strh	r2, [r3, #0]
 80078de:	4b08      	ldr	r3, [pc, #32]	@ (8007900 <find_volume+0x494>)
 80078e0:	881a      	ldrh	r2, [r3, #0]
 80078e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078e4:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80078e6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80078e8:	f7fe fdee 	bl	80064c8 <clear_lock>
#endif
	return FR_OK;
 80078ec:	2300      	movs	r3, #0
}
 80078ee:	4618      	mov	r0, r3
 80078f0:	3758      	adds	r7, #88	@ 0x58
 80078f2:	46bd      	mov	sp, r7
 80078f4:	bd80      	pop	{r7, pc}
 80078f6:	bf00      	nop
 80078f8:	41615252 	.word	0x41615252
 80078fc:	61417272 	.word	0x61417272
 8007900:	2000499c 	.word	0x2000499c

08007904 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8007904:	b580      	push	{r7, lr}
 8007906:	b084      	sub	sp, #16
 8007908:	af00      	add	r7, sp, #0
 800790a:	6078      	str	r0, [r7, #4]
 800790c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800790e:	2309      	movs	r3, #9
 8007910:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	2b00      	cmp	r3, #0
 8007916:	d01c      	beq.n	8007952 <validate+0x4e>
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	2b00      	cmp	r3, #0
 800791e:	d018      	beq.n	8007952 <validate+0x4e>
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	781b      	ldrb	r3, [r3, #0]
 8007926:	2b00      	cmp	r3, #0
 8007928:	d013      	beq.n	8007952 <validate+0x4e>
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	889a      	ldrh	r2, [r3, #4]
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	88db      	ldrh	r3, [r3, #6]
 8007934:	429a      	cmp	r2, r3
 8007936:	d10c      	bne.n	8007952 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	785b      	ldrb	r3, [r3, #1]
 800793e:	4618      	mov	r0, r3
 8007940:	f7fe fada 	bl	8005ef8 <disk_status>
 8007944:	4603      	mov	r3, r0
 8007946:	f003 0301 	and.w	r3, r3, #1
 800794a:	2b00      	cmp	r3, #0
 800794c:	d101      	bne.n	8007952 <validate+0x4e>
			res = FR_OK;
 800794e:	2300      	movs	r3, #0
 8007950:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8007952:	7bfb      	ldrb	r3, [r7, #15]
 8007954:	2b00      	cmp	r3, #0
 8007956:	d102      	bne.n	800795e <validate+0x5a>
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	e000      	b.n	8007960 <validate+0x5c>
 800795e:	2300      	movs	r3, #0
 8007960:	683a      	ldr	r2, [r7, #0]
 8007962:	6013      	str	r3, [r2, #0]
	return res;
 8007964:	7bfb      	ldrb	r3, [r7, #15]
}
 8007966:	4618      	mov	r0, r3
 8007968:	3710      	adds	r7, #16
 800796a:	46bd      	mov	sp, r7
 800796c:	bd80      	pop	{r7, pc}
	...

08007970 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8007970:	b580      	push	{r7, lr}
 8007972:	b088      	sub	sp, #32
 8007974:	af00      	add	r7, sp, #0
 8007976:	60f8      	str	r0, [r7, #12]
 8007978:	60b9      	str	r1, [r7, #8]
 800797a:	4613      	mov	r3, r2
 800797c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800797e:	68bb      	ldr	r3, [r7, #8]
 8007980:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8007982:	f107 0310 	add.w	r3, r7, #16
 8007986:	4618      	mov	r0, r3
 8007988:	f7ff fcd5 	bl	8007336 <get_ldnumber>
 800798c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800798e:	69fb      	ldr	r3, [r7, #28]
 8007990:	2b00      	cmp	r3, #0
 8007992:	da01      	bge.n	8007998 <f_mount+0x28>
 8007994:	230b      	movs	r3, #11
 8007996:	e02b      	b.n	80079f0 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8007998:	4a17      	ldr	r2, [pc, #92]	@ (80079f8 <f_mount+0x88>)
 800799a:	69fb      	ldr	r3, [r7, #28]
 800799c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80079a0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80079a2:	69bb      	ldr	r3, [r7, #24]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d005      	beq.n	80079b4 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80079a8:	69b8      	ldr	r0, [r7, #24]
 80079aa:	f7fe fd8d 	bl	80064c8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80079ae:	69bb      	ldr	r3, [r7, #24]
 80079b0:	2200      	movs	r2, #0
 80079b2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d002      	beq.n	80079c0 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	2200      	movs	r2, #0
 80079be:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80079c0:	68fa      	ldr	r2, [r7, #12]
 80079c2:	490d      	ldr	r1, [pc, #52]	@ (80079f8 <f_mount+0x88>)
 80079c4:	69fb      	ldr	r3, [r7, #28]
 80079c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d002      	beq.n	80079d6 <f_mount+0x66>
 80079d0:	79fb      	ldrb	r3, [r7, #7]
 80079d2:	2b01      	cmp	r3, #1
 80079d4:	d001      	beq.n	80079da <f_mount+0x6a>
 80079d6:	2300      	movs	r3, #0
 80079d8:	e00a      	b.n	80079f0 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80079da:	f107 010c 	add.w	r1, r7, #12
 80079de:	f107 0308 	add.w	r3, r7, #8
 80079e2:	2200      	movs	r2, #0
 80079e4:	4618      	mov	r0, r3
 80079e6:	f7ff fd41 	bl	800746c <find_volume>
 80079ea:	4603      	mov	r3, r0
 80079ec:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80079ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80079f0:	4618      	mov	r0, r3
 80079f2:	3720      	adds	r7, #32
 80079f4:	46bd      	mov	sp, r7
 80079f6:	bd80      	pop	{r7, pc}
 80079f8:	20004998 	.word	0x20004998

080079fc <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80079fc:	b580      	push	{r7, lr}
 80079fe:	b098      	sub	sp, #96	@ 0x60
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	60f8      	str	r0, [r7, #12]
 8007a04:	60b9      	str	r1, [r7, #8]
 8007a06:	4613      	mov	r3, r2
 8007a08:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d101      	bne.n	8007a14 <f_open+0x18>
 8007a10:	2309      	movs	r3, #9
 8007a12:	e1a9      	b.n	8007d68 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8007a14:	79fb      	ldrb	r3, [r7, #7]
 8007a16:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007a1a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8007a1c:	79fa      	ldrb	r2, [r7, #7]
 8007a1e:	f107 0110 	add.w	r1, r7, #16
 8007a22:	f107 0308 	add.w	r3, r7, #8
 8007a26:	4618      	mov	r0, r3
 8007a28:	f7ff fd20 	bl	800746c <find_volume>
 8007a2c:	4603      	mov	r3, r0
 8007a2e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 8007a32:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	f040 818d 	bne.w	8007d56 <f_open+0x35a>
		dj.obj.fs = fs;
 8007a3c:	693b      	ldr	r3, [r7, #16]
 8007a3e:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8007a40:	68ba      	ldr	r2, [r7, #8]
 8007a42:	f107 0314 	add.w	r3, r7, #20
 8007a46:	4611      	mov	r1, r2
 8007a48:	4618      	mov	r0, r3
 8007a4a:	f7ff fc03 	bl	8007254 <follow_path>
 8007a4e:	4603      	mov	r3, r0
 8007a50:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8007a54:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d118      	bne.n	8007a8e <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8007a5c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007a60:	b25b      	sxtb	r3, r3
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	da03      	bge.n	8007a6e <f_open+0x72>
				res = FR_INVALID_NAME;
 8007a66:	2306      	movs	r3, #6
 8007a68:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8007a6c:	e00f      	b.n	8007a8e <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007a6e:	79fb      	ldrb	r3, [r7, #7]
 8007a70:	2b01      	cmp	r3, #1
 8007a72:	bf8c      	ite	hi
 8007a74:	2301      	movhi	r3, #1
 8007a76:	2300      	movls	r3, #0
 8007a78:	b2db      	uxtb	r3, r3
 8007a7a:	461a      	mov	r2, r3
 8007a7c:	f107 0314 	add.w	r3, r7, #20
 8007a80:	4611      	mov	r1, r2
 8007a82:	4618      	mov	r0, r3
 8007a84:	f7fe fbd8 	bl	8006238 <chk_lock>
 8007a88:	4603      	mov	r3, r0
 8007a8a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8007a8e:	79fb      	ldrb	r3, [r7, #7]
 8007a90:	f003 031c 	and.w	r3, r3, #28
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d07f      	beq.n	8007b98 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 8007a98:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d017      	beq.n	8007ad0 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8007aa0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007aa4:	2b04      	cmp	r3, #4
 8007aa6:	d10e      	bne.n	8007ac6 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8007aa8:	f7fe fc22 	bl	80062f0 <enq_lock>
 8007aac:	4603      	mov	r3, r0
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d006      	beq.n	8007ac0 <f_open+0xc4>
 8007ab2:	f107 0314 	add.w	r3, r7, #20
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	f7ff fb06 	bl	80070c8 <dir_register>
 8007abc:	4603      	mov	r3, r0
 8007abe:	e000      	b.n	8007ac2 <f_open+0xc6>
 8007ac0:	2312      	movs	r3, #18
 8007ac2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8007ac6:	79fb      	ldrb	r3, [r7, #7]
 8007ac8:	f043 0308 	orr.w	r3, r3, #8
 8007acc:	71fb      	strb	r3, [r7, #7]
 8007ace:	e010      	b.n	8007af2 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8007ad0:	7ebb      	ldrb	r3, [r7, #26]
 8007ad2:	f003 0311 	and.w	r3, r3, #17
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d003      	beq.n	8007ae2 <f_open+0xe6>
					res = FR_DENIED;
 8007ada:	2307      	movs	r3, #7
 8007adc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8007ae0:	e007      	b.n	8007af2 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8007ae2:	79fb      	ldrb	r3, [r7, #7]
 8007ae4:	f003 0304 	and.w	r3, r3, #4
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d002      	beq.n	8007af2 <f_open+0xf6>
 8007aec:	2308      	movs	r3, #8
 8007aee:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8007af2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d168      	bne.n	8007bcc <f_open+0x1d0>
 8007afa:	79fb      	ldrb	r3, [r7, #7]
 8007afc:	f003 0308 	and.w	r3, r3, #8
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d063      	beq.n	8007bcc <f_open+0x1d0>
				dw = GET_FATTIME();
 8007b04:	f7fd fcb2 	bl	800546c <get_fattime>
 8007b08:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8007b0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b0c:	330e      	adds	r3, #14
 8007b0e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007b10:	4618      	mov	r0, r3
 8007b12:	f7fe fae7 	bl	80060e4 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8007b16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b18:	3316      	adds	r3, #22
 8007b1a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	f7fe fae1 	bl	80060e4 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8007b22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b24:	330b      	adds	r3, #11
 8007b26:	2220      	movs	r2, #32
 8007b28:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8007b2a:	693b      	ldr	r3, [r7, #16]
 8007b2c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007b2e:	4611      	mov	r1, r2
 8007b30:	4618      	mov	r0, r3
 8007b32:	f7ff fa35 	bl	8006fa0 <ld_clust>
 8007b36:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8007b38:	693b      	ldr	r3, [r7, #16]
 8007b3a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8007b3c:	2200      	movs	r2, #0
 8007b3e:	4618      	mov	r0, r3
 8007b40:	f7ff fa4d 	bl	8006fde <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8007b44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b46:	331c      	adds	r3, #28
 8007b48:	2100      	movs	r1, #0
 8007b4a:	4618      	mov	r0, r3
 8007b4c:	f7fe faca 	bl	80060e4 <st_dword>
					fs->wflag = 1;
 8007b50:	693b      	ldr	r3, [r7, #16]
 8007b52:	2201      	movs	r2, #1
 8007b54:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8007b56:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d037      	beq.n	8007bcc <f_open+0x1d0>
						dw = fs->winsect;
 8007b5c:	693b      	ldr	r3, [r7, #16]
 8007b5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b60:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8007b62:	f107 0314 	add.w	r3, r7, #20
 8007b66:	2200      	movs	r2, #0
 8007b68:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	f7fe ff60 	bl	8006a30 <remove_chain>
 8007b70:	4603      	mov	r3, r0
 8007b72:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 8007b76:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d126      	bne.n	8007bcc <f_open+0x1d0>
							res = move_window(fs, dw);
 8007b7e:	693b      	ldr	r3, [r7, #16]
 8007b80:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007b82:	4618      	mov	r0, r3
 8007b84:	f7fe fd08 	bl	8006598 <move_window>
 8007b88:	4603      	mov	r3, r0
 8007b8a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8007b8e:	693b      	ldr	r3, [r7, #16]
 8007b90:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007b92:	3a01      	subs	r2, #1
 8007b94:	60da      	str	r2, [r3, #12]
 8007b96:	e019      	b.n	8007bcc <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8007b98:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d115      	bne.n	8007bcc <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8007ba0:	7ebb      	ldrb	r3, [r7, #26]
 8007ba2:	f003 0310 	and.w	r3, r3, #16
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d003      	beq.n	8007bb2 <f_open+0x1b6>
					res = FR_NO_FILE;
 8007baa:	2304      	movs	r3, #4
 8007bac:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8007bb0:	e00c      	b.n	8007bcc <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8007bb2:	79fb      	ldrb	r3, [r7, #7]
 8007bb4:	f003 0302 	and.w	r3, r3, #2
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d007      	beq.n	8007bcc <f_open+0x1d0>
 8007bbc:	7ebb      	ldrb	r3, [r7, #26]
 8007bbe:	f003 0301 	and.w	r3, r3, #1
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d002      	beq.n	8007bcc <f_open+0x1d0>
						res = FR_DENIED;
 8007bc6:	2307      	movs	r3, #7
 8007bc8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8007bcc:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d126      	bne.n	8007c22 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8007bd4:	79fb      	ldrb	r3, [r7, #7]
 8007bd6:	f003 0308 	and.w	r3, r3, #8
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d003      	beq.n	8007be6 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 8007bde:	79fb      	ldrb	r3, [r7, #7]
 8007be0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007be4:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8007be6:	693b      	ldr	r3, [r7, #16]
 8007be8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 8007bee:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007bf4:	79fb      	ldrb	r3, [r7, #7]
 8007bf6:	2b01      	cmp	r3, #1
 8007bf8:	bf8c      	ite	hi
 8007bfa:	2301      	movhi	r3, #1
 8007bfc:	2300      	movls	r3, #0
 8007bfe:	b2db      	uxtb	r3, r3
 8007c00:	461a      	mov	r2, r3
 8007c02:	f107 0314 	add.w	r3, r7, #20
 8007c06:	4611      	mov	r1, r2
 8007c08:	4618      	mov	r0, r3
 8007c0a:	f7fe fb93 	bl	8006334 <inc_lock>
 8007c0e:	4602      	mov	r2, r0
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	691b      	ldr	r3, [r3, #16]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d102      	bne.n	8007c22 <f_open+0x226>
 8007c1c:	2302      	movs	r3, #2
 8007c1e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8007c22:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	f040 8095 	bne.w	8007d56 <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8007c2c:	693b      	ldr	r3, [r7, #16]
 8007c2e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007c30:	4611      	mov	r1, r2
 8007c32:	4618      	mov	r0, r3
 8007c34:	f7ff f9b4 	bl	8006fa0 <ld_clust>
 8007c38:	4602      	mov	r2, r0
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8007c3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c40:	331c      	adds	r3, #28
 8007c42:	4618      	mov	r0, r3
 8007c44:	f7fe fa10 	bl	8006068 <ld_dword>
 8007c48:	4602      	mov	r2, r0
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	2200      	movs	r2, #0
 8007c52:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8007c54:	693a      	ldr	r2, [r7, #16]
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8007c5a:	693b      	ldr	r3, [r7, #16]
 8007c5c:	88da      	ldrh	r2, [r3, #6]
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	79fa      	ldrb	r2, [r7, #7]
 8007c66:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	2200      	movs	r2, #0
 8007c6c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	2200      	movs	r2, #0
 8007c72:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	2200      	movs	r2, #0
 8007c78:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	3330      	adds	r3, #48	@ 0x30
 8007c7e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007c82:	2100      	movs	r1, #0
 8007c84:	4618      	mov	r0, r3
 8007c86:	f7fe fa7a 	bl	800617e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8007c8a:	79fb      	ldrb	r3, [r7, #7]
 8007c8c:	f003 0320 	and.w	r3, r3, #32
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d060      	beq.n	8007d56 <f_open+0x35a>
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	68db      	ldr	r3, [r3, #12]
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d05c      	beq.n	8007d56 <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	68da      	ldr	r2, [r3, #12]
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8007ca4:	693b      	ldr	r3, [r7, #16]
 8007ca6:	895b      	ldrh	r3, [r3, #10]
 8007ca8:	025b      	lsls	r3, r3, #9
 8007caa:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	689b      	ldr	r3, [r3, #8]
 8007cb0:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	68db      	ldr	r3, [r3, #12]
 8007cb6:	657b      	str	r3, [r7, #84]	@ 0x54
 8007cb8:	e016      	b.n	8007ce8 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	f7fe fd25 	bl	800670e <get_fat>
 8007cc4:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8007cc6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007cc8:	2b01      	cmp	r3, #1
 8007cca:	d802      	bhi.n	8007cd2 <f_open+0x2d6>
 8007ccc:	2302      	movs	r3, #2
 8007cce:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8007cd2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007cd4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007cd8:	d102      	bne.n	8007ce0 <f_open+0x2e4>
 8007cda:	2301      	movs	r3, #1
 8007cdc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007ce0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007ce2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007ce4:	1ad3      	subs	r3, r2, r3
 8007ce6:	657b      	str	r3, [r7, #84]	@ 0x54
 8007ce8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d103      	bne.n	8007cf8 <f_open+0x2fc>
 8007cf0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007cf2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007cf4:	429a      	cmp	r2, r3
 8007cf6:	d8e0      	bhi.n	8007cba <f_open+0x2be>
				}
				fp->clust = clst;
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007cfc:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8007cfe:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d127      	bne.n	8007d56 <f_open+0x35a>
 8007d06:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007d08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d022      	beq.n	8007d56 <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8007d10:	693b      	ldr	r3, [r7, #16]
 8007d12:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8007d14:	4618      	mov	r0, r3
 8007d16:	f7fe fcdb 	bl	80066d0 <clust2sect>
 8007d1a:	6478      	str	r0, [r7, #68]	@ 0x44
 8007d1c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d103      	bne.n	8007d2a <f_open+0x32e>
						res = FR_INT_ERR;
 8007d22:	2302      	movs	r3, #2
 8007d24:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8007d28:	e015      	b.n	8007d56 <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8007d2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007d2c:	0a5a      	lsrs	r2, r3, #9
 8007d2e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007d30:	441a      	add	r2, r3
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8007d36:	693b      	ldr	r3, [r7, #16]
 8007d38:	7858      	ldrb	r0, [r3, #1]
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	6a1a      	ldr	r2, [r3, #32]
 8007d44:	2301      	movs	r3, #1
 8007d46:	f7fe f919 	bl	8005f7c <disk_read>
 8007d4a:	4603      	mov	r3, r0
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d002      	beq.n	8007d56 <f_open+0x35a>
 8007d50:	2301      	movs	r3, #1
 8007d52:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8007d56:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d002      	beq.n	8007d64 <f_open+0x368>
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	2200      	movs	r2, #0
 8007d62:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8007d64:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 8007d68:	4618      	mov	r0, r3
 8007d6a:	3760      	adds	r7, #96	@ 0x60
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	bd80      	pop	{r7, pc}

08007d70 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8007d70:	b580      	push	{r7, lr}
 8007d72:	b08c      	sub	sp, #48	@ 0x30
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	60f8      	str	r0, [r7, #12]
 8007d78:	60b9      	str	r1, [r7, #8]
 8007d7a:	607a      	str	r2, [r7, #4]
 8007d7c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8007d7e:	68bb      	ldr	r3, [r7, #8]
 8007d80:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8007d82:	683b      	ldr	r3, [r7, #0]
 8007d84:	2200      	movs	r2, #0
 8007d86:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	f107 0210 	add.w	r2, r7, #16
 8007d8e:	4611      	mov	r1, r2
 8007d90:	4618      	mov	r0, r3
 8007d92:	f7ff fdb7 	bl	8007904 <validate>
 8007d96:	4603      	mov	r3, r0
 8007d98:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8007d9c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d107      	bne.n	8007db4 <f_write+0x44>
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	7d5b      	ldrb	r3, [r3, #21]
 8007da8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8007dac:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d002      	beq.n	8007dba <f_write+0x4a>
 8007db4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007db8:	e14b      	b.n	8008052 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	7d1b      	ldrb	r3, [r3, #20]
 8007dbe:	f003 0302 	and.w	r3, r3, #2
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d101      	bne.n	8007dca <f_write+0x5a>
 8007dc6:	2307      	movs	r3, #7
 8007dc8:	e143      	b.n	8008052 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	699a      	ldr	r2, [r3, #24]
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	441a      	add	r2, r3
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	699b      	ldr	r3, [r3, #24]
 8007dd6:	429a      	cmp	r2, r3
 8007dd8:	f080 812d 	bcs.w	8008036 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	699b      	ldr	r3, [r3, #24]
 8007de0:	43db      	mvns	r3, r3
 8007de2:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8007de4:	e127      	b.n	8008036 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	699b      	ldr	r3, [r3, #24]
 8007dea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	f040 80e3 	bne.w	8007fba <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	699b      	ldr	r3, [r3, #24]
 8007df8:	0a5b      	lsrs	r3, r3, #9
 8007dfa:	693a      	ldr	r2, [r7, #16]
 8007dfc:	8952      	ldrh	r2, [r2, #10]
 8007dfe:	3a01      	subs	r2, #1
 8007e00:	4013      	ands	r3, r2
 8007e02:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8007e04:	69bb      	ldr	r3, [r7, #24]
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d143      	bne.n	8007e92 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	699b      	ldr	r3, [r3, #24]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d10c      	bne.n	8007e2c <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	689b      	ldr	r3, [r3, #8]
 8007e16:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8007e18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d11a      	bne.n	8007e54 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	2100      	movs	r1, #0
 8007e22:	4618      	mov	r0, r3
 8007e24:	f7fe fe69 	bl	8006afa <create_chain>
 8007e28:	62b8      	str	r0, [r7, #40]	@ 0x28
 8007e2a:	e013      	b.n	8007e54 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d007      	beq.n	8007e44 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	699b      	ldr	r3, [r3, #24]
 8007e38:	4619      	mov	r1, r3
 8007e3a:	68f8      	ldr	r0, [r7, #12]
 8007e3c:	f7fe fef5 	bl	8006c2a <clmt_clust>
 8007e40:	62b8      	str	r0, [r7, #40]	@ 0x28
 8007e42:	e007      	b.n	8007e54 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8007e44:	68fa      	ldr	r2, [r7, #12]
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	69db      	ldr	r3, [r3, #28]
 8007e4a:	4619      	mov	r1, r3
 8007e4c:	4610      	mov	r0, r2
 8007e4e:	f7fe fe54 	bl	8006afa <create_chain>
 8007e52:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8007e54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	f000 80f2 	beq.w	8008040 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8007e5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e5e:	2b01      	cmp	r3, #1
 8007e60:	d104      	bne.n	8007e6c <f_write+0xfc>
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	2202      	movs	r2, #2
 8007e66:	755a      	strb	r2, [r3, #21]
 8007e68:	2302      	movs	r3, #2
 8007e6a:	e0f2      	b.n	8008052 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007e6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e6e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007e72:	d104      	bne.n	8007e7e <f_write+0x10e>
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	2201      	movs	r2, #1
 8007e78:	755a      	strb	r2, [r3, #21]
 8007e7a:	2301      	movs	r3, #1
 8007e7c:	e0e9      	b.n	8008052 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007e82:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	689b      	ldr	r3, [r3, #8]
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d102      	bne.n	8007e92 <f_write+0x122>
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007e90:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	7d1b      	ldrb	r3, [r3, #20]
 8007e96:	b25b      	sxtb	r3, r3
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	da18      	bge.n	8007ece <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007e9c:	693b      	ldr	r3, [r7, #16]
 8007e9e:	7858      	ldrb	r0, [r3, #1]
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	6a1a      	ldr	r2, [r3, #32]
 8007eaa:	2301      	movs	r3, #1
 8007eac:	f7fe f886 	bl	8005fbc <disk_write>
 8007eb0:	4603      	mov	r3, r0
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d004      	beq.n	8007ec0 <f_write+0x150>
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	2201      	movs	r2, #1
 8007eba:	755a      	strb	r2, [r3, #21]
 8007ebc:	2301      	movs	r3, #1
 8007ebe:	e0c8      	b.n	8008052 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	7d1b      	ldrb	r3, [r3, #20]
 8007ec4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007ec8:	b2da      	uxtb	r2, r3
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8007ece:	693a      	ldr	r2, [r7, #16]
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	69db      	ldr	r3, [r3, #28]
 8007ed4:	4619      	mov	r1, r3
 8007ed6:	4610      	mov	r0, r2
 8007ed8:	f7fe fbfa 	bl	80066d0 <clust2sect>
 8007edc:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8007ede:	697b      	ldr	r3, [r7, #20]
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d104      	bne.n	8007eee <f_write+0x17e>
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	2202      	movs	r2, #2
 8007ee8:	755a      	strb	r2, [r3, #21]
 8007eea:	2302      	movs	r3, #2
 8007eec:	e0b1      	b.n	8008052 <f_write+0x2e2>
			sect += csect;
 8007eee:	697a      	ldr	r2, [r7, #20]
 8007ef0:	69bb      	ldr	r3, [r7, #24]
 8007ef2:	4413      	add	r3, r2
 8007ef4:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	0a5b      	lsrs	r3, r3, #9
 8007efa:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8007efc:	6a3b      	ldr	r3, [r7, #32]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d03c      	beq.n	8007f7c <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8007f02:	69ba      	ldr	r2, [r7, #24]
 8007f04:	6a3b      	ldr	r3, [r7, #32]
 8007f06:	4413      	add	r3, r2
 8007f08:	693a      	ldr	r2, [r7, #16]
 8007f0a:	8952      	ldrh	r2, [r2, #10]
 8007f0c:	4293      	cmp	r3, r2
 8007f0e:	d905      	bls.n	8007f1c <f_write+0x1ac>
					cc = fs->csize - csect;
 8007f10:	693b      	ldr	r3, [r7, #16]
 8007f12:	895b      	ldrh	r3, [r3, #10]
 8007f14:	461a      	mov	r2, r3
 8007f16:	69bb      	ldr	r3, [r7, #24]
 8007f18:	1ad3      	subs	r3, r2, r3
 8007f1a:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007f1c:	693b      	ldr	r3, [r7, #16]
 8007f1e:	7858      	ldrb	r0, [r3, #1]
 8007f20:	6a3b      	ldr	r3, [r7, #32]
 8007f22:	697a      	ldr	r2, [r7, #20]
 8007f24:	69f9      	ldr	r1, [r7, #28]
 8007f26:	f7fe f849 	bl	8005fbc <disk_write>
 8007f2a:	4603      	mov	r3, r0
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d004      	beq.n	8007f3a <f_write+0x1ca>
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	2201      	movs	r2, #1
 8007f34:	755a      	strb	r2, [r3, #21]
 8007f36:	2301      	movs	r3, #1
 8007f38:	e08b      	b.n	8008052 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	6a1a      	ldr	r2, [r3, #32]
 8007f3e:	697b      	ldr	r3, [r7, #20]
 8007f40:	1ad3      	subs	r3, r2, r3
 8007f42:	6a3a      	ldr	r2, [r7, #32]
 8007f44:	429a      	cmp	r2, r3
 8007f46:	d915      	bls.n	8007f74 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	6a1a      	ldr	r2, [r3, #32]
 8007f52:	697b      	ldr	r3, [r7, #20]
 8007f54:	1ad3      	subs	r3, r2, r3
 8007f56:	025b      	lsls	r3, r3, #9
 8007f58:	69fa      	ldr	r2, [r7, #28]
 8007f5a:	4413      	add	r3, r2
 8007f5c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007f60:	4619      	mov	r1, r3
 8007f62:	f7fe f8eb 	bl	800613c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	7d1b      	ldrb	r3, [r3, #20]
 8007f6a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007f6e:	b2da      	uxtb	r2, r3
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8007f74:	6a3b      	ldr	r3, [r7, #32]
 8007f76:	025b      	lsls	r3, r3, #9
 8007f78:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 8007f7a:	e03f      	b.n	8007ffc <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	6a1b      	ldr	r3, [r3, #32]
 8007f80:	697a      	ldr	r2, [r7, #20]
 8007f82:	429a      	cmp	r2, r3
 8007f84:	d016      	beq.n	8007fb4 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	699a      	ldr	r2, [r3, #24]
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8007f8e:	429a      	cmp	r2, r3
 8007f90:	d210      	bcs.n	8007fb4 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8007f92:	693b      	ldr	r3, [r7, #16]
 8007f94:	7858      	ldrb	r0, [r3, #1]
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007f9c:	2301      	movs	r3, #1
 8007f9e:	697a      	ldr	r2, [r7, #20]
 8007fa0:	f7fd ffec 	bl	8005f7c <disk_read>
 8007fa4:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d004      	beq.n	8007fb4 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	2201      	movs	r2, #1
 8007fae:	755a      	strb	r2, [r3, #21]
 8007fb0:	2301      	movs	r3, #1
 8007fb2:	e04e      	b.n	8008052 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	697a      	ldr	r2, [r7, #20]
 8007fb8:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	699b      	ldr	r3, [r3, #24]
 8007fbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007fc2:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8007fc6:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8007fc8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	429a      	cmp	r2, r3
 8007fce:	d901      	bls.n	8007fd4 <f_write+0x264>
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	699b      	ldr	r3, [r3, #24]
 8007fde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007fe2:	4413      	add	r3, r2
 8007fe4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007fe6:	69f9      	ldr	r1, [r7, #28]
 8007fe8:	4618      	mov	r0, r3
 8007fea:	f7fe f8a7 	bl	800613c <mem_cpy>
		fp->flag |= FA_DIRTY;
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	7d1b      	ldrb	r3, [r3, #20]
 8007ff2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007ff6:	b2da      	uxtb	r2, r3
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8007ffc:	69fa      	ldr	r2, [r7, #28]
 8007ffe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008000:	4413      	add	r3, r2
 8008002:	61fb      	str	r3, [r7, #28]
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	699a      	ldr	r2, [r3, #24]
 8008008:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800800a:	441a      	add	r2, r3
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	619a      	str	r2, [r3, #24]
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	68da      	ldr	r2, [r3, #12]
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	699b      	ldr	r3, [r3, #24]
 8008018:	429a      	cmp	r2, r3
 800801a:	bf38      	it	cc
 800801c:	461a      	movcc	r2, r3
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	60da      	str	r2, [r3, #12]
 8008022:	683b      	ldr	r3, [r7, #0]
 8008024:	681a      	ldr	r2, [r3, #0]
 8008026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008028:	441a      	add	r2, r3
 800802a:	683b      	ldr	r3, [r7, #0]
 800802c:	601a      	str	r2, [r3, #0]
 800802e:	687a      	ldr	r2, [r7, #4]
 8008030:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008032:	1ad3      	subs	r3, r2, r3
 8008034:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	2b00      	cmp	r3, #0
 800803a:	f47f aed4 	bne.w	8007de6 <f_write+0x76>
 800803e:	e000      	b.n	8008042 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008040:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	7d1b      	ldrb	r3, [r3, #20]
 8008046:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800804a:	b2da      	uxtb	r2, r3
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8008050:	2300      	movs	r3, #0
}
 8008052:	4618      	mov	r0, r3
 8008054:	3730      	adds	r7, #48	@ 0x30
 8008056:	46bd      	mov	sp, r7
 8008058:	bd80      	pop	{r7, pc}

0800805a <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800805a:	b580      	push	{r7, lr}
 800805c:	b086      	sub	sp, #24
 800805e:	af00      	add	r7, sp, #0
 8008060:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	f107 0208 	add.w	r2, r7, #8
 8008068:	4611      	mov	r1, r2
 800806a:	4618      	mov	r0, r3
 800806c:	f7ff fc4a 	bl	8007904 <validate>
 8008070:	4603      	mov	r3, r0
 8008072:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008074:	7dfb      	ldrb	r3, [r7, #23]
 8008076:	2b00      	cmp	r3, #0
 8008078:	d168      	bne.n	800814c <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	7d1b      	ldrb	r3, [r3, #20]
 800807e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008082:	2b00      	cmp	r3, #0
 8008084:	d062      	beq.n	800814c <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	7d1b      	ldrb	r3, [r3, #20]
 800808a:	b25b      	sxtb	r3, r3
 800808c:	2b00      	cmp	r3, #0
 800808e:	da15      	bge.n	80080bc <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8008090:	68bb      	ldr	r3, [r7, #8]
 8008092:	7858      	ldrb	r0, [r3, #1]
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	6a1a      	ldr	r2, [r3, #32]
 800809e:	2301      	movs	r3, #1
 80080a0:	f7fd ff8c 	bl	8005fbc <disk_write>
 80080a4:	4603      	mov	r3, r0
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d001      	beq.n	80080ae <f_sync+0x54>
 80080aa:	2301      	movs	r3, #1
 80080ac:	e04f      	b.n	800814e <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	7d1b      	ldrb	r3, [r3, #20]
 80080b2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80080b6:	b2da      	uxtb	r2, r3
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80080bc:	f7fd f9d6 	bl	800546c <get_fattime>
 80080c0:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80080c2:	68ba      	ldr	r2, [r7, #8]
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080c8:	4619      	mov	r1, r3
 80080ca:	4610      	mov	r0, r2
 80080cc:	f7fe fa64 	bl	8006598 <move_window>
 80080d0:	4603      	mov	r3, r0
 80080d2:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80080d4:	7dfb      	ldrb	r3, [r7, #23]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d138      	bne.n	800814c <f_sync+0xf2>
					dir = fp->dir_ptr;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080de:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	330b      	adds	r3, #11
 80080e4:	781a      	ldrb	r2, [r3, #0]
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	330b      	adds	r3, #11
 80080ea:	f042 0220 	orr.w	r2, r2, #32
 80080ee:	b2d2      	uxtb	r2, r2
 80080f0:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	6818      	ldr	r0, [r3, #0]
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	689b      	ldr	r3, [r3, #8]
 80080fa:	461a      	mov	r2, r3
 80080fc:	68f9      	ldr	r1, [r7, #12]
 80080fe:	f7fe ff6e 	bl	8006fde <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	f103 021c 	add.w	r2, r3, #28
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	68db      	ldr	r3, [r3, #12]
 800810c:	4619      	mov	r1, r3
 800810e:	4610      	mov	r0, r2
 8008110:	f7fd ffe8 	bl	80060e4 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	3316      	adds	r3, #22
 8008118:	6939      	ldr	r1, [r7, #16]
 800811a:	4618      	mov	r0, r3
 800811c:	f7fd ffe2 	bl	80060e4 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	3312      	adds	r3, #18
 8008124:	2100      	movs	r1, #0
 8008126:	4618      	mov	r0, r3
 8008128:	f7fd ffc1 	bl	80060ae <st_word>
					fs->wflag = 1;
 800812c:	68bb      	ldr	r3, [r7, #8]
 800812e:	2201      	movs	r2, #1
 8008130:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8008132:	68bb      	ldr	r3, [r7, #8]
 8008134:	4618      	mov	r0, r3
 8008136:	f7fe fa5d 	bl	80065f4 <sync_fs>
 800813a:	4603      	mov	r3, r0
 800813c:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	7d1b      	ldrb	r3, [r3, #20]
 8008142:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008146:	b2da      	uxtb	r2, r3
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800814c:	7dfb      	ldrb	r3, [r7, #23]
}
 800814e:	4618      	mov	r0, r3
 8008150:	3718      	adds	r7, #24
 8008152:	46bd      	mov	sp, r7
 8008154:	bd80      	pop	{r7, pc}

08008156 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8008156:	b580      	push	{r7, lr}
 8008158:	b084      	sub	sp, #16
 800815a:	af00      	add	r7, sp, #0
 800815c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800815e:	6878      	ldr	r0, [r7, #4]
 8008160:	f7ff ff7b 	bl	800805a <f_sync>
 8008164:	4603      	mov	r3, r0
 8008166:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8008168:	7bfb      	ldrb	r3, [r7, #15]
 800816a:	2b00      	cmp	r3, #0
 800816c:	d118      	bne.n	80081a0 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	f107 0208 	add.w	r2, r7, #8
 8008174:	4611      	mov	r1, r2
 8008176:	4618      	mov	r0, r3
 8008178:	f7ff fbc4 	bl	8007904 <validate>
 800817c:	4603      	mov	r3, r0
 800817e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008180:	7bfb      	ldrb	r3, [r7, #15]
 8008182:	2b00      	cmp	r3, #0
 8008184:	d10c      	bne.n	80081a0 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	691b      	ldr	r3, [r3, #16]
 800818a:	4618      	mov	r0, r3
 800818c:	f7fe f960 	bl	8006450 <dec_lock>
 8008190:	4603      	mov	r3, r0
 8008192:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8008194:	7bfb      	ldrb	r3, [r7, #15]
 8008196:	2b00      	cmp	r3, #0
 8008198:	d102      	bne.n	80081a0 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	2200      	movs	r2, #0
 800819e:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80081a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80081a2:	4618      	mov	r0, r3
 80081a4:	3710      	adds	r7, #16
 80081a6:	46bd      	mov	sp, r7
 80081a8:	bd80      	pop	{r7, pc}

080081aa <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 80081aa:	b580      	push	{r7, lr}
 80081ac:	b090      	sub	sp, #64	@ 0x40
 80081ae:	af00      	add	r7, sp, #0
 80081b0:	6078      	str	r0, [r7, #4]
 80081b2:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	f107 0208 	add.w	r2, r7, #8
 80081ba:	4611      	mov	r1, r2
 80081bc:	4618      	mov	r0, r3
 80081be:	f7ff fba1 	bl	8007904 <validate>
 80081c2:	4603      	mov	r3, r0
 80081c4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 80081c8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d103      	bne.n	80081d8 <f_lseek+0x2e>
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	7d5b      	ldrb	r3, [r3, #21]
 80081d4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 80081d8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d002      	beq.n	80081e6 <f_lseek+0x3c>
 80081e0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80081e4:	e1e6      	b.n	80085b4 <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	f000 80d1 	beq.w	8008392 <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 80081f0:	683b      	ldr	r3, [r7, #0]
 80081f2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80081f6:	d15a      	bne.n	80082ae <f_lseek+0x104>
			tbl = fp->cltbl;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081fc:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 80081fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008200:	1d1a      	adds	r2, r3, #4
 8008202:	627a      	str	r2, [r7, #36]	@ 0x24
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	617b      	str	r3, [r7, #20]
 8008208:	2302      	movs	r3, #2
 800820a:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	689b      	ldr	r3, [r3, #8]
 8008210:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 8008212:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008214:	2b00      	cmp	r3, #0
 8008216:	d03a      	beq.n	800828e <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8008218:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800821a:	613b      	str	r3, [r7, #16]
 800821c:	2300      	movs	r3, #0
 800821e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008220:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008222:	3302      	adds	r3, #2
 8008224:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 8008226:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008228:	60fb      	str	r3, [r7, #12]
 800822a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800822c:	3301      	adds	r3, #1
 800822e:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008234:	4618      	mov	r0, r3
 8008236:	f7fe fa6a 	bl	800670e <get_fat>
 800823a:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800823c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800823e:	2b01      	cmp	r3, #1
 8008240:	d804      	bhi.n	800824c <f_lseek+0xa2>
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	2202      	movs	r2, #2
 8008246:	755a      	strb	r2, [r3, #21]
 8008248:	2302      	movs	r3, #2
 800824a:	e1b3      	b.n	80085b4 <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800824c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800824e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008252:	d104      	bne.n	800825e <f_lseek+0xb4>
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	2201      	movs	r2, #1
 8008258:	755a      	strb	r2, [r3, #21]
 800825a:	2301      	movs	r3, #1
 800825c:	e1aa      	b.n	80085b4 <f_lseek+0x40a>
					} while (cl == pcl + 1);
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	3301      	adds	r3, #1
 8008262:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008264:	429a      	cmp	r2, r3
 8008266:	d0de      	beq.n	8008226 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8008268:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800826a:	697b      	ldr	r3, [r7, #20]
 800826c:	429a      	cmp	r2, r3
 800826e:	d809      	bhi.n	8008284 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 8008270:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008272:	1d1a      	adds	r2, r3, #4
 8008274:	627a      	str	r2, [r7, #36]	@ 0x24
 8008276:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008278:	601a      	str	r2, [r3, #0]
 800827a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800827c:	1d1a      	adds	r2, r3, #4
 800827e:	627a      	str	r2, [r7, #36]	@ 0x24
 8008280:	693a      	ldr	r2, [r7, #16]
 8008282:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8008284:	68bb      	ldr	r3, [r7, #8]
 8008286:	695b      	ldr	r3, [r3, #20]
 8008288:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800828a:	429a      	cmp	r2, r3
 800828c:	d3c4      	bcc.n	8008218 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008292:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008294:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8008296:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008298:	697b      	ldr	r3, [r7, #20]
 800829a:	429a      	cmp	r2, r3
 800829c:	d803      	bhi.n	80082a6 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800829e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082a0:	2200      	movs	r2, #0
 80082a2:	601a      	str	r2, [r3, #0]
 80082a4:	e184      	b.n	80085b0 <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 80082a6:	2311      	movs	r3, #17
 80082a8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 80082ac:	e180      	b.n	80085b0 <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	68db      	ldr	r3, [r3, #12]
 80082b2:	683a      	ldr	r2, [r7, #0]
 80082b4:	429a      	cmp	r2, r3
 80082b6:	d902      	bls.n	80082be <f_lseek+0x114>
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	68db      	ldr	r3, [r3, #12]
 80082bc:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	683a      	ldr	r2, [r7, #0]
 80082c2:	619a      	str	r2, [r3, #24]
			if (ofs) {
 80082c4:	683b      	ldr	r3, [r7, #0]
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	f000 8172 	beq.w	80085b0 <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 80082cc:	683b      	ldr	r3, [r7, #0]
 80082ce:	3b01      	subs	r3, #1
 80082d0:	4619      	mov	r1, r3
 80082d2:	6878      	ldr	r0, [r7, #4]
 80082d4:	f7fe fca9 	bl	8006c2a <clmt_clust>
 80082d8:	4602      	mov	r2, r0
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 80082de:	68ba      	ldr	r2, [r7, #8]
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	69db      	ldr	r3, [r3, #28]
 80082e4:	4619      	mov	r1, r3
 80082e6:	4610      	mov	r0, r2
 80082e8:	f7fe f9f2 	bl	80066d0 <clust2sect>
 80082ec:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 80082ee:	69bb      	ldr	r3, [r7, #24]
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d104      	bne.n	80082fe <f_lseek+0x154>
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	2202      	movs	r2, #2
 80082f8:	755a      	strb	r2, [r3, #21]
 80082fa:	2302      	movs	r3, #2
 80082fc:	e15a      	b.n	80085b4 <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 80082fe:	683b      	ldr	r3, [r7, #0]
 8008300:	3b01      	subs	r3, #1
 8008302:	0a5b      	lsrs	r3, r3, #9
 8008304:	68ba      	ldr	r2, [r7, #8]
 8008306:	8952      	ldrh	r2, [r2, #10]
 8008308:	3a01      	subs	r2, #1
 800830a:	4013      	ands	r3, r2
 800830c:	69ba      	ldr	r2, [r7, #24]
 800830e:	4413      	add	r3, r2
 8008310:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	699b      	ldr	r3, [r3, #24]
 8008316:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800831a:	2b00      	cmp	r3, #0
 800831c:	f000 8148 	beq.w	80085b0 <f_lseek+0x406>
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	6a1b      	ldr	r3, [r3, #32]
 8008324:	69ba      	ldr	r2, [r7, #24]
 8008326:	429a      	cmp	r2, r3
 8008328:	f000 8142 	beq.w	80085b0 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	7d1b      	ldrb	r3, [r3, #20]
 8008330:	b25b      	sxtb	r3, r3
 8008332:	2b00      	cmp	r3, #0
 8008334:	da18      	bge.n	8008368 <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008336:	68bb      	ldr	r3, [r7, #8]
 8008338:	7858      	ldrb	r0, [r3, #1]
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	6a1a      	ldr	r2, [r3, #32]
 8008344:	2301      	movs	r3, #1
 8008346:	f7fd fe39 	bl	8005fbc <disk_write>
 800834a:	4603      	mov	r3, r0
 800834c:	2b00      	cmp	r3, #0
 800834e:	d004      	beq.n	800835a <f_lseek+0x1b0>
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	2201      	movs	r2, #1
 8008354:	755a      	strb	r2, [r3, #21]
 8008356:	2301      	movs	r3, #1
 8008358:	e12c      	b.n	80085b4 <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	7d1b      	ldrb	r3, [r3, #20]
 800835e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008362:	b2da      	uxtb	r2, r3
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8008368:	68bb      	ldr	r3, [r7, #8]
 800836a:	7858      	ldrb	r0, [r3, #1]
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008372:	2301      	movs	r3, #1
 8008374:	69ba      	ldr	r2, [r7, #24]
 8008376:	f7fd fe01 	bl	8005f7c <disk_read>
 800837a:	4603      	mov	r3, r0
 800837c:	2b00      	cmp	r3, #0
 800837e:	d004      	beq.n	800838a <f_lseek+0x1e0>
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	2201      	movs	r2, #1
 8008384:	755a      	strb	r2, [r3, #21]
 8008386:	2301      	movs	r3, #1
 8008388:	e114      	b.n	80085b4 <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	69ba      	ldr	r2, [r7, #24]
 800838e:	621a      	str	r2, [r3, #32]
 8008390:	e10e      	b.n	80085b0 <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	68db      	ldr	r3, [r3, #12]
 8008396:	683a      	ldr	r2, [r7, #0]
 8008398:	429a      	cmp	r2, r3
 800839a:	d908      	bls.n	80083ae <f_lseek+0x204>
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	7d1b      	ldrb	r3, [r3, #20]
 80083a0:	f003 0302 	and.w	r3, r3, #2
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d102      	bne.n	80083ae <f_lseek+0x204>
			ofs = fp->obj.objsize;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	68db      	ldr	r3, [r3, #12]
 80083ac:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	699b      	ldr	r3, [r3, #24]
 80083b2:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 80083b4:	2300      	movs	r3, #0
 80083b6:	637b      	str	r3, [r7, #52]	@ 0x34
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80083bc:	619a      	str	r2, [r3, #24]
		if (ofs) {
 80083be:	683b      	ldr	r3, [r7, #0]
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	f000 80a7 	beq.w	8008514 <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 80083c6:	68bb      	ldr	r3, [r7, #8]
 80083c8:	895b      	ldrh	r3, [r3, #10]
 80083ca:	025b      	lsls	r3, r3, #9
 80083cc:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 80083ce:	6a3b      	ldr	r3, [r7, #32]
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d01b      	beq.n	800840c <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 80083d4:	683b      	ldr	r3, [r7, #0]
 80083d6:	1e5a      	subs	r2, r3, #1
 80083d8:	69fb      	ldr	r3, [r7, #28]
 80083da:	fbb2 f2f3 	udiv	r2, r2, r3
 80083de:	6a3b      	ldr	r3, [r7, #32]
 80083e0:	1e59      	subs	r1, r3, #1
 80083e2:	69fb      	ldr	r3, [r7, #28]
 80083e4:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 80083e8:	429a      	cmp	r2, r3
 80083ea:	d30f      	bcc.n	800840c <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 80083ec:	6a3b      	ldr	r3, [r7, #32]
 80083ee:	1e5a      	subs	r2, r3, #1
 80083f0:	69fb      	ldr	r3, [r7, #28]
 80083f2:	425b      	negs	r3, r3
 80083f4:	401a      	ands	r2, r3
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	699b      	ldr	r3, [r3, #24]
 80083fe:	683a      	ldr	r2, [r7, #0]
 8008400:	1ad3      	subs	r3, r2, r3
 8008402:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	69db      	ldr	r3, [r3, #28]
 8008408:	63bb      	str	r3, [r7, #56]	@ 0x38
 800840a:	e022      	b.n	8008452 <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	689b      	ldr	r3, [r3, #8]
 8008410:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8008412:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008414:	2b00      	cmp	r3, #0
 8008416:	d119      	bne.n	800844c <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	2100      	movs	r1, #0
 800841c:	4618      	mov	r0, r3
 800841e:	f7fe fb6c 	bl	8006afa <create_chain>
 8008422:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8008424:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008426:	2b01      	cmp	r3, #1
 8008428:	d104      	bne.n	8008434 <f_lseek+0x28a>
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	2202      	movs	r2, #2
 800842e:	755a      	strb	r2, [r3, #21]
 8008430:	2302      	movs	r3, #2
 8008432:	e0bf      	b.n	80085b4 <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008434:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008436:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800843a:	d104      	bne.n	8008446 <f_lseek+0x29c>
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	2201      	movs	r2, #1
 8008440:	755a      	strb	r2, [r3, #21]
 8008442:	2301      	movs	r3, #1
 8008444:	e0b6      	b.n	80085b4 <f_lseek+0x40a>
					fp->obj.sclust = clst;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800844a:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008450:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8008452:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008454:	2b00      	cmp	r3, #0
 8008456:	d05d      	beq.n	8008514 <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 8008458:	e03a      	b.n	80084d0 <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 800845a:	683a      	ldr	r2, [r7, #0]
 800845c:	69fb      	ldr	r3, [r7, #28]
 800845e:	1ad3      	subs	r3, r2, r3
 8008460:	603b      	str	r3, [r7, #0]
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	699a      	ldr	r2, [r3, #24]
 8008466:	69fb      	ldr	r3, [r7, #28]
 8008468:	441a      	add	r2, r3
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	7d1b      	ldrb	r3, [r3, #20]
 8008472:	f003 0302 	and.w	r3, r3, #2
 8008476:	2b00      	cmp	r3, #0
 8008478:	d00b      	beq.n	8008492 <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800847e:	4618      	mov	r0, r3
 8008480:	f7fe fb3b 	bl	8006afa <create_chain>
 8008484:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8008486:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008488:	2b00      	cmp	r3, #0
 800848a:	d108      	bne.n	800849e <f_lseek+0x2f4>
							ofs = 0; break;
 800848c:	2300      	movs	r3, #0
 800848e:	603b      	str	r3, [r7, #0]
 8008490:	e022      	b.n	80084d8 <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8008496:	4618      	mov	r0, r3
 8008498:	f7fe f939 	bl	800670e <get_fat>
 800849c:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800849e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084a0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80084a4:	d104      	bne.n	80084b0 <f_lseek+0x306>
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	2201      	movs	r2, #1
 80084aa:	755a      	strb	r2, [r3, #21]
 80084ac:	2301      	movs	r3, #1
 80084ae:	e081      	b.n	80085b4 <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 80084b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084b2:	2b01      	cmp	r3, #1
 80084b4:	d904      	bls.n	80084c0 <f_lseek+0x316>
 80084b6:	68bb      	ldr	r3, [r7, #8]
 80084b8:	695b      	ldr	r3, [r3, #20]
 80084ba:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80084bc:	429a      	cmp	r2, r3
 80084be:	d304      	bcc.n	80084ca <f_lseek+0x320>
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	2202      	movs	r2, #2
 80084c4:	755a      	strb	r2, [r3, #21]
 80084c6:	2302      	movs	r3, #2
 80084c8:	e074      	b.n	80085b4 <f_lseek+0x40a>
					fp->clust = clst;
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80084ce:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 80084d0:	683a      	ldr	r2, [r7, #0]
 80084d2:	69fb      	ldr	r3, [r7, #28]
 80084d4:	429a      	cmp	r2, r3
 80084d6:	d8c0      	bhi.n	800845a <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	699a      	ldr	r2, [r3, #24]
 80084dc:	683b      	ldr	r3, [r7, #0]
 80084de:	441a      	add	r2, r3
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 80084e4:	683b      	ldr	r3, [r7, #0]
 80084e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d012      	beq.n	8008514 <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 80084ee:	68bb      	ldr	r3, [r7, #8]
 80084f0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80084f2:	4618      	mov	r0, r3
 80084f4:	f7fe f8ec 	bl	80066d0 <clust2sect>
 80084f8:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 80084fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d104      	bne.n	800850a <f_lseek+0x360>
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	2202      	movs	r2, #2
 8008504:	755a      	strb	r2, [r3, #21]
 8008506:	2302      	movs	r3, #2
 8008508:	e054      	b.n	80085b4 <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 800850a:	683b      	ldr	r3, [r7, #0]
 800850c:	0a5b      	lsrs	r3, r3, #9
 800850e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008510:	4413      	add	r3, r2
 8008512:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	699a      	ldr	r2, [r3, #24]
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	68db      	ldr	r3, [r3, #12]
 800851c:	429a      	cmp	r2, r3
 800851e:	d90a      	bls.n	8008536 <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	699a      	ldr	r2, [r3, #24]
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	7d1b      	ldrb	r3, [r3, #20]
 800852c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008530:	b2da      	uxtb	r2, r3
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	699b      	ldr	r3, [r3, #24]
 800853a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800853e:	2b00      	cmp	r3, #0
 8008540:	d036      	beq.n	80085b0 <f_lseek+0x406>
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	6a1b      	ldr	r3, [r3, #32]
 8008546:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008548:	429a      	cmp	r2, r3
 800854a:	d031      	beq.n	80085b0 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	7d1b      	ldrb	r3, [r3, #20]
 8008550:	b25b      	sxtb	r3, r3
 8008552:	2b00      	cmp	r3, #0
 8008554:	da18      	bge.n	8008588 <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008556:	68bb      	ldr	r3, [r7, #8]
 8008558:	7858      	ldrb	r0, [r3, #1]
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	6a1a      	ldr	r2, [r3, #32]
 8008564:	2301      	movs	r3, #1
 8008566:	f7fd fd29 	bl	8005fbc <disk_write>
 800856a:	4603      	mov	r3, r0
 800856c:	2b00      	cmp	r3, #0
 800856e:	d004      	beq.n	800857a <f_lseek+0x3d0>
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	2201      	movs	r2, #1
 8008574:	755a      	strb	r2, [r3, #21]
 8008576:	2301      	movs	r3, #1
 8008578:	e01c      	b.n	80085b4 <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	7d1b      	ldrb	r3, [r3, #20]
 800857e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008582:	b2da      	uxtb	r2, r3
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8008588:	68bb      	ldr	r3, [r7, #8]
 800858a:	7858      	ldrb	r0, [r3, #1]
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008592:	2301      	movs	r3, #1
 8008594:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008596:	f7fd fcf1 	bl	8005f7c <disk_read>
 800859a:	4603      	mov	r3, r0
 800859c:	2b00      	cmp	r3, #0
 800859e:	d004      	beq.n	80085aa <f_lseek+0x400>
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	2201      	movs	r2, #1
 80085a4:	755a      	strb	r2, [r3, #21]
 80085a6:	2301      	movs	r3, #1
 80085a8:	e004      	b.n	80085b4 <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80085ae:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 80085b0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 80085b4:	4618      	mov	r0, r3
 80085b6:	3740      	adds	r7, #64	@ 0x40
 80085b8:	46bd      	mov	sp, r7
 80085ba:	bd80      	pop	{r7, pc}

080085bc <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 80085bc:	b580      	push	{r7, lr}
 80085be:	b092      	sub	sp, #72	@ 0x48
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	60f8      	str	r0, [r7, #12]
 80085c4:	60b9      	str	r1, [r7, #8]
 80085c6:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 80085c8:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 80085cc:	f107 030c 	add.w	r3, r7, #12
 80085d0:	2200      	movs	r2, #0
 80085d2:	4618      	mov	r0, r3
 80085d4:	f7fe ff4a 	bl	800746c <find_volume>
 80085d8:	4603      	mov	r3, r0
 80085da:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	if (res == FR_OK) {
 80085de:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	f040 8099 	bne.w	800871a <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 80085e8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 80085ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085f0:	691a      	ldr	r2, [r3, #16]
 80085f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085f4:	695b      	ldr	r3, [r3, #20]
 80085f6:	3b02      	subs	r3, #2
 80085f8:	429a      	cmp	r2, r3
 80085fa:	d804      	bhi.n	8008606 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 80085fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085fe:	691a      	ldr	r2, [r3, #16]
 8008600:	68bb      	ldr	r3, [r7, #8]
 8008602:	601a      	str	r2, [r3, #0]
 8008604:	e089      	b.n	800871a <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 8008606:	2300      	movs	r3, #0
 8008608:	643b      	str	r3, [r7, #64]	@ 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 800860a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800860c:	781b      	ldrb	r3, [r3, #0]
 800860e:	2b01      	cmp	r3, #1
 8008610:	d128      	bne.n	8008664 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 8008612:	2302      	movs	r3, #2
 8008614:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008616:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008618:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 800861a:	f107 0314 	add.w	r3, r7, #20
 800861e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008620:	4618      	mov	r0, r3
 8008622:	f7fe f874 	bl	800670e <get_fat>
 8008626:	62f8      	str	r0, [r7, #44]	@ 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8008628:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800862a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800862e:	d103      	bne.n	8008638 <f_getfree+0x7c>
 8008630:	2301      	movs	r3, #1
 8008632:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8008636:	e063      	b.n	8008700 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8008638:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800863a:	2b01      	cmp	r3, #1
 800863c:	d103      	bne.n	8008646 <f_getfree+0x8a>
 800863e:	2302      	movs	r3, #2
 8008640:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8008644:	e05c      	b.n	8008700 <f_getfree+0x144>
					if (stat == 0) nfree++;
 8008646:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008648:	2b00      	cmp	r3, #0
 800864a:	d102      	bne.n	8008652 <f_getfree+0x96>
 800864c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800864e:	3301      	adds	r3, #1
 8008650:	643b      	str	r3, [r7, #64]	@ 0x40
				} while (++clst < fs->n_fatent);
 8008652:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008654:	3301      	adds	r3, #1
 8008656:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008658:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800865a:	695b      	ldr	r3, [r3, #20]
 800865c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800865e:	429a      	cmp	r2, r3
 8008660:	d3db      	bcc.n	800861a <f_getfree+0x5e>
 8008662:	e04d      	b.n	8008700 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 8008664:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008666:	695b      	ldr	r3, [r3, #20]
 8008668:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800866a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800866c:	6a1b      	ldr	r3, [r3, #32]
 800866e:	63bb      	str	r3, [r7, #56]	@ 0x38
					i = 0; p = 0;
 8008670:	2300      	movs	r3, #0
 8008672:	637b      	str	r3, [r7, #52]	@ 0x34
 8008674:	2300      	movs	r3, #0
 8008676:	633b      	str	r3, [r7, #48]	@ 0x30
					do {
						if (i == 0) {
 8008678:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800867a:	2b00      	cmp	r3, #0
 800867c:	d113      	bne.n	80086a6 <f_getfree+0xea>
							res = move_window(fs, sect++);
 800867e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008680:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008682:	1c5a      	adds	r2, r3, #1
 8008684:	63ba      	str	r2, [r7, #56]	@ 0x38
 8008686:	4619      	mov	r1, r3
 8008688:	f7fd ff86 	bl	8006598 <move_window>
 800868c:	4603      	mov	r3, r0
 800868e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
							if (res != FR_OK) break;
 8008692:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8008696:	2b00      	cmp	r3, #0
 8008698:	d131      	bne.n	80086fe <f_getfree+0x142>
							p = fs->win;
 800869a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800869c:	3330      	adds	r3, #48	@ 0x30
 800869e:	633b      	str	r3, [r7, #48]	@ 0x30
							i = SS(fs);
 80086a0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80086a4:	637b      	str	r3, [r7, #52]	@ 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 80086a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086a8:	781b      	ldrb	r3, [r3, #0]
 80086aa:	2b02      	cmp	r3, #2
 80086ac:	d10f      	bne.n	80086ce <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 80086ae:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80086b0:	f7fd fcc2 	bl	8006038 <ld_word>
 80086b4:	4603      	mov	r3, r0
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d102      	bne.n	80086c0 <f_getfree+0x104>
 80086ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80086bc:	3301      	adds	r3, #1
 80086be:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 2; i -= 2;
 80086c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086c2:	3302      	adds	r3, #2
 80086c4:	633b      	str	r3, [r7, #48]	@ 0x30
 80086c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086c8:	3b02      	subs	r3, #2
 80086ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80086cc:	e010      	b.n	80086f0 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 80086ce:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80086d0:	f7fd fcca 	bl	8006068 <ld_dword>
 80086d4:	4603      	mov	r3, r0
 80086d6:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d102      	bne.n	80086e4 <f_getfree+0x128>
 80086de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80086e0:	3301      	adds	r3, #1
 80086e2:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 4; i -= 4;
 80086e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086e6:	3304      	adds	r3, #4
 80086e8:	633b      	str	r3, [r7, #48]	@ 0x30
 80086ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086ec:	3b04      	subs	r3, #4
 80086ee:	637b      	str	r3, [r7, #52]	@ 0x34
						}
					} while (--clst);
 80086f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80086f2:	3b01      	subs	r3, #1
 80086f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80086f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d1bd      	bne.n	8008678 <f_getfree+0xbc>
 80086fc:	e000      	b.n	8008700 <f_getfree+0x144>
							if (res != FR_OK) break;
 80086fe:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 8008700:	68bb      	ldr	r3, [r7, #8]
 8008702:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008704:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 8008706:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008708:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800870a:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 800870c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800870e:	791a      	ldrb	r2, [r3, #4]
 8008710:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008712:	f042 0201 	orr.w	r2, r2, #1
 8008716:	b2d2      	uxtb	r2, r2
 8008718:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 800871a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800871e:	4618      	mov	r0, r3
 8008720:	3748      	adds	r7, #72	@ 0x48
 8008722:	46bd      	mov	sp, r7
 8008724:	bd80      	pop	{r7, pc}
	...

08008728 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8008728:	b480      	push	{r7}
 800872a:	b087      	sub	sp, #28
 800872c:	af00      	add	r7, sp, #0
 800872e:	60f8      	str	r0, [r7, #12]
 8008730:	60b9      	str	r1, [r7, #8]
 8008732:	4613      	mov	r3, r2
 8008734:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8008736:	2301      	movs	r3, #1
 8008738:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800873a:	2300      	movs	r3, #0
 800873c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800873e:	4b1f      	ldr	r3, [pc, #124]	@ (80087bc <FATFS_LinkDriverEx+0x94>)
 8008740:	7a5b      	ldrb	r3, [r3, #9]
 8008742:	b2db      	uxtb	r3, r3
 8008744:	2b00      	cmp	r3, #0
 8008746:	d131      	bne.n	80087ac <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8008748:	4b1c      	ldr	r3, [pc, #112]	@ (80087bc <FATFS_LinkDriverEx+0x94>)
 800874a:	7a5b      	ldrb	r3, [r3, #9]
 800874c:	b2db      	uxtb	r3, r3
 800874e:	461a      	mov	r2, r3
 8008750:	4b1a      	ldr	r3, [pc, #104]	@ (80087bc <FATFS_LinkDriverEx+0x94>)
 8008752:	2100      	movs	r1, #0
 8008754:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8008756:	4b19      	ldr	r3, [pc, #100]	@ (80087bc <FATFS_LinkDriverEx+0x94>)
 8008758:	7a5b      	ldrb	r3, [r3, #9]
 800875a:	b2db      	uxtb	r3, r3
 800875c:	4a17      	ldr	r2, [pc, #92]	@ (80087bc <FATFS_LinkDriverEx+0x94>)
 800875e:	009b      	lsls	r3, r3, #2
 8008760:	4413      	add	r3, r2
 8008762:	68fa      	ldr	r2, [r7, #12]
 8008764:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8008766:	4b15      	ldr	r3, [pc, #84]	@ (80087bc <FATFS_LinkDriverEx+0x94>)
 8008768:	7a5b      	ldrb	r3, [r3, #9]
 800876a:	b2db      	uxtb	r3, r3
 800876c:	461a      	mov	r2, r3
 800876e:	4b13      	ldr	r3, [pc, #76]	@ (80087bc <FATFS_LinkDriverEx+0x94>)
 8008770:	4413      	add	r3, r2
 8008772:	79fa      	ldrb	r2, [r7, #7]
 8008774:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8008776:	4b11      	ldr	r3, [pc, #68]	@ (80087bc <FATFS_LinkDriverEx+0x94>)
 8008778:	7a5b      	ldrb	r3, [r3, #9]
 800877a:	b2db      	uxtb	r3, r3
 800877c:	1c5a      	adds	r2, r3, #1
 800877e:	b2d1      	uxtb	r1, r2
 8008780:	4a0e      	ldr	r2, [pc, #56]	@ (80087bc <FATFS_LinkDriverEx+0x94>)
 8008782:	7251      	strb	r1, [r2, #9]
 8008784:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8008786:	7dbb      	ldrb	r3, [r7, #22]
 8008788:	3330      	adds	r3, #48	@ 0x30
 800878a:	b2da      	uxtb	r2, r3
 800878c:	68bb      	ldr	r3, [r7, #8]
 800878e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8008790:	68bb      	ldr	r3, [r7, #8]
 8008792:	3301      	adds	r3, #1
 8008794:	223a      	movs	r2, #58	@ 0x3a
 8008796:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8008798:	68bb      	ldr	r3, [r7, #8]
 800879a:	3302      	adds	r3, #2
 800879c:	222f      	movs	r2, #47	@ 0x2f
 800879e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80087a0:	68bb      	ldr	r3, [r7, #8]
 80087a2:	3303      	adds	r3, #3
 80087a4:	2200      	movs	r2, #0
 80087a6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80087a8:	2300      	movs	r3, #0
 80087aa:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80087ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80087ae:	4618      	mov	r0, r3
 80087b0:	371c      	adds	r7, #28
 80087b2:	46bd      	mov	sp, r7
 80087b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b8:	4770      	bx	lr
 80087ba:	bf00      	nop
 80087bc:	200049c0 	.word	0x200049c0

080087c0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80087c0:	b580      	push	{r7, lr}
 80087c2:	b082      	sub	sp, #8
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	6078      	str	r0, [r7, #4]
 80087c8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80087ca:	2200      	movs	r2, #0
 80087cc:	6839      	ldr	r1, [r7, #0]
 80087ce:	6878      	ldr	r0, [r7, #4]
 80087d0:	f7ff ffaa 	bl	8008728 <FATFS_LinkDriverEx>
 80087d4:	4603      	mov	r3, r0
}
 80087d6:	4618      	mov	r0, r3
 80087d8:	3708      	adds	r7, #8
 80087da:	46bd      	mov	sp, r7
 80087dc:	bd80      	pop	{r7, pc}
	...

080087e0 <sniprintf>:
 80087e0:	b40c      	push	{r2, r3}
 80087e2:	b530      	push	{r4, r5, lr}
 80087e4:	4b17      	ldr	r3, [pc, #92]	@ (8008844 <sniprintf+0x64>)
 80087e6:	1e0c      	subs	r4, r1, #0
 80087e8:	681d      	ldr	r5, [r3, #0]
 80087ea:	b09d      	sub	sp, #116	@ 0x74
 80087ec:	da08      	bge.n	8008800 <sniprintf+0x20>
 80087ee:	238b      	movs	r3, #139	@ 0x8b
 80087f0:	602b      	str	r3, [r5, #0]
 80087f2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80087f6:	b01d      	add	sp, #116	@ 0x74
 80087f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80087fc:	b002      	add	sp, #8
 80087fe:	4770      	bx	lr
 8008800:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8008804:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008808:	bf14      	ite	ne
 800880a:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 800880e:	4623      	moveq	r3, r4
 8008810:	9304      	str	r3, [sp, #16]
 8008812:	9307      	str	r3, [sp, #28]
 8008814:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008818:	9002      	str	r0, [sp, #8]
 800881a:	9006      	str	r0, [sp, #24]
 800881c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008820:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8008822:	ab21      	add	r3, sp, #132	@ 0x84
 8008824:	a902      	add	r1, sp, #8
 8008826:	4628      	mov	r0, r5
 8008828:	9301      	str	r3, [sp, #4]
 800882a:	f000 f8d7 	bl	80089dc <_svfiprintf_r>
 800882e:	1c43      	adds	r3, r0, #1
 8008830:	bfbc      	itt	lt
 8008832:	238b      	movlt	r3, #139	@ 0x8b
 8008834:	602b      	strlt	r3, [r5, #0]
 8008836:	2c00      	cmp	r4, #0
 8008838:	d0dd      	beq.n	80087f6 <sniprintf+0x16>
 800883a:	9b02      	ldr	r3, [sp, #8]
 800883c:	2200      	movs	r2, #0
 800883e:	701a      	strb	r2, [r3, #0]
 8008840:	e7d9      	b.n	80087f6 <sniprintf+0x16>
 8008842:	bf00      	nop
 8008844:	20000054 	.word	0x20000054

08008848 <_vsniprintf_r>:
 8008848:	b530      	push	{r4, r5, lr}
 800884a:	4614      	mov	r4, r2
 800884c:	2c00      	cmp	r4, #0
 800884e:	b09b      	sub	sp, #108	@ 0x6c
 8008850:	4605      	mov	r5, r0
 8008852:	461a      	mov	r2, r3
 8008854:	da05      	bge.n	8008862 <_vsniprintf_r+0x1a>
 8008856:	238b      	movs	r3, #139	@ 0x8b
 8008858:	6003      	str	r3, [r0, #0]
 800885a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800885e:	b01b      	add	sp, #108	@ 0x6c
 8008860:	bd30      	pop	{r4, r5, pc}
 8008862:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8008866:	f8ad 300c 	strh.w	r3, [sp, #12]
 800886a:	bf14      	ite	ne
 800886c:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8008870:	4623      	moveq	r3, r4
 8008872:	9302      	str	r3, [sp, #8]
 8008874:	9305      	str	r3, [sp, #20]
 8008876:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800887a:	9100      	str	r1, [sp, #0]
 800887c:	9104      	str	r1, [sp, #16]
 800887e:	f8ad 300e 	strh.w	r3, [sp, #14]
 8008882:	4669      	mov	r1, sp
 8008884:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8008886:	f000 f8a9 	bl	80089dc <_svfiprintf_r>
 800888a:	1c43      	adds	r3, r0, #1
 800888c:	bfbc      	itt	lt
 800888e:	238b      	movlt	r3, #139	@ 0x8b
 8008890:	602b      	strlt	r3, [r5, #0]
 8008892:	2c00      	cmp	r4, #0
 8008894:	d0e3      	beq.n	800885e <_vsniprintf_r+0x16>
 8008896:	9b00      	ldr	r3, [sp, #0]
 8008898:	2200      	movs	r2, #0
 800889a:	701a      	strb	r2, [r3, #0]
 800889c:	e7df      	b.n	800885e <_vsniprintf_r+0x16>
	...

080088a0 <vsniprintf>:
 80088a0:	b507      	push	{r0, r1, r2, lr}
 80088a2:	9300      	str	r3, [sp, #0]
 80088a4:	4613      	mov	r3, r2
 80088a6:	460a      	mov	r2, r1
 80088a8:	4601      	mov	r1, r0
 80088aa:	4803      	ldr	r0, [pc, #12]	@ (80088b8 <vsniprintf+0x18>)
 80088ac:	6800      	ldr	r0, [r0, #0]
 80088ae:	f7ff ffcb 	bl	8008848 <_vsniprintf_r>
 80088b2:	b003      	add	sp, #12
 80088b4:	f85d fb04 	ldr.w	pc, [sp], #4
 80088b8:	20000054 	.word	0x20000054

080088bc <memset>:
 80088bc:	4402      	add	r2, r0
 80088be:	4603      	mov	r3, r0
 80088c0:	4293      	cmp	r3, r2
 80088c2:	d100      	bne.n	80088c6 <memset+0xa>
 80088c4:	4770      	bx	lr
 80088c6:	f803 1b01 	strb.w	r1, [r3], #1
 80088ca:	e7f9      	b.n	80088c0 <memset+0x4>

080088cc <__errno>:
 80088cc:	4b01      	ldr	r3, [pc, #4]	@ (80088d4 <__errno+0x8>)
 80088ce:	6818      	ldr	r0, [r3, #0]
 80088d0:	4770      	bx	lr
 80088d2:	bf00      	nop
 80088d4:	20000054 	.word	0x20000054

080088d8 <__libc_init_array>:
 80088d8:	b570      	push	{r4, r5, r6, lr}
 80088da:	4d0d      	ldr	r5, [pc, #52]	@ (8008910 <__libc_init_array+0x38>)
 80088dc:	4c0d      	ldr	r4, [pc, #52]	@ (8008914 <__libc_init_array+0x3c>)
 80088de:	1b64      	subs	r4, r4, r5
 80088e0:	10a4      	asrs	r4, r4, #2
 80088e2:	2600      	movs	r6, #0
 80088e4:	42a6      	cmp	r6, r4
 80088e6:	d109      	bne.n	80088fc <__libc_init_array+0x24>
 80088e8:	4d0b      	ldr	r5, [pc, #44]	@ (8008918 <__libc_init_array+0x40>)
 80088ea:	4c0c      	ldr	r4, [pc, #48]	@ (800891c <__libc_init_array+0x44>)
 80088ec:	f000 fc66 	bl	80091bc <_init>
 80088f0:	1b64      	subs	r4, r4, r5
 80088f2:	10a4      	asrs	r4, r4, #2
 80088f4:	2600      	movs	r6, #0
 80088f6:	42a6      	cmp	r6, r4
 80088f8:	d105      	bne.n	8008906 <__libc_init_array+0x2e>
 80088fa:	bd70      	pop	{r4, r5, r6, pc}
 80088fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8008900:	4798      	blx	r3
 8008902:	3601      	adds	r6, #1
 8008904:	e7ee      	b.n	80088e4 <__libc_init_array+0xc>
 8008906:	f855 3b04 	ldr.w	r3, [r5], #4
 800890a:	4798      	blx	r3
 800890c:	3601      	adds	r6, #1
 800890e:	e7f2      	b.n	80088f6 <__libc_init_array+0x1e>
 8008910:	08009478 	.word	0x08009478
 8008914:	08009478 	.word	0x08009478
 8008918:	08009478 	.word	0x08009478
 800891c:	0800947c 	.word	0x0800947c

08008920 <__retarget_lock_acquire_recursive>:
 8008920:	4770      	bx	lr

08008922 <__retarget_lock_release_recursive>:
 8008922:	4770      	bx	lr

08008924 <__ssputs_r>:
 8008924:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008928:	688e      	ldr	r6, [r1, #8]
 800892a:	461f      	mov	r7, r3
 800892c:	42be      	cmp	r6, r7
 800892e:	680b      	ldr	r3, [r1, #0]
 8008930:	4682      	mov	sl, r0
 8008932:	460c      	mov	r4, r1
 8008934:	4690      	mov	r8, r2
 8008936:	d82d      	bhi.n	8008994 <__ssputs_r+0x70>
 8008938:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800893c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008940:	d026      	beq.n	8008990 <__ssputs_r+0x6c>
 8008942:	6965      	ldr	r5, [r4, #20]
 8008944:	6909      	ldr	r1, [r1, #16]
 8008946:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800894a:	eba3 0901 	sub.w	r9, r3, r1
 800894e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008952:	1c7b      	adds	r3, r7, #1
 8008954:	444b      	add	r3, r9
 8008956:	106d      	asrs	r5, r5, #1
 8008958:	429d      	cmp	r5, r3
 800895a:	bf38      	it	cc
 800895c:	461d      	movcc	r5, r3
 800895e:	0553      	lsls	r3, r2, #21
 8008960:	d527      	bpl.n	80089b2 <__ssputs_r+0x8e>
 8008962:	4629      	mov	r1, r5
 8008964:	f000 f958 	bl	8008c18 <_malloc_r>
 8008968:	4606      	mov	r6, r0
 800896a:	b360      	cbz	r0, 80089c6 <__ssputs_r+0xa2>
 800896c:	6921      	ldr	r1, [r4, #16]
 800896e:	464a      	mov	r2, r9
 8008970:	f000 fbc4 	bl	80090fc <memcpy>
 8008974:	89a3      	ldrh	r3, [r4, #12]
 8008976:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800897a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800897e:	81a3      	strh	r3, [r4, #12]
 8008980:	6126      	str	r6, [r4, #16]
 8008982:	6165      	str	r5, [r4, #20]
 8008984:	444e      	add	r6, r9
 8008986:	eba5 0509 	sub.w	r5, r5, r9
 800898a:	6026      	str	r6, [r4, #0]
 800898c:	60a5      	str	r5, [r4, #8]
 800898e:	463e      	mov	r6, r7
 8008990:	42be      	cmp	r6, r7
 8008992:	d900      	bls.n	8008996 <__ssputs_r+0x72>
 8008994:	463e      	mov	r6, r7
 8008996:	6820      	ldr	r0, [r4, #0]
 8008998:	4632      	mov	r2, r6
 800899a:	4641      	mov	r1, r8
 800899c:	f000 fb84 	bl	80090a8 <memmove>
 80089a0:	68a3      	ldr	r3, [r4, #8]
 80089a2:	1b9b      	subs	r3, r3, r6
 80089a4:	60a3      	str	r3, [r4, #8]
 80089a6:	6823      	ldr	r3, [r4, #0]
 80089a8:	4433      	add	r3, r6
 80089aa:	6023      	str	r3, [r4, #0]
 80089ac:	2000      	movs	r0, #0
 80089ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089b2:	462a      	mov	r2, r5
 80089b4:	f000 fb4a 	bl	800904c <_realloc_r>
 80089b8:	4606      	mov	r6, r0
 80089ba:	2800      	cmp	r0, #0
 80089bc:	d1e0      	bne.n	8008980 <__ssputs_r+0x5c>
 80089be:	6921      	ldr	r1, [r4, #16]
 80089c0:	4650      	mov	r0, sl
 80089c2:	f000 fba9 	bl	8009118 <_free_r>
 80089c6:	230c      	movs	r3, #12
 80089c8:	f8ca 3000 	str.w	r3, [sl]
 80089cc:	89a3      	ldrh	r3, [r4, #12]
 80089ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80089d2:	81a3      	strh	r3, [r4, #12]
 80089d4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80089d8:	e7e9      	b.n	80089ae <__ssputs_r+0x8a>
	...

080089dc <_svfiprintf_r>:
 80089dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089e0:	4698      	mov	r8, r3
 80089e2:	898b      	ldrh	r3, [r1, #12]
 80089e4:	061b      	lsls	r3, r3, #24
 80089e6:	b09d      	sub	sp, #116	@ 0x74
 80089e8:	4607      	mov	r7, r0
 80089ea:	460d      	mov	r5, r1
 80089ec:	4614      	mov	r4, r2
 80089ee:	d510      	bpl.n	8008a12 <_svfiprintf_r+0x36>
 80089f0:	690b      	ldr	r3, [r1, #16]
 80089f2:	b973      	cbnz	r3, 8008a12 <_svfiprintf_r+0x36>
 80089f4:	2140      	movs	r1, #64	@ 0x40
 80089f6:	f000 f90f 	bl	8008c18 <_malloc_r>
 80089fa:	6028      	str	r0, [r5, #0]
 80089fc:	6128      	str	r0, [r5, #16]
 80089fe:	b930      	cbnz	r0, 8008a0e <_svfiprintf_r+0x32>
 8008a00:	230c      	movs	r3, #12
 8008a02:	603b      	str	r3, [r7, #0]
 8008a04:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008a08:	b01d      	add	sp, #116	@ 0x74
 8008a0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a0e:	2340      	movs	r3, #64	@ 0x40
 8008a10:	616b      	str	r3, [r5, #20]
 8008a12:	2300      	movs	r3, #0
 8008a14:	9309      	str	r3, [sp, #36]	@ 0x24
 8008a16:	2320      	movs	r3, #32
 8008a18:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008a1c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008a20:	2330      	movs	r3, #48	@ 0x30
 8008a22:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008bc0 <_svfiprintf_r+0x1e4>
 8008a26:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008a2a:	f04f 0901 	mov.w	r9, #1
 8008a2e:	4623      	mov	r3, r4
 8008a30:	469a      	mov	sl, r3
 8008a32:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008a36:	b10a      	cbz	r2, 8008a3c <_svfiprintf_r+0x60>
 8008a38:	2a25      	cmp	r2, #37	@ 0x25
 8008a3a:	d1f9      	bne.n	8008a30 <_svfiprintf_r+0x54>
 8008a3c:	ebba 0b04 	subs.w	fp, sl, r4
 8008a40:	d00b      	beq.n	8008a5a <_svfiprintf_r+0x7e>
 8008a42:	465b      	mov	r3, fp
 8008a44:	4622      	mov	r2, r4
 8008a46:	4629      	mov	r1, r5
 8008a48:	4638      	mov	r0, r7
 8008a4a:	f7ff ff6b 	bl	8008924 <__ssputs_r>
 8008a4e:	3001      	adds	r0, #1
 8008a50:	f000 80a7 	beq.w	8008ba2 <_svfiprintf_r+0x1c6>
 8008a54:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008a56:	445a      	add	r2, fp
 8008a58:	9209      	str	r2, [sp, #36]	@ 0x24
 8008a5a:	f89a 3000 	ldrb.w	r3, [sl]
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	f000 809f 	beq.w	8008ba2 <_svfiprintf_r+0x1c6>
 8008a64:	2300      	movs	r3, #0
 8008a66:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008a6a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008a6e:	f10a 0a01 	add.w	sl, sl, #1
 8008a72:	9304      	str	r3, [sp, #16]
 8008a74:	9307      	str	r3, [sp, #28]
 8008a76:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008a7a:	931a      	str	r3, [sp, #104]	@ 0x68
 8008a7c:	4654      	mov	r4, sl
 8008a7e:	2205      	movs	r2, #5
 8008a80:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a84:	484e      	ldr	r0, [pc, #312]	@ (8008bc0 <_svfiprintf_r+0x1e4>)
 8008a86:	f7f7 fbb3 	bl	80001f0 <memchr>
 8008a8a:	9a04      	ldr	r2, [sp, #16]
 8008a8c:	b9d8      	cbnz	r0, 8008ac6 <_svfiprintf_r+0xea>
 8008a8e:	06d0      	lsls	r0, r2, #27
 8008a90:	bf44      	itt	mi
 8008a92:	2320      	movmi	r3, #32
 8008a94:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008a98:	0711      	lsls	r1, r2, #28
 8008a9a:	bf44      	itt	mi
 8008a9c:	232b      	movmi	r3, #43	@ 0x2b
 8008a9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008aa2:	f89a 3000 	ldrb.w	r3, [sl]
 8008aa6:	2b2a      	cmp	r3, #42	@ 0x2a
 8008aa8:	d015      	beq.n	8008ad6 <_svfiprintf_r+0xfa>
 8008aaa:	9a07      	ldr	r2, [sp, #28]
 8008aac:	4654      	mov	r4, sl
 8008aae:	2000      	movs	r0, #0
 8008ab0:	f04f 0c0a 	mov.w	ip, #10
 8008ab4:	4621      	mov	r1, r4
 8008ab6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008aba:	3b30      	subs	r3, #48	@ 0x30
 8008abc:	2b09      	cmp	r3, #9
 8008abe:	d94b      	bls.n	8008b58 <_svfiprintf_r+0x17c>
 8008ac0:	b1b0      	cbz	r0, 8008af0 <_svfiprintf_r+0x114>
 8008ac2:	9207      	str	r2, [sp, #28]
 8008ac4:	e014      	b.n	8008af0 <_svfiprintf_r+0x114>
 8008ac6:	eba0 0308 	sub.w	r3, r0, r8
 8008aca:	fa09 f303 	lsl.w	r3, r9, r3
 8008ace:	4313      	orrs	r3, r2
 8008ad0:	9304      	str	r3, [sp, #16]
 8008ad2:	46a2      	mov	sl, r4
 8008ad4:	e7d2      	b.n	8008a7c <_svfiprintf_r+0xa0>
 8008ad6:	9b03      	ldr	r3, [sp, #12]
 8008ad8:	1d19      	adds	r1, r3, #4
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	9103      	str	r1, [sp, #12]
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	bfbb      	ittet	lt
 8008ae2:	425b      	neglt	r3, r3
 8008ae4:	f042 0202 	orrlt.w	r2, r2, #2
 8008ae8:	9307      	strge	r3, [sp, #28]
 8008aea:	9307      	strlt	r3, [sp, #28]
 8008aec:	bfb8      	it	lt
 8008aee:	9204      	strlt	r2, [sp, #16]
 8008af0:	7823      	ldrb	r3, [r4, #0]
 8008af2:	2b2e      	cmp	r3, #46	@ 0x2e
 8008af4:	d10a      	bne.n	8008b0c <_svfiprintf_r+0x130>
 8008af6:	7863      	ldrb	r3, [r4, #1]
 8008af8:	2b2a      	cmp	r3, #42	@ 0x2a
 8008afa:	d132      	bne.n	8008b62 <_svfiprintf_r+0x186>
 8008afc:	9b03      	ldr	r3, [sp, #12]
 8008afe:	1d1a      	adds	r2, r3, #4
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	9203      	str	r2, [sp, #12]
 8008b04:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008b08:	3402      	adds	r4, #2
 8008b0a:	9305      	str	r3, [sp, #20]
 8008b0c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008bd0 <_svfiprintf_r+0x1f4>
 8008b10:	7821      	ldrb	r1, [r4, #0]
 8008b12:	2203      	movs	r2, #3
 8008b14:	4650      	mov	r0, sl
 8008b16:	f7f7 fb6b 	bl	80001f0 <memchr>
 8008b1a:	b138      	cbz	r0, 8008b2c <_svfiprintf_r+0x150>
 8008b1c:	9b04      	ldr	r3, [sp, #16]
 8008b1e:	eba0 000a 	sub.w	r0, r0, sl
 8008b22:	2240      	movs	r2, #64	@ 0x40
 8008b24:	4082      	lsls	r2, r0
 8008b26:	4313      	orrs	r3, r2
 8008b28:	3401      	adds	r4, #1
 8008b2a:	9304      	str	r3, [sp, #16]
 8008b2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b30:	4824      	ldr	r0, [pc, #144]	@ (8008bc4 <_svfiprintf_r+0x1e8>)
 8008b32:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008b36:	2206      	movs	r2, #6
 8008b38:	f7f7 fb5a 	bl	80001f0 <memchr>
 8008b3c:	2800      	cmp	r0, #0
 8008b3e:	d036      	beq.n	8008bae <_svfiprintf_r+0x1d2>
 8008b40:	4b21      	ldr	r3, [pc, #132]	@ (8008bc8 <_svfiprintf_r+0x1ec>)
 8008b42:	bb1b      	cbnz	r3, 8008b8c <_svfiprintf_r+0x1b0>
 8008b44:	9b03      	ldr	r3, [sp, #12]
 8008b46:	3307      	adds	r3, #7
 8008b48:	f023 0307 	bic.w	r3, r3, #7
 8008b4c:	3308      	adds	r3, #8
 8008b4e:	9303      	str	r3, [sp, #12]
 8008b50:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b52:	4433      	add	r3, r6
 8008b54:	9309      	str	r3, [sp, #36]	@ 0x24
 8008b56:	e76a      	b.n	8008a2e <_svfiprintf_r+0x52>
 8008b58:	fb0c 3202 	mla	r2, ip, r2, r3
 8008b5c:	460c      	mov	r4, r1
 8008b5e:	2001      	movs	r0, #1
 8008b60:	e7a8      	b.n	8008ab4 <_svfiprintf_r+0xd8>
 8008b62:	2300      	movs	r3, #0
 8008b64:	3401      	adds	r4, #1
 8008b66:	9305      	str	r3, [sp, #20]
 8008b68:	4619      	mov	r1, r3
 8008b6a:	f04f 0c0a 	mov.w	ip, #10
 8008b6e:	4620      	mov	r0, r4
 8008b70:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008b74:	3a30      	subs	r2, #48	@ 0x30
 8008b76:	2a09      	cmp	r2, #9
 8008b78:	d903      	bls.n	8008b82 <_svfiprintf_r+0x1a6>
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d0c6      	beq.n	8008b0c <_svfiprintf_r+0x130>
 8008b7e:	9105      	str	r1, [sp, #20]
 8008b80:	e7c4      	b.n	8008b0c <_svfiprintf_r+0x130>
 8008b82:	fb0c 2101 	mla	r1, ip, r1, r2
 8008b86:	4604      	mov	r4, r0
 8008b88:	2301      	movs	r3, #1
 8008b8a:	e7f0      	b.n	8008b6e <_svfiprintf_r+0x192>
 8008b8c:	ab03      	add	r3, sp, #12
 8008b8e:	9300      	str	r3, [sp, #0]
 8008b90:	462a      	mov	r2, r5
 8008b92:	4b0e      	ldr	r3, [pc, #56]	@ (8008bcc <_svfiprintf_r+0x1f0>)
 8008b94:	a904      	add	r1, sp, #16
 8008b96:	4638      	mov	r0, r7
 8008b98:	f3af 8000 	nop.w
 8008b9c:	1c42      	adds	r2, r0, #1
 8008b9e:	4606      	mov	r6, r0
 8008ba0:	d1d6      	bne.n	8008b50 <_svfiprintf_r+0x174>
 8008ba2:	89ab      	ldrh	r3, [r5, #12]
 8008ba4:	065b      	lsls	r3, r3, #25
 8008ba6:	f53f af2d 	bmi.w	8008a04 <_svfiprintf_r+0x28>
 8008baa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008bac:	e72c      	b.n	8008a08 <_svfiprintf_r+0x2c>
 8008bae:	ab03      	add	r3, sp, #12
 8008bb0:	9300      	str	r3, [sp, #0]
 8008bb2:	462a      	mov	r2, r5
 8008bb4:	4b05      	ldr	r3, [pc, #20]	@ (8008bcc <_svfiprintf_r+0x1f0>)
 8008bb6:	a904      	add	r1, sp, #16
 8008bb8:	4638      	mov	r0, r7
 8008bba:	f000 f91b 	bl	8008df4 <_printf_i>
 8008bbe:	e7ed      	b.n	8008b9c <_svfiprintf_r+0x1c0>
 8008bc0:	0800943c 	.word	0x0800943c
 8008bc4:	08009446 	.word	0x08009446
 8008bc8:	00000000 	.word	0x00000000
 8008bcc:	08008925 	.word	0x08008925
 8008bd0:	08009442 	.word	0x08009442

08008bd4 <sbrk_aligned>:
 8008bd4:	b570      	push	{r4, r5, r6, lr}
 8008bd6:	4e0f      	ldr	r6, [pc, #60]	@ (8008c14 <sbrk_aligned+0x40>)
 8008bd8:	460c      	mov	r4, r1
 8008bda:	6831      	ldr	r1, [r6, #0]
 8008bdc:	4605      	mov	r5, r0
 8008bde:	b911      	cbnz	r1, 8008be6 <sbrk_aligned+0x12>
 8008be0:	f000 fa7c 	bl	80090dc <_sbrk_r>
 8008be4:	6030      	str	r0, [r6, #0]
 8008be6:	4621      	mov	r1, r4
 8008be8:	4628      	mov	r0, r5
 8008bea:	f000 fa77 	bl	80090dc <_sbrk_r>
 8008bee:	1c43      	adds	r3, r0, #1
 8008bf0:	d103      	bne.n	8008bfa <sbrk_aligned+0x26>
 8008bf2:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8008bf6:	4620      	mov	r0, r4
 8008bf8:	bd70      	pop	{r4, r5, r6, pc}
 8008bfa:	1cc4      	adds	r4, r0, #3
 8008bfc:	f024 0403 	bic.w	r4, r4, #3
 8008c00:	42a0      	cmp	r0, r4
 8008c02:	d0f8      	beq.n	8008bf6 <sbrk_aligned+0x22>
 8008c04:	1a21      	subs	r1, r4, r0
 8008c06:	4628      	mov	r0, r5
 8008c08:	f000 fa68 	bl	80090dc <_sbrk_r>
 8008c0c:	3001      	adds	r0, #1
 8008c0e:	d1f2      	bne.n	8008bf6 <sbrk_aligned+0x22>
 8008c10:	e7ef      	b.n	8008bf2 <sbrk_aligned+0x1e>
 8008c12:	bf00      	nop
 8008c14:	20004b08 	.word	0x20004b08

08008c18 <_malloc_r>:
 8008c18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008c1c:	1ccd      	adds	r5, r1, #3
 8008c1e:	f025 0503 	bic.w	r5, r5, #3
 8008c22:	3508      	adds	r5, #8
 8008c24:	2d0c      	cmp	r5, #12
 8008c26:	bf38      	it	cc
 8008c28:	250c      	movcc	r5, #12
 8008c2a:	2d00      	cmp	r5, #0
 8008c2c:	4606      	mov	r6, r0
 8008c2e:	db01      	blt.n	8008c34 <_malloc_r+0x1c>
 8008c30:	42a9      	cmp	r1, r5
 8008c32:	d904      	bls.n	8008c3e <_malloc_r+0x26>
 8008c34:	230c      	movs	r3, #12
 8008c36:	6033      	str	r3, [r6, #0]
 8008c38:	2000      	movs	r0, #0
 8008c3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008c3e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008d14 <_malloc_r+0xfc>
 8008c42:	f000 f9f7 	bl	8009034 <__malloc_lock>
 8008c46:	f8d8 3000 	ldr.w	r3, [r8]
 8008c4a:	461c      	mov	r4, r3
 8008c4c:	bb44      	cbnz	r4, 8008ca0 <_malloc_r+0x88>
 8008c4e:	4629      	mov	r1, r5
 8008c50:	4630      	mov	r0, r6
 8008c52:	f7ff ffbf 	bl	8008bd4 <sbrk_aligned>
 8008c56:	1c43      	adds	r3, r0, #1
 8008c58:	4604      	mov	r4, r0
 8008c5a:	d158      	bne.n	8008d0e <_malloc_r+0xf6>
 8008c5c:	f8d8 4000 	ldr.w	r4, [r8]
 8008c60:	4627      	mov	r7, r4
 8008c62:	2f00      	cmp	r7, #0
 8008c64:	d143      	bne.n	8008cee <_malloc_r+0xd6>
 8008c66:	2c00      	cmp	r4, #0
 8008c68:	d04b      	beq.n	8008d02 <_malloc_r+0xea>
 8008c6a:	6823      	ldr	r3, [r4, #0]
 8008c6c:	4639      	mov	r1, r7
 8008c6e:	4630      	mov	r0, r6
 8008c70:	eb04 0903 	add.w	r9, r4, r3
 8008c74:	f000 fa32 	bl	80090dc <_sbrk_r>
 8008c78:	4581      	cmp	r9, r0
 8008c7a:	d142      	bne.n	8008d02 <_malloc_r+0xea>
 8008c7c:	6821      	ldr	r1, [r4, #0]
 8008c7e:	1a6d      	subs	r5, r5, r1
 8008c80:	4629      	mov	r1, r5
 8008c82:	4630      	mov	r0, r6
 8008c84:	f7ff ffa6 	bl	8008bd4 <sbrk_aligned>
 8008c88:	3001      	adds	r0, #1
 8008c8a:	d03a      	beq.n	8008d02 <_malloc_r+0xea>
 8008c8c:	6823      	ldr	r3, [r4, #0]
 8008c8e:	442b      	add	r3, r5
 8008c90:	6023      	str	r3, [r4, #0]
 8008c92:	f8d8 3000 	ldr.w	r3, [r8]
 8008c96:	685a      	ldr	r2, [r3, #4]
 8008c98:	bb62      	cbnz	r2, 8008cf4 <_malloc_r+0xdc>
 8008c9a:	f8c8 7000 	str.w	r7, [r8]
 8008c9e:	e00f      	b.n	8008cc0 <_malloc_r+0xa8>
 8008ca0:	6822      	ldr	r2, [r4, #0]
 8008ca2:	1b52      	subs	r2, r2, r5
 8008ca4:	d420      	bmi.n	8008ce8 <_malloc_r+0xd0>
 8008ca6:	2a0b      	cmp	r2, #11
 8008ca8:	d917      	bls.n	8008cda <_malloc_r+0xc2>
 8008caa:	1961      	adds	r1, r4, r5
 8008cac:	42a3      	cmp	r3, r4
 8008cae:	6025      	str	r5, [r4, #0]
 8008cb0:	bf18      	it	ne
 8008cb2:	6059      	strne	r1, [r3, #4]
 8008cb4:	6863      	ldr	r3, [r4, #4]
 8008cb6:	bf08      	it	eq
 8008cb8:	f8c8 1000 	streq.w	r1, [r8]
 8008cbc:	5162      	str	r2, [r4, r5]
 8008cbe:	604b      	str	r3, [r1, #4]
 8008cc0:	4630      	mov	r0, r6
 8008cc2:	f000 f9bd 	bl	8009040 <__malloc_unlock>
 8008cc6:	f104 000b 	add.w	r0, r4, #11
 8008cca:	1d23      	adds	r3, r4, #4
 8008ccc:	f020 0007 	bic.w	r0, r0, #7
 8008cd0:	1ac2      	subs	r2, r0, r3
 8008cd2:	bf1c      	itt	ne
 8008cd4:	1a1b      	subne	r3, r3, r0
 8008cd6:	50a3      	strne	r3, [r4, r2]
 8008cd8:	e7af      	b.n	8008c3a <_malloc_r+0x22>
 8008cda:	6862      	ldr	r2, [r4, #4]
 8008cdc:	42a3      	cmp	r3, r4
 8008cde:	bf0c      	ite	eq
 8008ce0:	f8c8 2000 	streq.w	r2, [r8]
 8008ce4:	605a      	strne	r2, [r3, #4]
 8008ce6:	e7eb      	b.n	8008cc0 <_malloc_r+0xa8>
 8008ce8:	4623      	mov	r3, r4
 8008cea:	6864      	ldr	r4, [r4, #4]
 8008cec:	e7ae      	b.n	8008c4c <_malloc_r+0x34>
 8008cee:	463c      	mov	r4, r7
 8008cf0:	687f      	ldr	r7, [r7, #4]
 8008cf2:	e7b6      	b.n	8008c62 <_malloc_r+0x4a>
 8008cf4:	461a      	mov	r2, r3
 8008cf6:	685b      	ldr	r3, [r3, #4]
 8008cf8:	42a3      	cmp	r3, r4
 8008cfa:	d1fb      	bne.n	8008cf4 <_malloc_r+0xdc>
 8008cfc:	2300      	movs	r3, #0
 8008cfe:	6053      	str	r3, [r2, #4]
 8008d00:	e7de      	b.n	8008cc0 <_malloc_r+0xa8>
 8008d02:	230c      	movs	r3, #12
 8008d04:	6033      	str	r3, [r6, #0]
 8008d06:	4630      	mov	r0, r6
 8008d08:	f000 f99a 	bl	8009040 <__malloc_unlock>
 8008d0c:	e794      	b.n	8008c38 <_malloc_r+0x20>
 8008d0e:	6005      	str	r5, [r0, #0]
 8008d10:	e7d6      	b.n	8008cc0 <_malloc_r+0xa8>
 8008d12:	bf00      	nop
 8008d14:	20004b0c 	.word	0x20004b0c

08008d18 <_printf_common>:
 8008d18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d1c:	4616      	mov	r6, r2
 8008d1e:	4698      	mov	r8, r3
 8008d20:	688a      	ldr	r2, [r1, #8]
 8008d22:	690b      	ldr	r3, [r1, #16]
 8008d24:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008d28:	4293      	cmp	r3, r2
 8008d2a:	bfb8      	it	lt
 8008d2c:	4613      	movlt	r3, r2
 8008d2e:	6033      	str	r3, [r6, #0]
 8008d30:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008d34:	4607      	mov	r7, r0
 8008d36:	460c      	mov	r4, r1
 8008d38:	b10a      	cbz	r2, 8008d3e <_printf_common+0x26>
 8008d3a:	3301      	adds	r3, #1
 8008d3c:	6033      	str	r3, [r6, #0]
 8008d3e:	6823      	ldr	r3, [r4, #0]
 8008d40:	0699      	lsls	r1, r3, #26
 8008d42:	bf42      	ittt	mi
 8008d44:	6833      	ldrmi	r3, [r6, #0]
 8008d46:	3302      	addmi	r3, #2
 8008d48:	6033      	strmi	r3, [r6, #0]
 8008d4a:	6825      	ldr	r5, [r4, #0]
 8008d4c:	f015 0506 	ands.w	r5, r5, #6
 8008d50:	d106      	bne.n	8008d60 <_printf_common+0x48>
 8008d52:	f104 0a19 	add.w	sl, r4, #25
 8008d56:	68e3      	ldr	r3, [r4, #12]
 8008d58:	6832      	ldr	r2, [r6, #0]
 8008d5a:	1a9b      	subs	r3, r3, r2
 8008d5c:	42ab      	cmp	r3, r5
 8008d5e:	dc26      	bgt.n	8008dae <_printf_common+0x96>
 8008d60:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008d64:	6822      	ldr	r2, [r4, #0]
 8008d66:	3b00      	subs	r3, #0
 8008d68:	bf18      	it	ne
 8008d6a:	2301      	movne	r3, #1
 8008d6c:	0692      	lsls	r2, r2, #26
 8008d6e:	d42b      	bmi.n	8008dc8 <_printf_common+0xb0>
 8008d70:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008d74:	4641      	mov	r1, r8
 8008d76:	4638      	mov	r0, r7
 8008d78:	47c8      	blx	r9
 8008d7a:	3001      	adds	r0, #1
 8008d7c:	d01e      	beq.n	8008dbc <_printf_common+0xa4>
 8008d7e:	6823      	ldr	r3, [r4, #0]
 8008d80:	6922      	ldr	r2, [r4, #16]
 8008d82:	f003 0306 	and.w	r3, r3, #6
 8008d86:	2b04      	cmp	r3, #4
 8008d88:	bf02      	ittt	eq
 8008d8a:	68e5      	ldreq	r5, [r4, #12]
 8008d8c:	6833      	ldreq	r3, [r6, #0]
 8008d8e:	1aed      	subeq	r5, r5, r3
 8008d90:	68a3      	ldr	r3, [r4, #8]
 8008d92:	bf0c      	ite	eq
 8008d94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008d98:	2500      	movne	r5, #0
 8008d9a:	4293      	cmp	r3, r2
 8008d9c:	bfc4      	itt	gt
 8008d9e:	1a9b      	subgt	r3, r3, r2
 8008da0:	18ed      	addgt	r5, r5, r3
 8008da2:	2600      	movs	r6, #0
 8008da4:	341a      	adds	r4, #26
 8008da6:	42b5      	cmp	r5, r6
 8008da8:	d11a      	bne.n	8008de0 <_printf_common+0xc8>
 8008daa:	2000      	movs	r0, #0
 8008dac:	e008      	b.n	8008dc0 <_printf_common+0xa8>
 8008dae:	2301      	movs	r3, #1
 8008db0:	4652      	mov	r2, sl
 8008db2:	4641      	mov	r1, r8
 8008db4:	4638      	mov	r0, r7
 8008db6:	47c8      	blx	r9
 8008db8:	3001      	adds	r0, #1
 8008dba:	d103      	bne.n	8008dc4 <_printf_common+0xac>
 8008dbc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008dc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008dc4:	3501      	adds	r5, #1
 8008dc6:	e7c6      	b.n	8008d56 <_printf_common+0x3e>
 8008dc8:	18e1      	adds	r1, r4, r3
 8008dca:	1c5a      	adds	r2, r3, #1
 8008dcc:	2030      	movs	r0, #48	@ 0x30
 8008dce:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008dd2:	4422      	add	r2, r4
 8008dd4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008dd8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008ddc:	3302      	adds	r3, #2
 8008dde:	e7c7      	b.n	8008d70 <_printf_common+0x58>
 8008de0:	2301      	movs	r3, #1
 8008de2:	4622      	mov	r2, r4
 8008de4:	4641      	mov	r1, r8
 8008de6:	4638      	mov	r0, r7
 8008de8:	47c8      	blx	r9
 8008dea:	3001      	adds	r0, #1
 8008dec:	d0e6      	beq.n	8008dbc <_printf_common+0xa4>
 8008dee:	3601      	adds	r6, #1
 8008df0:	e7d9      	b.n	8008da6 <_printf_common+0x8e>
	...

08008df4 <_printf_i>:
 8008df4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008df8:	7e0f      	ldrb	r7, [r1, #24]
 8008dfa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008dfc:	2f78      	cmp	r7, #120	@ 0x78
 8008dfe:	4691      	mov	r9, r2
 8008e00:	4680      	mov	r8, r0
 8008e02:	460c      	mov	r4, r1
 8008e04:	469a      	mov	sl, r3
 8008e06:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008e0a:	d807      	bhi.n	8008e1c <_printf_i+0x28>
 8008e0c:	2f62      	cmp	r7, #98	@ 0x62
 8008e0e:	d80a      	bhi.n	8008e26 <_printf_i+0x32>
 8008e10:	2f00      	cmp	r7, #0
 8008e12:	f000 80d2 	beq.w	8008fba <_printf_i+0x1c6>
 8008e16:	2f58      	cmp	r7, #88	@ 0x58
 8008e18:	f000 80b9 	beq.w	8008f8e <_printf_i+0x19a>
 8008e1c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008e20:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008e24:	e03a      	b.n	8008e9c <_printf_i+0xa8>
 8008e26:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008e2a:	2b15      	cmp	r3, #21
 8008e2c:	d8f6      	bhi.n	8008e1c <_printf_i+0x28>
 8008e2e:	a101      	add	r1, pc, #4	@ (adr r1, 8008e34 <_printf_i+0x40>)
 8008e30:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008e34:	08008e8d 	.word	0x08008e8d
 8008e38:	08008ea1 	.word	0x08008ea1
 8008e3c:	08008e1d 	.word	0x08008e1d
 8008e40:	08008e1d 	.word	0x08008e1d
 8008e44:	08008e1d 	.word	0x08008e1d
 8008e48:	08008e1d 	.word	0x08008e1d
 8008e4c:	08008ea1 	.word	0x08008ea1
 8008e50:	08008e1d 	.word	0x08008e1d
 8008e54:	08008e1d 	.word	0x08008e1d
 8008e58:	08008e1d 	.word	0x08008e1d
 8008e5c:	08008e1d 	.word	0x08008e1d
 8008e60:	08008fa1 	.word	0x08008fa1
 8008e64:	08008ecb 	.word	0x08008ecb
 8008e68:	08008f5b 	.word	0x08008f5b
 8008e6c:	08008e1d 	.word	0x08008e1d
 8008e70:	08008e1d 	.word	0x08008e1d
 8008e74:	08008fc3 	.word	0x08008fc3
 8008e78:	08008e1d 	.word	0x08008e1d
 8008e7c:	08008ecb 	.word	0x08008ecb
 8008e80:	08008e1d 	.word	0x08008e1d
 8008e84:	08008e1d 	.word	0x08008e1d
 8008e88:	08008f63 	.word	0x08008f63
 8008e8c:	6833      	ldr	r3, [r6, #0]
 8008e8e:	1d1a      	adds	r2, r3, #4
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	6032      	str	r2, [r6, #0]
 8008e94:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008e98:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008e9c:	2301      	movs	r3, #1
 8008e9e:	e09d      	b.n	8008fdc <_printf_i+0x1e8>
 8008ea0:	6833      	ldr	r3, [r6, #0]
 8008ea2:	6820      	ldr	r0, [r4, #0]
 8008ea4:	1d19      	adds	r1, r3, #4
 8008ea6:	6031      	str	r1, [r6, #0]
 8008ea8:	0606      	lsls	r6, r0, #24
 8008eaa:	d501      	bpl.n	8008eb0 <_printf_i+0xbc>
 8008eac:	681d      	ldr	r5, [r3, #0]
 8008eae:	e003      	b.n	8008eb8 <_printf_i+0xc4>
 8008eb0:	0645      	lsls	r5, r0, #25
 8008eb2:	d5fb      	bpl.n	8008eac <_printf_i+0xb8>
 8008eb4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008eb8:	2d00      	cmp	r5, #0
 8008eba:	da03      	bge.n	8008ec4 <_printf_i+0xd0>
 8008ebc:	232d      	movs	r3, #45	@ 0x2d
 8008ebe:	426d      	negs	r5, r5
 8008ec0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008ec4:	4859      	ldr	r0, [pc, #356]	@ (800902c <_printf_i+0x238>)
 8008ec6:	230a      	movs	r3, #10
 8008ec8:	e011      	b.n	8008eee <_printf_i+0xfa>
 8008eca:	6821      	ldr	r1, [r4, #0]
 8008ecc:	6833      	ldr	r3, [r6, #0]
 8008ece:	0608      	lsls	r0, r1, #24
 8008ed0:	f853 5b04 	ldr.w	r5, [r3], #4
 8008ed4:	d402      	bmi.n	8008edc <_printf_i+0xe8>
 8008ed6:	0649      	lsls	r1, r1, #25
 8008ed8:	bf48      	it	mi
 8008eda:	b2ad      	uxthmi	r5, r5
 8008edc:	2f6f      	cmp	r7, #111	@ 0x6f
 8008ede:	4853      	ldr	r0, [pc, #332]	@ (800902c <_printf_i+0x238>)
 8008ee0:	6033      	str	r3, [r6, #0]
 8008ee2:	bf14      	ite	ne
 8008ee4:	230a      	movne	r3, #10
 8008ee6:	2308      	moveq	r3, #8
 8008ee8:	2100      	movs	r1, #0
 8008eea:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008eee:	6866      	ldr	r6, [r4, #4]
 8008ef0:	60a6      	str	r6, [r4, #8]
 8008ef2:	2e00      	cmp	r6, #0
 8008ef4:	bfa2      	ittt	ge
 8008ef6:	6821      	ldrge	r1, [r4, #0]
 8008ef8:	f021 0104 	bicge.w	r1, r1, #4
 8008efc:	6021      	strge	r1, [r4, #0]
 8008efe:	b90d      	cbnz	r5, 8008f04 <_printf_i+0x110>
 8008f00:	2e00      	cmp	r6, #0
 8008f02:	d04b      	beq.n	8008f9c <_printf_i+0x1a8>
 8008f04:	4616      	mov	r6, r2
 8008f06:	fbb5 f1f3 	udiv	r1, r5, r3
 8008f0a:	fb03 5711 	mls	r7, r3, r1, r5
 8008f0e:	5dc7      	ldrb	r7, [r0, r7]
 8008f10:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008f14:	462f      	mov	r7, r5
 8008f16:	42bb      	cmp	r3, r7
 8008f18:	460d      	mov	r5, r1
 8008f1a:	d9f4      	bls.n	8008f06 <_printf_i+0x112>
 8008f1c:	2b08      	cmp	r3, #8
 8008f1e:	d10b      	bne.n	8008f38 <_printf_i+0x144>
 8008f20:	6823      	ldr	r3, [r4, #0]
 8008f22:	07df      	lsls	r7, r3, #31
 8008f24:	d508      	bpl.n	8008f38 <_printf_i+0x144>
 8008f26:	6923      	ldr	r3, [r4, #16]
 8008f28:	6861      	ldr	r1, [r4, #4]
 8008f2a:	4299      	cmp	r1, r3
 8008f2c:	bfde      	ittt	le
 8008f2e:	2330      	movle	r3, #48	@ 0x30
 8008f30:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008f34:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8008f38:	1b92      	subs	r2, r2, r6
 8008f3a:	6122      	str	r2, [r4, #16]
 8008f3c:	f8cd a000 	str.w	sl, [sp]
 8008f40:	464b      	mov	r3, r9
 8008f42:	aa03      	add	r2, sp, #12
 8008f44:	4621      	mov	r1, r4
 8008f46:	4640      	mov	r0, r8
 8008f48:	f7ff fee6 	bl	8008d18 <_printf_common>
 8008f4c:	3001      	adds	r0, #1
 8008f4e:	d14a      	bne.n	8008fe6 <_printf_i+0x1f2>
 8008f50:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008f54:	b004      	add	sp, #16
 8008f56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f5a:	6823      	ldr	r3, [r4, #0]
 8008f5c:	f043 0320 	orr.w	r3, r3, #32
 8008f60:	6023      	str	r3, [r4, #0]
 8008f62:	4833      	ldr	r0, [pc, #204]	@ (8009030 <_printf_i+0x23c>)
 8008f64:	2778      	movs	r7, #120	@ 0x78
 8008f66:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008f6a:	6823      	ldr	r3, [r4, #0]
 8008f6c:	6831      	ldr	r1, [r6, #0]
 8008f6e:	061f      	lsls	r7, r3, #24
 8008f70:	f851 5b04 	ldr.w	r5, [r1], #4
 8008f74:	d402      	bmi.n	8008f7c <_printf_i+0x188>
 8008f76:	065f      	lsls	r7, r3, #25
 8008f78:	bf48      	it	mi
 8008f7a:	b2ad      	uxthmi	r5, r5
 8008f7c:	6031      	str	r1, [r6, #0]
 8008f7e:	07d9      	lsls	r1, r3, #31
 8008f80:	bf44      	itt	mi
 8008f82:	f043 0320 	orrmi.w	r3, r3, #32
 8008f86:	6023      	strmi	r3, [r4, #0]
 8008f88:	b11d      	cbz	r5, 8008f92 <_printf_i+0x19e>
 8008f8a:	2310      	movs	r3, #16
 8008f8c:	e7ac      	b.n	8008ee8 <_printf_i+0xf4>
 8008f8e:	4827      	ldr	r0, [pc, #156]	@ (800902c <_printf_i+0x238>)
 8008f90:	e7e9      	b.n	8008f66 <_printf_i+0x172>
 8008f92:	6823      	ldr	r3, [r4, #0]
 8008f94:	f023 0320 	bic.w	r3, r3, #32
 8008f98:	6023      	str	r3, [r4, #0]
 8008f9a:	e7f6      	b.n	8008f8a <_printf_i+0x196>
 8008f9c:	4616      	mov	r6, r2
 8008f9e:	e7bd      	b.n	8008f1c <_printf_i+0x128>
 8008fa0:	6833      	ldr	r3, [r6, #0]
 8008fa2:	6825      	ldr	r5, [r4, #0]
 8008fa4:	6961      	ldr	r1, [r4, #20]
 8008fa6:	1d18      	adds	r0, r3, #4
 8008fa8:	6030      	str	r0, [r6, #0]
 8008faa:	062e      	lsls	r6, r5, #24
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	d501      	bpl.n	8008fb4 <_printf_i+0x1c0>
 8008fb0:	6019      	str	r1, [r3, #0]
 8008fb2:	e002      	b.n	8008fba <_printf_i+0x1c6>
 8008fb4:	0668      	lsls	r0, r5, #25
 8008fb6:	d5fb      	bpl.n	8008fb0 <_printf_i+0x1bc>
 8008fb8:	8019      	strh	r1, [r3, #0]
 8008fba:	2300      	movs	r3, #0
 8008fbc:	6123      	str	r3, [r4, #16]
 8008fbe:	4616      	mov	r6, r2
 8008fc0:	e7bc      	b.n	8008f3c <_printf_i+0x148>
 8008fc2:	6833      	ldr	r3, [r6, #0]
 8008fc4:	1d1a      	adds	r2, r3, #4
 8008fc6:	6032      	str	r2, [r6, #0]
 8008fc8:	681e      	ldr	r6, [r3, #0]
 8008fca:	6862      	ldr	r2, [r4, #4]
 8008fcc:	2100      	movs	r1, #0
 8008fce:	4630      	mov	r0, r6
 8008fd0:	f7f7 f90e 	bl	80001f0 <memchr>
 8008fd4:	b108      	cbz	r0, 8008fda <_printf_i+0x1e6>
 8008fd6:	1b80      	subs	r0, r0, r6
 8008fd8:	6060      	str	r0, [r4, #4]
 8008fda:	6863      	ldr	r3, [r4, #4]
 8008fdc:	6123      	str	r3, [r4, #16]
 8008fde:	2300      	movs	r3, #0
 8008fe0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008fe4:	e7aa      	b.n	8008f3c <_printf_i+0x148>
 8008fe6:	6923      	ldr	r3, [r4, #16]
 8008fe8:	4632      	mov	r2, r6
 8008fea:	4649      	mov	r1, r9
 8008fec:	4640      	mov	r0, r8
 8008fee:	47d0      	blx	sl
 8008ff0:	3001      	adds	r0, #1
 8008ff2:	d0ad      	beq.n	8008f50 <_printf_i+0x15c>
 8008ff4:	6823      	ldr	r3, [r4, #0]
 8008ff6:	079b      	lsls	r3, r3, #30
 8008ff8:	d413      	bmi.n	8009022 <_printf_i+0x22e>
 8008ffa:	68e0      	ldr	r0, [r4, #12]
 8008ffc:	9b03      	ldr	r3, [sp, #12]
 8008ffe:	4298      	cmp	r0, r3
 8009000:	bfb8      	it	lt
 8009002:	4618      	movlt	r0, r3
 8009004:	e7a6      	b.n	8008f54 <_printf_i+0x160>
 8009006:	2301      	movs	r3, #1
 8009008:	4632      	mov	r2, r6
 800900a:	4649      	mov	r1, r9
 800900c:	4640      	mov	r0, r8
 800900e:	47d0      	blx	sl
 8009010:	3001      	adds	r0, #1
 8009012:	d09d      	beq.n	8008f50 <_printf_i+0x15c>
 8009014:	3501      	adds	r5, #1
 8009016:	68e3      	ldr	r3, [r4, #12]
 8009018:	9903      	ldr	r1, [sp, #12]
 800901a:	1a5b      	subs	r3, r3, r1
 800901c:	42ab      	cmp	r3, r5
 800901e:	dcf2      	bgt.n	8009006 <_printf_i+0x212>
 8009020:	e7eb      	b.n	8008ffa <_printf_i+0x206>
 8009022:	2500      	movs	r5, #0
 8009024:	f104 0619 	add.w	r6, r4, #25
 8009028:	e7f5      	b.n	8009016 <_printf_i+0x222>
 800902a:	bf00      	nop
 800902c:	0800944d 	.word	0x0800944d
 8009030:	0800945e 	.word	0x0800945e

08009034 <__malloc_lock>:
 8009034:	4801      	ldr	r0, [pc, #4]	@ (800903c <__malloc_lock+0x8>)
 8009036:	f7ff bc73 	b.w	8008920 <__retarget_lock_acquire_recursive>
 800903a:	bf00      	nop
 800903c:	20004b04 	.word	0x20004b04

08009040 <__malloc_unlock>:
 8009040:	4801      	ldr	r0, [pc, #4]	@ (8009048 <__malloc_unlock+0x8>)
 8009042:	f7ff bc6e 	b.w	8008922 <__retarget_lock_release_recursive>
 8009046:	bf00      	nop
 8009048:	20004b04 	.word	0x20004b04

0800904c <_realloc_r>:
 800904c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009050:	4680      	mov	r8, r0
 8009052:	4615      	mov	r5, r2
 8009054:	460c      	mov	r4, r1
 8009056:	b921      	cbnz	r1, 8009062 <_realloc_r+0x16>
 8009058:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800905c:	4611      	mov	r1, r2
 800905e:	f7ff bddb 	b.w	8008c18 <_malloc_r>
 8009062:	b92a      	cbnz	r2, 8009070 <_realloc_r+0x24>
 8009064:	f000 f858 	bl	8009118 <_free_r>
 8009068:	2400      	movs	r4, #0
 800906a:	4620      	mov	r0, r4
 800906c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009070:	f000 f89c 	bl	80091ac <_malloc_usable_size_r>
 8009074:	4285      	cmp	r5, r0
 8009076:	4606      	mov	r6, r0
 8009078:	d802      	bhi.n	8009080 <_realloc_r+0x34>
 800907a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800907e:	d8f4      	bhi.n	800906a <_realloc_r+0x1e>
 8009080:	4629      	mov	r1, r5
 8009082:	4640      	mov	r0, r8
 8009084:	f7ff fdc8 	bl	8008c18 <_malloc_r>
 8009088:	4607      	mov	r7, r0
 800908a:	2800      	cmp	r0, #0
 800908c:	d0ec      	beq.n	8009068 <_realloc_r+0x1c>
 800908e:	42b5      	cmp	r5, r6
 8009090:	462a      	mov	r2, r5
 8009092:	4621      	mov	r1, r4
 8009094:	bf28      	it	cs
 8009096:	4632      	movcs	r2, r6
 8009098:	f000 f830 	bl	80090fc <memcpy>
 800909c:	4621      	mov	r1, r4
 800909e:	4640      	mov	r0, r8
 80090a0:	f000 f83a 	bl	8009118 <_free_r>
 80090a4:	463c      	mov	r4, r7
 80090a6:	e7e0      	b.n	800906a <_realloc_r+0x1e>

080090a8 <memmove>:
 80090a8:	4288      	cmp	r0, r1
 80090aa:	b510      	push	{r4, lr}
 80090ac:	eb01 0402 	add.w	r4, r1, r2
 80090b0:	d902      	bls.n	80090b8 <memmove+0x10>
 80090b2:	4284      	cmp	r4, r0
 80090b4:	4623      	mov	r3, r4
 80090b6:	d807      	bhi.n	80090c8 <memmove+0x20>
 80090b8:	1e43      	subs	r3, r0, #1
 80090ba:	42a1      	cmp	r1, r4
 80090bc:	d008      	beq.n	80090d0 <memmove+0x28>
 80090be:	f811 2b01 	ldrb.w	r2, [r1], #1
 80090c2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80090c6:	e7f8      	b.n	80090ba <memmove+0x12>
 80090c8:	4402      	add	r2, r0
 80090ca:	4601      	mov	r1, r0
 80090cc:	428a      	cmp	r2, r1
 80090ce:	d100      	bne.n	80090d2 <memmove+0x2a>
 80090d0:	bd10      	pop	{r4, pc}
 80090d2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80090d6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80090da:	e7f7      	b.n	80090cc <memmove+0x24>

080090dc <_sbrk_r>:
 80090dc:	b538      	push	{r3, r4, r5, lr}
 80090de:	4d06      	ldr	r5, [pc, #24]	@ (80090f8 <_sbrk_r+0x1c>)
 80090e0:	2300      	movs	r3, #0
 80090e2:	4604      	mov	r4, r0
 80090e4:	4608      	mov	r0, r1
 80090e6:	602b      	str	r3, [r5, #0]
 80090e8:	f7f8 fc00 	bl	80018ec <_sbrk>
 80090ec:	1c43      	adds	r3, r0, #1
 80090ee:	d102      	bne.n	80090f6 <_sbrk_r+0x1a>
 80090f0:	682b      	ldr	r3, [r5, #0]
 80090f2:	b103      	cbz	r3, 80090f6 <_sbrk_r+0x1a>
 80090f4:	6023      	str	r3, [r4, #0]
 80090f6:	bd38      	pop	{r3, r4, r5, pc}
 80090f8:	20004b10 	.word	0x20004b10

080090fc <memcpy>:
 80090fc:	440a      	add	r2, r1
 80090fe:	4291      	cmp	r1, r2
 8009100:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8009104:	d100      	bne.n	8009108 <memcpy+0xc>
 8009106:	4770      	bx	lr
 8009108:	b510      	push	{r4, lr}
 800910a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800910e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009112:	4291      	cmp	r1, r2
 8009114:	d1f9      	bne.n	800910a <memcpy+0xe>
 8009116:	bd10      	pop	{r4, pc}

08009118 <_free_r>:
 8009118:	b538      	push	{r3, r4, r5, lr}
 800911a:	4605      	mov	r5, r0
 800911c:	2900      	cmp	r1, #0
 800911e:	d041      	beq.n	80091a4 <_free_r+0x8c>
 8009120:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009124:	1f0c      	subs	r4, r1, #4
 8009126:	2b00      	cmp	r3, #0
 8009128:	bfb8      	it	lt
 800912a:	18e4      	addlt	r4, r4, r3
 800912c:	f7ff ff82 	bl	8009034 <__malloc_lock>
 8009130:	4a1d      	ldr	r2, [pc, #116]	@ (80091a8 <_free_r+0x90>)
 8009132:	6813      	ldr	r3, [r2, #0]
 8009134:	b933      	cbnz	r3, 8009144 <_free_r+0x2c>
 8009136:	6063      	str	r3, [r4, #4]
 8009138:	6014      	str	r4, [r2, #0]
 800913a:	4628      	mov	r0, r5
 800913c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009140:	f7ff bf7e 	b.w	8009040 <__malloc_unlock>
 8009144:	42a3      	cmp	r3, r4
 8009146:	d908      	bls.n	800915a <_free_r+0x42>
 8009148:	6820      	ldr	r0, [r4, #0]
 800914a:	1821      	adds	r1, r4, r0
 800914c:	428b      	cmp	r3, r1
 800914e:	bf01      	itttt	eq
 8009150:	6819      	ldreq	r1, [r3, #0]
 8009152:	685b      	ldreq	r3, [r3, #4]
 8009154:	1809      	addeq	r1, r1, r0
 8009156:	6021      	streq	r1, [r4, #0]
 8009158:	e7ed      	b.n	8009136 <_free_r+0x1e>
 800915a:	461a      	mov	r2, r3
 800915c:	685b      	ldr	r3, [r3, #4]
 800915e:	b10b      	cbz	r3, 8009164 <_free_r+0x4c>
 8009160:	42a3      	cmp	r3, r4
 8009162:	d9fa      	bls.n	800915a <_free_r+0x42>
 8009164:	6811      	ldr	r1, [r2, #0]
 8009166:	1850      	adds	r0, r2, r1
 8009168:	42a0      	cmp	r0, r4
 800916a:	d10b      	bne.n	8009184 <_free_r+0x6c>
 800916c:	6820      	ldr	r0, [r4, #0]
 800916e:	4401      	add	r1, r0
 8009170:	1850      	adds	r0, r2, r1
 8009172:	4283      	cmp	r3, r0
 8009174:	6011      	str	r1, [r2, #0]
 8009176:	d1e0      	bne.n	800913a <_free_r+0x22>
 8009178:	6818      	ldr	r0, [r3, #0]
 800917a:	685b      	ldr	r3, [r3, #4]
 800917c:	6053      	str	r3, [r2, #4]
 800917e:	4408      	add	r0, r1
 8009180:	6010      	str	r0, [r2, #0]
 8009182:	e7da      	b.n	800913a <_free_r+0x22>
 8009184:	d902      	bls.n	800918c <_free_r+0x74>
 8009186:	230c      	movs	r3, #12
 8009188:	602b      	str	r3, [r5, #0]
 800918a:	e7d6      	b.n	800913a <_free_r+0x22>
 800918c:	6820      	ldr	r0, [r4, #0]
 800918e:	1821      	adds	r1, r4, r0
 8009190:	428b      	cmp	r3, r1
 8009192:	bf04      	itt	eq
 8009194:	6819      	ldreq	r1, [r3, #0]
 8009196:	685b      	ldreq	r3, [r3, #4]
 8009198:	6063      	str	r3, [r4, #4]
 800919a:	bf04      	itt	eq
 800919c:	1809      	addeq	r1, r1, r0
 800919e:	6021      	streq	r1, [r4, #0]
 80091a0:	6054      	str	r4, [r2, #4]
 80091a2:	e7ca      	b.n	800913a <_free_r+0x22>
 80091a4:	bd38      	pop	{r3, r4, r5, pc}
 80091a6:	bf00      	nop
 80091a8:	20004b0c 	.word	0x20004b0c

080091ac <_malloc_usable_size_r>:
 80091ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80091b0:	1f18      	subs	r0, r3, #4
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	bfbc      	itt	lt
 80091b6:	580b      	ldrlt	r3, [r1, r0]
 80091b8:	18c0      	addlt	r0, r0, r3
 80091ba:	4770      	bx	lr

080091bc <_init>:
 80091bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091be:	bf00      	nop
 80091c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091c2:	bc08      	pop	{r3}
 80091c4:	469e      	mov	lr, r3
 80091c6:	4770      	bx	lr

080091c8 <_fini>:
 80091c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091ca:	bf00      	nop
 80091cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091ce:	bc08      	pop	{r3}
 80091d0:	469e      	mov	lr, r3
 80091d2:	4770      	bx	lr
